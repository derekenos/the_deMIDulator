MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      main.asm                                          *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 ; Software Stack uses FSR2 so hands off!
                      00022 
                      00023 ;**********************************************************************
                      00024 ; ENVIRONMENTAL DEFINES
                      00025 ;**********************************************************************
                      00026 
                      00027         ; define processor
                      00028         ; ..13K50 is default shipping processor, ..14k22 used for development
                      00029         #define PIC18LF13K50
                      00030 ;       #define PIC18LF14K22
                      00031 
                      00032 #ifdef  PIC18LF13K50
                      00033         list            p=18lf13k50                     ; list directive to define processor
                      00034 #endif
                      00035 #ifdef  PIC18LF14K22
                      00036         list            p=18lf14k22                     ; list directive to define processor
                      00037 #endif
                      00038         
                      00039         list            r=dec                                           ; set default radix to decimal
                      00040 
                      00041         #define USER_CODE_START_ADDRESS         0x0040  ; address must be aligned to 64-byte boundary
                      00042 
                      00043 #ifdef PIC18LF13K50
                      00044         ; (Program Memory Size - Boot Block Size)
                      00045         ;       4kW (8192 bytes) - 512W (1024 bytes)
                      00046         ; 0x2000 - 0x0400 = 0x1C00
                      00047         #define BOOTLOADER_START_ADDRESS        0x1C00
                      00048 #endif
                      00049 
                      00050 #ifdef PIC18LF14K22
                      00051         ; (Program Memory Size - Boot Block Size)
                      00052         ;       8kW (16384 bytes) - 1kW (2048 bytes)
                      00053         ; 0x4000 - 0x0800 = 0x3800
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00054         #define BOOTLOADER_START_ADDRESS        0x3800
                      00055 #endif
                      00056 
                      00057         #define USER_CODE_END_ADDRESS                   BOOTLOADER_START_ADDRESS - 2
                      00058 
                      00059 ;**********************************************************************
                      00060 ; CONDITIONAL ASSEMBLY DEFINES
                      00061 ;**********************************************************************
                      00062 
                      00063 ; THROUGH_HOLE_PCB option swaps Sine/Square switch and LED assignments
                      00064         #define THROUGH_HOLE_PCB
                      00065 
                      00066 ; LED_POLARITY_REVERSED option reverses logic polarity for LEDs
                      00067         #define LED_POLARITY_REVERSED
                      00068         
                      00069 ; LED_STEADY_STATE_DISABLED option saves 4mA per LED but introduces high frequency noise during playback
                      00070 ;       #define LED_STEADY_STATE_DISABLED
                      00071 
                      00072 ;       MIDI_DEBUG_TRIGGER_ENABLED option enables debug code in midiMessageMapper()
                      00073 ; MIDI_DEBUG_CC_NAME defines which on/off (127/0) controller number to use
                      00074 ;       #define MIDI_DEBUG_TRIGGER_ENABLED
                      00075 ;       #define MIDI_DEBUG_CC_NAME                                      GENERAL_PURPOSE_CONTROLLER_7
                      00076         
                      00077 ;**********************************************************************
                      00078 ; INCLUDE FILES
                      00079 ;**********************************************************************
                      00080 
                      00081 #ifdef  PIC18LF13K50
                      00082         ; processor specific variable definitions
                      00083         #include        <p18lf13k50.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC18LF13K50 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2011 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      01517         LIST
                      00084         ; configuration bit options copied from p18lf13k50.inc
                      00085         #include        "../include/config_PIC18LF13K50.inc"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      config.inc                                        *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef CONFIG_INC
                      00022 #define CONFIG_INC
                      00023 
                      00024 ;==========================================================================
                      00025 ;
                      00026 ;   IMPORTANT: For the PIC18 devices, the __CONFIG directive has been
                      00027 ;              superseded by the CONFIG directive.  The following settings
                      00028 ;              are available for this device.
                      00029 ;
                      00030 ;   CPU System Clock Selection bit:
                      00031 ;     CPUDIV = NOCLKDIV    No CPU System Clock divide
                      00032 ;     CPUDIV = CLKDIV2     CPU System Clock divided by 2
                      00033 ;     CPUDIV = CLKDIV3     CPU System Clock divided by 3
                      00034 ;     CPUDIV = CLKDIV4     CPU System Clock divided by 4
                      00035         CONFIG CPUDIV = NOCLKDIV
                      00036 
                      00037 ;
                      00038 ;   USB Clock Selection bit:
                      00039 ;     USBDIV = OFF         USB Clock comes directly from the OSC1/OSC2 oscillator block; no divide
                      00040 ;     USBDIV = ON          USB clock comes from the OSC1/OSC2 divided by 2
                      00041         CONFIG USBDIV = OFF
                      00042 
                      00043 ;
                      00044 ;   Oscillator Selection bits:
                      00045 ;     FOSC = LP            LP oscillator
                      00046 ;     FOSC = XT            XT oscillator
                      00047 ;     FOSC = HS            HS oscillator
                      00048 ;     FOSC = ERCCLKOUT     External RC oscillator, CLKOUT function on OSC2
                      00049 ;     FOSC = ECCLKOUTH     EC, CLKOUT function on OSC2 (high)
                      00050 ;     FOSC = ECH           EC (high)
                      00051 ;     FOSC = ERC           External RC oscillator
                      00052 ;     FOSC = IRC           Internal RC oscillator
                      00053 ;     FOSC = IRCCLKOUT     Internal RC oscillator, CLKOUT function on OSC2
                      00054 ;     FOSC = ECCLKOUTM     EC, CLKOUT function on OSC2 (medium)
                      00055 ;     FOSC = ECM           EC (medium)
                      00056 ;     FOSC = ECCLKOUTL     EC, CLKOUT function on OSC2 (low)
                      00057 ;     FOSC = ECL           EC (low)
                      00058         CONFIG FOSC = IRC
                      00059 
                      00060 ;
                      00061 ;   4 X PLL Enable bit:
                      00062 ;     PLLEN = OFF          PLL is under software control
                      00063 ;     PLLEN = ON           Oscillator multiplied by 4
                      00064         CONFIG PLLEN = OFF
                      00065 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00066 ;
                      00067 ;   Primary Clock Enable Bit:
                      00068 ;     PCLKEN = OFF         Primary clock is under software control
                      00069 ;     PCLKEN = ON          Primary clock enabled
                      00070         CONFIG PCLKEN = ON
                      00071 
                      00072 ;
                      00073 ;   Fail-Safe Clock Monitor Enable bit:
                      00074 ;     FCMEN = OFF          Fail-Safe Clock Monitor disabled
                      00075 ;     FCMEN = ON           Fail-Safe Clock Monitor enabled
                      00076         CONFIG FCMEN = OFF
                      00077 
                      00078 ;
                      00079 ;   Internal/External Oscillator Switchover bit:
                      00080 ;     IESO = OFF           Oscillator Switchover mode disabled
                      00081 ;     IESO = ON            Oscillator Switchover mode enabled
                      00082         CONFIG IESO = ON
                      00083 
                      00084 ;
                      00085 ;   Power-up Timer Enable bit:
                      00086 ;     PWRTEN = ON          PWRT enabled
                      00087 ;     PWRTEN = OFF         PWRT disabled
                      00088         CONFIG PWRTEN = ON
                      00089 
                      00090 ;
                      00091 ;   Brown-out Reset Enable bits:
                      00092 ;     BOREN = OFF          Brown-out Reset disabled in hardware and software
                      00093 ;     BOREN = ON           Brown-out Reset enabled and controlled by software (SBOREN is enabled)
                      00094 ;     BOREN = NOSLP        Brown-out Reset enabled in hardware only and disabled in Sleep mode (SBOREN i
                            s disabled)
                      00095 ;     BOREN = SBORDIS      Brown-out Reset enabled in hardware only (SBOREN is disabled)
                      00096         CONFIG BOREN = ON
                      00097 
                      00098 ;
                      00099 ;   Brown Out Voltage:
                      00100 ;     BORV = 30            VBOR set to 3.0 V nominal
                      00101 ;     BORV = 27            VBOR set to 2.7 V nominal
                      00102 ;     BORV = 22            VBOR set to 2.2 V nominal
                      00103 ;     BORV = 19            VBOR set to 1.9 V nominal
                      00104         CONFIG BORV = 19
                      00105 
                      00106 ;
                      00107 ;   Watchdog Timer Enable bit:
                      00108 ;     WDTEN = OFF          WDT is controlled by SWDTEN bit of the WDTCON register
                      00109 ;     WDTEN = ON           WDT is always enabled. SWDTEN bit has no effect.
                      00110         CONFIG WDTEN = OFF
                      00111 
                      00112 ;
                      00113 ;   Watchdog Timer Postscale Select bits:
                      00114 ;     WDTPS = 1            1:1
                      00115 ;     WDTPS = 2            1:2
                      00116 ;     WDTPS = 4            1:4
                      00117 ;     WDTPS = 8            1:8
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00118 ;     WDTPS = 16           1:16
                      00119 ;     WDTPS = 32           1:32
                      00120 ;     WDTPS = 64           1:64
                      00121 ;     WDTPS = 128          1:128
                      00122 ;     WDTPS = 256          1:256
                      00123 ;     WDTPS = 512          1:512
                      00124 ;     WDTPS = 1024         1:1024
                      00125 ;     WDTPS = 2048         1:2048
                      00126 ;     WDTPS = 4096         1:4096
                      00127 ;     WDTPS = 8192         1:8192
                      00128 ;     WDTPS = 16384        1:16384
                      00129 ;     WDTPS = 32768        1:32768
                      00130         CONFIG WDTPS = 1
                      00131 
                      00132 ;
                      00133 ;   MCLR Pin Enable bit:
                      00134 ;     MCLRE = OFF          RA3 input pin enabled; MCLR disabled
                      00135 ;     MCLRE = ON           MCLR pin enabled, RA3 input pin disabled
                      00136         CONFIG MCLRE = OFF
                      00137 
                      00138 ;
                      00139 ;   HFINTOSC Fast Start-up bit:
                      00140 ;     HFOFST = OFF         The system clock is held off until the HFINTOSC is stable.
                      00141 ;     HFOFST = ON          HFINTOSC starts clocking the CPU without waiting for the oscillator to stabli
                            ze.
                      00142         CONFIG HFOFST = OFF
                      00143 
                      00144 ;
                      00145 ;   Stack Full/Underflow Reset Enable bit:
                      00146 ;     STVREN = OFF         Stack full/underflow will not cause Reset
                      00147 ;     STVREN = ON          Stack full/underflow will cause Reset
                      00148         CONFIG STVREN = ON
                      00149 
                      00150 ;
                      00151 ;   Single-Supply ICSP Enable bit:
                      00152 ;     LVP = OFF            Single-Supply ICSP disabled
                      00153 ;     LVP = ON             Single-Supply ICSP enabled
                      00154         CONFIG LVP = OFF
                      00155 
                      00156 ;
                      00157 ;   Boot Block Size Select Bit:
                      00158 ;     BBSIZ = OFF          512W boot block size
                      00159 ;     BBSIZ = ON           1kW boot block size
                      00160         CONFIG BBSIZ = OFF
                      00161 
                      00162 ;
                      00163 ;   Extended Instruction Set Enable bit:
                      00164 ;     XINST = OFF          Instruction set extension and Indexed Addressing mode disabled (Legacy mode)
                      00165 ;     XINST = ON           Instruction set extension and Indexed Addressing mode enabled
                      00166         CONFIG XINST = OFF
                      00167 
                      00168 ;
                      00169 ;   Code Protection bit:
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00170 ;     CP0 = ON             Block 0 code-protected
                      00171 ;     CP0 = OFF            Block 0 not code-protected
                      00172         CONFIG CP0 = OFF
                      00173 
                      00174 ;
                      00175 ;   Code Protection bit:
                      00176 ;     CP1 = ON             Block 1 code-protected
                      00177 ;     CP1 = OFF            Block 1 not code-protected
                      00178         CONFIG CP1 = OFF
                      00179         
                      00180 ;
                      00181 ;   Boot Block Code Protection bit:
                      00182 ;     CPB = ON             Boot block code-protected
                      00183 ;     CPB = OFF            Boot block not code-protected
                      00184         CONFIG CPB = OFF
                      00185 
                      00186 ;
                      00187 ;   Data EEPROM Code Protection bit:
                      00188 ;     CPD = ON             Data EEPROM code-protected
                      00189 ;     CPD = OFF            Data EEPROM not code-protected
                      00190         CONFIG CPD = OFF
                      00191 
                      00192 ;
                      00193 ;   Write Protection bit:
                      00194 ;     WRT0 = ON            Block 0 write-protected
                      00195 ;     WRT0 = OFF           Block 0 not write-protected
                      00196         CONFIG WRT0 = OFF
                      00197         
                      00198 ;
                      00199 ;   Write Protection bit:
                      00200 ;     WRT1 = ON            Block 1 write-protected
                      00201 ;     WRT1 = OFF           Block 1 not write-protected
                      00202         CONFIG WRT1 = OFF
                      00203 
                      00204 ;
                      00205 ;   Boot Block Write Protection bit:
                      00206 ;     WRTB = ON            Boot block write-protected
                      00207 ;     WRTB = OFF           Boot block not write-protected
                      00208         CONFIG WRTB = OFF
                      00209 
                      00210 ;
                      00211 ;   Configuration Register Write Protection bit:
                      00212 ;     WRTC = ON            Configuration registers write-protected
                      00213 ;     WRTC = OFF           Configuration registers not write-protected
                      00214         CONFIG WRTC = OFF
                      00215 
                      00216 ;
                      00217 ;   Data EEPROM Write Protection bit:
                      00218 ;     WRTD = ON            Data EEPROM write-protected
                      00219 ;     WRTD = OFF           Data EEPROM not write-protected
                      00220         CONFIG WRTD = OFF
                      00221 
                      00222 ;
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00223 ;   Table Read Protection bit:
                      00224 ;     EBTR0 = ON           Block 0 protected from table reads executed in other blocks
                      00225 ;     EBTR0 = OFF          Block 0 not protected from table reads executed in other blocks
                      00226         CONFIG EBTR0 = OFF
                      00227 
                      00228 ;
                      00229 ;   Table Read Protection bit:
                      00230 ;     EBTR1 = ON           Block 1 protected from table reads executed in other blocks
                      00231 ;     EBTR1 = OFF          Block 1 not protected from table reads executed in other blocks
                      00232         CONFIG EBTR1 = OFF
                      00233 
                      00234 ;
                      00235 ;   Boot Block Table Read Protection bit:
                      00236 ;     EBTRB = ON           Boot block protected from table reads executed in other blocks
                      00237 ;     EBTRB = OFF          Boot block not protected from table reads executed in other blocks
                      00238         CONFIG EBTRB = OFF
                      00239 
                      00240 ;
                      00241 ;==========================================================================
                      00242 
                      00243 #endif
                      00086 #endif
                      00087 
                      00088 #ifdef  PIC18LF14K22
                      00089         ; processor specific variable definitions
                      00090         #include        <p18lf14k22.inc>
                      00091         ; configuration bit options copied from p18lf13k50.inc
                      00092         #include        "../include/config_PIC18LF14K22.inc"
                      00093 #endif
                      00094 
                      00095         #include        "../header/midi.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      midi.h                                            *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef _MIDIH_
                      00022 #define _MIDIH_
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00023 
                      00024 
                      00025 ; ******************* GENERAL MIDI DEFINES ***********************
                      00026 ; ** Define default MIDI channel **
                      00027 ; values 0 - 5 (actual MIDI channels 1 - 6) will make deMIDUlator respond to only that channel
                      00028 ; value of 6 (actual MIDI channel 7) will make deMIDulator respond to ALL channels
                      00029         #define         DEFAULT_MIDI_CHANNEL    6
                      00030 
                      00031 ; ******************* MIDI SYSEX DEFINES ***********************
                      00032 #define         VENDOR_ID       0x77
                      00033 #define         DEVICE_ID       0x1D
                      00034 #define         TERMINAL_PACKET_COMMAND_VALUE   0x1E
                      00035 
                      00036 ; ******************* MIDI BUFFER SIZES ***********************
                      00037 
                      00038 #define         MAX_MIDI_MESSAGE_SIZE   24
                      00039 #define         ACTIVE_NOTE_TABLE_SIZE  25
                      00040 
                      00041 
                      00042 ; ******************* STATUS BYTE DEFINITONS ***********************
                      00043 
                      00044 ; Note that lower nybble (channel) should be masked out for comparison
                      00045 ;------------------------
                      00046 #define         NOTE_OFF                                0x80
                      00047 #define         NOTE_ON                                 0x90
                      00048 #define         KEY_PRESSURE                    0xA0
                      00049 #define         CONTROL_CHANGE                  0xB0
                      00050 #define         PROGRAM_CHANGE                  0xC0
                      00051 #define         CHANNEL_PRESSURE                0xD0
                      00052 #define         PITCH_WHEEL                             0xE0
                      00053 
                      00054 ; Sysex Status Byte Definitions
                      00055 #define         SYSEX                                   0xF0
                      00056 #define         EOX                                             0xF7
                      00057 
                      00058 #define         NOTE_OFF_MESSAGE_LENGTH                         3
                      00059 #define         NOTE_ON_MESSAGE_LENGTH                          3
                      00060 #define         KEY_PRESSURE_MESSAGE_LENGTH                     3
                      00061 #define         CONTROL_CHANGE_MESSAGE_LENGTH           3
                      00062 #define         PROGRAM_CHANGE_MESSAGE_LENGTH           2
                      00063 #define         CHANNEL_PRESSURE_MESSAGE_LENGTH         2
                      00064 #define         PITCH_WHEEL_MESSAGE_LENGTH                      3
                      00065 
                      00066 ; SysEx Sub Types
                      00067 ;----------------------------
                      00068 #define         NON_REAL_TIME                                           0x7E
                      00069 #define         GENERAL_INFORMATION                                     0x06
                      00070 #define         IDENTITY_REQUEST                                        0x01
                      00071 #define         IDENTITY_REPLY                                          0x02
                      00072 
                      00073 ; Control Change Data Types
                      00074 ;----------------------------
                      00075 #define         BANK_SELECT_MSB                                         0
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00076 #define         MODULATION_WHEEL_MSB                            1
                      00077 #define         BREATH_CONTROLLER_MSB                           2
                      00078 #define         UNDEFINED_003                                           3
                      00079 #define         FOOT_CONTROLLER_MSB                                     4
                      00080 #define         PORTAMENTO_TIME                                         5
                      00081 #define         DATA_ENTRY_MSB                                          6
                      00082 #define         CHANNEL_VOLUME_MSB                                      7
                      00083 #define         BALANCE_MSB                                                     8
                      00084 #define         UNDEFINED_MSB                                           9
                      00085 #define         PAN_MSB                                                         10
                      00086 #define         EXPRESSION_MSB                                          11
                      00087 #define         EFFECT_CONTROL_1_MSB                            12
                      00088 #define         EFFECT_CONTROL_2_MSB                            13
                      00089 #define         UNDEFINED_014                                           14
                      00090 #define         UNDEFINED_015                                           15
                      00091 #define         GENERAL_PURPOSE_CONTROLLER_1_MSB        16
                      00092 #define         GENERAL_PURPOSE_CONTROLLER_2_MSB        17
                      00093 #define         GENERAL_PURPOSE_CONTROLLER_3_MSB        18
                      00094 #define         GENERAL_PURPOSE_CONTROLLER_4_MSB        19
                      00095 #define         UNDEFINED_020                                           20
                      00096 #define         UNDEFINED_021                                           21
                      00097 #define         UNDEFINED_022                                           22
                      00098 #define         UNDEFINED_023                                           23
                      00099 #define         UNDEFINED_024                                           24
                      00100 #define         UNDEFINED_025                                           25
                      00101 #define         UNDEFINED_026                                           26
                      00102 #define         UNDEFINED_027                                           27
                      00103 #define         UNDEFINED_028                                           28
                      00104 #define         UNDEFINED_029                                           29
                      00105 #define         UNDEFINED_030                                           30
                      00106 #define         UNDEFINED_031                                           31
                      00107 #define         BANK_SELECT_LSB                                         32
                      00108 #define         MODULATION_WHEEL_LSB                            33
                      00109 #define         BREATH_CONTROLLER_LSB                           34
                      00110 #define         UNDEFINED_035                                           35
                      00111 #define         FOOT_CONTROLLER_LSB                                     36
                      00112 #define         PORTAMENTO_TIME_LSB                                     37
                      00113 #define         DATA_ENTRY_LSB                                          38
                      00114 #define         CHANNEL_VOLUME_LSB                                      39
                      00115 #define         BALANCE_LSB                                                     40
                      00116 #define         UNDEFINED_041                                           41
                      00117 #define         PAN_LSB                                                         42
                      00118 #define         EXPRESSION_LSB                                          43
                      00119 #define         EFFECT_CONTROL_1_LSB                            44
                      00120 #define         EFFECT_CONTROL_2_LSB                            45
                      00121 #define         UNDEFINED_046                                           46
                      00122 #define         UNDEFINED_047                                           47
                      00123 #define         GENERAL_PURPOSE_CONTROLLER_1_LSB        48
                      00124 #define         GENERAL_PURPOSE_CONTROLLER_2_LSB        49
                      00125 #define         GENERAL_PURPOSE_CONTROLLER_3_LSB        50
                      00126 #define         GENERAL_PURPOSE_CONTROLLER_4_LSB        51
                      00127 #define         UNDEFINED_052                                           52
                      00128 #define         UNDEFINED_053                                           53
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00129 #define         UNDEFINED_054                                           54
                      00130 #define         UNDEFINED_055                                           55
                      00131 #define         UNDEFINED_056                                           56
                      00132 #define         UNDEFINED_057                                           57
                      00133 #define         UNDEFINED_058                                           58
                      00134 #define         UNDEFINED_059                                           59
                      00135 #define         UNDEFINED_060                                           60
                      00136 #define         UNDEFINED_061                                           61
                      00137 #define         UNDEFINED_062                                           62
                      00138 #define         UNDEFINED_063                                           63
                      00139 #define         SUSTAIN_PEDAL                                           64
                      00140 #define         PORTAMENTO_ONOFF                                        65
                      00141 #define         SOSTENUTO                                                       66
                      00142 #define         SOFT_PEDAL                                                      67
                      00143 #define         LEGATO_FOOTSWITCH                                       68
                      00144 #define         HOLD_2                                                          69
                      00145 #define         SOUND_CONTROLLER_1_DEFAULT_SOUND_VARIATION                              70
                      00146 #define         SOUND_CONTROLLER_2_DEFAULT_TIMBRE_HARMONIC_QUALITY              71
                      00147 #define         SOUND_CONTROLLER_3_DEFAULT_RELEASE_TIME                                 72
                      00148 #define         SOUND_CONTROLLER_4_DEFAULT_ATTACK_TIME                                  73
                      00149 #define         SOUND_CONTROLLER_5_DEFAULT_BRIGHTNESS                                   74
                      00150 #define         SOUND_CONTROLLER_6_GM2_DEFAULT_DECAY_TIME                               75
                      00151 #define         SOUND_CONTROLLER_7_GM2_DEFAULT_VIBRATO_RATE                             76
                      00152 #define         SOUND_CONTROLLER_8_GM2_DEFAULT_VIBRATO_DEPTH                    77
                      00153 #define         SOUND_CONTROLLER_9_GM2_DEFAULT_VIBRATO_DELAY                    78
                      00154 #define         SOUND_CONTROLLER_10_GM2_DEFAULT_UNDEFINED                               79
                      00155 #define         GENERAL_PURPOSE_CONTROLLER_5                                                    80
                      00156 #define         GENERAL_PURPOSE_CONTROLLER_6                                                    81
                      00157 #define         GENERAL_PURPOSE_CONTROLLER_7                                                    82
                      00158 #define         GENERAL_PURPOSE_CONTROLLER_8                                                    83
                      00159 #define         PORTAMENTO_CONTROL                                                                      
                                    84
                      00160 #define         UNDEFINED_85                                                                    85
                      00161 #define         UNDEFINED_86                                                                    86
                      00162 #define         UNDEFINED_87                                                                    87
                      00163 #define         UNDEFINED_88                                                                    88
                      00164 #define         UNDEFINED_89                                                                    89
                      00165 #define         UNDEFINED_90                                                                    90
                      00166 #define         EFFECTS_1_DEPTH_DEFAULT_REVERB_SEND                             91
                      00167 #define         EFFECTS_2_DEPTH_DEFAULT_TREMOLO_DEPTH                   92
                      00168 #define         EFFECTS_3_DEPTH_DEFAULT_CHORUS_SEND                             93
                      00169 #define         EFFECTS_4_DEPTH_DEFAULT_CELESTE_[DETUNE]_DEPTH  94
                      00170 #define         EFFECTS_5_DEPTH_DEFAULT_PHASER_DEPTH                    95
                      00171 #define         DATA_INCREMENT                                                                  96
                      00172 #define         DATA_DECREMENT                                                                  97
                      00173 #define         NON_REG_PARAMETER_NUMBER_LSB                            98
                      00174 #define         NON_REG_PARAMETER_NUMBER_MSB                            99
                      00175 #define         REGISTERED_PARAMETER_NUMBER_LSB                                 100
                      00176 #define         REGISTERED_PARAMETER_NUMBERMSB                                  101
                      00177 #define         UNDEFINED_102                                           102
                      00178 #define         UNDEFINED_103                                           103
                      00179 #define         UNDEFINED_104                                           104
                      00180 #define         UNDEFINED_105                                           105
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00181 #define         UNDEFINED_106                                           106
                      00182 #define         UNDEFINED_107                                           107
                      00183 #define         UNDEFINED_108                                           108
                      00184 #define         UNDEFINED_109                                           109
                      00185 #define         UNDEFINED_110                                           110
                      00186 #define         UNDEFINED_111                                           111
                      00187 #define         UNDEFINED_112                                           112
                      00188 #define         UNDEFINED_113                                           113
                      00189 #define         UNDEFINED_114                                           114
                      00190 #define         UNDEFINED_115                                           115
                      00191 #define         UNDEFINED_116                                           116
                      00192 #define         UNDEFINED_117                                           117
                      00193 #define         UNDEFINED_118                                           118
                      00194 #define         UNDEFINED_119                                           119
                      00195 #define         ALL_SOUND_OFF                                           120
                      00196 #define         RESET_ALL_CONTROLLERS                           121
                      00197 #define         LOCAL_CONTROL_ONOFF                                     122
                      00198 #define         ALL_NOTES_OFF                                           123
                      00199 #define         OMNI_MODE_OFF                                           124
                      00200 #define         OMNI_MODE_ON                                            125
                      00201 #define         POLY_MODE_OFF                                           126
                      00202 #define         POLY_MODE_ON                                            127
                      00203 
                      00204 
                      00205 ; ******************* MIDI MESSAGE STATES ***********************
                      00206 
                      00207 #define CHANNEL                                         0x00
                      00208 #define DATA_BYTE0                                      0x01
                      00209 #define DATA_BYTE1                                      0x02
                      00210 #define MESSAGE_COMPLETE                        0xFF
                      00211 
                      00212 #define NOTE_COMPLETE                           DATA_BYTE1
                      00213 #define AFTERTOUCH_COMPLETE                     DATA_BYTE1
                      00214 #define CONTROL_CHANGE_COMPLETE         DATA_BYTE1
                      00215 #define PROGRAM_CHANGE_COMPLETE         DATA_BYTE0
                      00216 #define PITCH_WHEEL_COMPLETE            DATA_BYTE1
                      00217 
                      00218 
                      00219 ; ******************* FLAG VARIABLE DEFINITIONS ***********************
                      00220 
                      00221 ; midiFlags (bits 3:7 free for use by other modules)
                      00222 #define uartState_rxInProgress                  0
                      00223 #define midiState_messageNeedsMapping   1
                      00224 #define midiThruModeEnabled                             2
                      00225 
                      00226 
                      00227 #endif
                      00096         #include        "../header/eeprom.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      eeprom.h                                          *
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef _EEPROMH_
                      00022 #define _EEPROMH_
                      00023 
                      00024 ; ******************* FLAG VARIABLE DEFINITIONS ***********************
                      00025 
                      00026 ; eepromFlags
                      00027 #define sampleChunkReady        0
                      00028 #define samplesLoaded                   1
                      00029 #define intState                                        2
                      00030 #define ready                                           3
                      00031 
                      00032 ; CAT25128 Status reg flags
                      00033 #define NOT_RDY 0
                      00034 #define WEL                     1
                      00035 #define BP0                     2
                      00036 #define BP1                     3
                      00037 #define WPEN            7
                      00038 
                      00039 ; ******************* COMMAND DEFINES ***********************
                      00040 #define EE_WREN         B'00000110'     ; Enable Write Operations
                      00041 #define EE_WRDI         B'00000100'     ; Disable Write Operations
                      00042 #define EE_RDSR         B'00000101'     ; Read Status Register
                      00043 #define EE_WRSR         B'00000001'     ; Write Status Register
                      00044 #define EE_READ         B'00000011'     ; Read Data from Memory
                      00045 #define EE_WRITE        B'00000010'     ; Write Data to Memory
                      00046 
                      00047 ; ******************* GENERAL DEFINES ***********************
                      00048 #define SAMPLE_DATA_BUFFER_SIZE 64
                      00049 #define EEPROM_SIZE_BITS 128000
                      00050 #define NEXT_SAMPLE_ADDRESSES_EL_SIZE   2
                      00051 
                      00052 ;**********************************************************************
                      00053 ; MACROS
                      00054 ;**********************************************************************
                      00055 
                      00056 
                      00057 ;**********************************************************************
                      00058 ASSERT_SS       MACRO
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00059         bcf             LATC, RC6, ACCESS       ; Chip select is active
                      00060         ENDM
                      00061 
                      00062 ;**********************************************************************
                      00063 DEASSERT_SS     MACRO
                      00064         bsf             LATC, RC6, ACCESS       ; Chip select is idle
                      00065         ENDM
                      00066 
                      00067 ;**********************************************************************
                      00068 EE_DISABLE_INTS MACRO
                      00069         bcf             eepromFlags, intState, ACCESS
                      00070         btfsc   INTCON, GIE, ACCESS
                      00071         bsf             eepromFlags, intState, ACCESS
                      00072         bcf             INTCON, GIE, ACCESS
                      00073         ENDM
                      00074 
                      00075 ;**********************************************************************
                      00076 EE_RESTORE_INTS MACRO
                      00077         btfsc   eepromFlags, intState, ACCESS
                      00078         bsf             INTCON, GIE, ACCESS
                      00079         ENDM
                      00080 
                      00081 ;**********************************************************************
                      00082 WRITE_INTERNAL_EEPROM   MACRO   literal_address, register_value
                      00083         local   writeIntEE_loop
                      00084         
                      00085         ; load address
                      00086         movlw   literal_address
                      00087         movwf   EEADR, ACCESS
                      00088         ; load value
                      00089         movff   register_value, EEDATA
                      00090         ; configure eeprom
                      00091         ; point to EEPROM DATA memory
                      00092         bcf             EECON1, EEPGD, ACCESS
                      00093         ; Access EEPROM/Program
                      00094         bcf             EECON1, CFGS, ACCESS    
                      00095         ; Enable writes
                      00096         bsf             EECON1, WREN, ACCESS
                      00097 
                      00098         ; don't have to disable interrupts because I'm only calling this
                      00099         ; from within the high-priority ISR
                      00100 
                      00101         ; required write enable sequence
                      00102         movlw   0x55
                      00103         movwf   EECON2, ACCESS
                      00104         movlw   0xAA
                      00105         movwf   EECON2, ACCESS
                      00106 
                      00107         ; set WR bit to begin write
                      00108         bsf             EECON1, WR, ACCESS
                      00109 writeIntEE_loop
                      00110         ; wait for write to complete
                      00111         btfsc   EECON1, WR, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00112         bra             writeIntEE_loop
                      00113         ; disable writes
                      00114         bcf             EECON1, WREN, ACCESS
                      00115 
                      00116         ; point to Program memory
                      00117         bsf             EECON1, EEPGD, ACCESS
                      00118 
                      00119         ENDM
                      00120 
                      00121 ;**********************************************************************
                      00122 WRITE_INTERNAL_EEPROM_FROM_REGS MACRO   address, data
                      00123         local   writeIntEE_loop
                      00124         
                      00125         ; load address
                      00126         movff   address, EEADR
                      00127         ; load value
                      00128         movff   data, EEDATA
                      00129         ; configure eeprom
                      00130         ; point to EEPROM DATA memory
                      00131         bcf             EECON1, EEPGD, ACCESS
                      00132         ; Access EEPROM/Program
                      00133         bcf             EECON1, CFGS, ACCESS    
                      00134         ; Enable writes
                      00135         bsf             EECON1, WREN, ACCESS
                      00136 
                      00137         ; don't have to disable interrupts because I'm only calling this
                      00138         ; from within the high-priority ISR
                      00139 
                      00140         ; required write enable sequence
                      00141         movlw   0x55
                      00142         movwf   EECON2, ACCESS
                      00143         movlw   0xAA
                      00144         movwf   EECON2, ACCESS
                      00145 
                      00146         ; set WR bit to begin write
                      00147         bsf             EECON1, WR, ACCESS
                      00148 writeIntEE_loop
                      00149         ; wait for write to complete
                      00150         btfsc   EECON1, WR, ACCESS
                      00151         bra             writeIntEE_loop
                      00152         ; disable writes
                      00153         bcf             EECON1, WREN, ACCESS
                      00154 
                      00155         ; point to Program memory
                      00156         bsf             EECON1, EEPGD, ACCESS
                      00157 
                      00158         ENDM
                      00159 
                      00160 ;;**********************************************************************
                      00161 ;;SPI_TX_LITERAL_RX_IN_WREG     MACRO   value
                      00162 ;       local   waitLoop
                      00163 ;
                      00164 ;; routine as recommended in Microchip PIC18F2458/2553/4458/4553 errata
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00165 ;
                      00166 ;       ; clear interrupt flag
                      00167 ;       bcf             PIR1, SSPIF, ACCESS
                      00168 ;
                      00169 ;       ; perform read, even if the data in SSPBUF is not important 
                      00170 ;       movf    SSPBUF, w, ACCESS
                      00171 ;
                      00172 ;       ; SSPBUF = value
                      00173 ;       movlw   value
                      00174 ;       movwf   SSPBUF, ACCESS
                      00175 ;
                      00176 ;       ; wait fro transfer to complete
                      00177 ;waitLoop
                      00178 ;       btfss   PIR1, SSPIF, ACCESS
                      00179 ;       bra             waitLoop
                      00180 ;
                      00181 ;       ; the data received should be valid
                      00182 ;       movf    SSPBUF, w, ACCESS
                      00183 ;
                      00184 ;       ENDM
                      00185                                                 
                      00186 ;;**********************************************************************
                      00187 ;SPI_TX_WREG_RX_IN_WREG MACRO
                      00188 ;       local   waitLoop
                      00189 ;
                      00190 ;       ; save WREG to software stack
                      00191 ;       PUSH_R  WREG
                      00192 ;       
                      00193 ;; routine as recommended in Microchip PIC18F2458/2553/4458/4553 errata
                      00194 ;       ; clear interrupt flag
                      00195 ;       bcf             PIR1, SSPIF, ACCESS
                      00196 ;
                      00197 ;       ; perform read, even if the data in SSPBUF is not important 
                      00198 ;       movf    SSPBUF, w, ACCESS
                      00199 ;
                      00200 ;       ; SSPBUF = restored WREG from software stack
                      00201 ;       POP_R   WREG
                      00202 ;       movwf   SSPBUF, ACCESS
                      00203 ;
                      00204 ;       ; wait for transfer to complete
                      00205 ;waitLoop
                      00206 ;       btfss   PIR1, SSPIF, ACCESS
                      00207 ;       bra             waitLoop
                      00208 ;
                      00209 ;       ; the data received should be valid
                      00210 ;       movf    SSPBUF, w, ACCESS
                      00211 ;
                      00212 ;       ENDM
                      00213 
                      00214 #endif
                      00097         #include        "../header/softwareStack.h"
                      00001 
                      00002 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      softwareStack.h                                   *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef SOFTWARESTACK_H
                      00022 #define SOFTWARESTACK_H
                      00023 
                      00024         #define softwareStackPointerFSR         FSR2
                      00025         #define softwareStackPointerINDF        INDF2
                      00026         #define softwareStackPointerPOSTINC     POSTINC2
                      00027         #define softwareStackPointerPOSTDEC     POSTDEC2
                      00028         #define softwareStackPointerPREINC      PREINC2 
                      00029         #define softwareStackPointerPLUSW       PLUSW2  
                      00030 
                      00031 ; **** MACRO: PUSH_R    regName
                      00032 PUSH_R  MACRO   regName
                      00033         movff   regName, softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00034                 ENDM
                      00035                 
                      00036 ; **** MACRO: POP_R     regName
                      00037 POP_R   MACRO   regName
                      00038         movff   softwareStackPointerPREINC, regName     ; ++softwareStackPointerINDF = regName
                      00039                 ENDM
                      00040 
                      00041 #endif
                      00098         #include        "../header/soundGen.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      soundGen.h                                        *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef _SOUNDGENH_
                      00022 #define _SOUNDGENH_
                      00023 
                      00024 ;**********************************************************************
                      00025 ; GENERAL
                      00026 ;**********************************************************************
                      00027 
                      00028 ; Current code structure requires that MAX_POLY_DEPTH be set to 4!
                      00029 #define MAX_POLY_DEPTH                                  4       
                      00030 
                      00031 #define ACTIVE_NOTE_DELTAS_ELEMENT_SIZE 2
                      00032 #define ACTIVE_NOTE_DELTAS_SIZE                 MAX_POLY_DEPTH * ACTIVE_NOTE_DELTAS_ELEMENT_SIZE
                      00033 
                      00034 #define DELEGATED_DELTAS_ELEMENT_SIZE   2
                      00035 #define DELEGATED_DELTAS_SIZE                   MAX_POLY_DEPTH * DELEGATED_DELTAS_ELEMENT_SIZE
                      00036 
                      00037 #define OSC_DELTAS_ELEMENT_SIZE                 2
                      00038 #define OSC_DELTAS_SIZE                                 MAX_POLY_DEPTH * OSC_DELTAS_ELEMENT_SIZE
                      00039 
                      00040 #define ACCUMULATORS_ELEMENT_SIZE               4
                      00041 #define ACCUMULATORS_SIZE                               MAX_POLY_DEPTH * ACCUMULATORS_ELEMENT_SIZE
                      00042 
                      00043 #define ACTIVE_OUTPUT_VALUES_EL_SIZE    1
                      00044 #define ACTIVE_OUTPUT_VALUES_SIZE               MAX_POLY_DEPTH * ACTIVE_OUTPUT_VALUES_EL_SIZE
                      00045 
                      00046 #define LED_BLINK_RATE_VOICE_THROUGH    20
                      00047 #define LED_BLINK_RATE_VOICE_RECORD             6
                      00048 
                      00049 ; set soundGen timebase prescales for wave and sample modes
                      00050 ; Timer2 interrupt period is currently 32uS
                      00051 ; set sample timebase period to 192uS (5208 Hz)
                      00052 #define SAMPLE_PRESCALE 6
                      00053 ; wave sine/square timebase period to 64uS (15.625 kHz)
                      00054 #define WAVE_PRESCALE   2
                      00055 
                      00056 #define MAX_MODE_LEVEL  MONO
                      00057 
                      00058 ; set power-up Attack and Release parameters
                      00059 ; adsrAttackRate and adsrReleaseRate variables have a range of 0 - 64
                      00060 ; rate of 0 == MIDI Attack/Release Time of 127
                      00061 ; rate of 64 == MIDI Attack/Release Time of 0
                      00062 #define ADSR_ATTACK_RATE        64
                      00063 #define ADSR_RELEASE_RATE       64
                      00064 
                      00065 ; set adsr prescale target to increment adsrLimiterRegs value every 19.52mS
                      00066 ; 19.52mS gives a max individual attack/release time of 4.99712 Seconds
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00067 ; the "increment" value is set by adsrAttackRate and adsrReleaseRate
                      00068 #define ADSR_PRESCALE 610
                      00069 
                      00070 ; changing from 0x00 reference to 0x80 to improve Attack/Release waveform quality
                      00071 #define PWM_IDLE_OUTPUT_VALUE 0x80
                      00072 
                      00073 ; In SINE mode, this values sets the range (+/- PWM_IDLE_OUTPUT_VALUE) of activeOutputValue within which
                             an oscillator will be
                      00074 ; ungated for changes to its delegatedDelta value.  Only allowing changes when activeOutputValue is appr
                            oximately == PWM_IDLE_OUTPUT_VALUE
                      00075 ; greatly reduces popping caused by Sine wave cycle clipping
                      00076 #define OSC_TRANSITION_OUTPUT_THRESHOLD 0x04
                      00077 
                      00078 ; Audio input DC Bias measurement, 253 ADC sample average:
                      00079 ;   (VDD == 3.2V / 256 = 0.0125V per ADC increment)
                      00080 ;   on-board mic selected, MIC connceted      = 0x47 (@ VDD = 3.2V, 0x47 correlates to 0.8875V)
                      00081 ;   external mic selected, input floating     = 0x38 (@ VDD = 3.2V, 0x38 correlates to 0.7000V)
                      00082 ;   line-in selected, input floating          = 0x53 (@ VDD = 3.2V, 0x53 correlates to 1.0375V)
                      00083 ; Should have balanced these offsets in the hardware. oh well.
                      00084 ; Sine and Square outputs idle at 0x80, so compensate for difference in Sample bias to mitigate popping
                      00085 ; average of above measurement is 0x46, 0x80 - 0x46 = 0x3A
                      00086 ;#define SAMPLE_DC_OFFSET (PWM_IDLE_OUTPUT_VALUE - 0x46)
                      00087 ; DEBUG - sample dc offset will change with component tolerances.  need to set manually for each PCB
                      00088 ; measured 0.930V RMS, 0.930 / 0.0125 = 74.4
                      00089 #define SAMPLE_DC_OFFSET (PWM_IDLE_OUTPUT_VALUE - 74)
                      00090 
                      00091 ; define the time to wait from record button release to start of sample recording
                      00092 ; this is an attempt to eliminate the record button's physical noise from the sample
                      00093 ;   Calculation Method:
                      00094 ;     timer2 int period == 32uS
                      00095 ;     samplePrescaleCounter == 6
                      00096 ;     32uS * 6 = 192uS
                      00097 ;     RECORD_BUTTON_RELEASE_WAIT_TIME = waitTimeInMs / 0.192
                      00098 ;                 maxTime = 192uS * 256 = 49.152mS
                      00099 ;
                      00100 ; load for delay of 5mS. (5 / 0.192 = 26.0417)
                      00101 #define RECORD_BUTTON_RELEASE_WAIT_TIME 26
                      00102 
                      00103 ;**********************************************************************
                      00104 ; ENUM TYPE DEFINITIONS
                      00105 ;**********************************************************************
                      00106 
                      00107 ; waveShape
                      00108 #define SINE 0
                      00109 #define SQUARE 1
                      00110 #define SAMPLE 2
                      00111 
                      00112 ; recordOrPlayback
                      00113 #define VOICE_THROUGH 0
                      00114 #define RECORD 1
                      00115 #define PLAYBACK 2
                      00116 
                      00117 ; modeLevels
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00118 #define POLY 0
                      00119 #define SUSTAIN 1
                      00120 #define MONO 2
                      00121 
                      00122 
                      00123 ;**********************************************************************
                      00124 ; FLAG VARIABLE DEFINITIONS
                      00125 ;**********************************************************************
                      00126 
                      00127 ; midiFlags
                      00128 #define turnSoundOn 3
                      00129 #define turnSoundOff 4
                      00130 #define keyPressed 5
                      00131 #define soundOn 6
                      00132 
                      00133 ; soundGenFlags
                      00134 #define delegatorBusy 0
                      00135 #define pgDec 1
                      00136 #define needRefresh 2
                      00137 #define activeNoteTableModified 3
                      00138 
                      00139 ; oscResetFlags
                      00140 #define osc0    0
                      00141 #define osc1    1
                      00142 #define osc2    2
                      00143 #define osc3    3
                      00144 
                      00145 ; oscStateFlags
                      00146 #define release 0
                      00147 #define sustain 1
                      00148 #define decay 2
                      00149 #define attack 3
                      00150 
                      00151 
                      00152 ;**********************************************************************
                      00153 ; MACROS
                      00154 ;**********************************************************************
                      00155 
                      00156 ;**********************************************************************
                      00157 CLEAR_ACCUMULATORS      MACRO
                      00158         local   loop
                      00159 
                      00160         ; init local variables
                      00161         PUSH_R  r0
                      00162         PUSH_R  FSR0L
                      00163         PUSH_R  FSR0H
                      00164         
                      00165         ; load fsr
                      00166         lfsr    FSR0, accumulators
                      00167 
                      00168         ; init count
                      00169         movf    polyDepth, w, ACCESS
                      00170         movwf   r0, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00171 loop    
                      00172         ; each accumulator is 4 bytes wide
                      00173         clrf    POSTINC0, ACCESS        
                      00174         clrf    POSTINC0, ACCESS        
                      00175         clrf    POSTINC0, ACCESS        
                      00176         clrf    POSTINC0, ACCESS        
                      00177         ; decrement count, skip if done
                      00178         decfsz  r0, f, ACCESS
                      00179         bra             loop
                      00180 
                      00181         ; restore variables
                      00182         POP_R   FSR0H
                      00183         POP_R   FSR0L
                      00184         POP_R   r0
                      00185         
                      00186         ENDM
                      00187         
                      00188 
                      00189 ;**********************************************************************
                      00190 ENABLE_SUSTAIN  MACRO
                      00191         comf    oscResetFlags, w, ACCESS
                      00192         andlw   0x0f
                      00193         movwf   sustainFlags, ACCESS
                      00194         ENDM
                      00195         
                      00196 ;**********************************************************************
                      00197 DISABLE_SUSTAIN MACRO
                      00198         clrf    sustainFlags, ACCESS
                      00199         ENDM
                      00200 
                      00201 ;**********************************************************************
                      00202 REVERSE_SAMPLE_IF_MOD_OVER_63   MACRO
                      00203         local exitMacro
                      00204         ; if modulation > 63 then reverse sample
                      00205         movlw   63
                      00206         cpfsgt  modulation, ACCESS
                      00207         bra             exitMacro
                      00208         ; modulation > 63 so do nextSampleAddress = (sampleEndAddress - nextSampleAddress)
                      00209         movf    nextSampleAddress, w, ACCESS
                      00210         subwf   sampleEndAddress, w, ACCESS
                      00211         movwf   nextSampleAddress, ACCESS
                      00212         movf    nextSampleAddress + 1, w, ACCESS
                      00213         subwfb  sampleEndAddress + 1, w, ACCESS
                      00214         movwf   nextSampleAddress + 1, ACCESS
                      00215 exitMacro
                      00216         ENDM
                      00217 
                      00218 ;**********************************************************************
                      00219 OSC_READ_ADSR_FLAG      MACRO   FLAG
                      00220 ; oscillator number passed in WREG
                      00221 ; boolean value is returned in WREG and ZERO flag is set accordingly
                      00222 
                      00223         ; push working regs onto software stack
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00224         PUSH_R  FSR0L
                      00225         PUSH_R  FSR0H
                      00226         
                      00227         ; load fsr
                      00228         lfsr    FSR0, oscStateFlags
                      00229         ; read the register into WREG
                      00230         movf    PLUSW0, w, ACCESS
                      00231         andlw   1<<FLAG
                      00232         
                      00233         ; restore working regs from stack
                      00234         POP_R   FSR0H
                      00235         POP_R   FSR0L   
                      00236         
                      00237         ENDM
                      00238 
                      00239 ;**********************************************************************
                      00240 OSC_ADVANCE_ADSR        MACRO   OSC_NUMBER
                      00241         local   macroDone, doAttack, attackDone, doRelease, releaseDone
                      00242 
                      00243         ; ignore advance if oscillator is sustained
                      00244         btfsc   sustainFlags, OSC_NUMBER, ACCESS
                      00245         bra             macroDone
                      00246         
                      00247         btfsc   oscStateFlags + OSC_NUMBER, attack, ACCESS
                      00248         bra             doAttack
                      00249         btfsc   oscStateFlags + OSC_NUMBER, release, ACCESS
                      00250         bra             doRelease
                      00251         bra             macroDone
                      00252         
                      00253 doAttack
                      00254         ; osc is attacking
                      00255 
                      00256         ; test condition ((adsrLimiterRegs -= ADSR_ATTACK_RATE) <=0)
                      00257         movf    adsrAttackRate, w, ACCESS
                      00258         subwf   adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00259         bnc             attackDone
                      00260         bz              attackDone
                      00261 
                      00262         ; condition is FALSE so do the subtraction and exit
                      00263         ; (adsrLimiterRegs -= ADSR_ATTACK_RATE)
                      00264         movf    adsrAttackRate, w, ACCESS
                      00265         subwf   adsrLimiterRegs + OSC_NUMBER, f, ACCESS
                      00266         bra             macroDone
                      00267 
                      00268 attackDone
                      00269         ; clear attack flag
                      00270         bcf             oscStateFlags + OSC_NUMBER, attack, ACCESS
                      00271         clrf    adsrLimiterRegs + OSC_NUMBER, ACCESS
                      00272         bra     macroDone
                      00273 
                      00274 doRelease
                      00275         ; osc is releasing
                      00276 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00277         ; test condition: ((adsrLimiterRegs + ADSR_ATTACK_RATE) >= 255)
                      00278         movf    adsrReleaseRate, w, ACCESS
                      00279         addwf   adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00280         ; condition is TRUE so skip the addition and leave adsrLimiterRegs at its current value
                      00281         bc              releaseDone
                      00282         comf    WREG, w, ACCESS
                      00283         ; condition is TRUE so skip the addition and leave adsrLimiterRegs at its current value
                      00284         bz              releaseDone
                      00285 
                      00286         ; condition is FALSE so do the addition and exit
                      00287         ; do (adsrLimiterRegs += ADSR_ATTACK_RATE)      
                      00288         movf    adsrReleaseRate, w, ACCESS
                      00289         addwf   adsrLimiterRegs + OSC_NUMBER, f, ACCESS
                      00290         bra             macroDone
                      00291         
                      00292 releaseDone
                      00293         ; clear release flag
                      00294         bcf             oscStateFlags + OSC_NUMBER, release, ACCESS
                      00295         ; set limit reg to max
                      00296         setf    adsrLimiterRegs + OSC_NUMBER, ACCESS
                      00297         ; clear oscillator's delegatedDelta
                      00298         clrf    delegatedDeltas + OSC_NUMBER * 2;
                      00299         clrf    delegatedDeltas + (OSC_NUMBER * 2) + 1; 
                      00300         bra     macroDone
                      00301         
                      00302 macroDone
                      00303         ENDM
                      00304         
                      00305 ;**********************************************************************
                      00306 OSC_MIX MACRO   OSC_NUMBER
                      00307         local   mixDone, mixDoPos, mixDoNeg, mixDoDone
                      00308                 
                      00309         ; check polarity of current activeOutputValue compared to PWM_IDLE_OUTPUT_VALUE
                      00310         movlw   PWM_IDLE_OUTPUT_VALUE
                      00311         subwf   activeOutputValues + OSC_NUMBER, w
                      00312         bnc             mixDoNeg
                      00313 mixDoPos
                      00314         ; WREG = adsrLimiterRegs/2
                      00315         bcf             STATUS, C, ACCESS
                      00316         rrcf    adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00317         subwf   activeOutputValues + OSC_NUMBER, w
                      00318         bra             mixDoDone
                      00319 mixDoNeg
                      00320         ; WREG = adsrLimiterRegs/2
                      00321         bcf             STATUS, C, ACCESS
                      00322         rrcf    adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00323         addwf   activeOutputValues + OSC_NUMBER, w      
                      00324 mixDoDone
                      00325         ; overflow indicates that last operation toggled bit 7
                      00326         btfsc   STATUS, OV, ACCESS
                      00327         movlw   PWM_IDLE_OUTPUT_VALUE
                      00328 
                      00329 mixDone
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00330         ; add WREG to mixedOutputL/H
                      00331         addwf   mixedOutputL, f, ACCESS
                      00332         btfsc   STATUS, C, ACCESS
                      00333         incf    mixedOutputH, f, ACCESS
                      00334         
                      00335         ENDM
                      00336 
                      00337 ;**********************************************************************
                      00338 OSC_STATE_BLOCK MACRO   OSC_NUMBER
                      00339         local   checkDelegating, oscCheckActive, zeroAcc, oscActive, waveIsSample, noTransition, oscChec
                            kNotSine
                      00340         local   clrSampleAcc, addressOk, waveIsNotSample, waveIsSine, waveIsSquare, tableAddressLoaded, 
                            resetOscillator, macroDone
                      00341                 
                      00342         ; if oscillator is locked for sustain then leave it alone
                      00343         btfsc   sustainFlags, OSC_NUMBER, ACCESS
                      00344         bra             oscActive
                      00345                         
                      00346 checkDelegating
                      00347         ; don't update if delegator is busy because delegatedDelta value is volatile
                      00348         btfsc   soundGenFlags, delegatorBusy, ACCESS
                      00349         ; delegator is busy so just keep spinning
                      00350         bra             oscCheckActive
                      00351         
                      00352         ; THRESHOLD METHOD WORKS WELL
                      00353         movlw   SINE
                      00354         cpfseq waveShape, ACCESS
                      00355         bra             oscCheckNotSine
                      00356         ; calculate absolute offset between PWM_IDLE_OUTPUT_VALUE and current activeOutputValue
                      00357         movlw   PWM_IDLE_OUTPUT_VALUE
                      00358         subwf   activeOutputValues + OSC_NUMBER, w
                      00359         ; invert if negative
                      00360         btfss   STATUS, C, ACCESS
                      00361         negf    WREG, ACCESS
                      00362         ; check if offset is below threshold value
                      00363         ; do (WREG = OSC_OUTPUT_GATE_THRESHOLD - WREG)
                      00364         sublw   OSC_TRANSITION_OUTPUT_THRESHOLD
                      00365         ; if result is positive then activeOutputValue offset from IDLE is <= THRESHOLD so allow changes
                      00366         bnc             oscCheckActive
                      00367 
                      00368 oscCheckNotSine
                      00369 
                      00370         ; delegator is idle and oscillator is enabled so copy delegated delta as internal
                      00371         movff   delegatedDeltas + (OSC_NUMBER * DELEGATED_DELTAS_ELEMENT_SIZE) + 0, oscDeltas + (OSC_NUM
                            BER * OSC_DELTAS_ELEMENT_SIZE) + 0
                      00372         movff   delegatedDeltas + (OSC_NUMBER * DELEGATED_DELTAS_ELEMENT_SIZE) + 1, oscDeltas + (OSC_NUM
                            BER * OSC_DELTAS_ELEMENT_SIZE) + 1
                      00373 
                      00374 oscCheckActive
                      00375         ; if oscDeltas[OSC_NUMBER] == 0x00 then oscillator is not really active so reset
                      00376         ; this check is required in event that (activeOutput == 0 && delegatorBusy == TRUE && oscDelta =
                            = 0)
                      00377         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                                    + 0, f
                      00378         bnz             oscActive
                      00379         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, f
                      00380         bz              resetOscillator
                      00381         
                      00382 oscActive
                      00383         ; if oscillator is starting from reset state then begin with 0x0000 accumulator
                      00384         btfsc   oscResetFlags, OSC_NUMBER, ACCESS
                      00385         bra             zeroAcc
                      00386 
                      00387         ;**** start procedure: step Accumulator (SINE/SQUARE/SAMPLE) ****
                      00388         ; accumulator += activeNoteDelta
                      00389         ; accumulators are 4 bytes wide, activeNoteDeltas are 2 bytes wide
                      00390         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, w
                      00391         addwf   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
                      00392         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, w  
                      00393         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
                      00394         movlw   0
                      00395         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
                      00396         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                      00397         
                      00398 zeroAcc
                      00399         ; we're done with oscResetFlags flag so ensure that it's clear
                      00400         bcf             oscResetFlags, OSC_NUMBER, ACCESS
                      00401         
                      00402         ;**** start procedure: handle Pitch Wheel (SINE/SQUARE/SAMPLE) ****
                      00403         ; accumulator += pitchWheel
                      00404         movf    pitchWheel                                                                              
                                                                            + 0, w, ACCESS
                      00405         addwf   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
                      00406         movf    pitchWheel                                                                              
                                                                            + 1, w, ACCESS
                      00407         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
                      00408         movf    pitchWheel                                                                              
                                                                            + 2, w, ACCESS
                      00409         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
                      00410         movf    pitchWheel                                                                              
                                                                            + 3, w, ACCESS
                      00411         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                      00412         
                      00413         ;**** start procedure: if SAMPLE waveshape then load next read address  (SAMPLE ONLY) ****
                      00414         ; branch to waveform specific table address load
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00415         movlw   SAMPLE
                      00416         cpfseq  waveShape, ACCESS
                      00417         bra             waveIsNotSample
                      00418 waveIsSample
                      00419 
                      00420         ; if samplesLoaded flag is set then load next EEPROM read address
                      00421         ; checking this here as opposed to before accumulator update will, in the event of the mainline 
                            not…
                      00422         ; being able to load the samples in time, cause audio chopping rather than detuning
                      00423         btfss   eepromFlags, samplesLoaded, ACCESS
                      00424         bra             macroDone
                      00425         
                      00426         ; check for note transition
                      00427         ; keyPressed flag is set every time a MIDI Note On message is received
                      00428         ; when a sample is playing back in POLY or SUSTAIN modes, we want the sample to restart from the
                             beginning...
                      00429         ; whenever a Note On message is received.
                      00430         btfss   midiFlags, keyPressed, ACCESS
                      00431         bra             noTransition
                      00432         ; is modeLevel == POLY
                      00433         movlw   POLY
                      00434         xorwf   modeLevel, w, ACCESS
                      00435         ; mode is POLY so reset accumulator to restart sample from beginning
                      00436         bz              clrSampleAcc
                      00437 
                      00438 noTransition    
                      00439         ; nextSampleAddress = ((accumulator >> 8) & 0xffff)
                      00440         ; reset accumulator if nextSampleAddress value will exceed sampleEndAddress
                      00441         ; is waveTableIndex > sampleEndAddress?
                      00442         movf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, w
                      00443         subwf   sampleEndAddress, w, ACCESS
                      00444         movf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, w
                      00445         subwfb  sampleEndAddress + 1, w, ACCESS
                      00446         ; result is positive so waveTableIndex is within valid range
                      00447         bc              addressOk
                      00448         ; ((accumulator >> 8) & 0xffff) is out of valid sample range so restart sample from beginning
                      00449         ; reset accumulator
                      00450 clrSampleAcc
                      00451         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0
                      00452         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1
                      00453         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2
                      00454         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3
                      00455 addressOk
                      00456         
                      00457         ; do nextSampleAddress = ((accumulator >> 8) & 0xffff)
                      00458         movff   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, nextSampleAddresses + (OSC_NUMBER * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 0
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00459         movff   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, nextSampleAddresses + (OSC_NUMBER * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 1
                      00460         
                      00461         bra             macroDone
                      00462         
                      00463 waveIsNotSample
                      00464         ;**** start procedure: waveshape is SINE or SQUARE so read Program Memory table  (SINE/SQUARE ON
                            LY) ****
                      00465         ; branch to waveform specific table address load
                      00466         movlw   SINE
                      00467         cpfseq  waveShape, ACCESS
                      00468         bra             waveIsSquare
                      00469 
                      00470 waveIsSine      
                      00471         ; 
                      00472         ; load address of SINE table read
                      00473         ; offset = ((accumulator >> 8) & 0xff)
                      00474         movf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1, w
                      00475         addwf   sineTableBaseAddress + 0, w
                      00476         movwf   TBLPTRL, ACCESS
                      00477         movf    sineTableBaseAddress + 1, w
                      00478         btfsc   STATUS, C, ACCESS
                      00479         addlw   1
                      00480         movwf   TBLPTRH, ACCESS
                      00481         movf    sineTableBaseAddress + 2, w
                      00482         btfsc   STATUS, C, ACCESS
                      00483         addlw   1
                      00484         movwf   TBLPTRU, ACCESS
                      00485         bra             tableAddressLoaded
                      00486 
                      00487 waveIsSquare
                      00488         ; load address of SQUARE table read
                      00489         ; offset = ((accumulator >> 8) & 0xff)
                      00490         movf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1, w
                      00491         addwf   squareTableBaseAddress + 0, w
                      00492         movwf   TBLPTRL, ACCESS
                      00493         movf    squareTableBaseAddress + 1, w
                      00494         btfsc   STATUS, C, ACCESS
                      00495         addlw   1
                      00496         movwf   TBLPTRH, ACCESS
                      00497         movf    squareTableBaseAddress + 2, w
                      00498         btfsc   STATUS, C, ACCESS
                      00499         addlw   1
                      00500         movwf   TBLPTRU, ACCESS
                      00501 
                      00502 tableAddressLoaded
                      00503         ; read value from program memory
                      00504         tblrd*
                      00505         movff   TABLAT, activeOutputValues + (OSC_NUMBER * ACTIVE_OUTPUT_VALUES_EL_SIZE) + 0
                      00506         bra             macroDone
                      00507         
                      00508 resetOscillator
                      00509         ; set oscillator reset flag
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00510         bsf             oscResetFlags, OSC_NUMBER, ACCESS
                      00511         movlw   PWM_IDLE_OUTPUT_VALUE
                      00512         movwf   activeOutputValues + (OSC_NUMBER * ACTIVE_OUTPUT_VALUES_EL_SIZE)
                      00513         clrf    oscDeltas + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE) + 0
                      00514         clrf    oscDeltas + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE) + 1
                      00515         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 0
                      00516         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1
                      00517         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 2
                      00518         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 3
                      00519 
                      00520 macroDone
                      00521 
                      00522         ENDM
                      00523         
                      00524         
                      00525 #endif
                      00526 
                      00527 
                      00099 
                      00100         
                      00101 ;**********************************************************************
                      00102 ; GLOBAL VARIABLES
                      00103 ;**********************************************************************
                      00104 
                      00105         ; declare isr tmp and working register variables
                      00106         ; align to RAM address 0x0000
                      00107         CBLOCK 0
  00000000            00108                 wTmp:1
  00000001            00109                 statusTmp:1
  00000002            00110                 bsrTmp:1
  00000003            00111                 r0:1
  00000004            00112                 r1:1
  00000005            00113                 r2:1
  00000006            00114                 r3:1
  00000007            00115                 r4:1
  00000008            00116                 r5:1
  00000009            00117                 r6:1
  0000000A            00118                 r7:1
                      00119         ENDC
                      00120         
                      00121 ;**********************************************************************
                      00122 ; CODE BEGIN / RESET VECTOR
                      00123 ;**********************************************************************
                      00124 
                      00125         ORG             0x0000                                                  ; processor reset vector
000000 6AFA           00126         clrf    PCLATH                                                  ; ensure page bits are cleared
000002 EF?? F???      00127         goto    mootLoader                                              ; jump to bootloader
                      00128 ;**********************************************************************
                      00129 ; INTERRUPT VECTORS
                      00130 ;**********************************************************************
                      00131 
                      00132         ORG     0x0008                                          ; high-priority interrupt vector
000008 EF?? F???      00133         goto    highPriorityISR_redirect
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00134 
                      00135         ORG     0x0018                                          ; low-priority interrupt vector
000018 EF?? F???      00136         goto    lowPriorityISR_redirect
                      00137 
                      00138 
                      00139 ;**********************************************************************
                      00140 ; USER-DEFINED MAIN() AND ISR() REDIRECTS
                      00141 ;**********************************************************************
                      00142 ; To prevent the user from rendering the bootloader unusable in the event
                      00143 ; of a failed Program Memory write, the first >=64 bytes of Program Memory
                      00144 ; will not be writable (set via USER_CODE_START_ADDRESS define) via the
                      00145 ; bootloader so must contain no user code.
                      00146 ; The first 64 bytes will contain only:
                      00147 ;
                      00148 ; 0x0000: clrf  PCLATH                                          ; set bank-select bits to Bank0
                      00149 ; 0x0001: goto  mootLoader                                      ; jump to bootloader on reset
                      00150 ; 0x0008: goto  highPriorityISR_redirect        ; jump to high priority ISR redirect in user space
                      00151 ; 0x0018: goto  lowPriorityISR_redirect         ; jump to low priority ISR redirect in user space
                      00152 ;
                      00153 ; since these will not be modifiable without a hardware programmer, these
                      00154 ; redirects will point to the following static addresses:
                      00155 ;
                      00156 ; 0x0040: goto main                             ; jump to main()
                      00157 ; 0x0044: goto highPriorityISR  ; jump to highPriorityISR()
                      00158 ; 0x0048: goto lowPriorityISR   ; jump to lowPriorityISR()
                      00159 ;
                      00160 ; When writing new firmware, the user is responsible for maintaing these 
                      00161 ; jump instructions at these addresses.  Note that the "goto" instruction
                      00162 ; requires 2 words of Program Memory space.
                      00163 
                      00164         ORG             USER_CODE_START_ADDRESS
000040                00165 main_redirect
000040 EF?? F???      00166         goto    main
000044                00167 highPriorityISR_redirect
000044 EF?? F???      00168         goto    highPriorityISR
000048                00169 lowPriorityISR_redirect
000048 EF?? F???      00170         goto    lowPriorityISR
                      00171 
                      00172 ;**********************************************************************
                      00173 ; INTERRUPT SERVICE ROUTINE CODE BEGIN
                      00174 ;**********************************************************************
                      00175 
                      00176         ; insert ISR code
                      00177         #include        "../source/ISRs.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      ISRs.asm                                          *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021         
                      00022 ;**********************************************************************
                      00023 ; INCLUDES
                      00024 ;**********************************************************************
                      00025 
                      00026         #include        "../header/midi.h"
                      00228 
                      00229 ;**********************************************************************
                      00230 ;                                                                     *
                      00231 ;    Project:       deMIDulator                                       *
                      00232 ;    Filename:      midi.h                                            *
                      00233 ;    Date:                                                            *
                      00234 ;    File Version:                                                    *
                      00235 ;                                                                     *
                      00236 ;    Author:        Derek Enos                                        *
                      00237 ;    Company:                                                         *
                      00238 ;                                                                     * 
                      00239 ;                                                                     *
                      00240 ;**********************************************************************
                      00241 ;                                                                     *
                      00242 ;    Files required:                                                  *
                      00243 ;                                                                     *
                      00244 ;                                                                     *
                      00245 ;                                                                     *
                      00246 ;**********************************************************************
                      00247 
                      00248 #ifndef _MIDIH_
                      00249 #define _MIDIH_
                      00250 
                      00251 
                      00252 ; ******************* GENERAL MIDI DEFINES ***********************
                      00253 ; ** Define default MIDI channel **
                      00254 ; values 0 - 5 (actual MIDI channels 1 - 6) will make deMIDUlator respond to only that channel
                      00255 ; value of 6 (actual MIDI channel 7) will make deMIDulator respond to ALL channels
                      00256         #define         DEFAULT_MIDI_CHANNEL    6
                      00257 
                      00258 ; ******************* MIDI SYSEX DEFINES ***********************
                      00259 #define         VENDOR_ID       0x77
                      00260 #define         DEVICE_ID       0x1D
                      00261 #define         TERMINAL_PACKET_COMMAND_VALUE   0x1E
                      00262 
                      00263 ; ******************* MIDI BUFFER SIZES ***********************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00264 
                      00265 #define         MAX_MIDI_MESSAGE_SIZE   24
                      00266 #define         ACTIVE_NOTE_TABLE_SIZE  25
                      00267 
                      00268 
                      00269 ; ******************* STATUS BYTE DEFINITONS ***********************
                      00270 
                      00271 ; Note that lower nybble (channel) should be masked out for comparison
                      00272 ;------------------------
                      00273 #define         NOTE_OFF                                0x80
                      00274 #define         NOTE_ON                                 0x90
                      00275 #define         KEY_PRESSURE                    0xA0
                      00276 #define         CONTROL_CHANGE                  0xB0
                      00277 #define         PROGRAM_CHANGE                  0xC0
                      00278 #define         CHANNEL_PRESSURE                0xD0
                      00279 #define         PITCH_WHEEL                             0xE0
                      00280 
                      00281 ; Sysex Status Byte Definitions
                      00282 #define         SYSEX                                   0xF0
                      00283 #define         EOX                                             0xF7
                      00284 
                      00285 #define         NOTE_OFF_MESSAGE_LENGTH                         3
                      00286 #define         NOTE_ON_MESSAGE_LENGTH                          3
                      00287 #define         KEY_PRESSURE_MESSAGE_LENGTH                     3
                      00288 #define         CONTROL_CHANGE_MESSAGE_LENGTH           3
                      00289 #define         PROGRAM_CHANGE_MESSAGE_LENGTH           2
                      00290 #define         CHANNEL_PRESSURE_MESSAGE_LENGTH         2
                      00291 #define         PITCH_WHEEL_MESSAGE_LENGTH                      3
                      00292 
                      00293 ; SysEx Sub Types
                      00294 ;----------------------------
                      00295 #define         NON_REAL_TIME                                           0x7E
                      00296 #define         GENERAL_INFORMATION                                     0x06
                      00297 #define         IDENTITY_REQUEST                                        0x01
                      00298 #define         IDENTITY_REPLY                                          0x02
                      00299 
                      00300 ; Control Change Data Types
                      00301 ;----------------------------
                      00302 #define         BANK_SELECT_MSB                                         0
                      00303 #define         MODULATION_WHEEL_MSB                            1
                      00304 #define         BREATH_CONTROLLER_MSB                           2
                      00305 #define         UNDEFINED_003                                           3
                      00306 #define         FOOT_CONTROLLER_MSB                                     4
                      00307 #define         PORTAMENTO_TIME                                         5
                      00308 #define         DATA_ENTRY_MSB                                          6
                      00309 #define         CHANNEL_VOLUME_MSB                                      7
                      00310 #define         BALANCE_MSB                                                     8
                      00311 #define         UNDEFINED_MSB                                           9
                      00312 #define         PAN_MSB                                                         10
                      00313 #define         EXPRESSION_MSB                                          11
                      00314 #define         EFFECT_CONTROL_1_MSB                            12
                      00315 #define         EFFECT_CONTROL_2_MSB                            13
                      00316 #define         UNDEFINED_014                                           14
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00317 #define         UNDEFINED_015                                           15
                      00318 #define         GENERAL_PURPOSE_CONTROLLER_1_MSB        16
                      00319 #define         GENERAL_PURPOSE_CONTROLLER_2_MSB        17
                      00320 #define         GENERAL_PURPOSE_CONTROLLER_3_MSB        18
                      00321 #define         GENERAL_PURPOSE_CONTROLLER_4_MSB        19
                      00322 #define         UNDEFINED_020                                           20
                      00323 #define         UNDEFINED_021                                           21
                      00324 #define         UNDEFINED_022                                           22
                      00325 #define         UNDEFINED_023                                           23
                      00326 #define         UNDEFINED_024                                           24
                      00327 #define         UNDEFINED_025                                           25
                      00328 #define         UNDEFINED_026                                           26
                      00329 #define         UNDEFINED_027                                           27
                      00330 #define         UNDEFINED_028                                           28
                      00331 #define         UNDEFINED_029                                           29
                      00332 #define         UNDEFINED_030                                           30
                      00333 #define         UNDEFINED_031                                           31
                      00334 #define         BANK_SELECT_LSB                                         32
                      00335 #define         MODULATION_WHEEL_LSB                            33
                      00336 #define         BREATH_CONTROLLER_LSB                           34
                      00337 #define         UNDEFINED_035                                           35
                      00338 #define         FOOT_CONTROLLER_LSB                                     36
                      00339 #define         PORTAMENTO_TIME_LSB                                     37
                      00340 #define         DATA_ENTRY_LSB                                          38
                      00341 #define         CHANNEL_VOLUME_LSB                                      39
                      00342 #define         BALANCE_LSB                                                     40
                      00343 #define         UNDEFINED_041                                           41
                      00344 #define         PAN_LSB                                                         42
                      00345 #define         EXPRESSION_LSB                                          43
                      00346 #define         EFFECT_CONTROL_1_LSB                            44
                      00347 #define         EFFECT_CONTROL_2_LSB                            45
                      00348 #define         UNDEFINED_046                                           46
                      00349 #define         UNDEFINED_047                                           47
                      00350 #define         GENERAL_PURPOSE_CONTROLLER_1_LSB        48
                      00351 #define         GENERAL_PURPOSE_CONTROLLER_2_LSB        49
                      00352 #define         GENERAL_PURPOSE_CONTROLLER_3_LSB        50
                      00353 #define         GENERAL_PURPOSE_CONTROLLER_4_LSB        51
                      00354 #define         UNDEFINED_052                                           52
                      00355 #define         UNDEFINED_053                                           53
                      00356 #define         UNDEFINED_054                                           54
                      00357 #define         UNDEFINED_055                                           55
                      00358 #define         UNDEFINED_056                                           56
                      00359 #define         UNDEFINED_057                                           57
                      00360 #define         UNDEFINED_058                                           58
                      00361 #define         UNDEFINED_059                                           59
                      00362 #define         UNDEFINED_060                                           60
                      00363 #define         UNDEFINED_061                                           61
                      00364 #define         UNDEFINED_062                                           62
                      00365 #define         UNDEFINED_063                                           63
                      00366 #define         SUSTAIN_PEDAL                                           64
                      00367 #define         PORTAMENTO_ONOFF                                        65
                      00368 #define         SOSTENUTO                                                       66
                      00369 #define         SOFT_PEDAL                                                      67
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00370 #define         LEGATO_FOOTSWITCH                                       68
                      00371 #define         HOLD_2                                                          69
                      00372 #define         SOUND_CONTROLLER_1_DEFAULT_SOUND_VARIATION                              70
                      00373 #define         SOUND_CONTROLLER_2_DEFAULT_TIMBRE_HARMONIC_QUALITY              71
                      00374 #define         SOUND_CONTROLLER_3_DEFAULT_RELEASE_TIME                                 72
                      00375 #define         SOUND_CONTROLLER_4_DEFAULT_ATTACK_TIME                                  73
                      00376 #define         SOUND_CONTROLLER_5_DEFAULT_BRIGHTNESS                                   74
                      00377 #define         SOUND_CONTROLLER_6_GM2_DEFAULT_DECAY_TIME                               75
                      00378 #define         SOUND_CONTROLLER_7_GM2_DEFAULT_VIBRATO_RATE                             76
                      00379 #define         SOUND_CONTROLLER_8_GM2_DEFAULT_VIBRATO_DEPTH                    77
                      00380 #define         SOUND_CONTROLLER_9_GM2_DEFAULT_VIBRATO_DELAY                    78
                      00381 #define         SOUND_CONTROLLER_10_GM2_DEFAULT_UNDEFINED                               79
                      00382 #define         GENERAL_PURPOSE_CONTROLLER_5                                                    80
                      00383 #define         GENERAL_PURPOSE_CONTROLLER_6                                                    81
                      00384 #define         GENERAL_PURPOSE_CONTROLLER_7                                                    82
                      00385 #define         GENERAL_PURPOSE_CONTROLLER_8                                                    83
                      00386 #define         PORTAMENTO_CONTROL                                                                      
                                    84
                      00387 #define         UNDEFINED_85                                                                    85
                      00388 #define         UNDEFINED_86                                                                    86
                      00389 #define         UNDEFINED_87                                                                    87
                      00390 #define         UNDEFINED_88                                                                    88
                      00391 #define         UNDEFINED_89                                                                    89
                      00392 #define         UNDEFINED_90                                                                    90
                      00393 #define         EFFECTS_1_DEPTH_DEFAULT_REVERB_SEND                             91
                      00394 #define         EFFECTS_2_DEPTH_DEFAULT_TREMOLO_DEPTH                   92
                      00395 #define         EFFECTS_3_DEPTH_DEFAULT_CHORUS_SEND                             93
                      00396 #define         EFFECTS_4_DEPTH_DEFAULT_CELESTE_[DETUNE]_DEPTH  94
                      00397 #define         EFFECTS_5_DEPTH_DEFAULT_PHASER_DEPTH                    95
                      00398 #define         DATA_INCREMENT                                                                  96
                      00399 #define         DATA_DECREMENT                                                                  97
                      00400 #define         NON_REG_PARAMETER_NUMBER_LSB                            98
                      00401 #define         NON_REG_PARAMETER_NUMBER_MSB                            99
                      00402 #define         REGISTERED_PARAMETER_NUMBER_LSB                                 100
                      00403 #define         REGISTERED_PARAMETER_NUMBERMSB                                  101
                      00404 #define         UNDEFINED_102                                           102
                      00405 #define         UNDEFINED_103                                           103
                      00406 #define         UNDEFINED_104                                           104
                      00407 #define         UNDEFINED_105                                           105
                      00408 #define         UNDEFINED_106                                           106
                      00409 #define         UNDEFINED_107                                           107
                      00410 #define         UNDEFINED_108                                           108
                      00411 #define         UNDEFINED_109                                           109
                      00412 #define         UNDEFINED_110                                           110
                      00413 #define         UNDEFINED_111                                           111
                      00414 #define         UNDEFINED_112                                           112
                      00415 #define         UNDEFINED_113                                           113
                      00416 #define         UNDEFINED_114                                           114
                      00417 #define         UNDEFINED_115                                           115
                      00418 #define         UNDEFINED_116                                           116
                      00419 #define         UNDEFINED_117                                           117
                      00420 #define         UNDEFINED_118                                           118
                      00421 #define         UNDEFINED_119                                           119
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00422 #define         ALL_SOUND_OFF                                           120
                      00423 #define         RESET_ALL_CONTROLLERS                           121
                      00424 #define         LOCAL_CONTROL_ONOFF                                     122
                      00425 #define         ALL_NOTES_OFF                                           123
                      00426 #define         OMNI_MODE_OFF                                           124
                      00427 #define         OMNI_MODE_ON                                            125
                      00428 #define         POLY_MODE_OFF                                           126
                      00429 #define         POLY_MODE_ON                                            127
                      00430 
                      00431 
                      00432 ; ******************* MIDI MESSAGE STATES ***********************
                      00433 
                      00434 #define CHANNEL                                         0x00
                      00435 #define DATA_BYTE0                                      0x01
                      00436 #define DATA_BYTE1                                      0x02
                      00437 #define MESSAGE_COMPLETE                        0xFF
                      00438 
                      00439 #define NOTE_COMPLETE                           DATA_BYTE1
                      00440 #define AFTERTOUCH_COMPLETE                     DATA_BYTE1
                      00441 #define CONTROL_CHANGE_COMPLETE         DATA_BYTE1
                      00442 #define PROGRAM_CHANGE_COMPLETE         DATA_BYTE0
                      00443 #define PITCH_WHEEL_COMPLETE            DATA_BYTE1
                      00444 
                      00445 
                      00446 ; ******************* FLAG VARIABLE DEFINITIONS ***********************
                      00447 
                      00448 ; midiFlags (bits 3:7 free for use by other modules)
                      00449 #define uartState_rxInProgress                  0
                      00450 #define midiState_messageNeedsMapping   1
                      00451 #define midiThruModeEnabled                             2
                      00452 
                      00453 
                      00454 #endif
                      00027         #include        "../header/soundGen.h"
                      00528 
                      00529 ;**********************************************************************
                      00530 ;                                                                     *
                      00531 ;    Project:       deMIDulator                                       *
                      00532 ;    Filename:      soundGen.h                                        *
                      00533 ;    Date:                                                            *
                      00534 ;    File Version:                                                    *
                      00535 ;                                                                     *
                      00536 ;    Author:        Derek Enos                                        *
                      00537 ;    Company:                                                         *
                      00538 ;                                                                     * 
                      00539 ;                                                                     *
                      00540 ;**********************************************************************
                      00541 ;                                                                     *
                      00542 ;    Files required:                                                  *
                      00543 ;                                                                     *
                      00544 ;                                                                     *
                      00545 ;                                                                     *
                      00546 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00547 
                      00548 #ifndef _SOUNDGENH_
                      00549 #define _SOUNDGENH_
                      00550 
                      00551 ;**********************************************************************
                      00552 ; GENERAL
                      00553 ;**********************************************************************
                      00554 
                      00555 ; Current code structure requires that MAX_POLY_DEPTH be set to 4!
                      00556 #define MAX_POLY_DEPTH                                  4       
                      00557 
                      00558 #define ACTIVE_NOTE_DELTAS_ELEMENT_SIZE 2
                      00559 #define ACTIVE_NOTE_DELTAS_SIZE                 MAX_POLY_DEPTH * ACTIVE_NOTE_DELTAS_ELEMENT_SIZE
                      00560 
                      00561 #define DELEGATED_DELTAS_ELEMENT_SIZE   2
                      00562 #define DELEGATED_DELTAS_SIZE                   MAX_POLY_DEPTH * DELEGATED_DELTAS_ELEMENT_SIZE
                      00563 
                      00564 #define OSC_DELTAS_ELEMENT_SIZE                 2
                      00565 #define OSC_DELTAS_SIZE                                 MAX_POLY_DEPTH * OSC_DELTAS_ELEMENT_SIZE
                      00566 
                      00567 #define ACCUMULATORS_ELEMENT_SIZE               4
                      00568 #define ACCUMULATORS_SIZE                               MAX_POLY_DEPTH * ACCUMULATORS_ELEMENT_SIZE
                      00569 
                      00570 #define ACTIVE_OUTPUT_VALUES_EL_SIZE    1
                      00571 #define ACTIVE_OUTPUT_VALUES_SIZE               MAX_POLY_DEPTH * ACTIVE_OUTPUT_VALUES_EL_SIZE
                      00572 
                      00573 #define LED_BLINK_RATE_VOICE_THROUGH    20
                      00574 #define LED_BLINK_RATE_VOICE_RECORD             6
                      00575 
                      00576 ; set soundGen timebase prescales for wave and sample modes
                      00577 ; Timer2 interrupt period is currently 32uS
                      00578 ; set sample timebase period to 192uS (5208 Hz)
                      00579 #define SAMPLE_PRESCALE 6
                      00580 ; wave sine/square timebase period to 64uS (15.625 kHz)
                      00581 #define WAVE_PRESCALE   2
                      00582 
                      00583 #define MAX_MODE_LEVEL  MONO
                      00584 
                      00585 ; set power-up Attack and Release parameters
                      00586 ; adsrAttackRate and adsrReleaseRate variables have a range of 0 - 64
                      00587 ; rate of 0 == MIDI Attack/Release Time of 127
                      00588 ; rate of 64 == MIDI Attack/Release Time of 0
                      00589 #define ADSR_ATTACK_RATE        64
                      00590 #define ADSR_RELEASE_RATE       64
                      00591 
                      00592 ; set adsr prescale target to increment adsrLimiterRegs value every 19.52mS
                      00593 ; 19.52mS gives a max individual attack/release time of 4.99712 Seconds
                      00594 ; the "increment" value is set by adsrAttackRate and adsrReleaseRate
                      00595 #define ADSR_PRESCALE 610
                      00596 
                      00597 ; changing from 0x00 reference to 0x80 to improve Attack/Release waveform quality
                      00598 #define PWM_IDLE_OUTPUT_VALUE 0x80
                      00599 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00600 ; In SINE mode, this values sets the range (+/- PWM_IDLE_OUTPUT_VALUE) of activeOutputValue within which
                             an oscillator will be
                      00601 ; ungated for changes to its delegatedDelta value.  Only allowing changes when activeOutputValue is appr
                            oximately == PWM_IDLE_OUTPUT_VALUE
                      00602 ; greatly reduces popping caused by Sine wave cycle clipping
                      00603 #define OSC_TRANSITION_OUTPUT_THRESHOLD 0x04
                      00604 
                      00605 ; Audio input DC Bias measurement, 253 ADC sample average:
                      00606 ;   (VDD == 3.2V / 256 = 0.0125V per ADC increment)
                      00607 ;   on-board mic selected, MIC connceted      = 0x47 (@ VDD = 3.2V, 0x47 correlates to 0.8875V)
                      00608 ;   external mic selected, input floating     = 0x38 (@ VDD = 3.2V, 0x38 correlates to 0.7000V)
                      00609 ;   line-in selected, input floating          = 0x53 (@ VDD = 3.2V, 0x53 correlates to 1.0375V)
                      00610 ; Should have balanced these offsets in the hardware. oh well.
                      00611 ; Sine and Square outputs idle at 0x80, so compensate for difference in Sample bias to mitigate popping
                      00612 ; average of above measurement is 0x46, 0x80 - 0x46 = 0x3A
                      00613 ;#define SAMPLE_DC_OFFSET (PWM_IDLE_OUTPUT_VALUE - 0x46)
                      00614 ; DEBUG - sample dc offset will change with component tolerances.  need to set manually for each PCB
                      00615 ; measured 0.930V RMS, 0.930 / 0.0125 = 74.4
                      00616 #define SAMPLE_DC_OFFSET (PWM_IDLE_OUTPUT_VALUE - 74)
                      00617 
                      00618 ; define the time to wait from record button release to start of sample recording
                      00619 ; this is an attempt to eliminate the record button's physical noise from the sample
                      00620 ;   Calculation Method:
                      00621 ;     timer2 int period == 32uS
                      00622 ;     samplePrescaleCounter == 6
                      00623 ;     32uS * 6 = 192uS
                      00624 ;     RECORD_BUTTON_RELEASE_WAIT_TIME = waitTimeInMs / 0.192
                      00625 ;                 maxTime = 192uS * 256 = 49.152mS
                      00626 ;
                      00627 ; load for delay of 5mS. (5 / 0.192 = 26.0417)
                      00628 #define RECORD_BUTTON_RELEASE_WAIT_TIME 26
                      00629 
                      00630 ;**********************************************************************
                      00631 ; ENUM TYPE DEFINITIONS
                      00632 ;**********************************************************************
                      00633 
                      00634 ; waveShape
                      00635 #define SINE 0
                      00636 #define SQUARE 1
                      00637 #define SAMPLE 2
                      00638 
                      00639 ; recordOrPlayback
                      00640 #define VOICE_THROUGH 0
                      00641 #define RECORD 1
                      00642 #define PLAYBACK 2
                      00643 
                      00644 ; modeLevels
                      00645 #define POLY 0
                      00646 #define SUSTAIN 1
                      00647 #define MONO 2
                      00648 
                      00649 
                      00650 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00651 ; FLAG VARIABLE DEFINITIONS
                      00652 ;**********************************************************************
                      00653 
                      00654 ; midiFlags
                      00655 #define turnSoundOn 3
                      00656 #define turnSoundOff 4
                      00657 #define keyPressed 5
                      00658 #define soundOn 6
                      00659 
                      00660 ; soundGenFlags
                      00661 #define delegatorBusy 0
                      00662 #define pgDec 1
                      00663 #define needRefresh 2
                      00664 #define activeNoteTableModified 3
                      00665 
                      00666 ; oscResetFlags
                      00667 #define osc0    0
                      00668 #define osc1    1
                      00669 #define osc2    2
                      00670 #define osc3    3
                      00671 
                      00672 ; oscStateFlags
                      00673 #define release 0
                      00674 #define sustain 1
                      00675 #define decay 2
                      00676 #define attack 3
                      00677 
                      00678 
                      00679 ;**********************************************************************
                      00680 ; MACROS
                      00681 ;**********************************************************************
                      00682 
                      00683 ;**********************************************************************
                      00684 CLEAR_ACCUMULATORS      MACRO
                      00685         local   loop
                      00686 
                      00687         ; init local variables
                      00688         PUSH_R  r0
                      00689         PUSH_R  FSR0L
                      00690         PUSH_R  FSR0H
                      00691         
                      00692         ; load fsr
                      00693         lfsr    FSR0, accumulators
                      00694 
                      00695         ; init count
                      00696         movf    polyDepth, w, ACCESS
                      00697         movwf   r0, ACCESS
                      00698 loop    
                      00699         ; each accumulator is 4 bytes wide
                      00700         clrf    POSTINC0, ACCESS        
                      00701         clrf    POSTINC0, ACCESS        
                      00702         clrf    POSTINC0, ACCESS        
                      00703         clrf    POSTINC0, ACCESS        
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00704         ; decrement count, skip if done
                      00705         decfsz  r0, f, ACCESS
                      00706         bra             loop
                      00707 
                      00708         ; restore variables
                      00709         POP_R   FSR0H
                      00710         POP_R   FSR0L
                      00711         POP_R   r0
                      00712         
                      00713         ENDM
                      00714         
                      00715 
                      00716 ;**********************************************************************
                      00717 ENABLE_SUSTAIN  MACRO
                      00718         comf    oscResetFlags, w, ACCESS
                      00719         andlw   0x0f
                      00720         movwf   sustainFlags, ACCESS
                      00721         ENDM
                      00722         
                      00723 ;**********************************************************************
                      00724 DISABLE_SUSTAIN MACRO
                      00725         clrf    sustainFlags, ACCESS
                      00726         ENDM
                      00727 
                      00728 ;**********************************************************************
                      00729 REVERSE_SAMPLE_IF_MOD_OVER_63   MACRO
                      00730         local exitMacro
                      00731         ; if modulation > 63 then reverse sample
                      00732         movlw   63
                      00733         cpfsgt  modulation, ACCESS
                      00734         bra             exitMacro
                      00735         ; modulation > 63 so do nextSampleAddress = (sampleEndAddress - nextSampleAddress)
                      00736         movf    nextSampleAddress, w, ACCESS
                      00737         subwf   sampleEndAddress, w, ACCESS
                      00738         movwf   nextSampleAddress, ACCESS
                      00739         movf    nextSampleAddress + 1, w, ACCESS
                      00740         subwfb  sampleEndAddress + 1, w, ACCESS
                      00741         movwf   nextSampleAddress + 1, ACCESS
                      00742 exitMacro
                      00743         ENDM
                      00744 
                      00745 ;**********************************************************************
                      00746 OSC_READ_ADSR_FLAG      MACRO   FLAG
                      00747 ; oscillator number passed in WREG
                      00748 ; boolean value is returned in WREG and ZERO flag is set accordingly
                      00749 
                      00750         ; push working regs onto software stack
                      00751         PUSH_R  FSR0L
                      00752         PUSH_R  FSR0H
                      00753         
                      00754         ; load fsr
                      00755         lfsr    FSR0, oscStateFlags
                      00756         ; read the register into WREG
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00757         movf    PLUSW0, w, ACCESS
                      00758         andlw   1<<FLAG
                      00759         
                      00760         ; restore working regs from stack
                      00761         POP_R   FSR0H
                      00762         POP_R   FSR0L   
                      00763         
                      00764         ENDM
                      00765 
                      00766 ;**********************************************************************
                      00767 OSC_ADVANCE_ADSR        MACRO   OSC_NUMBER
                      00768         local   macroDone, doAttack, attackDone, doRelease, releaseDone
                      00769 
                      00770         ; ignore advance if oscillator is sustained
                      00771         btfsc   sustainFlags, OSC_NUMBER, ACCESS
                      00772         bra             macroDone
                      00773         
                      00774         btfsc   oscStateFlags + OSC_NUMBER, attack, ACCESS
                      00775         bra             doAttack
                      00776         btfsc   oscStateFlags + OSC_NUMBER, release, ACCESS
                      00777         bra             doRelease
                      00778         bra             macroDone
                      00779         
                      00780 doAttack
                      00781         ; osc is attacking
                      00782 
                      00783         ; test condition ((adsrLimiterRegs -= ADSR_ATTACK_RATE) <=0)
                      00784         movf    adsrAttackRate, w, ACCESS
                      00785         subwf   adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00786         bnc             attackDone
                      00787         bz              attackDone
                      00788 
                      00789         ; condition is FALSE so do the subtraction and exit
                      00790         ; (adsrLimiterRegs -= ADSR_ATTACK_RATE)
                      00791         movf    adsrAttackRate, w, ACCESS
                      00792         subwf   adsrLimiterRegs + OSC_NUMBER, f, ACCESS
                      00793         bra             macroDone
                      00794 
                      00795 attackDone
                      00796         ; clear attack flag
                      00797         bcf             oscStateFlags + OSC_NUMBER, attack, ACCESS
                      00798         clrf    adsrLimiterRegs + OSC_NUMBER, ACCESS
                      00799         bra     macroDone
                      00800 
                      00801 doRelease
                      00802         ; osc is releasing
                      00803 
                      00804         ; test condition: ((adsrLimiterRegs + ADSR_ATTACK_RATE) >= 255)
                      00805         movf    adsrReleaseRate, w, ACCESS
                      00806         addwf   adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00807         ; condition is TRUE so skip the addition and leave adsrLimiterRegs at its current value
                      00808         bc              releaseDone
                      00809         comf    WREG, w, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00810         ; condition is TRUE so skip the addition and leave adsrLimiterRegs at its current value
                      00811         bz              releaseDone
                      00812 
                      00813         ; condition is FALSE so do the addition and exit
                      00814         ; do (adsrLimiterRegs += ADSR_ATTACK_RATE)      
                      00815         movf    adsrReleaseRate, w, ACCESS
                      00816         addwf   adsrLimiterRegs + OSC_NUMBER, f, ACCESS
                      00817         bra             macroDone
                      00818         
                      00819 releaseDone
                      00820         ; clear release flag
                      00821         bcf             oscStateFlags + OSC_NUMBER, release, ACCESS
                      00822         ; set limit reg to max
                      00823         setf    adsrLimiterRegs + OSC_NUMBER, ACCESS
                      00824         ; clear oscillator's delegatedDelta
                      00825         clrf    delegatedDeltas + OSC_NUMBER * 2;
                      00826         clrf    delegatedDeltas + (OSC_NUMBER * 2) + 1; 
                      00827         bra     macroDone
                      00828         
                      00829 macroDone
                      00830         ENDM
                      00831         
                      00832 ;**********************************************************************
                      00833 OSC_MIX MACRO   OSC_NUMBER
                      00834         local   mixDone, mixDoPos, mixDoNeg, mixDoDone
                      00835                 
                      00836         ; check polarity of current activeOutputValue compared to PWM_IDLE_OUTPUT_VALUE
                      00837         movlw   PWM_IDLE_OUTPUT_VALUE
                      00838         subwf   activeOutputValues + OSC_NUMBER, w
                      00839         bnc             mixDoNeg
                      00840 mixDoPos
                      00841         ; WREG = adsrLimiterRegs/2
                      00842         bcf             STATUS, C, ACCESS
                      00843         rrcf    adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00844         subwf   activeOutputValues + OSC_NUMBER, w
                      00845         bra             mixDoDone
                      00846 mixDoNeg
                      00847         ; WREG = adsrLimiterRegs/2
                      00848         bcf             STATUS, C, ACCESS
                      00849         rrcf    adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00850         addwf   activeOutputValues + OSC_NUMBER, w      
                      00851 mixDoDone
                      00852         ; overflow indicates that last operation toggled bit 7
                      00853         btfsc   STATUS, OV, ACCESS
                      00854         movlw   PWM_IDLE_OUTPUT_VALUE
                      00855 
                      00856 mixDone
                      00857         ; add WREG to mixedOutputL/H
                      00858         addwf   mixedOutputL, f, ACCESS
                      00859         btfsc   STATUS, C, ACCESS
                      00860         incf    mixedOutputH, f, ACCESS
                      00861         
                      00862         ENDM
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00863 
                      00864 ;**********************************************************************
                      00865 OSC_STATE_BLOCK MACRO   OSC_NUMBER
                      00866         local   checkDelegating, oscCheckActive, zeroAcc, oscActive, waveIsSample, noTransition, oscChec
                            kNotSine
                      00867         local   clrSampleAcc, addressOk, waveIsNotSample, waveIsSine, waveIsSquare, tableAddressLoaded, 
                            resetOscillator, macroDone
                      00868                 
                      00869         ; if oscillator is locked for sustain then leave it alone
                      00870         btfsc   sustainFlags, OSC_NUMBER, ACCESS
                      00871         bra             oscActive
                      00872                         
                      00873 checkDelegating
                      00874         ; don't update if delegator is busy because delegatedDelta value is volatile
                      00875         btfsc   soundGenFlags, delegatorBusy, ACCESS
                      00876         ; delegator is busy so just keep spinning
                      00877         bra             oscCheckActive
                      00878         
                      00879         ; THRESHOLD METHOD WORKS WELL
                      00880         movlw   SINE
                      00881         cpfseq waveShape, ACCESS
                      00882         bra             oscCheckNotSine
                      00883         ; calculate absolute offset between PWM_IDLE_OUTPUT_VALUE and current activeOutputValue
                      00884         movlw   PWM_IDLE_OUTPUT_VALUE
                      00885         subwf   activeOutputValues + OSC_NUMBER, w
                      00886         ; invert if negative
                      00887         btfss   STATUS, C, ACCESS
                      00888         negf    WREG, ACCESS
                      00889         ; check if offset is below threshold value
                      00890         ; do (WREG = OSC_OUTPUT_GATE_THRESHOLD - WREG)
                      00891         sublw   OSC_TRANSITION_OUTPUT_THRESHOLD
                      00892         ; if result is positive then activeOutputValue offset from IDLE is <= THRESHOLD so allow changes
                      00893         bnc             oscCheckActive
                      00894 
                      00895 oscCheckNotSine
                      00896 
                      00897         ; delegator is idle and oscillator is enabled so copy delegated delta as internal
                      00898         movff   delegatedDeltas + (OSC_NUMBER * DELEGATED_DELTAS_ELEMENT_SIZE) + 0, oscDeltas + (OSC_NUM
                            BER * OSC_DELTAS_ELEMENT_SIZE) + 0
                      00899         movff   delegatedDeltas + (OSC_NUMBER * DELEGATED_DELTAS_ELEMENT_SIZE) + 1, oscDeltas + (OSC_NUM
                            BER * OSC_DELTAS_ELEMENT_SIZE) + 1
                      00900 
                      00901 oscCheckActive
                      00902         ; if oscDeltas[OSC_NUMBER] == 0x00 then oscillator is not really active so reset
                      00903         ; this check is required in event that (activeOutput == 0 && delegatorBusy == TRUE && oscDelta =
                            = 0)
                      00904         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, f
                      00905         bnz             oscActive
                      00906         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, f
                      00907         bz              resetOscillator
                      00908         
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00909 oscActive
                      00910         ; if oscillator is starting from reset state then begin with 0x0000 accumulator
                      00911         btfsc   oscResetFlags, OSC_NUMBER, ACCESS
                      00912         bra             zeroAcc
                      00913 
                      00914         ;**** start procedure: step Accumulator (SINE/SQUARE/SAMPLE) ****
                      00915         ; accumulator += activeNoteDelta
                      00916         ; accumulators are 4 bytes wide, activeNoteDeltas are 2 bytes wide
                      00917         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, w
                      00918         addwf   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
                      00919         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, w  
                      00920         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
                      00921         movlw   0
                      00922         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
                      00923         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                      00924         
                      00925 zeroAcc
                      00926         ; we're done with oscResetFlags flag so ensure that it's clear
                      00927         bcf             oscResetFlags, OSC_NUMBER, ACCESS
                      00928         
                      00929         ;**** start procedure: handle Pitch Wheel (SINE/SQUARE/SAMPLE) ****
                      00930         ; accumulator += pitchWheel
                      00931         movf    pitchWheel                                                                              
                                                                            + 0, w, ACCESS
                      00932         addwf   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
                      00933         movf    pitchWheel                                                                              
                                                                            + 1, w, ACCESS
                      00934         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
                      00935         movf    pitchWheel                                                                              
                                                                            + 2, w, ACCESS
                      00936         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
                      00937         movf    pitchWheel                                                                              
                                                                            + 3, w, ACCESS
                      00938         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                      00939         
                      00940         ;**** start procedure: if SAMPLE waveshape then load next read address  (SAMPLE ONLY) ****
                      00941         ; branch to waveform specific table address load
                      00942         movlw   SAMPLE
                      00943         cpfseq  waveShape, ACCESS
                      00944         bra             waveIsNotSample
                      00945 waveIsSample
                      00946 
                      00947         ; if samplesLoaded flag is set then load next EEPROM read address
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00948         ; checking this here as opposed to before accumulator update will, in the event of the mainline 
                            not…
                      00949         ; being able to load the samples in time, cause audio chopping rather than detuning
                      00950         btfss   eepromFlags, samplesLoaded, ACCESS
                      00951         bra             macroDone
                      00952         
                      00953         ; check for note transition
                      00954         ; keyPressed flag is set every time a MIDI Note On message is received
                      00955         ; when a sample is playing back in POLY or SUSTAIN modes, we want the sample to restart from the
                             beginning...
                      00956         ; whenever a Note On message is received.
                      00957         btfss   midiFlags, keyPressed, ACCESS
                      00958         bra             noTransition
                      00959         ; is modeLevel == POLY
                      00960         movlw   POLY
                      00961         xorwf   modeLevel, w, ACCESS
                      00962         ; mode is POLY so reset accumulator to restart sample from beginning
                      00963         bz              clrSampleAcc
                      00964 
                      00965 noTransition    
                      00966         ; nextSampleAddress = ((accumulator >> 8) & 0xffff)
                      00967         ; reset accumulator if nextSampleAddress value will exceed sampleEndAddress
                      00968         ; is waveTableIndex > sampleEndAddress?
                      00969         movf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, w
                      00970         subwf   sampleEndAddress, w, ACCESS
                      00971         movf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, w
                      00972         subwfb  sampleEndAddress + 1, w, ACCESS
                      00973         ; result is positive so waveTableIndex is within valid range
                      00974         bc              addressOk
                      00975         ; ((accumulator >> 8) & 0xffff) is out of valid sample range so restart sample from beginning
                      00976         ; reset accumulator
                      00977 clrSampleAcc
                      00978         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0
                      00979         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1
                      00980         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2
                      00981         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3
                      00982 addressOk
                      00983         
                      00984         ; do nextSampleAddress = ((accumulator >> 8) & 0xffff)
                      00985         movff   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, nextSampleAddresses + (OSC_NUMBER * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 0
                      00986         movff   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, nextSampleAddresses + (OSC_NUMBER * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 1
                      00987         
                      00988         bra             macroDone
                      00989         
                      00990 waveIsNotSample
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00991         ;**** start procedure: waveshape is SINE or SQUARE so read Program Memory table  (SINE/SQUARE ON
                            LY) ****
                      00992         ; branch to waveform specific table address load
                      00993         movlw   SINE
                      00994         cpfseq  waveShape, ACCESS
                      00995         bra             waveIsSquare
                      00996 
                      00997 waveIsSine      
                      00998         ; 
                      00999         ; load address of SINE table read
                      01000         ; offset = ((accumulator >> 8) & 0xff)
                      01001         movf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1, w
                      01002         addwf   sineTableBaseAddress + 0, w
                      01003         movwf   TBLPTRL, ACCESS
                      01004         movf    sineTableBaseAddress + 1, w
                      01005         btfsc   STATUS, C, ACCESS
                      01006         addlw   1
                      01007         movwf   TBLPTRH, ACCESS
                      01008         movf    sineTableBaseAddress + 2, w
                      01009         btfsc   STATUS, C, ACCESS
                      01010         addlw   1
                      01011         movwf   TBLPTRU, ACCESS
                      01012         bra             tableAddressLoaded
                      01013 
                      01014 waveIsSquare
                      01015         ; load address of SQUARE table read
                      01016         ; offset = ((accumulator >> 8) & 0xff)
                      01017         movf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1, w
                      01018         addwf   squareTableBaseAddress + 0, w
                      01019         movwf   TBLPTRL, ACCESS
                      01020         movf    squareTableBaseAddress + 1, w
                      01021         btfsc   STATUS, C, ACCESS
                      01022         addlw   1
                      01023         movwf   TBLPTRH, ACCESS
                      01024         movf    squareTableBaseAddress + 2, w
                      01025         btfsc   STATUS, C, ACCESS
                      01026         addlw   1
                      01027         movwf   TBLPTRU, ACCESS
                      01028 
                      01029 tableAddressLoaded
                      01030         ; read value from program memory
                      01031         tblrd*
                      01032         movff   TABLAT, activeOutputValues + (OSC_NUMBER * ACTIVE_OUTPUT_VALUES_EL_SIZE) + 0
                      01033         bra             macroDone
                      01034         
                      01035 resetOscillator
                      01036         ; set oscillator reset flag
                      01037         bsf             oscResetFlags, OSC_NUMBER, ACCESS
                      01038         movlw   PWM_IDLE_OUTPUT_VALUE
                      01039         movwf   activeOutputValues + (OSC_NUMBER * ACTIVE_OUTPUT_VALUES_EL_SIZE)
                      01040         clrf    oscDeltas + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE) + 0
                      01041         clrf    oscDeltas + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE) + 1
                      01042         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 0
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01043         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1
                      01044         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 2
                      01045         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 3
                      01046 
                      01047 macroDone
                      01048 
                      01049         ENDM
                      01050         
                      01051         
                      01052 #endif
                      01053 
                      01054 
                      00028         #include        "../header/userinterface.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      userinterface.h                                   *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef _USERINTERFACEH_
                      00022 #define _USERINTERFACEH_
                      00023 
                      00024 #define LEVEL_POLY_LED_BLINK_RATE               0
                      00025 #define LEVEL_SUSTAIN_LED_BLINK_RATE    2
                      00026 #define LEVEL_MONO_LED_BLINK_RATE               1
                      00027 
                      00028 ;**********************************************************************
                      00029 ; MACROS
                      00030 ;**********************************************************************
                      00031                                                         
                      00032 #ifndef THROUGH_HOLE_PCB
                      00033 
                      00034 #ifdef  LED_STEADY_STATE_DISABLED
                      00035 
                      00036 LED_SINE_ON     MACRO
                      00037 #ifndef LED_POLARITY_REVERSED
                      00038         bcf             ledOnOffFlags, RA5, ACCESS      ; LED is on
                      00039 #else
                      00040         bsf             ledOnOffFlags, RA5, ACCESS      ; LED is on
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00041 #endif
                      00042         ENDM
                      00043 
                      00044 LED_SQUARE_ON   MACRO
                      00045 #ifndef LED_POLARITY_REVERSED
                      00046         bcf             ledOnOffFlags, RC4, ACCESS      ; LED is on
                      00047 #else
                      00048         bsf             ledOnOffFlags, RC4, ACCESS      ; LED is on
                      00049 #endif
                      00050         ENDM
                      00051 
                      00052 LED_SAMPLE_ON   MACRO
                      00053 #ifndef LED_POLARITY_REVERSED
                      00054         bcf             ledOnOffFlags, RC3, ACCESS      ; LED is on
                      00055 #else
                      00056         bsf             ledOnOffFlags, RC3, ACCESS      ; LED is on
                      00057 #endif
                      00058         ENDM
                      00059 
                      00060 LED_SINE_OFF    MACRO
                      00061 #ifndef LED_POLARITY_REVERSED
                      00062         bsf             ledOnOffFlags, RA5, ACCESS      ; LED is off
                      00063 #else
                      00064         bcf             ledOnOffFlags, RA5, ACCESS      ; LED is off
                      00065 #endif
                      00066         ENDM
                      00067 
                      00068 LED_SQUARE_OFF  MACRO
                      00069 #ifndef LED_POLARITY_REVERSED
                      00070         bsf             ledOnOffFlags, RC4, ACCESS      ; LED is off
                      00071 #else
                      00072         bcf             ledOnOffFlags, RC4, ACCESS      ; LED is off
                      00073 #endif
                      00074         ENDM
                      00075 
                      00076 LED_SAMPLE_OFF  MACRO
                      00077 #ifndef LED_POLARITY_REVERSED
                      00078         bsf             ledOnOffFlags, RC3, ACCESS      ; LED is off
                      00079 #else
                      00080         bcf             ledOnOffFlags, RC3, ACCESS      ; LED is off
                      00081 #endif
                      00082         ENDM
                      00083 
                      00084 LED_SINE_TOGGLE MACRO
                      00085         btg             ledOnOffFlags, RA5, ACCESS      ; LED is toggled
                      00086         ENDM
                      00087 
                      00088 LED_SQUARE_TOGGLE       MACRO
                      00089         btg             ledOnOffFlags, RC4, ACCESS      ; LED is toggled
                      00090         ENDM
                      00091 
                      00092 LED_SAMPLE_TOGGLE       MACRO
                      00093         btg             ledOnOffFlags, RC3, ACCESS      ; LED is toggled
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00094         ENDM
                      00095 
                      00096 #else   ; #ifdef LED_STEADY_STATE_DISABLED
                      00097 
                      00098 LED_SINE_ON     MACRO
                      00099 #ifndef LED_POLARITY_REVERSED
                      00100         bcf             LATA, RA5, ACCESS       ; LED is on
                      00101 #else
                      00102         bsf             LATA, RA5, ACCESS       ; LED is on
                      00103 #endif
                      00104         ENDM
                      00105 
                      00106 LED_SQUARE_ON   MACRO
                      00107 #ifndef LED_POLARITY_REVERSED
                      00108         bcf             LATC, RC4, ACCESS       ; LED is on
                      00109 #else
                      00110         bsf             LATC, RC4, ACCESS       ; LED is on
                      00111 #endif
                      00112         ENDM
                      00113 
                      00114 LED_SAMPLE_ON   MACRO
                      00115 #ifndef LED_POLARITY_REVERSED
                      00116         bcf             LATC, RC3, ACCESS       ; LED is on
                      00117 #else
                      00118         bsf             LATC, RC3, ACCESS       ; LED is on
                      00119 #endif
                      00120         ENDM
                      00121 
                      00122 LED_SINE_OFF    MACRO
                      00123 #ifndef LED_POLARITY_REVERSED
                      00124         bsf             LATA, RA5, ACCESS       ; LED is off
                      00125 #else
                      00126         bcf             LATA, RA5, ACCESS       ; LED is off
                      00127 #endif
                      00128         ENDM
                      00129 
                      00130 LED_SQUARE_OFF  MACRO
                      00131 #ifndef LED_POLARITY_REVERSED
                      00132         bsf             LATC, RC4, ACCESS       ; LED is off
                      00133 #else
                      00134         bcf             LATC, RC4, ACCESS       ; LED is off
                      00135 #endif
                      00136         ENDM
                      00137 
                      00138 LED_SAMPLE_OFF  MACRO
                      00139 #ifndef LED_POLARITY_REVERSED
                      00140         bsf             LATC, RC3, ACCESS       ; LED is off
                      00141 #else
                      00142         bcf             LATC, RC3, ACCESS       ; LED is off
                      00143 #endif
                      00144         ENDM
                      00145 
                      00146 LED_SINE_TOGGLE MACRO
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00147         btg             LATA, RA5, ACCESS       ; LED is toggled
                      00148         ENDM
                      00149 
                      00150 LED_SQUARE_TOGGLE       MACRO
                      00151         btg             LATC, RC4, ACCESS       ; LED is toggled
                      00152         ENDM
                      00153 
                      00154 LED_SAMPLE_TOGGLE       MACRO
                      00155         btg             LATC, RC3, ACCESS       ; LED is toggled
                      00156         ENDM
                      00157 
                      00158 #endif  ; #ifdef LED_STEADY_STATE_DISABLED
                      00159 
                      00160 #else   ; #ifndef THROUGH_HOLE_PCB
                      00161 
                      00162 #ifdef  LED_STEADY_STATE_DISABLED
                      00163 
                      00164 LED_SINE_ON     MACRO
                      00165 #ifndef LED_POLARITY_REVERSED
                      00166         bcf             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00167 #else
                      00168         bsf             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00169 #endif
                      00170         ENDM
                      00171 
                      00172 LED_SQUARE_ON   MACRO
                      00173 #ifndef LED_POLARITY_REVERSED
                      00174         bcf             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00175 #else
                      00176         bsf             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00177 #endif
                      00178         ENDM
                      00179 
                      00180 LED_SAMPLE_ON   MACRO
                      00181 #ifndef LED_POLARITY_REVERSED
                      00182         bcf             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00183 #else
                      00184         bsf             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00185 #endif
                      00186         ENDM
                      00187 
                      00188 LED_SINE_OFF    MACRO
                      00189 #ifndef LED_POLARITY_REVERSED
                      00190         bsf             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00191 #else
                      00192         bcf             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00193 #endif
                      00194         ENDM
                      00195 
                      00196 LED_SQUARE_OFF  MACRO
                      00197 #ifndef LED_POLARITY_REVERSED
                      00198         bsf             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00199 #else
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00200         bcf             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00201 #endif
                      00202         ENDM
                      00203 
                      00204 LED_SAMPLE_OFF  MACRO
                      00205 #ifndef LED_POLARITY_REVERSED
                      00206         bsf             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00207 #else
                      00208         bcf             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00209 #endif
                      00210         ENDM
                      00211 
                      00212 LED_SINE_TOGGLE MACRO
                      00213         btg             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00214         ENDM
                      00215 
                      00216 LED_SQUARE_TOGGLE       MACRO
                      00217         btg             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00218         ENDM
                      00219 
                      00220 LED_SAMPLE_TOGGLE       MACRO
                      00221         btg             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00222         ENDM
                      00223         
                      00224 #else   ; #ifdef LED_STEADY_STATE_DISABLED
                      00225 
                      00226 LED_SINE_ON     MACRO
                      00227 #ifndef LED_POLARITY_REVERSED
                      00228         bcf             LATC, RC3, ACCESS       ; SINE LED
                      00229 #else
                      00230         bsf             LATC, RC3, ACCESS       ; SINE LED
                      00231 #endif
                      00232         ENDM
                      00233 
                      00234 LED_SQUARE_ON   MACRO
                      00235 #ifndef LED_POLARITY_REVERSED
                      00236         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                      00237 #else
                      00238         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                      00239 #endif
                      00240         ENDM
                      00241 
                      00242 LED_SAMPLE_ON   MACRO
                      00243 #ifndef LED_POLARITY_REVERSED
                      00244         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                      00245 #else
                      00246         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                      00247 #endif
                      00248         ENDM
                      00249 
                      00250 LED_SINE_OFF    MACRO
                      00251 #ifndef LED_POLARITY_REVERSED
                      00252         bsf             LATC, RC3, ACCESS       ; SINE LED
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00253 #else
                      00254         bcf             LATC, RC3, ACCESS       ; SINE LED
                      00255 #endif
                      00256         ENDM
                      00257 
                      00258 LED_SQUARE_OFF  MACRO
                      00259 #ifndef LED_POLARITY_REVERSED
                      00260         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                      00261 #else
                      00262         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                      00263 #endif
                      00264         ENDM
                      00265 
                      00266 LED_SAMPLE_OFF  MACRO
                      00267 #ifndef LED_POLARITY_REVERSED
                      00268         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                      00269 #else
                      00270         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                      00271 #endif
                      00272         ENDM
                      00273 
                      00274 LED_SINE_TOGGLE MACRO
                      00275         btg             LATC, RC3, ACCESS       ; SINE LED
                      00276         ENDM
                      00277 
                      00278 LED_SQUARE_TOGGLE       MACRO
                      00279         btg             LATC, RC4, ACCESS       ; SQUARE LED
                      00280         ENDM
                      00281 
                      00282 LED_SAMPLE_TOGGLE       MACRO
                      00283         btg             LATA, RA5, ACCESS       ; SAMPLE LED
                      00284         ENDM
                      00285 
                      00286 #endif  ; #ifdef LED_STEADY_STATE_DISABLED
                      00287 
                      00288 #endif  ; #ifndef THROUGH_HOLE_PCB
                      00289 
                      00290 LED_SINE_TOGGLE_OTHERS_OFF      MACRO
                      00291         LED_SINE_TOGGLE
                      00292         LED_SQUARE_OFF
                      00293         LED_SAMPLE_OFF
                      00294         ENDM
                      00295 
                      00296 LED_SQUARE_TOGGLE_OTHERS_OFF    MACRO
                      00297         LED_SINE_OFF
                      00298         LED_SQUARE_TOGGLE
                      00299         LED_SAMPLE_OFF
                      00300         ENDM
                      00301 
                      00302 LED_SAMPLE_TOGGLE_OTHERS_OFF    MACRO
                      00303         LED_SINE_OFF
                      00304         LED_SQUARE_OFF
                      00305         LED_SAMPLE_TOGGLE
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00306         ENDM
                      00307 
                      00308 LED_ALL_TOGGLE  MACRO
                      00309         LED_SINE_TOGGLE
                      00310         LED_SQUARE_TOGGLE
                      00311         LED_SAMPLE_TOGGLE
                      00312         ENDM
                      00313 
                      00314 LED_ALL_ON      MACRO
                      00315         LED_SINE_ON
                      00316         LED_SQUARE_ON
                      00317         LED_SAMPLE_ON
                      00318         ENDM
                      00319 
                      00320 LED_ALL_OFF     MACRO
                      00321         LED_SINE_OFF
                      00322         LED_SQUARE_OFF
                      00323         LED_SAMPLE_OFF
                      00324         ENDM
                      00325 
                      00326 LED_ONLY_SINE_ON        MACRO
                      00327         LED_SINE_ON
                      00328         LED_SQUARE_OFF
                      00329         LED_SAMPLE_OFF
                      00330         ENDM
                      00331 
                      00332 LED_ONLY_SQUARE_ON      MACRO
                      00333         LED_SINE_OFF
                      00334         LED_SQUARE_ON
                      00335         LED_SAMPLE_OFF
                      00336         ENDM
                      00337 
                      00338 LED_ONLY_SAMPLE_ON      MACRO
                      00339         LED_SINE_OFF
                      00340         LED_SQUARE_OFF
                      00341         LED_SAMPLE_ON
                      00342         ENDM
                      00343 
                      00344 #endif  ; #ifndef _USERINTERFACEH_
                      00345 
                      00029 
                      00030 ;**********************************************************************
                      00031 ; DEFINITIONS
                      00032 ;**********************************************************************
                      00033         
                      00034 ;**********************************************************************
                      00035 ; LOCAL VARIABLES
                      00036 ;********************************************************************** 
                      00037 
                      00038 ;**********************************************************************
                      00039 ; LOCAL MACROS
                      00040 ;********************************************************************** 
                      00041 INC_PRESCALE_COUNTERS MACRO
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00042         ; increment prescale counters, clear on match with SAMPLE_PRESCALE or WAVE_PRESCALE
                      00043         incf    samplePrescaleCounter, f, ACCESS
                      00044         movlw   SAMPLE_PRESCALE
                      00045         cpfslt  samplePrescaleCounter, ACCESS   
                      00046         clrf    samplePrescaleCounter, ACCESS
                      00047 
                      00048         incf    wavePrescaleCounter, f, ACCESS
                      00049         movlw   WAVE_PRESCALE
                      00050         cpfslt  wavePrescaleCounter, ACCESS
                      00051         clrf    wavePrescaleCounter, ACCESS
                      00052         
                      00053         ; adsrPrescaleCounter reset is handled by serviceADSR()
                      00054         incf    adsrPrescaleCounter + 0, f, ACCESS
                      00055         btfsc   STATUS, C, ACCESS
                      00056         incf    adsrPrescaleCounter + 1, f, ACCESS
                      00057         
                      00058         ENDM
                      00059         
                      00060 ;**********************************************************************
                      00061 ; High Priority Interrupts Service Routines
                      00062 ;**********************************************************************
                      00063 
00004C                00064 highPriorityISR
                      00065         ; Using fast return for high-priority interrupts so context saving is not necessary
                      00066         ; push working regs onto software stack
                      00067         PUSH_R  r0
00004C C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00068         PUSH_R  r1
000050 C004 FFDD          M         movff   r1,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00069         ; define variables to pushed registers
                      00070         #define address         r0
                      00071         #define tmpValue        r1
                      00072         
                      00073         ;**********************************************************************
                      00074         ; ****************
                      00075         ; **** Timer2 ****
                      00076         ; ****************
                      00077 
                      00078         ;**** start procedure: check if Timer2 interrupt needs servicing ****
                      00079         ; is Timer2 interrupt flag set?
000054 A29E           00080         btfss   PIR1, TMR2IF, ACCESS
000056 EF?? F???      00081         goto    highPriorityISR_Timer2Done
                      00082 
                      00083         ; clear Timer2 interrupt flag
                      00084         ; this will allow function to determine if another interrupt occurred during processing
                      00085         ; this is applicable for sample record routine which I suspect takes > 1 Timer2 interrupt period
                             to complete
                      00086         ; haven't tested this yet but code to handle event fixes sample record/playback rate disparity
00005A 929E           00087         bcf             PIR1, TMR2IF, ACCESS
                      00088 
                      00089 #ifdef  LED_STEADY_STATE_DISABLED
                      00090         ; toggle ON LEDs to save precious mA.  Saves ~4mA over steady state current for single LED
                      00091         btfss   ledOnOffFlags, RA5, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00092         btg             LATA, RA5, ACCESS       ; SINE LED
                      00093         btfsc   ledOnOffFlags, RA5, ACCESS
                      00094         bcf             LATA, RA5, ACCESS       ; SINE LED
                      00095         
                      00096         btfss   ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00097         btg             LATC, RC4, ACCESS       ; SQUARE LED
                      00098         btfsc   ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00099         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                      00100         
                      00101         btfss   ledOnOffFlags, RC3, ACCESS      ; SAMPLE LED
                      00102         btg             LATC, RC3, ACCESS       ; SAMPLE LED
                      00103         btfsc   ledOnOffFlags, RC3, ACCESS      ; SAMPLE LED
                      00104         bcf             LATC, RC3, ACCESS       ; SAMPLE LED    
                      00105 #endif
                      00106 
                      00107         ; process SAMPLE or WAVE prescale counter
                      00108         ; audio playback/sample clock is (PWM Base Clk / SAMPLE_PRESCALE)
                      00109         ; waveform playback clock is (PWM Base Clk / WAVE_PRESCALE)
                      00110         ; wait for appropriate prescale counter to be reset to 0 before processing next sound step
                      00111         ; is current mode SAMPLE? 
00005C 0E02           00112         movlw   SAMPLE
00005E 181F           00113         xorwf   waveShape, w, ACCESS
                      00114         ; not SAMPLE so check wavePrescale
000060 E1??           00115         bnz             highPriorityISRTimer2_prescaleNotSample
                      00116         ; is SAMPLE so check samplePrescale
000062 5222           00117         movf    samplePrescaleCounter, f, ACCESS
000064 E0??           00118         bz              highPriorityISRTimer2_prescaleOK
000066 EF?? F???      00119         goto    highPriorityISRTimer2_skipStep
                      00120 
                      00121         ; playback mode is SINE or SQUARE wave so wait for wavePrescale counter to be reset to 0 before 
                            continuing
Warning[208]: Label truncated at 32 characters. (highPriorityISRTimer2_prescaleNotSample)
00006A                00122 highPriorityISRTimer2_prescaleNotSample
00006A 5223           00123         movf    wavePrescaleCounter, f, ACCESS
00006C E0??           00124         bz              highPriorityISRTimer2_prescaleOK
00006E EF?? F???      00125         goto    highPriorityISRTimer2_skipStep
000072                00126 highPriorityISRTimer2_prescaleOK
                      00127 
000072 EC?? F???      00128         call    processSoundState       
                      00129 
                      00130         ; if Timer2 interrupt flag is set then clear it and increment prescale counters twice
000076 A29E           00131         btfss   PIR1, TMR2IF, ACCESS
000078 D???           00132         bra             highPriorityISRTimer2_skipStep
                      00133         
                      00134         ; clear the flag
00007A 929E           00135         bcf             PIR1, TMR2IF, ACCESS
                      00136         
                      00137         ; increment prescale counters, clear on match with SAMPLE_PRESCALE, WAVE_PRESCALE or ADSR_PRESCA
                            LE
                      00138         INC_PRESCALE_COUNTERS
                          M         ; increment prescale counters, clear on match with SAMPLE_PRESCALE or WAVE_PRESCALE
00007C 2A22               M         incf    samplePrescaleCounter, f, ACCESS
00007E 0E06               M         movlw   SAMPLE_PRESCALE
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000080 6022               M         cpfslt  samplePrescaleCounter, ACCESS   
000082 6A22               M         clrf    samplePrescaleCounter, ACCESS
                          M 
000084 2A23               M         incf    wavePrescaleCounter, f, ACCESS
000086 0E02               M         movlw   WAVE_PRESCALE
000088 6023               M         cpfslt  wavePrescaleCounter, ACCESS
00008A 6A23               M         clrf    wavePrescaleCounter, ACCESS
                          M         
                          M         ; adsrPrescaleCounter reset is handled by serviceADSR()
00008C 2A3A               M         incf    adsrPrescaleCounter + 0, f, ACCESS
00008E B0D8               M         btfsc   STATUS, C, ACCESS
000090 2A3B               M         incf    adsrPrescaleCounter + 1, f, ACCESS
                          M         
                      00139 
000092                00140 highPriorityISRTimer2_skipStep
                      00141         ; increment prescale counters, clear on match with SAMPLE_PRESCALE, WAVE_PRESCALE or ADSR_PRESCA
                            LE
                      00142         INC_PRESCALE_COUNTERS
                          M         ; increment prescale counters, clear on match with SAMPLE_PRESCALE or WAVE_PRESCALE
000092 2A22               M         incf    samplePrescaleCounter, f, ACCESS
000094 0E06               M         movlw   SAMPLE_PRESCALE
000096 6022               M         cpfslt  samplePrescaleCounter, ACCESS   
000098 6A22               M         clrf    samplePrescaleCounter, ACCESS
                          M 
00009A 2A23               M         incf    wavePrescaleCounter, f, ACCESS
00009C 0E02               M         movlw   WAVE_PRESCALE
00009E 6023               M         cpfslt  wavePrescaleCounter, ACCESS
0000A0 6A23               M         clrf    wavePrescaleCounter, ACCESS
                          M         
                          M         ; adsrPrescaleCounter reset is handled by serviceADSR()
0000A2 2A3A               M         incf    adsrPrescaleCounter + 0, f, ACCESS
0000A4 B0D8               M         btfsc   STATUS, C, ACCESS
0000A6 2A3B               M         incf    adsrPrescaleCounter + 1, f, ACCESS
                          M         
                      00143                 
                      00144 
0000A8                00145 highPriorityISR_Timer2Done
                      00146 
                      00147 
                      00148         ;**********************************************************************
                      00149         ; **************
                      00150         ; **** INT0 ****
                      00151         ; **************
                      00152 
                      00153         ; if(INT0IF)
0000A8 A2F2           00154         btfss   INTCON, INT0IF, ACCESS
0000AA EF?? F???      00155         goto    highPriorityISR_INT0Done
                      00156 
                      00157         ;       INT0IF = 0;
0000AE 92F2           00158         bcf             INTCON, INT0IF, ACCESS
                      00159 
                      00160 #ifndef THROUGH_HOLE_PCB
                      00161         call    userInterface_incWaveform
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00162 #else
                      00163         ; if waveShape != SAMPLE && record button is pressed then save current state to eeprom as defaul
                            t (power-up)
0000B0 0E02           00164         movlw   SAMPLE
0000B2 181F           00165         xorwf   waveShape, w, ACCESS
                      00166         ; waveShape == SAMPLE so incMode
0000B4 E0??           00167         bz              highPriorityISR_INT0_incMode
                      00168         ; waveShape != SAMPLE so check if Record button is pressed
0000B6 0E02           00169         movlw   1<<RC1
0000B8 1482           00170         andwf   PORTC, w, ACCESS
                      00171         ; remember that logic is active-low
                      00172         ; if result != 0 then button is not pressed so incMode
0000BA E1??           00173         bnz             highPriorityISR_INT0_incMode
                      00174         ; Record button is pressed so write current state to EEPROM
                      00175         ; write midiChannel to EEPROM and exit
                      00176         WRITE_INTERNAL_EEPROM   3, adsrAttackRate
  0000                    M         local   writeIntEE_loop
                          M         
                          M         ; load address
0000BC 0E03               M         movlw   3
0000BE 6EA9               M         movwf   EEADR, ACCESS
                          M         ; load value
0000C0 C038 FFA8          M         movff   adsrAttackRate, EEDATA
                          M         ; configure eeprom
                          M         ; point to EEPROM DATA memory
0000C4 9EA6               M         bcf             EECON1, EEPGD, ACCESS
                          M         ; Access EEPROM/Program
0000C6 9CA6               M         bcf             EECON1, CFGS, ACCESS    
                          M         ; Enable writes
0000C8 84A6               M         bsf             EECON1, WREN, ACCESS
                          M 
                          M         ; don't have to disable interrupts because I'm only calling this
                          M         ; from within the high-priority ISR
                          M 
                          M         ; required write enable sequence
0000CA 0E55               M         movlw   0x55
0000CC 6EA7               M         movwf   EECON2, ACCESS
0000CE 0EAA               M         movlw   0xAA
0000D0 6EA7               M         movwf   EECON2, ACCESS
                          M 
                          M         ; set WR bit to begin write
0000D2 82A6               M         bsf             EECON1, WR, ACCESS
0000D4                    M writeIntEE_loop
                          M         ; wait for write to complete
0000D4 B2A6               M         btfsc   EECON1, WR, ACCESS
0000D6 D???               M         bra             writeIntEE_loop
                          M         ; disable writes
0000D8 94A6               M         bcf             EECON1, WREN, ACCESS
                          M 
                          M         ; point to Program memory
0000DA 8EA6               M         bsf             EECON1, EEPGD, ACCESS
                          M 
                      00177         WRITE_INTERNAL_EEPROM   4, adsrReleaseRate
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M         local   writeIntEE_loop
                          M         
                          M         ; load address
0000DC 0E04               M         movlw   4
0000DE 6EA9               M         movwf   EEADR, ACCESS
                          M         ; load value
0000E0 C039 FFA8          M         movff   adsrReleaseRate, EEDATA
                          M         ; configure eeprom
                          M         ; point to EEPROM DATA memory
0000E4 9EA6               M         bcf             EECON1, EEPGD, ACCESS
                          M         ; Access EEPROM/Program
0000E6 9CA6               M         bcf             EECON1, CFGS, ACCESS    
                          M         ; Enable writes
0000E8 84A6               M         bsf             EECON1, WREN, ACCESS
                          M 
                          M         ; don't have to disable interrupts because I'm only calling this
                          M         ; from within the high-priority ISR
                          M 
                          M         ; required write enable sequence
0000EA 0E55               M         movlw   0x55
0000EC 6EA7               M         movwf   EECON2, ACCESS
0000EE 0EAA               M         movlw   0xAA
0000F0 6EA7               M         movwf   EECON2, ACCESS
                          M 
                          M         ; set WR bit to begin write
0000F2 82A6               M         bsf             EECON1, WR, ACCESS
0000F4                    M writeIntEE_loop
                          M         ; wait for write to complete
0000F4 B2A6               M         btfsc   EECON1, WR, ACCESS
0000F6 D???               M         bra             writeIntEE_loop
                          M         ; disable writes
0000F8 94A6               M         bcf             EECON1, WREN, ACCESS
                          M 
                          M         ; point to Program memory
0000FA 8EA6               M         bsf             EECON1, EEPGD, ACCESS
                          M 
                      00178         ; cancel voice-through mode to signal write action
0000FC 0E02           00179         movlw   PLAYBACK
0000FE 6E20           00180         movwf   recordOrPlayback, ACCESS
000100 0E80           00181         movlw   PWM_IDLE_OUTPUT_VALUE
000102 6EBE           00182         movwf   CCPR1L, ACCESS  
                      00183         ; skip increment
000104 D???           00184         bra             highPriorityISR_INT0Done
                      00185         
000106                00186 highPriorityISR_INT0_incMode
                      00187         ; else increment mode
000106 EC?? F???      00188         call    userInterface_incMode
                      00189 #endif
                      00190         
00010A                00191 highPriorityISR_INT0Done
                      00192 
                      00193         ; undefine variables from pushed registers
                      00194         #undefine       address
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00195         #undefine       tmpValue
                      00196         ; pop working regs from software stack
                      00197         POP_R   r1
00010A CFDC F004          M         movff   softwareStackPointerPREINC, r1          ; ++softwareStackPointerINDF = regName
                      00198         POP_R   r0
00010E CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00199         ; Using fast return for high-priority interrupts so context saving is not necessary
000112 0011           00200         retfie  FAST
                      00201 
                      00202         
                      00203 ;**********************************************************************
                      00204 ; Low Priority Interrupts Service Routines
                      00205 ;**********************************************************************
                      00206 
000114                00207 lowPriorityISR
                      00208         ; save context
000114 6E00           00209         movwf   wTmp, ACCESS
000116 CFD8 F001      00210         movff   STATUS, statusTmp
00011A CFE0 F002      00211         movff   BSR, bsrTmp
                      00212 
                      00213         ; push working regs onto software stack
                      00214         PUSH_R  r0
00011E C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00215         ; define variables for pushed registers
                      00216         #define tmpValue        r0
                      00217 
                      00218         ;**********************************************************************
                      00219         ; **************
                      00220         ; **** UART ****
                      00221         ; **************
                      00222 
                      00223         ; if(RCIF)
000122 BA9E           00224         btfsc   PIR1, RCIF, ACCESS
000124 EC?? F???      00225         call    processRxAsMIDI
                      00226 
                      00227 
                      00228         ;**********************************************************************
                      00229         ; **************
                      00230         ; **** INT1 ****
                      00231         ; **************
                      00232 
                      00233         ; if(INT1IE && INT1IF)
000128 A6F0           00234         btfss   INTCON3, INT1IE, ACCESS
00012A EF?? F???      00235         goto    lowPriorityISR_INT1Done
00012E A0F0           00236         btfss   INTCON3, INT1IF, ACCESS
000130 EF?? F???      00237         goto    lowPriorityISR_INT1Done
                      00238 
                      00239         ;       INT1IF = 0;
000134 90F0           00240         bcf             INTCON3, INT1IF, ACCESS
                      00241 
                      00242         ;       recordOrPlayback = VOICE_THROUGH;
000136 0E00           00243         movlw   VOICE_THROUGH
000138 6E20           00244         movwf   recordOrPlayback, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00245 
                      00246         ; eliminate record switch noise by waiting for it to stop bouncing before dumping data to eeprom
                      00247         ; after record button is released, processSoundState() will begin decrementing recordWaitCountdo
                            wn...
                      00248         ; and not begin recording until recordWaitCountdown == 0
                      00249 
00013A 0E1A           00250         movlw   RECORD_BUTTON_RELEASE_WAIT_TIME
00013C 6E3C           00251         movwf   recordWaitCountdown, ACCESS
                      00252         
                      00253         ;       sampleDataBufferIndex = 0;
00013E 6A12           00254         clrf    sampleDataBufferIndex, ACCESS           
                      00255         ;       sampleChunkCount = 0;
000140 6A13           00256         clrf    sampleChunkCount, ACCESS
                      00257         ;       sampleChunkReady = FALSE;
000142 9018           00258         bcf             eepromFlags, sampleChunkReady, ACCESS
                      00259         
000144                00260 lowPriorityISR_INT1Done
                      00261 
                      00262         ;**********************************************************************
                      00263         ; **************
                      00264         ; **** INT2 ****
                      00265         ; **************
                      00266 
                      00267         ; if(INT2IE && INT2IF)
000144 A8F0           00268         btfss   INTCON3, INT2IE, ACCESS
000146 EF?? F???      00269         goto    lowPriorityISR_INT2Done
00014A A2F0           00270         btfss   INTCON3, INT2IF, ACCESS
00014C EF?? F???      00271         goto    lowPriorityISR_INT2Done
                      00272 
                      00273         ;       INT2IF = 0;
000150 92F0           00274         bcf             INTCON3, INT2IF, ACCESS
                      00275 
                      00276 #ifndef THROUGH_HOLE_PCB
                      00277         call    userInterface_incMode
                      00278 #else
000152 EC?? F???      00279         call    userInterface_incWaveform
                      00280 #endif
                      00281         
000156                00282 lowPriorityISR_INT2Done
                      00283 
                      00284         ;**********************************************************************
                      00285         ; ****************
                      00286         ; **** TIMER0 ****
                      00287         ; ****************
                      00288         ;
                      00289         ; Timer0 handles LED state updates based on current waveShape and mode
                      00290                 
                      00291         ; if(TMR0IE && TMR0IF)
000156 AAF2           00292         btfss   INTCON, TMR0IE, ACCESS
000158 EF?? F???      00293         goto    lowPriorityISR_TMR0Done
00015C A4F2           00294         btfss   INTCON, TMR0IF, ACCESS
00015E EF?? F???      00295         goto    lowPriorityISR_TMR0Done
                      00296 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000162 94F2           00297         bcf             INTCON, TMR0IF, ACCESS
                      00298                 
                      00299         ; if playbackOrRecord == VOICE_THROUGH or RECORD, then turn all LEDs ON
000164 0E00           00300         movlw   VOICE_THROUGH
000166 1820           00301         xorwf   recordOrPlayback, w, ACCESS
000168 E0??           00302         bz              lowPriorityISR_TMR0AllOn
00016A 0E01           00303         movlw   RECORD
00016C 1820           00304         xorwf   recordOrPlayback, w, ACCESS
00016E E1??           00305         bnz             lowPriorityISR_TMR0NotAllOn
000170                00306 lowPriorityISR_TMR0AllOn
                      00307         LED_ALL_ON      
                          M         LED_SINE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
000170 868B               M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
000172 888B               M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
000174 8A89               M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
000176 D???           00308         bra             lowPriorityISR_TMR0Done
                      00309 
000178                00310 lowPriorityISR_TMR0NotAllOn
                      00311         ; check if waveShape == SINE
000178 0E00           00312         movlw   SINE
00017A 621F           00313         cpfseq  waveShape, ACCESS
00017C D???           00314         bra             lowPriorityISR_TMR0TrySq
                      00315 
                      00316         ; waveShape == SINE
                      00317         ; if ledBlinkRate == 0 then LED is steady state
00017E 523D           00318         movf    ledBlinkRate, f, ACCESS
000180 E1??           00319         bnz             lowPriorityISR_TMR0SiBlink
                      00320         ; led is steady state
                      00321         LED_ONLY_SINE_ON
                          M         LED_SINE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
000182 868B               M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000184 988B               M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
000186 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
000188 D???           00322         bra             lowPriorityISR_TMR0Done
00018A                00323 lowPriorityISR_TMR0SiBlink
                      00324         ; led is blinking
00018A 2E3E           00325         decfsz  ledBlinkCounter, f, ACCESS
00018C D???           00326         bra             lowPriorityISR_TMR0Done
                      00327         ; toggle the LED
                      00328         LED_SINE_TOGGLE_OTHERS_OFF
                          M         LED_SINE_TOGGLE
00018E 768B               M         btg             LATC, RC3, ACCESS       ; SINE LED
                          M         LED_SQUARE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
000190 988B               M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
000192 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
                      00329         ; reload the counter
000194 C03D F03E      00330         movff   ledBlinkRate, ledBlinkCounter   
000198 D???           00331         bra             lowPriorityISR_TMR0Done
                      00332 
00019A                00333 lowPriorityISR_TMR0TrySq
                      00334         ; waveShape is != SINE so check if waveShape == SQUARE
00019A 0E01           00335         movlw   SQUARE
00019C 621F           00336         cpfseq  waveShape, ACCESS
00019E D???           00337         bra             lowPriorityISR_TMR0TrySa
                      00338 
                      00339         ; waveShape == SQUARE
                      00340         ; if ledBlinkRate == 0 then LED is steady state
0001A0 523D           00341         movf    ledBlinkRate, f, ACCESS
0001A2 E1??           00342         bnz             lowPriorityISR_TMR0SqBlink
                      00343         ; led is steady state
                      00344         LED_ONLY_SQUARE_ON
                          M         LED_SINE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
0001A4 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_ON
                          M #ifndef LED_POLARITY_REVERSED
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
0001A6 888B               M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
0001A8 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
0001AA D???           00345         bra             lowPriorityISR_TMR0Done
0001AC                00346 lowPriorityISR_TMR0SqBlink
                      00347         ; led is blinking
0001AC 2E3E           00348         decfsz  ledBlinkCounter, f, ACCESS
0001AE D???           00349         bra             lowPriorityISR_TMR0Done
                      00350         ; toggle the LED
                      00351         LED_SQUARE_TOGGLE_OTHERS_OFF
                          M         LED_SINE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
0001B0 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_TOGGLE
0001B2 788B               M         btg             LATC, RC4, ACCESS       ; SQUARE LED
                          M         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
0001B4 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
                      00352         ; reload the counter
0001B6 C03D F03E      00353         movff   ledBlinkRate, ledBlinkCounter   
0001BA D???           00354         bra             lowPriorityISR_TMR0Done
                      00355 
0001BC                00356 lowPriorityISR_TMR0TrySa
                      00357         ; waveShape is != SQUARE so assume that waveShape == SQUARE
                      00358         ; if ledBlinkRate == 0 then LED is steady state
0001BC 523D           00359         movf    ledBlinkRate, f, ACCESS
0001BE E1??           00360         bnz             lowPriorityISR_TMR0SaBlink
                      00361         ; led is steady state
                      00362         LED_ONLY_SAMPLE_ON
                          M         LED_SINE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
0001C0 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
0001C2 988B               M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M #endif
                          M         LED_SAMPLE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
0001C4 8A89               M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
0001C6 D???           00363         bra             lowPriorityISR_TMR0Done
0001C8                00364 lowPriorityISR_TMR0SaBlink
                      00365         ; led is blinking
0001C8 2E3E           00366         decfsz  ledBlinkCounter, f, ACCESS
0001CA D???           00367         bra             lowPriorityISR_TMR0Done
                      00368         ; toggle the LED
                      00369         LED_SAMPLE_TOGGLE_OTHERS_OFF
                          M         LED_SINE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
0001CC 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
0001CE 988B               M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_TOGGLE
0001D0 7A89               M         btg             LATA, RA5, ACCESS       ; SAMPLE LED
                      00370         ; reload the counter
0001D2 C03D F03E      00371         movff   ledBlinkRate, ledBlinkCounter   
0001D6 D???           00372         bra             lowPriorityISR_TMR0Done
                      00373 
0001D8                00374 lowPriorityISR_TMR0Done
                      00375 
                      00376         ; undefine variables from pushed registers
                      00377         #undefine       tmpValue
                      00378         ; pop working regs from software stack
                      00379         POP_R   r0
0001D8 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00380 
                      00381         ; restore context
0001DC C002 FFE0      00382         movff   bsrTmp, BSR
0001E0 5000           00383         movf    wTmp, w, ACCESS
0001E2 C001 FFD8      00384         movff   statusTmp, STATUS
                      00385         
                      00386         ; return from interrupt
0001E6 0010           00387         retfie
                      00388         
                      00389         
                      00390         
                      00178 
                      00179         
                      00180 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00181 ; MAINLINE CODE BEGIN
                      00182 ;**********************************************************************
                      00183 
0001E8                00184 main
                      00185         ; all variables aside from softwareStack are in RAM BANK 0
                      00186         ; all single byte or 2-byte variables are in ACCESS RAM
0001E8 0100           00187         BANKSEL 0
                      00188 
                      00189         ; dummy instruction to check "endOfVariables" location in disassembly
0001EA                00190 dummy_endOfVariables
0001EA CFE8 F040      00191         movff   WREG, endOfVariables
                      00192         
0001EE EC?? F???      00193         call    initCore
0001F2 EC?? F???      00194         call    initInternalEEPROM
0001F6 EC?? F???      00195         call    initExternalEEPROM
0001FA EC?? F???      00196         call    initMIDI
0001FE EC?? F???      00197         call    initSoundGen
000202 EC?? F???      00198         call    initUserInterface
                      00199 
000206 EC?? F???      00200         call    userInterface_checkConfigRequest
                      00201         
                      00202         ; enable global interrupts
00020A 8EF2           00203         bsf             INTCON, GIE, ACCESS
                      00204         
00020C                00205 mainLoop        
                      00206         
                      00207         ; handle EEPROM reading / writing in mainline to minimize audio corruption
                      00208         ;
                      00209         ; check if waveShape is == SAMPLE
00020C 0E02           00210         movlw   SAMPLE
00020E 621F           00211         cpfseq  waveShape, ACCESS
000210 D???           00212         bra             mainNotSample
                      00213 
                      00214         ; if sampleChunkReady is set then write sampleDataBuffer to EEPROM
                      00215         ; ISR sets playback mode to PLAYBACK immediately after last chunk is complete...
                      00216         ; so always just write EEPROM when sampleChunkReady is set
000212 A018           00217         btfss   eepromFlags, sampleChunkReady, ACCESS
000214 D???           00218         bra             mainCheckPlayback
                      00219         ; flag is set so write it to EEPROM
000216 EC?? F???      00220         call    eepromWrite64
                      00221 
                      00222         ; clear the flag so that we know when next chunk is ready to go
00021A 9018           00223         bcf             eepromFlags, sampleChunkReady, ACCESS
00021C D???           00224         bra             mainNotSample
                      00225                 
00021E                00226 mainCheckPlayback
                      00227         ; check if mode is PLAYBACK
00021E 0E02           00228         movlw   PLAYBACK
000220 6220           00229         cpfseq  recordOrPlayback, ACCESS
000222 D???           00230         bra             mainNotSample
                      00231 ;       if((soundOn || turnSoundOn) && (waveShape == SAMPLE) && !sampleReady)
000224 BC11           00232         btfsc   midiFlags, soundOn, ACCESS
000226 D???           00233         bra             mainCheckSampleWaveshape
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000228 A611           00234         btfss   midiFlags, turnSoundOn, ACCESS
00022A D???           00235         bra             mainNotSample
00022C                00236 mainCheckSampleWaveshape
00022C B218           00237         btfsc   eepromFlags, samplesLoaded, ACCESS
00022E D???           00238         bra             mainNotSample
                      00239 
                      00240         ; check if EEPROM is ready to read
000230 B618           00241         btfsc   eepromFlags, ready, ACCESS
000232 D???           00242         bra             mainEepromReady
                      00243         ; eeprom is not ready so reset activeOutputValues
000234 0E80           00244         movlw   PWM_IDLE_OUTPUT_VALUE
000236 6FE2           00245         movwf   activeOutputValues + 0
000238 6FE3           00246         movwf   activeOutputValues + 1
00023A 6FE4           00247         movwf   activeOutputValues + 2
00023C 6FE5           00248         movwf   activeOutputValues + 3
                      00249         ; last time we checked, EEPROM wasn't ready so check it again
00023E EC?? F???      00250         call    eepromReadStatusReg
                      00251         ; WREG = EEPROM Status Reg, (eepromFlags, ready) = (STATUS, !(NOT_READY))
000242 B0E8           00252         btfsc   WREG, NOT_RDY, ACCESS
                      00253         ; NOT_READY bit in EEPROM Status register is set so don't do EEPROM read
000244 D???           00254         bra             mainNotSample
                      00255         ; NOT_READY bit in EEPROM Status register is clear so set 'ready' flag and read the eeprom
000246 8618           00256         bsf             eepromFlags, ready, ACCESS
                      00257         
000248                00258 mainEepromReady
                      00259         ; get sample(s)
000248 C0B2 F016      00260         movff   nextSampleAddresses + 0, nextSampleAddress
00024C C0B3 F017      00261         movff   nextSampleAddresses + 1, nextSampleAddress + 1
                      00262         ; it pains me to put this sample address reversal code here as a macro but...
                      00263         ; but can't spare the cycles in processSoundState() to modify nextSampleAddress
                      00264         REVERSE_SAMPLE_IF_MOD_OVER_63
  0000                    M         local exitMacro
                          M         ; if modulation > 63 then reverse sample
000250 0E3F               M         movlw   63
000252 641E               M         cpfsgt  modulation, ACCESS
000254 D???               M         bra             exitMacro
                          M         ; modulation > 63 so do nextSampleAddress = (sampleEndAddress - nextSampleAddress)
000256 5016               M         movf    nextSampleAddress, w, ACCESS
000258 5C14               M         subwf   sampleEndAddress, w, ACCESS
00025A 6E16               M         movwf   nextSampleAddress, ACCESS
00025C 5017               M         movf    nextSampleAddress + 1, w, ACCESS
00025E 5815               M         subwfb  sampleEndAddress + 1, w, ACCESS
000260 6E17               M         movwf   nextSampleAddress + 1, ACCESS
000262                    M exitMacro
000262 EC?? F???      00265         call    eepromReadSingleByte
                      00266         ; save read value to output register
000266 6FE2           00267         movwf   activeOutputValues + 0
                      00268 
                      00269         ; continue process if poly
000268 0E01           00270         movlw   1
00026A 6424           00271         cpfsgt  polyDepth, ACCESS
00026C D???           00272         bra             mainSampleMono
                      00273 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00274         ; get sample(s)
00026E C0B4 F016      00275         movff   nextSampleAddresses + 2, nextSampleAddress
000272 C0B5 F017      00276         movff   nextSampleAddresses + 3, nextSampleAddress + 1
                      00277         REVERSE_SAMPLE_IF_MOD_OVER_63
  0000                    M         local exitMacro
                          M         ; if modulation > 63 then reverse sample
000276 0E3F               M         movlw   63
000278 641E               M         cpfsgt  modulation, ACCESS
00027A D???               M         bra             exitMacro
                          M         ; modulation > 63 so do nextSampleAddress = (sampleEndAddress - nextSampleAddress)
00027C 5016               M         movf    nextSampleAddress, w, ACCESS
00027E 5C14               M         subwf   sampleEndAddress, w, ACCESS
000280 6E16               M         movwf   nextSampleAddress, ACCESS
000282 5017               M         movf    nextSampleAddress + 1, w, ACCESS
000284 5815               M         subwfb  sampleEndAddress + 1, w, ACCESS
000286 6E17               M         movwf   nextSampleAddress + 1, ACCESS
000288                    M exitMacro
000288 EC?? F???      00278         call    eepromReadSingleByte
                      00279         ; save read value to output register
00028C 6FE3           00280         movwf   activeOutputValues + 1
                      00281 
                      00282         ; get sample(s)
00028E C0B6 F016      00283         movff   nextSampleAddresses + 4, nextSampleAddress
000292 C0B7 F017      00284         movff   nextSampleAddresses + 5, nextSampleAddress + 1
                      00285         REVERSE_SAMPLE_IF_MOD_OVER_63
  0000                    M         local exitMacro
                          M         ; if modulation > 63 then reverse sample
000296 0E3F               M         movlw   63
000298 641E               M         cpfsgt  modulation, ACCESS
00029A D???               M         bra             exitMacro
                          M         ; modulation > 63 so do nextSampleAddress = (sampleEndAddress - nextSampleAddress)
00029C 5016               M         movf    nextSampleAddress, w, ACCESS
00029E 5C14               M         subwf   sampleEndAddress, w, ACCESS
0002A0 6E16               M         movwf   nextSampleAddress, ACCESS
0002A2 5017               M         movf    nextSampleAddress + 1, w, ACCESS
0002A4 5815               M         subwfb  sampleEndAddress + 1, w, ACCESS
0002A6 6E17               M         movwf   nextSampleAddress + 1, ACCESS
0002A8                    M exitMacro
0002A8 EC?? F???      00286         call    eepromReadSingleByte
                      00287         ; save read value to output register
0002AC 6FE4           00288         movwf   activeOutputValues + 2
                      00289 
                      00290         ; get sample(s)
0002AE C0B8 F016      00291         movff   nextSampleAddresses + 6, nextSampleAddress
0002B2 C0B9 F017      00292         movff   nextSampleAddresses + 7, nextSampleAddress + 1
                      00293         REVERSE_SAMPLE_IF_MOD_OVER_63
  0000                    M         local exitMacro
                          M         ; if modulation > 63 then reverse sample
0002B6 0E3F               M         movlw   63
0002B8 641E               M         cpfsgt  modulation, ACCESS
0002BA D???               M         bra             exitMacro
                          M         ; modulation > 63 so do nextSampleAddress = (sampleEndAddress - nextSampleAddress)
0002BC 5016               M         movf    nextSampleAddress, w, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002BE 5C14               M         subwf   sampleEndAddress, w, ACCESS
0002C0 6E16               M         movwf   nextSampleAddress, ACCESS
0002C2 5017               M         movf    nextSampleAddress + 1, w, ACCESS
0002C4 5815               M         subwfb  sampleEndAddress + 1, w, ACCESS
0002C6 6E17               M         movwf   nextSampleAddress + 1, ACCESS
0002C8                    M exitMacro
0002C8 EC?? F???      00294         call    eepromReadSingleByte
                      00295         ; save read value to output register
0002CC 6FE5           00296         movwf   activeOutputValues + 3
                      00297         
                      00298 
0002CE                00299 mainSampleMono
                      00300         ; set sampleReady flag so ISR will update address
0002CE 8218           00301         bsf             eepromFlags, samplesLoaded, ACCESS
                      00302 
0002D0                00303 mainNotSample
                      00304 
                      00305         ; call getActiveNoteDeltas() needRefresh flag is set
0002D0 A419           00306         btfss   soundGenFlags, needRefresh, ACCESS
0002D2 D???           00307         bra             mainLoop_noRefresh
                      00308         ; immediately clear the flag.  Was previously clearing after return from getActiveNoteDeltas but
                             notes would 
                      00309         ; ocassionally hang on last note if flag was set in ISR during getActiveNoteDeltas execution
0002D4 9419           00310         bcf             soundGenFlags, needRefresh, ACCESS      
                      00311         ; need refresh so call for it
0002D6 EC?? F???      00312         call    getActiveNoteDeltas
0002DA                00313 mainLoop_noRefresh
                      00314 
0002DA EC?? F???      00315         call    serviceADSR
                      00316 
0002DE EF?? F???      00317         goto    mainLoop
                      00318 
                      00319 ;**********************************************************************
                      00320         
                      00321         #include        "../source/init.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      init.asm                                          *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00019 ;**********************************************************************
                      00020 
                      00021 ;**********************************************************************
                      00022 ; INCLUDE FILES
                      00023 ;**********************************************************************
                      00024 
                      00025 ;**********************************************************************
                      00026 ; LOCAL FUNCTIONS
                      00027 ;**********************************************************************
                      00028 
                      00029 ;**********************************************************************
                      00030 ; Function: void initCore()
                      00031 ;**********************************************************************
                      00032 
0002E2                00033 initCore
0002E2 EC?? F???      00034         call initOsc
0002E6 EC?? F???      00035         call initIO
0002EA EC?? F???      00036         call initUART
0002EE EC?? F???      00037         call initTimer0
0002F2 EC?? F???      00038         call initTimer1
0002F6 EC?? F???      00039         call initTimer2
0002FA EC?? F???      00040         call initCCP
0002FE EC?? F???      00041         call initSPI
000302 EC?? F???      00042         call initADC
000306 EC?? F???      00043         call initInterrupts
00030A EC?? F???      00044         call initRAM
00030E EC?? F???      00045         call initHeap
000312 0012           00046         return
                      00047                 
                      00048         
                      00049 ;**********************************************************************
                      00050 ; Function: void initOsc()
                      00051 ;**********************************************************************
                      00052 
000314                00053 initOsc
                      00054         ; configure for internal clock at 8Mhz & 4x PLL = 32Mhz
                      00055         ; primary clock determined by FOSC<3:0>
                      00056         ; confirgure internal osc for 8Mhz
000314 8CD3           00057         bsf             OSCCON, IRCF2, ACCESS
000316 8AD3           00058         bsf             OSCCON, IRCF1, ACCESS
000318 98D3           00059         bcf             OSCCON, IRCF0, ACCESS
                      00060 
                      00061 #ifdef  PIC18LF13K50
00031A                00062 initOsc_lp1
                      00063         ; wait for internal high freq osc to stabilize
                      00064         ; "pic18lf13k50.inc" lists bit as "IOFS" but datasheet calls it "HFIOFS"
00031A A4D3           00065         btfss   OSCCON, IOFS, ACCESS
00031C D???           00066         bra             initOsc_lp1
                      00067 
                      00068         ; enable PLL
00031E 8C9B           00069         bsf             OSCTUNE, SPLLEN, ACCESS
                      00070 #endif
                      00071 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00072 #ifdef  PIC18LF14K22
                      00073 initOsc_lp1
                      00074         ; wait for internal high freq osc to stabilize
                      00075         btfss   OSCCON, HFIOFS, ACCESS
                      00076         bra             initOsc_lp1
                      00077 
                      00078         ; enable PLL
                      00079         bsf             OSCTUNE, PLLEN, ACCESS
                      00080 #endif  
                      00081 
                      00082 
000320 0012           00083         return
                      00084 
                      00085 
                      00086 ;**********************************************************************
                      00087 ; Function: void initIO()
                      00088 ;**********************************************************************
                      00089 
000322                00090 initIO
                      00091         ; IO Summary
                      00092         ; 
                      00093         ; (organized by pin #)
                      00094         ; Pin   Port    Assignment
                      00095         ; ---  ----     ----------
                      00096         ; 1             VDD             VDD
                      00097         ; 2             RA5             LED (Sine)
                      00098         ; 3             RA4             Audio In
                      00099         ; 4             RA3             ICSP
                      00100         ; 5             RC5             Audio Out
                      00101         ; 6             RC4             LED (Square)
                      00102         ; 7             RC3             LED (Sample)
                      00103         ; 8             RC6             EEPROM Chip Select
                      00104         ; 9             RC7             EEPROM Slave In
                      00105         ; 10    RB7             [Not Connected]
                      00106         ; 11    RB6             EEPROM Clock
                      00107         ; 12    RB5             MIDI In
                      00108         ; 13    RB4             EEPROM Slave Out
                      00109         ; 14    RC2             Switch (MIDI Record / Playback)
                      00110         ; 15    RC1             Switch (Voice Through / Record)
                      00111         ; 16    RC0             Switch (Waveform)
                      00112         ; 17    VUSB    [Not Connected]
                      00113         ; 18    RA1             ICSP
                      00114         ; 19    RA0             ICSP
                      00115         ; 20    VSS             VSS
                      00116         ;
                      00117         ; [PORT A]
                      00118         ; Pin   Port    Assignment                                                      Direction
                      00119         ; ---  ----             ----------                                                      --------
                            -
                      00120         ; 19    RA0             ICSP                                                            IN
                      00121         ; 18    RA1             ICSP                                                            IN
                      00122         ; 4             RA3             ICSP                                                            
                            IN
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00123         ; 3             RA4             Audio In                                                        
                            IN
                      00124         ; 2             RA5             LED (Sine)                                                      
                            OUT
                      00125 
000322 8A89           00126         bsf             LATA, RA5, ACCESS       ; LED is off
000324 0EDF           00127         movlw   0xff ^ 1<<RA5
000326 6E92           00128         movwf   TRISA, ACCESS
                      00129 
                      00130         ; [PORT B]
                      00131         ; Pin   Port    Assignment                                                      Direction
                      00132         ; ---  ----             ----------                                                      --------
                            -
                      00133         ; 13    RB4             EEPROM Slave Out                                        IN
                      00134         ; 12    RB5             MIDI In                                                         IN
                      00135         ; 11    RB6             EEPROM Clock                                            OUT
                      00136         ; 10    RB7             [Not Connected]                                         IN
                      00137 
000328 0EBF           00138         movlw   0xff ^ 1<<RB6   ; EEPROM clock is LOW
00032A 6E8A           00139         movwf   LATB, ACCESS
00032C 0EBF           00140         movlw   0xff ^ 1<<RB6
00032E 6E93           00141         movwf   TRISB, ACCESS
                      00142         
                      00143         ; [PORT C]
                      00144         ; Pin   Port    Assignment                                                      Direction
                      00145         ; ---  ----             ----------                                                      --------
                            -
                      00146         ; 16    RC0             Switch (Waveform)                                       IN
                      00147         ; 15    RC1             Switch (Voice Through / Record)         IN
                      00148         ; 14    RC2             Switch (MIDI Record / Playback)         IN
                      00149         ; 7             RC3             LED (Sample)                                            OUT
                      00150         ; 6             RC4             LED (Square)                                            OUT
                      00151         ; 5             RC5             Audio Out                                                       
                            OUT
                      00152         ; 8             RC6             EEPROM Chip Select                                      OUT
                      00153         ; 9             RC7             EEPROM Slave In                                         OUT
                      00154         
000330 868B           00155         bsf             LATC, RC3, ACCESS       ; LED is off
000332 888B           00156         bsf             LATC, RC4, ACCESS       ; LED is off
000334 9A8B           00157         bcf             LATC, RC5, ACCESS       ; Audio out is low
000336 8C8B           00158         bsf             LATC, RC6, ACCESS       ; Chip select is idle
000338 0E07           00159         movlw   0x07
00033A 6E94           00160         movwf   TRISC, ACCESS
                      00161         
                      00162         ; [General IO]
00033C 9EF1           00163         bcf             INTCON2, NOT_RABPU, ACCESS      ; enable PORT A & B pullups per WPU registers
00033E 0E08           00164         movlw   1<<ANS3 ; ANS3 = RA4(Audio In)
000340 6E7E           00165         movwf   ANSEL, ACCESS   ; enable digital input buffers for all non-analog inputs
000342 6A7F           00166         clrf    ANSELH, ACCESS  ; enable digital input buffers for all non-analog inputs        
000344 0012           00167         return
                      00168         
                      00169         
                      00170 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00171 ; Function: void initUART()
                      00172 ;**********************************************************************
                      00173 
000346                00174 initUART
000346 0E0F           00175         movlw   15      ; 31.25K baud rate @ 32Mhz clock
000348 6EAF           00176         movwf   SPBRG, ACCESS
                      00177         ; Enable serial port
                      00178         ; Enable reception
00034A 8EAB           00179         bsf             RCSTA, SPEN, ACCESS
00034C 88AB           00180         bsf             RCSTA, CREN, ACCESS
                      00181         ; Enable transmission
00034E 8AAC           00182         bsf             TXSTA, TXEN, ACCESS
000350 0012           00183         return
                      00184 
                      00185 
                      00186 ;**********************************************************************
                      00187 ; Function: void initTimer0()
                      00188 ;**********************************************************************
                      00189 
000352                00190 initTimer0
                      00191         ; timer is on
                      00192         ; 16-bit mode
000352 9CD5           00193         bcf     T0CON, T08BIT, ACCESS
                      00194         ; clock = internal
000354 9AD5           00195         bcf             T0CON, T0CS, ACCESS
                      00196         ; timer0 using prescaler
                      00197         ; prescale = 1:8
                      00198         ; Fosc = 32Mhz. 1/((32Mhz/4)/ 8) * overflowValue(==65536) = overflow every 65.536mS)
000356 96D5           00199         bcf             T0CON, PSA, ACCESS
000358 94D5           00200         bcf             T0CON, T0PS2, ACCESS
00035A 82D5           00201         bsf             T0CON, T0PS1, ACCESS    
00035C 90D5           00202         bcf             T0CON, T0PS0, ACCESS    
                      00203 
00035E 0012           00204         return
                      00205 
                      00206 
                      00207 ;**********************************************************************
                      00208 ; Function: void initTimer1()
                      00209 ;**********************************************************************
                      00210 
000360                00211 initTimer1
                      00212         ; DO NOT ENABLE TIMER1 OR SDO WILL NOT WORK!
000360 0012           00213         return
                      00214 
                      00215 
                      00216 ;**********************************************************************
                      00217 ; Function: void initTimer2()
                      00218 ;**********************************************************************
                      00219 
000362                00220 initTimer2
                      00221 
                      00222         ; Turn on Timer2
000362 84CA           00223         bsf             T2CON, TMR2ON, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00224         ; Using default power-on prescale of 1:1
                      00225         ; Reset and interrupt on match value
000364 0EFF           00226         movlw   255
000366 6ECB           00227         movwf   PR2, ACCESS
                      00228         ; Timer2 configured for 32uS interrupt period
                      00229         ; (SYS_OSC / PERIPH_CLK_DIV) / PR2 = period
                      00230         ; (32Mhz / 4) / 256 = 32uS
000368 0012           00231         return
                      00232         
                      00233 
                      00234 ;**********************************************************************
                      00235 ; Function: void initCCP()
                      00236 ;**********************************************************************
                      00237 
00036A                00238 initCCP
                      00239         ; PWM single output
                      00240         ; PWM mode; P1A, P1C active-high; P1B, P1D active-high
                      00241         ; 10-bit PWM bits [1:0] = 0b11
00036A 86BD           00242         bsf             CCP1CON, CCP1M3, ACCESS
00036C 84BD           00243         bsf             CCP1CON, CCP1M2, ACCESS
                      00244 
00036E 6ABE           00245         clrf    CCPR1L, ACCESS  
000370 0012           00246         return
                      00247 
                      00248 
                      00249 ;**********************************************************************
                      00250 ; Function: void initSPI()
                      00251 ;**********************************************************************
                      00252 
000372                00253 initSPI
                      00254         ; serial port enabled
                      00255         ; idle clock is LOW
                      00256         ; mode is SPI master, clock = Fosc/4 = 8MHz
000372 8AC6           00257         bsf             SSPCON1, SSPEN, ACCESS
                      00258 
                      00259         ; input data latched on idle->active
                      00260         ; output data latched on active->idle clock
000374 8CC7           00261         bsf             SSPSTAT, CKE, ACCESS
000376 0012           00262         return
                      00263         
                      00264 
                      00265 ;**********************************************************************
                      00266 ; Function: void initADC()
                      00267 ;**********************************************************************
                      00268 
000378                00269 initADC
                      00270         ; channel = AN3
                      00271         ; ADC is on
000378 86C2           00272         bsf             ADCON0, CHS1, ACCESS    
00037A 84C2           00273         bsf             ADCON0, CHS0, ACCESS    
00037C 80C2           00274         bsf             ADCON0, ADON, ACCESS    
                      00275         
                      00276         ; positive reference is internal VDD
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00277         ; negative reference is internal VSS
                      00278 
                      00279         ; left justify result
                      00280         ; acquisition time = 4 tad
                      00281         ; clock source = Fosc/32 = 32Mhz/32 = 1Mhz, TAD = 1uS
00037E 88C0           00282         bsf             ADCON2, ACQT1, ACCESS
000380 82C0           00283         bsf             ADCON2, ADCS1, ACCESS
000382 0012           00284         return
                      00285 
                      00286 
                      00287 ;**********************************************************************
                      00288 ; Function: void initInterrupts()
                      00289 ;**********************************************************************
                      00290 
000384                00291 initInterrupts
                      00292         ; Enable interrupt priorities           
000384 8ED0           00293         bsf             RCON, IPEN, ACCESS
                      00294         
                      00295         ; unmask peripheral interrupts
                      00296         ; enable timer0 interrupts
                      00297         ; enable INT0 interrupts
                      00298         ; clear timer0 int flag
                      00299         ; clear INT0 int flag
000386 8CF2           00300         bsf             INTCON, PEIE, ACCESS
000388 8AF2           00301         bsf             INTCON, TMR0IE, ACCESS
                      00302 
                      00303 ; DEBUG - PIC18LF14K22 INT0/1/2 pins not compatible with PIC18LF13K50
                      00304 #ifndef PIC18LF14K22
00038A 88F2           00305         bsf             INTCON, INT0IE, ACCESS
                      00306 #endif
00038C 94F2           00307         bcf             INTCON, TMR0IF, ACCESS
00038E 92F2           00308         bcf             INTCON, INT0IF, ACCESS
                      00309         
                      00310         ; INT0 interrupt on falling edge
                      00311         ; INT1 interrupt on falling edge
                      00312         ; INT2 interrupt on falling edge
                      00313         ; Interrupt priority is low
000390 9CF1           00314         bcf             INTCON2, INTEDG0, ACCESS
000392 9AF1           00315         bcf             INTCON2, INTEDG1, ACCESS
000394 98F1           00316         bcf             INTCON2, INTEDG2, ACCESS
000396 94F1           00317         bcf             INTCON2, TMR0IP, ACCESS
                      00318                 
                      00319         ; INT2 is low Priority interrupt
                      00320         ; INT1 is low Priority interrupt
                      00321         ; enable INT2 interrupts
                      00322         ; enable INT1 interrupts
                      00323         ; clear INT2 int flag
                      00324         ; clear INT1 int flag
000398 9EF0           00325         bcf             INTCON3, INT2IP, ACCESS
00039A 9CF0           00326         bcf             INTCON3, INT1IP, ACCESS
                      00327 ; DEBUG - PIC18LF14K22 INT0/1/2 pins not compatible with PIC18LF13K50
                      00328 #ifndef PIC18LF14K22
00039C 88F0           00329         bsf             INTCON3, INT2IE, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00039E 86F0           00330         bsf             INTCON3, INT1IE, ACCESS
                      00331 #endif
0003A0 92F0           00332         bcf             INTCON3, INT2IF, ACCESS
0003A2 90F0           00333         bcf             INTCON3, INT1IF, ACCESS
                      00334                         
                      00335         ; UART RX is low priority interrupt     
0003A4 9A9F           00336         bcf             IPR1, RCIP, ACCESS
                      00337         
                      00338         ; clear timer2 int flag
0003A6 929E           00339         bcf             PIR1, TMR2IF, ACCESS            
                      00340         
                      00341         ; enable UART rx ints
                      00342         ; enable timer2 interrupts
0003A8 8A9D           00343         bsf             PIE1, RCIE, ACCESS
0003AA 829D           00344         bsf             PIE1, TMR2IE, ACCESS
0003AC 0012           00345         return
                      00346         
                      00347 
                      00348 ;**********************************************************************
                      00349 ; Function: void initRAM()
                      00350 ;**********************************************************************
0003AE                00351 initRAM
                      00352         ; clear all general purpose RAM locations to 0x00
0003AE                00353 initRAM_bank0
                      00354         ; init pointer to start of BANK0
0003AE 6AE9           00355         clrf    FSR0L, ACCESS
0003B0 6AEA           00356         clrf    FSR0H, ACCESS
0003B2                00357 initRAM_bank0Lp
0003B2 6AEE           00358         clrf    POSTINC0, ACCESS
                      00359         ; BANK0 is done when FSR0 == 0x0100
0003B4 0E01           00360         movlw   1
0003B6 62EA           00361         cpfseq  FSR0H, ACCESS
0003B8 D???           00362         bra             initRAM_bank0Lp
                      00363 
0003BA                00364 initRAM_bank1
                      00365         ; PIC18LF13K50 does not implement BANK1 so skip it
                      00366 
0003BA                00367 initRAM_bank2
                      00368         ; init pointer to start of BANK2
0003BA 6AE9           00369         clrf    FSR0L, ACCESS
0003BC 0E02           00370         movlw   0x02
0003BE 6EEA           00371         movwf   FSR0H, ACCESS
0003C0                00372 initRAM_bank2Lp
0003C0 6AEE           00373         clrf    POSTINC0, ACCESS
                      00374         ; BANK2 is done when FSR0 == 0x0300
0003C2 0E03           00375         movlw   3
0003C4 62EA           00376         cpfseq  FSR0H, ACCESS
0003C6 D???           00377         bra             initRAM_bank2Lp
                      00378 
                      00379         ; reset fsr address
0003C8 6AE9           00380         clrf    FSR0L, ACCESS   
0003CA 6AEA           00381         clrf    FSR0H, ACCESS   
0003CC 0012           00382         return
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00383 
                      00384 ;**********************************************************************
                      00385 ; Function: void initHeap()
                      00386 ;**********************************************************************
                      00387 
0003CE                00388 initHeap
0003CE EE22 F0FF      00389         lfsr    softwareStackPointerFSR, softwareStackBaseAddress
0003D2 0012           00390         return
                      00391         
                      00392 
                      00393         
                      00322         #include        "../source/midi.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      midi.asm                                          *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021         
                      00022 ;**********************************************************************
                      00023 ; INCLUDES
                      00024 ;**********************************************************************
                      00025 
                      00026         #include        "../header/midi.h"
                      00455 
                      00456 ;**********************************************************************
                      00457 ;                                                                     *
                      00458 ;    Project:       deMIDulator                                       *
                      00459 ;    Filename:      midi.h                                            *
                      00460 ;    Date:                                                            *
                      00461 ;    File Version:                                                    *
                      00462 ;                                                                     *
                      00463 ;    Author:        Derek Enos                                        *
                      00464 ;    Company:                                                         *
                      00465 ;                                                                     * 
                      00466 ;                                                                     *
                      00467 ;**********************************************************************
                      00468 ;                                                                     *
                      00469 ;    Files required:                                                  *
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00470 ;                                                                     *
                      00471 ;                                                                     *
                      00472 ;                                                                     *
                      00473 ;**********************************************************************
                      00474 
                      00475 #ifndef _MIDIH_
                      00476 #define _MIDIH_
                      00477 
                      00478 
                      00479 ; ******************* GENERAL MIDI DEFINES ***********************
                      00480 ; ** Define default MIDI channel **
                      00481 ; values 0 - 5 (actual MIDI channels 1 - 6) will make deMIDUlator respond to only that channel
                      00482 ; value of 6 (actual MIDI channel 7) will make deMIDulator respond to ALL channels
                      00483         #define         DEFAULT_MIDI_CHANNEL    6
                      00484 
                      00485 ; ******************* MIDI SYSEX DEFINES ***********************
                      00486 #define         VENDOR_ID       0x77
                      00487 #define         DEVICE_ID       0x1D
                      00488 #define         TERMINAL_PACKET_COMMAND_VALUE   0x1E
                      00489 
                      00490 ; ******************* MIDI BUFFER SIZES ***********************
                      00491 
                      00492 #define         MAX_MIDI_MESSAGE_SIZE   24
                      00493 #define         ACTIVE_NOTE_TABLE_SIZE  25
                      00494 
                      00495 
                      00496 ; ******************* STATUS BYTE DEFINITONS ***********************
                      00497 
                      00498 ; Note that lower nybble (channel) should be masked out for comparison
                      00499 ;------------------------
                      00500 #define         NOTE_OFF                                0x80
                      00501 #define         NOTE_ON                                 0x90
                      00502 #define         KEY_PRESSURE                    0xA0
                      00503 #define         CONTROL_CHANGE                  0xB0
                      00504 #define         PROGRAM_CHANGE                  0xC0
                      00505 #define         CHANNEL_PRESSURE                0xD0
                      00506 #define         PITCH_WHEEL                             0xE0
                      00507 
                      00508 ; Sysex Status Byte Definitions
                      00509 #define         SYSEX                                   0xF0
                      00510 #define         EOX                                             0xF7
                      00511 
                      00512 #define         NOTE_OFF_MESSAGE_LENGTH                         3
                      00513 #define         NOTE_ON_MESSAGE_LENGTH                          3
                      00514 #define         KEY_PRESSURE_MESSAGE_LENGTH                     3
                      00515 #define         CONTROL_CHANGE_MESSAGE_LENGTH           3
                      00516 #define         PROGRAM_CHANGE_MESSAGE_LENGTH           2
                      00517 #define         CHANNEL_PRESSURE_MESSAGE_LENGTH         2
                      00518 #define         PITCH_WHEEL_MESSAGE_LENGTH                      3
                      00519 
                      00520 ; SysEx Sub Types
                      00521 ;----------------------------
                      00522 #define         NON_REAL_TIME                                           0x7E
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00523 #define         GENERAL_INFORMATION                                     0x06
                      00524 #define         IDENTITY_REQUEST                                        0x01
                      00525 #define         IDENTITY_REPLY                                          0x02
                      00526 
                      00527 ; Control Change Data Types
                      00528 ;----------------------------
                      00529 #define         BANK_SELECT_MSB                                         0
                      00530 #define         MODULATION_WHEEL_MSB                            1
                      00531 #define         BREATH_CONTROLLER_MSB                           2
                      00532 #define         UNDEFINED_003                                           3
                      00533 #define         FOOT_CONTROLLER_MSB                                     4
                      00534 #define         PORTAMENTO_TIME                                         5
                      00535 #define         DATA_ENTRY_MSB                                          6
                      00536 #define         CHANNEL_VOLUME_MSB                                      7
                      00537 #define         BALANCE_MSB                                                     8
                      00538 #define         UNDEFINED_MSB                                           9
                      00539 #define         PAN_MSB                                                         10
                      00540 #define         EXPRESSION_MSB                                          11
                      00541 #define         EFFECT_CONTROL_1_MSB                            12
                      00542 #define         EFFECT_CONTROL_2_MSB                            13
                      00543 #define         UNDEFINED_014                                           14
                      00544 #define         UNDEFINED_015                                           15
                      00545 #define         GENERAL_PURPOSE_CONTROLLER_1_MSB        16
                      00546 #define         GENERAL_PURPOSE_CONTROLLER_2_MSB        17
                      00547 #define         GENERAL_PURPOSE_CONTROLLER_3_MSB        18
                      00548 #define         GENERAL_PURPOSE_CONTROLLER_4_MSB        19
                      00549 #define         UNDEFINED_020                                           20
                      00550 #define         UNDEFINED_021                                           21
                      00551 #define         UNDEFINED_022                                           22
                      00552 #define         UNDEFINED_023                                           23
                      00553 #define         UNDEFINED_024                                           24
                      00554 #define         UNDEFINED_025                                           25
                      00555 #define         UNDEFINED_026                                           26
                      00556 #define         UNDEFINED_027                                           27
                      00557 #define         UNDEFINED_028                                           28
                      00558 #define         UNDEFINED_029                                           29
                      00559 #define         UNDEFINED_030                                           30
                      00560 #define         UNDEFINED_031                                           31
                      00561 #define         BANK_SELECT_LSB                                         32
                      00562 #define         MODULATION_WHEEL_LSB                            33
                      00563 #define         BREATH_CONTROLLER_LSB                           34
                      00564 #define         UNDEFINED_035                                           35
                      00565 #define         FOOT_CONTROLLER_LSB                                     36
                      00566 #define         PORTAMENTO_TIME_LSB                                     37
                      00567 #define         DATA_ENTRY_LSB                                          38
                      00568 #define         CHANNEL_VOLUME_LSB                                      39
                      00569 #define         BALANCE_LSB                                                     40
                      00570 #define         UNDEFINED_041                                           41
                      00571 #define         PAN_LSB                                                         42
                      00572 #define         EXPRESSION_LSB                                          43
                      00573 #define         EFFECT_CONTROL_1_LSB                            44
                      00574 #define         EFFECT_CONTROL_2_LSB                            45
                      00575 #define         UNDEFINED_046                                           46
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00576 #define         UNDEFINED_047                                           47
                      00577 #define         GENERAL_PURPOSE_CONTROLLER_1_LSB        48
                      00578 #define         GENERAL_PURPOSE_CONTROLLER_2_LSB        49
                      00579 #define         GENERAL_PURPOSE_CONTROLLER_3_LSB        50
                      00580 #define         GENERAL_PURPOSE_CONTROLLER_4_LSB        51
                      00581 #define         UNDEFINED_052                                           52
                      00582 #define         UNDEFINED_053                                           53
                      00583 #define         UNDEFINED_054                                           54
                      00584 #define         UNDEFINED_055                                           55
                      00585 #define         UNDEFINED_056                                           56
                      00586 #define         UNDEFINED_057                                           57
                      00587 #define         UNDEFINED_058                                           58
                      00588 #define         UNDEFINED_059                                           59
                      00589 #define         UNDEFINED_060                                           60
                      00590 #define         UNDEFINED_061                                           61
                      00591 #define         UNDEFINED_062                                           62
                      00592 #define         UNDEFINED_063                                           63
                      00593 #define         SUSTAIN_PEDAL                                           64
                      00594 #define         PORTAMENTO_ONOFF                                        65
                      00595 #define         SOSTENUTO                                                       66
                      00596 #define         SOFT_PEDAL                                                      67
                      00597 #define         LEGATO_FOOTSWITCH                                       68
                      00598 #define         HOLD_2                                                          69
                      00599 #define         SOUND_CONTROLLER_1_DEFAULT_SOUND_VARIATION                              70
                      00600 #define         SOUND_CONTROLLER_2_DEFAULT_TIMBRE_HARMONIC_QUALITY              71
                      00601 #define         SOUND_CONTROLLER_3_DEFAULT_RELEASE_TIME                                 72
                      00602 #define         SOUND_CONTROLLER_4_DEFAULT_ATTACK_TIME                                  73
                      00603 #define         SOUND_CONTROLLER_5_DEFAULT_BRIGHTNESS                                   74
                      00604 #define         SOUND_CONTROLLER_6_GM2_DEFAULT_DECAY_TIME                               75
                      00605 #define         SOUND_CONTROLLER_7_GM2_DEFAULT_VIBRATO_RATE                             76
                      00606 #define         SOUND_CONTROLLER_8_GM2_DEFAULT_VIBRATO_DEPTH                    77
                      00607 #define         SOUND_CONTROLLER_9_GM2_DEFAULT_VIBRATO_DELAY                    78
                      00608 #define         SOUND_CONTROLLER_10_GM2_DEFAULT_UNDEFINED                               79
                      00609 #define         GENERAL_PURPOSE_CONTROLLER_5                                                    80
                      00610 #define         GENERAL_PURPOSE_CONTROLLER_6                                                    81
                      00611 #define         GENERAL_PURPOSE_CONTROLLER_7                                                    82
                      00612 #define         GENERAL_PURPOSE_CONTROLLER_8                                                    83
                      00613 #define         PORTAMENTO_CONTROL                                                                      
                                    84
                      00614 #define         UNDEFINED_85                                                                    85
                      00615 #define         UNDEFINED_86                                                                    86
                      00616 #define         UNDEFINED_87                                                                    87
                      00617 #define         UNDEFINED_88                                                                    88
                      00618 #define         UNDEFINED_89                                                                    89
                      00619 #define         UNDEFINED_90                                                                    90
                      00620 #define         EFFECTS_1_DEPTH_DEFAULT_REVERB_SEND                             91
                      00621 #define         EFFECTS_2_DEPTH_DEFAULT_TREMOLO_DEPTH                   92
                      00622 #define         EFFECTS_3_DEPTH_DEFAULT_CHORUS_SEND                             93
                      00623 #define         EFFECTS_4_DEPTH_DEFAULT_CELESTE_[DETUNE]_DEPTH  94
                      00624 #define         EFFECTS_5_DEPTH_DEFAULT_PHASER_DEPTH                    95
                      00625 #define         DATA_INCREMENT                                                                  96
                      00626 #define         DATA_DECREMENT                                                                  97
                      00627 #define         NON_REG_PARAMETER_NUMBER_LSB                            98
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00628 #define         NON_REG_PARAMETER_NUMBER_MSB                            99
                      00629 #define         REGISTERED_PARAMETER_NUMBER_LSB                                 100
                      00630 #define         REGISTERED_PARAMETER_NUMBERMSB                                  101
                      00631 #define         UNDEFINED_102                                           102
                      00632 #define         UNDEFINED_103                                           103
                      00633 #define         UNDEFINED_104                                           104
                      00634 #define         UNDEFINED_105                                           105
                      00635 #define         UNDEFINED_106                                           106
                      00636 #define         UNDEFINED_107                                           107
                      00637 #define         UNDEFINED_108                                           108
                      00638 #define         UNDEFINED_109                                           109
                      00639 #define         UNDEFINED_110                                           110
                      00640 #define         UNDEFINED_111                                           111
                      00641 #define         UNDEFINED_112                                           112
                      00642 #define         UNDEFINED_113                                           113
                      00643 #define         UNDEFINED_114                                           114
                      00644 #define         UNDEFINED_115                                           115
                      00645 #define         UNDEFINED_116                                           116
                      00646 #define         UNDEFINED_117                                           117
                      00647 #define         UNDEFINED_118                                           118
                      00648 #define         UNDEFINED_119                                           119
                      00649 #define         ALL_SOUND_OFF                                           120
                      00650 #define         RESET_ALL_CONTROLLERS                           121
                      00651 #define         LOCAL_CONTROL_ONOFF                                     122
                      00652 #define         ALL_NOTES_OFF                                           123
                      00653 #define         OMNI_MODE_OFF                                           124
                      00654 #define         OMNI_MODE_ON                                            125
                      00655 #define         POLY_MODE_OFF                                           126
                      00656 #define         POLY_MODE_ON                                            127
                      00657 
                      00658 
                      00659 ; ******************* MIDI MESSAGE STATES ***********************
                      00660 
                      00661 #define CHANNEL                                         0x00
                      00662 #define DATA_BYTE0                                      0x01
                      00663 #define DATA_BYTE1                                      0x02
                      00664 #define MESSAGE_COMPLETE                        0xFF
                      00665 
                      00666 #define NOTE_COMPLETE                           DATA_BYTE1
                      00667 #define AFTERTOUCH_COMPLETE                     DATA_BYTE1
                      00668 #define CONTROL_CHANGE_COMPLETE         DATA_BYTE1
                      00669 #define PROGRAM_CHANGE_COMPLETE         DATA_BYTE0
                      00670 #define PITCH_WHEEL_COMPLETE            DATA_BYTE1
                      00671 
                      00672 
                      00673 ; ******************* FLAG VARIABLE DEFINITIONS ***********************
                      00674 
                      00675 ; midiFlags (bits 3:7 free for use by other modules)
                      00676 #define uartState_rxInProgress                  0
                      00677 #define midiState_messageNeedsMapping   1
                      00678 #define midiThruModeEnabled                             2
                      00679 
                      00680 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00681 #endif
                      00027         
                      00028 ;**********************************************************************
                      00029 ; LOCAL VARIABLES
                      00030 ;**********************************************************************
                      00031 
                      00032         CBLOCK
                      00033 
  0000000B            00034                 midiState_lastStatus:1
  0000000C            00035                 midiState_lastLength:1
  0000000D            00036                 uartState_currentRxIndex:1
  0000000E            00037                 midiRxMessage_length:1
  0000000F            00038                 midiLastProgramValue:1
  00000010            00039                 midiChannel:1
                      00040                         
  00000011            00041                 midiFlags:1
                      00042                 ; Bits defined in midi.h
                      00043                 ; #define uartState_rxInProgress                0
                      00044                 ; #define midiState_messageNeedsMapping 1
                      00045                 ; #define midiThroughMode_enabled               2
                      00046                 ; Bits 3:7 free for use by other modules
                      00047 
                      00048                 ; Declared at end of main.asm to ensure that arrays are pushed to end of memory...
                      00049                 ; with smaller variables in ACCESS memory
                      00050                 ; ---------------------------------------
                      00051                 ; midiRxMessage:MAX_MIDI_MESSAGE_SIZE
                      00052                 ; activeNoteTable:ACTIVE_NOTE_TABLE_SIZE
                      00053                                 
                      00054         ENDC
                      00055                         
                      00056 ;**********************************************************************
                      00057 ; LOCAL FUNCTIONS
                      00058 ;**********************************************************************
                      00059 
                      00060 ; [Function Summary]
                      00061 ;
                      00062 ; Function: initMIDI()
                      00063 ; Abstract: initializes MIDI state variables and flags
                      00064 
                      00065 ; Function: processRxAsMIDI()
                      00066 ; Abstract: reads rx byte from UART's RCREG and processes as incoming MIDI transaction
                      00067 ;           calls midiMessageMapper() when last byte of complete MIDI message has been received
                      00068 
                      00069 ; Function: midiMessageMapper()
                      00070 ; Abstract: determines type of received MIDI message and reacts
                      00071 ;           received Note On triggers call to activeNoteTableAdd()
                      00072 ;                       received Note Off triggers call to activeNoteTableRemove()
                      00073 ;                       received Pitch Wheel value is saved to variable pitchWheel
                      00074 
                      00075 
                      00076 ;**********************************************************************
                      00077 ; Function: void midiSelectChannel()
                      00078 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0003D4                00079 midiSelectChannel
                      00080         PUSH_R  r0
0003D4 C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00081         
                      00082         ; configure LEDs to display current MIDI channel
0003D8                00083 midiSelectChannel_refreshLEDs
                      00084         ; increment value so that midi channel is logical to user and display is not blank
0003D8 2810           00085         incf    midiChannel, w, ACCESS
                      00086         ; preset to all off
                      00087         LED_ALL_OFF
                          M         LED_SINE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
0003DA 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
0003DC 988B               M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
0003DE 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
                      00088         ; roll bit 0 out of channel, turn on SAMPLE LED if set
0003E0 32E8           00089         rrcf    WREG, f, ACCESS
0003E2 B0D8           00090         btfsc   STATUS, C, ACCESS
                      00091         LED_SAMPLE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
0003E4 8A89               M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
                      00092         ; roll bit 1 out of channel, turn on SQUARE LED if set
0003E6 32E8           00093         rrcf    WREG, f, ACCESS
0003E8 B0D8           00094         btfsc   STATUS, C, ACCESS
                      00095         LED_SQUARE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
0003EA 888B               M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                      00096         ; roll bit 2 out of channel, turn on SAMPLE SINE if set
0003EC 32E8           00097         rrcf    WREG, f, ACCESS
0003EE B0D8           00098         btfsc   STATUS, C, ACCESS
                      00099         LED_SINE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0003F0 868B               M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                      00100         
                      00101         ; wait for button press
0003F2                00102 midiChannelSelect_waitForPress
0003F2 1C82           00103         comf    PORTC, w, ACCESS
0003F4 0B07           00104         andlw   0x07
0003F6 6E03           00105         movwf   r0, ACCESS
0003F8 E0??           00106         bz      midiChannelSelect_waitForPress
                      00107 
                      00108         ; button pressed
                      00109 
                      00110         ; if button == MODE then save channel setting to EEPROM and exit
0003FA 0E01           00111         movlw   1<<RC0
0003FC 6203           00112         cpfseq  r0, ACCESS
0003FE D???           00113         bra             midiChannelSelect_notMOD
                      00114         ; wait for button to release
000400                00115 midiChannelSelect_waitReleaseMOD
000400 1C82           00116         comf    PORTC, w, ACCESS
000402 B0E8           00117         btfsc   WREG, RC0, ACCESS
000404 D???           00118         bra             midiChannelSelect_waitReleaseMOD
                      00119         ; write midiChannel to EEPROM and exit
                      00120         WRITE_INTERNAL_EEPROM   2, midiChannel
  0000                    M         local   writeIntEE_loop
                          M         
                          M         ; load address
000406 0E02               M         movlw   2
000408 6EA9               M         movwf   EEADR, ACCESS
                          M         ; load value
00040A C010 FFA8          M         movff   midiChannel,    EEDATA
                          M         ; configure eeprom
                          M         ; point to EEPROM DATA memory
00040E 9EA6               M         bcf             EECON1, EEPGD, ACCESS
                          M         ; Access EEPROM/Program
000410 9CA6               M         bcf             EECON1, CFGS, ACCESS    
                          M         ; Enable writes
000412 84A6               M         bsf             EECON1, WREN, ACCESS
                          M 
                          M         ; don't have to disable interrupts because I'm only calling this
                          M         ; from within the high-priority ISR
                          M 
                          M         ; required write enable sequence
000414 0E55               M         movlw   0x55
000416 6EA7               M         movwf   EECON2, ACCESS
000418 0EAA               M         movlw   0xAA
00041A 6EA7               M         movwf   EECON2, ACCESS
                          M 
                          M         ; set WR bit to begin write
00041C 82A6               M         bsf             EECON1, WR, ACCESS
00041E                    M writeIntEE_loop
                          M         ; wait for write to complete
00041E B2A6               M         btfsc   EECON1, WR, ACCESS
000420 D???               M         bra             writeIntEE_loop
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         ; disable writes
000422 94A6               M         bcf             EECON1, WREN, ACCESS
                          M 
                          M         ; point to Program memory
000424 8EA6               M         bsf             EECON1, EEPGD, ACCESS
                          M 
                      00121 ;       bra     midiChannelSelect_exit
000426 00FF           00122         reset
000428                00123 midiChannelSelect_notMOD                
                      00124 
                      00125         ; if button == RECORD then increment channel
000428 0E02           00126         movlw   1<<RC1
00042A 6203           00127         cpfseq  r0, ACCESS
00042C D???           00128         bra             midiChannelSelect_waitForPress
                      00129         ; wait for button to release
00042E                00130 midiChannelSelect_waitReleaseREC        
00042E 1C82           00131         comf    PORTC, w, ACCESS
000430 B2E8           00132         btfsc   WREG, RC1, ACCESS
000432 D???           00133         bra             midiChannelSelect_waitReleaseREC
                      00134         ; increment midiChannel
000434 2A10           00135         incf    midiChannel, f, ACCESS
000436 0E07           00136         movlw   0x07
000438 1810           00137         xorwf   midiChannel, w, ACCESS
00043A E1??           00138         bnz             midiSelectChannel_refreshLEDs
00043C 6A10           00139         clrf    midiChannel, ACCESS
                      00140         ; refresh LEDs to indicate new channel value
00043E D???           00141         bra             midiSelectChannel_refreshLEDs
                      00142         
000440                00143 midiChannelSelect_exit
                      00144         POP_R   r0
000440 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
000444 0012           00145         return
                      00146         
                      00147 ;**********************************************************************
                      00148 ; Function: void midiDebugTriggerHandler()
                      00149 ;**********************************************************************
                      00150 ; since the PIC18LF13K50 doesn't contain debugging hardware,
                      00151 ; I'm using this routine as a crude way to dump memory contents via MIDI output
                      00152 ; this code will only be include if MIDI_DEBUG_TRIGGER_ENABLED is #define(d)
                      00153 
                      00154 #IFDEF MIDI_DEBUG_TRIGGER_ENABLED
                      00155 midiDebugTriggerHandler
                      00156         PUSH_R  r0
                      00157         PUSH_R  FSR0L
                      00158         PUSH_R  FSR0H
                      00159         
                      00160         #define byteCount r0
                      00161 
                      00162         ; dump activeNoteTable
                      00163         ; start SysEx message
                      00164         movlw   SYSEX
                      00165         call    midiDebugTriggerHandler_SendByte
                      00166         ; init
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00167         lfsr    FSR0, activeNoteTable
                      00168         movlw   ACTIVE_NOTE_TABLE_SIZE
                      00169         movwf   byteCount, ACCESS
                      00170 midiDebugTriggerHandler_antLp
                      00171         movf    byteCount, w, ACCESS
                      00172         sublw   ACTIVE_NOTE_TABLE_SIZE
                      00173         movf    PLUSW0, w, ACCESS
                      00174         ; empty activeNoteTable entry == 0xff which is not cool to send inside SysEx so compliment
                      00175         ; add 1 to WREG, if result is ZERO then value was 0xff so just send 0 value to port
                      00176         addlw   1
                      00177         btfss   STATUS, Z, ACCESS
                      00178         ; result was not ZERO so value was not 0xff. subtract 1 to restore original value
                      00179         sublw   1
                      00180         call    midiDebugTriggerHandler_SendByte
                      00181         decf    byteCount, f, ACCESS
                      00182         bnz             midiDebugTriggerHandler_antLp
                      00183         ; close SysEx message
                      00184         movlw   EOX
                      00185         call    midiDebugTriggerHandler_SendByte
                      00186 
                      00187         ; dump activeNoteDeltas
                      00188         ; start SysEx message
                      00189         movlw   SYSEX
                      00190         call    midiDebugTriggerHandler_SendByte
                      00191         ; init
                      00192         lfsr    FSR0, activeNoteDeltas
                      00193         movlw   ACTIVE_NOTE_DELTAS_SIZE
                      00194         movwf   byteCount, ACCESS
                      00195 midiDebugTriggerHandler_andLp
                      00196         movf    byteCount, w, ACCESS
                      00197         sublw   ACTIVE_NOTE_TABLE_SIZE
                      00198         movf    PLUSW0, w, ACCESS
                      00199         ; activeNoteDeltas values are not SysEx friendly su just clear bit7 no matter what
                      00200         andlw   0x7f
                      00201         call    midiDebugTriggerHandler_SendByte
                      00202         decf    byteCount, f, ACCESS
                      00203         bnz             midiDebugTriggerHandler_andLp
                      00204         ; close SysEx message
                      00205         movlw   EOX
                      00206         call    midiDebugTriggerHandler_SendByte
                      00207 
                      00208         #undefine       byteCount
                      00209 
                      00210         POP_R   FSR0H
                      00211         POP_R   FSR0L
                      00212         POP_R   r0
                      00213 
                      00214         return
                      00215 
                      00216 
                      00217 midiDebugTriggerHandler_SendByte
                      00218         ; skip if TXREG is ready for writting
                      00219         btfss   PIR1, TXIF, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00220         ; not ready so keep checking
                      00221         goto    midiDebugTriggerHandler_SendByte
                      00222         ; is ready so write it
                      00223         movwf TXREG, ACCESS
                      00224         return
                      00225 #ENDIF
                      00226 
                      00227 ;**********************************************************************
                      00228 ; Function: void initMIDI(void)
                      00229 ;**********************************************************************
                      00230 
000446                00231 initMIDI
                      00232         ; push working regs onto software stack
                      00233         PUSH_R  r0
000446 C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00234         PUSH_R  FSR0L
00044A CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00235         PUSH_R  FSR0H
00044E CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00236         ; define variables to pushed registers
                      00237         #define count                                   r0
                      00238         #define FSR_activeNoteTable             FSR0
                      00239         #define POSTINC_activeNoteTable POSTINC0
                      00240                 
                      00241         ; load fsr
000452 EE00 F059      00242         lfsr    FSR_activeNoteTable, activeNoteTable    
                      00243         
000456 6A0B           00244         clrf    midiState_lastStatus, ACCESS
000458 6A0C           00245         clrf    midiState_lastLength, ACCESS
00045A 6A0D           00246         clrf    uartState_currentRxIndex, ACCESS
00045C 6A0E           00247         clrf    midiRxMessage_length, ACCESS
00045E 6A0F           00248         clrf    midiLastProgramValue, ACCESS
                      00249         
                      00250         ; recall saved midiChannel from uC's internal EEPROM
000460 0E02           00251         movlw   2
000462 EC?? F???      00252         call    eepromInternalRead
000466 6E10           00253         movwf   midiChannel, ACCESS     
                      00254                                                 
000468 9011           00255         bcf             midiFlags, uartState_rxInProgress, ACCESS               
00046A 9211           00256         bcf             midiFlags, midiState_messageNeedsMapping, ACCESS
                      00257         ; enable MIDI THRU mode
00046C 8411           00258         bsf             midiFlags, midiThruModeEnabled, ACCESS  
                      00259 
00046E 0E19           00260         movlw   ACTIVE_NOTE_TABLE_SIZE
000470 6E03           00261         movwf   count, ACCESS
000472 0EFF           00262         movlw   0xff
000474                00263 initMIDI_lp     
000474 6EEE           00264         movwf   POSTINC_activeNoteTable, ACCESS
000476 2E03           00265         decfsz  count, f, ACCESS
000478 D???           00266         bra             initMIDI_lp
                      00267                 
                      00268         ; undefine variables from pushed registers
                      00269         #undefine count
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00270         #undefine FSR_activeNoteTable
                      00271         #undefine POSTINC_activeNoteTable
                      00272         ; pop working regs from software stack
                      00273         POP_R   FSR0H
00047A CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00274         POP_R   FSR0L
00047E CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00275         POP_R   r0
000482 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00276 
000486 0012           00277         return
                      00278 
                      00279 
                      00280 ;**********************************************************************
                      00281 ; Function: void processRxAsMIDI(RCREG)
                      00282 ;**********************************************************************
                      00283 
000488                00284 processRxAsMIDI
                      00285         ; push working regs onto software stack
                      00286         PUSH_R  r0
000488 C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00287         PUSH_R  r1
00048C C004 FFDD          M         movff   r1,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00288         PUSH_R  FSR0L
000490 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00289         PUSH_R  FSR0H
000494 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00290         ; define variables to pushed registers
                      00291         #define rxByte                          r0
                      00292         #define tmpValue                        r1      
                      00293         #define FSR_midiRxMessage       FSR0
                      00294         #define PLUSW_midiRxMessage     PLUSW0
                      00295 
                      00296         ; init FSR
000498 EE00 F041      00297         lfsr    FSR_midiRxMessage, midiRxMessage
                      00298         
                      00299         ;**** start procedure: read UART RX byte and check error states ****
00049C                00300 processRxAsMIDI_readFIFO
                      00301         ; skip if framing error occurred for top unread char in rx FIFO
00049C A4AB           00302         btfss   RCSTA, FERR, ACCESS
                      00303         ; no framing error so read the character
00049E D???           00304         bra             processRxAsMIDI_readGO
                      00305         ; framing error occurred
                      00306         ; read incorrectly framed character out of FIFO
0004A0 50AE           00307         movf    RCREG, w, ACCESS
                      00308         ; skip if rx FIFO is empty
0004A2 BA9E           00309         btfsc   PIR1, RCIF, ACCESS
                      00310         ; FIFO is not empty so try next character
0004A4 D???           00311         bra             processRxAsMIDI_readFIFO
                      00312         ; all characters in FIFO were incorrectly framed, no data to process
                      00313         ; attempt to remedy: reset UART receiver by toggling Continous Receive Enable bit
0004A6 98AB           00314         bcf             RCSTA, CREN, ACCESS
0004A8 88AB           00315         bsf             RCSTA, CREN, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00316         ; exit ISR
0004AA EF?? F???      00317         goto    processRxAsMIDI_Exit
                      00318         
0004AE                00319 processRxAsMIDI_readGO
                      00320         ; save RX byte / clear RCIF
0004AE CFAE F003      00321         movff   RCREG, rxByte
                      00322 
                      00323         ; if MIDI THRU mode is enabled then write byte to UART output
0004B2 B411           00324         btfsc   midiFlags, midiThruModeEnabled, ACCESS
0004B4 C003 FFAD      00325         movff   rxByte, TXREG
                      00326 
                      00327         ; check for rx buffer overrun
                      00328         ; skip if buffer overrun occurred
0004B8 A2AB           00329         btfss   RCSTA, OERR, ACCESS
0004BA D???           00330         bra             processRxAsMIDI_noErrors
                      00331         ; reset UART receiver by toggling Continous Receive Enable bit
0004BC 98AB           00332         bcf             RCSTA, CREN, ACCESS
0004BE 88AB           00333         bsf             RCSTA, CREN, ACCESS
                      00334 
0004C0                00335 processRxAsMIDI_noErrors
                      00336 
                      00337         ; **** Notes About MIDI Message Handling Implementation ****
                      00338         ; 1. Only the following MIDI message types are currently supported:
                      00339         ;    * 1000nnnn : Note Off
                      00340         ;    * 1001nnnn : Note On
                      00341         ;    * 1011nnnn : Control Change
                      00342         ;    * 1100nnnn : Program Change
                      00343         ;    * 1110nnnn : Pitch Wheel
                      00344         ;    * 11110000 : System Exclusive
                      00345         ;    * 11111111 : Reset
                      00346         ; 2. Status values above SysEx (0xF0) are not currently supported
                      00347         ;    Unsupported common messages include:
                      00348         ;    * 11110001 : MIDI Time Code Quarter Frame
                      00349         ;    * 11110010 : Song Position Pointer
                      00350         ;    * 11110011 : Song Select
                      00351         ;    * 11110110 : Tune Request
                      00352         ;    * 11111000 : Timing Clock
                      00353         ;    * 11111010 : Start
                      00354         ;    * 11111011 : Continue
                      00355         ;    * 11111100 : Stop
                      00356         ;    * 11111110 : Active Sense
                      00357         
                      00358         ;**** start procedure: is STATUS? ****
                      00359         ; if bit 7 is set then received byte is STATUS
0004C0 AE03           00360         btfss   rxByte, 7, ACCESS
0004C2 D???           00361         bra             processRxAsMIDI_notStatusOrIsEOX
                      00362         ; ignore > SysEx (0xF0) values as STATUS but continue to process as non-STATUS to capture EOX
                      00363         ; 
0004C4 0EF0           00364         movlw   SYSEX
                      00365         ; compare f with W, skip if f > W
0004C6 6403           00366         cpfsgt  rxByte, ACCESS
0004C8 D???           00367         bra             processRxAsMIDI_getLength
0004CA D???           00368         bra             processRxAsMIDI_notStatusOrIsEOX
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00369 
                      00370         ;**** start procedure: get message length ****
0004CC                00371 processRxAsMIDI_getLength
                      00372         ; midiRxMessage_length = length of MIDI message type
                      00373         ; midiRxMessage_length of 0x0 is used to indicate unsupported message types
0004CC 6A0E           00374         clrf    midiRxMessage_length, ACCESS
                      00375         
                      00376         ; mask out channel data and save in tmpValue
0004CE 5003           00377         movf    rxByte, w, ACCESS
0004D0 0BF0           00378         andlw   0xF0
0004D2 6E04           00379         movwf   tmpValue, ACCESS
                      00380         
                      00381         ; Check if STATUS is a 2-byte message type
                      00382         ; case PROGRAM_CHANGE
0004D4 0EC0           00383         movlw   PROGRAM_CHANGE
0004D6 1804           00384         xorwf   tmpValue, w, ACCESS
0004D8 E0??           00385         bz              processRxAsMIDI_lengthIs2
                      00386         ; case CHANNEL_PRESSURE
0004DA 0ED0           00387         movlw   CHANNEL_PRESSURE
0004DC 1804           00388         xorwf   tmpValue, w, ACCESS
0004DE E0??           00389         bz              processRxAsMIDI_lengthIs2
0004E0 D???           00390         bra             processRxAsMIDI_lengthIsNot2
0004E2                00391 processRxAsMIDI_lengthIs2
                      00392         ; midiRxMessage_length = 2
0004E2 0E02           00393         movlw   2
0004E4 6E0E           00394         movwf   midiRxMessage_length, ACCESS    
0004E6 D???           00395         bra             processRxAsMIDI_getLengthDone
0004E8                00396 processRxAsMIDI_lengthIsNot2
                      00397 
                      00398         ; Check if STATUS is a 3-byte message type
                      00399         ; case NOTE_OFF
0004E8 0E80           00400         movlw   NOTE_OFF
0004EA 1804           00401         xorwf   tmpValue, w, ACCESS
0004EC E0??           00402         bz              processRxAsMIDI_lengthIs3               
                      00403         ; case NOTE_ON
0004EE 0E90           00404         movlw   NOTE_ON
0004F0 1804           00405         xorwf   tmpValue, w, ACCESS
0004F2 E0??           00406         bz              processRxAsMIDI_lengthIs3               
                      00407         ; case KEY_PRESSURE
0004F4 0EA0           00408         movlw   KEY_PRESSURE
0004F6 1804           00409         xorwf   tmpValue, w, ACCESS
0004F8 E0??           00410         bz              processRxAsMIDI_lengthIs3               
                      00411         ; case CONTROL_CHANGE
0004FA 0EB0           00412         movlw   CONTROL_CHANGE
0004FC 1804           00413         xorwf   tmpValue, w, ACCESS
0004FE E0??           00414         bz              processRxAsMIDI_lengthIs3               
                      00415         ; case PITCH_WHEEL
000500 0EE0           00416         movlw   PITCH_WHEEL
000502 1804           00417         xorwf   tmpValue, w, ACCESS
000504 E0??           00418         bz              processRxAsMIDI_lengthIs3               
000506 D???           00419         bra             processRxAsMIDI_lengthIsNot3
000508                00420 processRxAsMIDI_lengthIs3
                      00421         ; midiRxMessage_length = 3
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000508 0E03           00422         movlw   3
00050A 6E0E           00423         movwf   midiRxMessage_length, ACCESS    
00050C D???           00424         bra             processRxAsMIDI_getLengthDone
00050E                00425 processRxAsMIDI_lengthIsNot3
                      00426 
                      00427         ; Check if STATUS is EOX-byte message type
                      00428         ; case SYSEX
00050E 0EF0           00429         movlw   SYSEX
000510 1804           00430         xorwf   tmpValue, w, ACCESS
000512 E1??           00431         bnz             processRxAsMIDI_getLengthDone
000514 0EF7           00432         movlw   EOX
000516 6E0E           00433         movwf   midiRxMessage_length, ACCESS    
000518                00434 processRxAsMIDI_getLengthDone
                      00435         
                      00436         ;**** start procedure: supported message type? ****
                      00437         ; midiRxMessage_length of 0 indicates unsupported STATUS value
000518 520E           00438         movf    midiRxMessage_length, f, ACCESS
00051A E0??           00439         bz              processRxAsMIDI_resetUartState
                      00440 
                      00441         ;**** start procedure: message supported, init uartState for reception ****
00051C 8011           00442         bsf             midiFlags, uartState_rxInProgress, ACCESS
                      00443         ;       midiRxMessage[0] = STATUS including channel data
00051E C003 F041      00444         movff   rxByte, midiRxMessage
                      00445         ;       uartState_currentRxIndex = 1
000522 0E01           00446         movlw   1
000524 6E0D           00447         movwf   uartState_currentRxIndex, ACCESS
                      00448         ;       midiState_lastStatus = rxdata
000526 C003 F00B      00449         movff   rxByte, midiState_lastStatus
                      00450         ;       midiState_lastLength = midiRxMessage_length
00052A C00E F00C      00451         movff   midiRxMessage_length, midiState_lastLength
00052E D???           00452         bra             processRxAsMIDI_RxHandlingDone
                      00453 
                      00454         ;**** start procedure: message unsupported, reset uartState ****
000530                00455 processRxAsMIDI_resetUartState
                      00456         ; Fixes logic problem discovered because Axiom 25 streams aftertouch data which was being interp
                            reted as running status Note Ons
                      00457         ; Reception of an unsupported MIDI message will kill any in-progress message rx
                      00458         ; uartState_rxInProgress = FALSE
000530 9011           00459         bcf             midiFlags, uartState_rxInProgress, ACCESS
                      00460         ; Reset midiState.lastStatus so that subsequent non-status values are not interpreted as running
                             status
000532 6A0B           00461         clrf    midiState_lastStatus, ACCESS
000534 D???           00462         bra             processRxAsMIDI_RxHandlingDone
                      00463 
                      00464         ; process STATUS byte done
                      00465         ;**********************************************************************
                      00466         ; process non-STATUS or EOX byte begin
                      00467 
                      00468         ;**** start procedure: process non-STATUS or EOX byte ****
000536                00469 processRxAsMIDI_notStatusOrIsEOX
                      00470         ; continue if reception in progress
000536 B011           00471         btfsc   midiFlags, uartState_rxInProgress, ACCESS
000538 D???           00472         bra             processRxAsMIDI_rxInProgress
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 88


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00473 
                      00474         ; no reception in progress so attempt to process as running STATUS if rxByte < SYSEX, otherwise 
                            ignore
00053A 0EF0           00475         movlw   SYSEX
00053C 6003           00476         cpfslt  rxByte, ACCESS
00053E D???           00477         bra             processRxAsMIDI_RxHandlingDone
000540 D???           00478         bra             processRxAsMIDI_tryRunningStatus
                      00479         
000542                00480 processRxAsMIDI_rxInProgress
                      00481         ; continue if byte is non-STATUS
000542 AE03           00482         btfss   rxByte, 7, ACCESS
000544 D???           00483         bra             processRxAsMIDI_notStatusContinue
                      00484 
                      00485         ; byte is STATUS, continue if EOX
000546 0EF7           00486         movlw   EOX
000548 1803           00487         xorwf   rxByte, w, ACCESS       
                      00488         ; byte is STATUS but not EOX or any other supported STATUS value so ignore
00054A E1??           00489         bnz             processRxAsMIDI_RxHandlingDone
                      00490 
                      00491         ;**** start procedure: save incoming byte to buffer ****
Warning[208]: Label truncated at 32 characters. (processRxAsMIDI_notStatusContinue)
00054C                00492 processRxAsMIDI_notStatusContinue
                      00493         ; check buffer capacity
00054C 0E18           00494         movlw   MAX_MIDI_MESSAGE_SIZE
00054E 600D           00495         cpfslt  uartState_currentRxIndex, ACCESS
                      00496         ; buffer is completely full with incomplete message
                      00497         ; cancel current reception / reset uartState
000550 D???           00498         bra             processRxAsMIDI_resetUartState
                      00499 
                      00500         ;       midiRxMessage[uartState_currentRxIndex] = rxdata
000552 500D           00501         movf    uartState_currentRxIndex, w, ACCESS
000554 C003 FFEB      00502         movff   rxByte, PLUSW_midiRxMessage
                      00503         ;       uartState_currentRxIndex++;
000558 2A0D           00504         incf    uartState_currentRxIndex, f, ACCESS
                      00505                 
                      00506         ;**** start procedure: check if message is complete ****
                      00507         ; for non-SYSEX messages: message reception is complete if uartState_currentRxIndex == midiRxMes
                            sage_length
00055A 500D           00508         movf    uartState_currentRxIndex, w, ACCESS
00055C 620E           00509         cpfseq  midiRxMessage_length, ACCESS
00055E D???           00510         bra             processRxAsMIDI_checkEOX
000560 D???           00511         bra             processRxAsMIDI_messageComplete
                      00512 
                      00513         ; for SYSEX messages: message reception is complete if rxByte == EOX
000562                00514 processRxAsMIDI_checkEOX
000562 0EF7           00515         movlw   EOX
000564 6203           00516         cpfseq  rxByte, ACCESS
                      00517         ; message reception is not complete
000566 D???           00518         bra             processRxAsMIDI_RxHandlingDone  
                      00519 
                      00520         ;**** start procedure: midi message reception is complete ****
000568                00521 processRxAsMIDI_messageComplete 
                      00522         ; update midiRxMessage_length to reflect actual length of SYSEX message
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 89


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000568 500D           00523         movf    uartState_currentRxIndex, w, ACCESS
00056A 6E0E           00524         movwf   midiRxMessage_length, ACCESS
                      00525 
                      00526         ; reset uart state
00056C 9011           00527         bcf             midiFlags, uartState_rxInProgress, ACCESS
                      00528         
                      00529         ; process received message
00056E D???           00530         rcall   midiMessageMapper
000570 D???           00531         bra             processRxAsMIDI_RxHandlingDone
                      00532 
                      00533         ;**** start procedure: attempt to process non-STATUS byte as running STATUS ****
000572                00534 processRxAsMIDI_tryRunningStatus        
                      00535         ; continue if midiState_lastStatus != 0
                      00536         ; midiState_lastStatus is set every time supported STATUS byte is received
                      00537         ; midiState_lastStatus is cleared whenever unsupported STATUS byte is received
000572 520B           00538         movf    midiState_lastStatus, f, ACCESS
000574 E0??           00539         bz              processRxAsMIDI_RxHandlingDone
                      00540 
                      00541         ;**** start procedure: is running STATUS, init uartState for reception ****
000576 8011           00542         bsf             midiFlags, uartState_rxInProgress, ACCESS
                      00543         ;       midiRxMessage.message[0] = midiState_lastStatus
000578 C00B F041      00544         movff   midiState_lastStatus, midiRxMessage
                      00545         ;       midiRxMessage_length = midiState_lastLength
00057C C00C F00E      00546         movff   midiState_lastLength, midiRxMessage_length
                      00547         ;       midiRxMessage.message[1] = rxByte
000580 0E01           00548         movlw   1
000582 C003 FFEB      00549         movff   rxByte, PLUSW_midiRxMessage     
                      00550         ;       uartState_currentRxIndex = 2
000586 0E02           00551         movlw   2
000588 6E0D           00552         movwf   uartState_currentRxIndex, ACCESS
                      00553 
                      00554 
00058A                00555 processRxAsMIDI_RxHandlingDone
                      00556 
                      00557         
00058A                00558 processRxAsMIDI_checkRxFIFO
00058A BA9E           00559         btfsc   PIR1, RCIF, ACCESS
00058C EF?? F???      00560         goto    processRxAsMIDI_readFIFO
                      00561         
000590                00562 processRxAsMIDI_Exit
                      00563 
                      00564         ; undefine variables from pushed registers
                      00565         #undefine       rxByte
                      00566         #undefine       tmpValue
                      00567         #undefine       FSR_midiRxMessage
                      00568         #undefine       PLUSW_midiRxMessage
                      00569         ; pop working regs from software stack
                      00570         POP_R   FSR0H
000590 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00571         POP_R   FSR0L
000594 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00572         POP_R   r1
000598 CFDC F004          M         movff   softwareStackPointerPREINC, r1          ; ++softwareStackPointerINDF = regName
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 90


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00573         POP_R   r0
00059C CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00574                 
0005A0 0012           00575         return
                      00576 
                      00577 
                      00578 ;**********************************************************************
                      00579 ; Function: void midiMessageMapper(midiRxMessage)
                      00580 ;**********************************************************************
                      00581 
0005A2                00582 midiMessageMapper
                      00583         ; push working regs onto software stack
                      00584         PUSH_R  r0
0005A2 C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00585         PUSH_R  r1
0005A6 C004 FFDD          M         movff   r1,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00586         PUSH_R  r2
0005AA C005 FFDD          M         movff   r2,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00587         PUSH_R  r3
0005AE C006 FFDD          M         movff   r3,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00588         PUSH_R  FSR0L
0005B2 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00589         PUSH_R  FSR0H           
0005B6 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00590         ; define variables to pushed registers
                      00591         #define tmpValue                        r0
                      00592         #define statusByte                      r1
                      00593         #define noteNumberByte          r2
                      00594         #define programValue            noteNumberByte
                      00595         #define controllerNumber        noteNumberByte
                      00596         #define velocityByte            r3
                      00597         #define controllerValue         velocityByte
                      00598         #define FSR_midiRxMessage       FSR0
                      00599         #define PLUSW_midiRxMessage     PLUSW0
                      00600         
                      00601         ; do work
0005BA EE00 F041      00602         lfsr    FSR_midiRxMessage, midiRxMessage
                      00603         
                      00604         ;       status = midiRxMessage[0] & 0xf0
0005BE 0E00           00605         movlw   0
0005C0 50EB           00606         movf    PLUSW_midiRxMessage, w, ACCESS
0005C2 0BF0           00607         andlw   0xf0
0005C4 6E04           00608         movwf   statusByte, ACCESS      
                      00609 
                      00610         ; if statusByte != 0xf0 then verify correct channel
0005C6 0AF0           00611         xorlw   0xf0
0005C8 E0??           00612         bz      midiMessageMapper_skipChannelCheck
                      00613         ; message is not SysEx
                      00614         ; ignore incoming channel if internal midiChannel == 6 (MIDI channel 7)
0005CA 5010           00615         movf    midiChannel, w, ACCESS
0005CC 0A06           00616         xorlw   6
0005CE E0??           00617         bz              midiMessageMapper_skipChannelCheck
                      00618         ; verify correct channel, ignore if ((midiRxMessage[0] & 0x0f) != midiChannel)
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 91


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0005D0 0E00           00619         movlw   0
0005D2 50EB           00620         movf    PLUSW_midiRxMessage, w, ACCESS
                      00621         ; mask out channel
0005D4 0B0F           00622         andlw   0x0f
                      00623         ; compare channel
0005D6 6210           00624         cpfseq midiChannel, ACCESS
0005D8 EF?? F???      00625         goto    midiMessageMapper_exit
Warning[208]: Label truncated at 32 characters. (midiMessageMapper_skipChannelCheck)
0005DC                00626 midiMessageMapper_skipChannelCheck
                      00627         
                      00628         ;       noteNumber = midiRxMessage[1]
0005DC 0E01           00629         movlw   1
0005DE 50EB           00630         movf    PLUSW_midiRxMessage, w, ACCESS
0005E0 6E05           00631         movwf   noteNumberByte, ACCESS  
                      00632 
                      00633         ;       velocity = midiRxMessage[2]
0005E2 0E02           00634         movlw   2
0005E4 50EB           00635         movf    PLUSW_midiRxMessage, w, ACCESS
0005E6 6E06           00636         movwf   velocityByte, ACCESS    
                      00637 
                      00638         ;       if((status == NOTE_ON) && (velocity == 0))
                      00639         ;               status = NOTE_OFF;
0005E8 0E90           00640         movlw   NOTE_ON
0005EA 6204           00641         cpfseq  statusByte, ACCESS
0005EC D???           00642         bra             midiMessageMapper_notNoteOnWithZeroVel
0005EE 5206           00643         movf    velocityByte, f, ACCESS
0005F0 E1??           00644         bnz             midiMessageMapper_notNoteOnWithZeroVel  
0005F2 0E80           00645         movlw   NOTE_OFF
0005F4 6E04           00646         movwf   statusByte, ACCESS
Warning[208]: Label truncated at 32 characters. (midiMessageMapper_notNoteOnWithZeroVel)
0005F6                00647 midiMessageMapper_notNoteOnWithZeroVel
                      00648 
                      00649         ; case NOTE_ON
0005F6 0E90           00650         movlw   NOTE_ON
0005F8 6204           00651         cpfseq  statusByte, ACCESS
0005FA D???           00652         bra             midiMessageMapper_notNoteOn
                      00653 
0005FC 5005           00654         movf    noteNumberByte, w, ACCESS
0005FE EC?? F???      00655         call    activeNoteTableAdd
                      00656 
000602 D???           00657         bra             midiMessageMapper_exit
                      00658         ; break
000604                00659 midiMessageMapper_notNoteOn
                      00660         
                      00661         
                      00662         ; case NOTE_OFF
000604 0E80           00663         movlw   NOTE_OFF
000606 6204           00664         cpfseq  statusByte, ACCESS
000608 D???           00665         bra             midiMessageMapper_notNoteOff
                      00666 
00060A 5005           00667         movf    noteNumberByte, w, ACCESS
00060C EC?? F???      00668         call    activeNoteTableRemove
                      00669 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 92


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000610 D???           00670         bra             midiMessageMapper_exit
                      00671         ; break
000612                00672 midiMessageMapper_notNoteOff
                      00673 
                      00674 
                      00675         ; case PITCH_WHEEL
000612 0EE0           00676         movlw   PITCH_WHEEL
000614 6204           00677         cpfseq  statusByte, ACCESS
000616 D???           00678         bra             midiMessageMapper_notPitchWheel
                      00679 
                      00680         ; if sustain is active then ignore pitch
000618 0E01           00681         movlw   SUSTAIN
00061A 1821           00682         xorwf   modeLevel, w, ACCESS
00061C E0??           00683         bz              midiMessageMapper_notPitchWheel
                      00684         
                      00685         ; pitchWheel == pitch wheel value
00061E C042 F01A      00686         movff   midiRxMessage + 1, pitchWheel + 0
                      00687         ; pitchWheel + 0 is only a 7-bit value
                      00688         ; so concatenate received pitch wheel MSB and LSB into contiguous 16-bit value
                      00689         ; roll least significant bit out of received pitch wheel high byte
000622 90D8           00690         bcf             STATUS, C, ACCESS
000624 3043           00691         rrcf    midiRxMessage + 2, w
                      00692         ; if rolled out bit was set then set bit 7 of pitchWheel + 0
000626 B0D8           00693         btfsc   STATUS, C, ACCESS
000628 8E1A           00694         bsf             pitchWheel + 0, 7, ACCESS
                      00695         ; write high byte into pitchWheel
00062A 6E1B           00696         movwf   pitchWheel + 1, ACCESS
00062C 6A1C           00697         clrf    pitchWheel + 2, ACCESS
00062E 6A1D           00698         clrf    pitchWheel + 3, ACCESS
                      00699         ; value has been concatenated into contiguous 16-bit value
                      00700         
                      00701         ; calulate offset from 0x2000 (center)
000630 0E20           00702         movlw   0x20
000632 601B           00703         cpfslt  pitchWheel + 1, ACCESS
000634 D???           00704         bra             midiMessageMapper_pitchPos
                      00705 
                      00706         ; pitch wheel is negative
000636 0E20           00707         movlw   0x20
000638 5E1B           00708         subwf   pitchWheel + 1, f, ACCESS
00063A A0D8           00709         btfss   STATUS, C, ACCESS
00063C 061C           00710         decf    pitchWheel + 2, f, ACCESS       
00063E A0D8           00711         btfss   STATUS, C, ACCESS
000640 061D           00712         decf    pitchWheel + 3, f, ACCESS       
000642 D???           00713         bra             midiMessageMapper_exit
                      00714 
000644                00715 midiMessageMapper_pitchPos
                      00716         ; pitch wheel is positive
000644 0E20           00717         movlw   0x20
000646 5E1B           00718         subwf   pitchWheel + 1, f, ACCESS
000648 D???           00719         bra             midiMessageMapper_exit
                      00720 
00064A                00721 midiMessageMapper_notPitchWheel
                      00722 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 93


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00723 
                      00724         ; case CONTROL_CHANGE
00064A 0EB0           00725         movlw   CONTROL_CHANGE
00064C 6204           00726         cpfseq  statusByte, ACCESS
00064E D???           00727         bra             midiMessageMapper_notControlChange
                      00728 
                      00729         ;       switch(midiRxPoppedMessage.message[1])  // controller #
                      00730         ;       {
                      00731         ;               case ALL_SOUND_OFF:
                      00732         ;               case RESET_ALL_CONTROLLERS:
                      00733         ;               case ALL_NOTES_OFF:
                      00734         ;                       for(=0; count<ACTIVE_NOTE_TABLE_SIZE; count++)
                      00735         ;                               activeNoteTable[count];
                      00736         ;                       initSoundGen();
                      00737         ;               break;
                      00738         ;       }
                      00739 
                      00740         ; **** check for Panic! condition ****
                      00741         ; noteNumber == midiRxMessage[1]
000650 5005           00742         movf    controllerNumber, w, ACCESS
000652 0A78           00743         xorlw   ALL_SOUND_OFF
000654 E0??           00744         bz              midiMessageMapper_doPanic
000656 5005           00745         movf    controllerNumber, w, ACCESS
000658 0A7B           00746         xorlw   ALL_NOTES_OFF
00065A E1??           00747         bnz             midiMessageMapper_notPanic
00065C                00748 midiMessageMapper_doPanic
                      00749         ; passing 0xff to activeNoteTableRemove() will flush table
00065C 0EFF           00750         movlw   0xff
00065E EC?? F???      00751         call    activeNoteTableRemove
000662 D???           00752         bra             midiMessageMapper_exit
000664                00753 midiMessageMapper_notPanic
                      00754 
                      00755         ; **** check for controller reset ****
000664 5005           00756         movf    controllerNumber, w, ACCESS
000666 0A79           00757         xorlw   RESET_ALL_CONTROLLERS
000668 E1??           00758         bnz             midiMessageMapper_notControllerReset
                      00759         ; easiest option is straight-up software reset, so do it!
00066A 00FF           00760         reset
Warning[208]: Label truncated at 32 characters. (midiMessageMapper_notControllerReset)
00066C                00761 midiMessageMapper_notControllerReset
                      00762 
                      00763         ; **** check for Sustain ****
                      00764         ; noteNumber == midiRxMessage[1]
00066C 5005           00765         movf    controllerNumber, w, ACCESS
00066E 0A40           00766         xorlw   SUSTAIN_PEDAL
000670 E1??           00767         bnz             midiMessageMapper_notSustain
                      00768         ; sustain message: <63 means sustain off, >64 mean sustain on
                      00769         ; controllerValue == midiRxMessage[2]
000672 0E3F           00770         movlw   63
000674 6406           00771         cpfsgt  controllerValue, ACCESS
000676 D???           00772         bra             midiMessageMapper_sustainOff
                      00773         ; turn sustain on. Spec says >64 but I'm just doing >63
                      00774         ; set modeLevel to MONO and call userInterface_incMode()
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 94


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000678 0E00           00775         movlw   POLY
00067A 6E21           00776         movwf   modeLevel, ACCESS
00067C EC?? F???      00777         call    userInterface_incMode
000680 D???           00778         bra             midiMessageMapper_exit
000682                00779 midiMessageMapper_sustainOff
                      00780         ; turn sustain off
                      00781         ; set modeLevel to SUSTAIN and call userInterface_incMode()
000682 0E02           00782         movlw   MONO
000684 6E21           00783         movwf   modeLevel, ACCESS
000686 EC?? F???      00784         call    userInterface_incMode
00068A D???           00785         bra             midiMessageMapper_exit
00068C                00786 midiMessageMapper_notSustain
                      00787         
                      00788         ; **** check for POLY MODE OFF ****
00068C 5005           00789         movf    controllerNumber, w, ACCESS
00068E 0A7E           00790         xorlw   POLY_MODE_OFF
000690 E1??           00791         bnz             midiMessageMapper_notPolyOff
000692 0E01           00792         movlw   SUSTAIN
000694 6E21           00793         movwf   modeLevel, ACCESS
000696 EC?? F???      00794         call    userInterface_incMode
00069A D???           00795         bra             midiMessageMapper_exit
00069C                00796 midiMessageMapper_notPolyOff
                      00797         
                      00798         ; **** check for POLY MODE ON ****
00069C 5005           00799         movf    controllerNumber, w, ACCESS
00069E 0A7F           00800         xorlw   POLY_MODE_ON
0006A0 E1??           00801         bnz             midiMessageMapper_notPolyOn
0006A2 0E02           00802         movlw   MONO
0006A4 6E21           00803         movwf   modeLevel, ACCESS
0006A6 EC?? F???      00804         call    userInterface_incMode
0006AA D???           00805         bra             midiMessageMapper_exit
0006AC                00806 midiMessageMapper_notPolyOn
                      00807         
                      00808         
                      00809         ; **** check for Mod Wheel ****
                      00810         ; noteNumber == midiRxMessage[1]
0006AC 5005           00811         movf    controllerNumber, w, ACCESS
0006AE 0A01           00812         xorlw   MODULATION_WHEEL_MSB
0006B0 E1??           00813         bnz             midiMessageMapper_notMod
                      00814 
                      00815         ; if sustain is active then ignore modulation
0006B2 0E01           00816         movlw   SUSTAIN
0006B4 1821           00817         xorwf   modeLevel, w, ACCESS
0006B6 E0??           00818         bz              midiMessageMapper_notMod
                      00819 
                      00820         ; save current modulation value
0006B8 C006 F01E      00821         movff   controllerValue, modulation
                      00822         ; in Sample mode: mainline eeprom read call code uses modulation variable       
                      00823         ; in Sine/Square modes: always modify table base addresses in response to modulation
                      00824         ; init table addresses
                      00825 
0006BC 0E??           00826         movlw   low(sineTable)
0006BE 6E25           00827         movwf   sineTableBaseAddress + 0
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 95


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0006C0 0E??           00828         movlw   high(sineTable)
0006C2 6E26           00829         movwf   sineTableBaseAddress + 1
0006C4 0E??           00830         movlw   upper(sineTable)
0006C6 6E27           00831         movwf   sineTableBaseAddress + 2
                      00832         
0006C8 0E??           00833         movlw   low(squareTable)
0006CA 6E28           00834         movwf   squareTableBaseAddress + 0
0006CC 0E??           00835         movlw   high(squareTable)
0006CE 6E29           00836         movwf   squareTableBaseAddress + 1
0006D0 0E??           00837         movlw   upper(squareTable)
0006D2 6E2A           00838         movwf   squareTableBaseAddress + 2
                      00839         
                      00840         ; push sine backward into modulationBlendTable
0006D4 5006           00841         movf    controllerValue, w, ACCESS
0006D6 5E25           00842         subwf   sineTableBaseAddress + 0, f
0006D8 A0D8           00843         btfss   STATUS, C, ACCESS
0006DA 0626           00844         decf    sineTableBaseAddress + 1, f
0006DC A0D8           00845         btfss   STATUS, C, ACCESS
0006DE 0627           00846         decf    sineTableBaseAddress + 2, f
                      00847 
                      00848         ; push square forward into modulationBlendTable
0006E0 5006           00849         movf    controllerValue, w, ACCESS
0006E2 2628           00850         addwf   squareTableBaseAddress + 0, f
0006E4 B0D8           00851         btfsc   STATUS, C, ACCESS
0006E6 2A29           00852         incf    squareTableBaseAddress + 1, f
0006E8 B0D8           00853         btfsc   STATUS, C, ACCESS
0006EA 2A2A           00854         incf    squareTableBaseAddress + 2, f
0006EC D???           00855         bra             midiMessageMapper_exit  
0006EE                00856 midiMessageMapper_notMod
                      00857         
                      00858         ; **** check for Attack ****
0006EE 5005           00859         movf    controllerNumber, w, ACCESS
0006F0 0A49           00860         xorlw   73
0006F2 E1??           00861         bnz             midiMessageMapper_notAttack
                      00862         ; load tmpValue with 64 for later inversion op
0006F4 0E40           00863         movlw   64
0006F6 6E03           00864         movwf   tmpValue, ACCESS
                      00865         ; do (adsrAttackRate = (controllerValue+1)/2) to scale max range to 0 - 64
0006F8 2806           00866         incf    controllerValue, w, ACCESS
0006FA 90D8           00867         bcf             STATUS, C, ACCESS
0006FC 30E8           00868         rrcf    WREG, w, ACCESS
                      00869         ; do (64 - midiAttackTime) to invert value and make adsrAttackRate logically time-correlated
0006FE 5C03           00870         subwf   tmpValue, w, ACCESS
                      00871         ; save it
000700 6E38           00872         movwf   adsrAttackRate, ACCESS
000702                00873 midiMessageMapper_notAttack
                      00874 
                      00875         ; **** check for Release ****
000702 5005           00876         movf    controllerNumber, w, ACCESS
000704 0A48           00877         xorlw   72
000706 E1??           00878         bnz             midiMessageMapper_notRelease
                      00879         ; load tmpValue with 64 for later inversion op
000708 0E40           00880         movlw   64
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 96


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00070A 6E03           00881         movwf   tmpValue, ACCESS
                      00882         ; do (adsrReleaseRate = (controllerValue+1)/2) to scale max range to 0 - 64
00070C 2806           00883         incf    controllerValue, w, ACCESS
00070E 90D8           00884         bcf             STATUS, C, ACCESS
000710 30E8           00885         rrcf    WREG, w, ACCESS
                      00886         ; do (64 - midiRelease) to invert value and make adsrReleaseRate logically time-correlated
000712 5C03           00887         subwf   tmpValue, w, ACCESS
                      00888         ; save it
000714 6E39           00889         movwf   adsrReleaseRate, ACCESS
000716                00890 midiMessageMapper_notRelease
                      00891 
                      00892 
                      00893 #IFDEF  MIDI_DEBUG_TRIGGER_ENABLED
                      00894 ; DEBUG - assign CC General Purpose 7 as variable dump trigger
                      00895         ; **** check for General Purpose Controller 7 (EDIROL Stop Key default function) ****
                      00896         movf    controllerNumber, w, ACCESS
                      00897         xorlw   MIDI_DEBUG_CC_NAME
                      00898         bnz             midiMessageMapper_notDebugTrigger
                      00899 ;       only call trigger on button down
                      00900         movlw   127
                      00901         cpfslt controllerValue, ACCESS
                      00902         call    midiDebugTriggerHandler
                      00903 midiMessageMapper_notDebugTrigger
                      00904 #ENDIF ; #IFDEF MIDI_DEBUG_TRIGGER_ENABLED
                      00905 
Warning[208]: Label truncated at 32 characters. (midiMessageMapper_notControlChange)
000716                00906 midiMessageMapper_notControlChange
                      00907 
                      00908 
                      00909         ; case PROGRAM_CHANGE
000716 0EC0           00910         movlw   PROGRAM_CHANGE
000718 6204           00911         cpfseq  statusByte, ACCESS
00071A D???           00912         bra             midiMessageMapper_notPG
                      00913         
                      00914         ; Program Change increases will cycle waveform mode in the following direction SINE -> SQUARE ->
                             SAMPLE -> SINE
                      00915         ; Program Change decreases will cycle waveform mode in the following direction SINE -> SAMPLE ->
                             SQUARE -> SINE 
                      00916         
                      00917         ; if value is 0, 1 or 2 then hardset to Sine, Square or Sample
00071C 5005           00918         movf    programValue, w, ACCESS
                      00919         ; do (2 - programValue)
00071E 0802           00920         sublw   2
                      00921         ; if result is negative then do compare
000720 E3??           00922         bnc             midiMessageMapper_pgCompare
                      00923         ; otherwise result is positive so waveShape = programValue
000722 C005 F01F      00924         movff   programValue, waveShape
                      00925         ; waveShape is changing so set needDelgator flag
000726 8419           00926         bsf             soundGenFlags, needRefresh, ACCESS
000728 D???           00927         bra             midiMessageMapper_pgDone        
                      00928 
00072A                00929 midiMessageMapper_pgCompare
                      00930         ; value > 2 so compare current program change value against previous
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 97


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00072A 500F           00931         movf    midiLastProgramValue, w, ACCESS
00072C 6405           00932         cpfsgt  programValue, ACCESS
                      00933         ; set decrement flag
00072E 8219           00934         bsf             soundGenFlags, pgDec, ACCESS
                      00935         ; increment waveform
000730 EC?? F???      00936         call    userInterface_incWaveform
000734                00937 midiMessageMapper_pgDone
                      00938         ; save current as previous
000734 C005 F00F      00939         movff   programValue, midiLastProgramValue
000738                00940 midiMessageMapper_notPG
                      00941 
                      00942         ; case SYSEX
000738 0EF0           00943         movlw   SYSEX
00073A 6204           00944         cpfseq  statusByte, ACCESS
00073C D???           00945         bra             midiMessageMapper_notSysEx
                      00946         ; check for terminal ascii packet
                      00947         ; check Vendor ID
00073E 0E01           00948         movlw 1
000740 50EB           00949         movf    PLUSW_midiRxMessage, w, ACCESS
000742 0A77           00950         xorlw VENDOR_ID
000744 E1??           00951         bnz             midiMessageMapper_notSysEx
                      00952         ; check Device ID
000746 0E02           00953         movlw 2
000748 50EB           00954         movf    PLUSW_midiRxMessage, w, ACCESS
00074A 0A1D           00955         xorlw DEVICE_ID
00074C E1??           00956         bnz             midiMessageMapper_notSysEx
                      00957         ; check Command
00074E 0E03           00958         movlw 3
000750 50EB           00959         movf    PLUSW_midiRxMessage, w, ACCESS
000752 0A1E           00960         xorlw TERMINAL_PACKET_COMMAND_VALUE
000754 E1??           00961         bnz             midiMessageMapper_notSysEx
                      00962         ; packet is terminal ascii so send to terminal
                      00963 #ifdef ENABLE_MIDI_TERMINAL
                      00964         call    midiTerminal_receive
                      00965 #endif
000756                00966 midiMessageMapper_notSysEx
                      00967 
000756                00968 midiMessageMapper_exit
                      00969         ; undefine variables from pushed registers
                      00970         #undefine       tmpValue
                      00971         #undefine       statusByte
                      00972         #undefine       noteNumberByte
                      00973         #undefine       velocityByte
                      00974         #undefine       FSR_midiRxMessage
                      00975         #undefine       PLUSW_midiRxMessage
                      00976         ; pop working regs from software stack
                      00977         POP_R   FSR0H   
000756 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00978         POP_R   FSR0L
00075A CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00979         POP_R   r3
00075E CFDC F006          M         movff   softwareStackPointerPREINC, r3          ; ++softwareStackPointerINDF = regName
                      00980         POP_R   r2
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 98


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000762 CFDC F005          M         movff   softwareStackPointerPREINC, r2          ; ++softwareStackPointerINDF = regName
                      00981         POP_R   r1
000766 CFDC F004          M         movff   softwareStackPointerPREINC, r1          ; ++softwareStackPointerINDF = regName
                      00982         POP_R   r0
00076A CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00983 
00076E 0012           00984         return
                      00985         
                      00986         
                      00323         #include        "../source/eeprom.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      eeprom.asm                                        *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 ; Target EEPROM is On Semiconductor CAT25128 or compatible
                      00022 ; Functions perform no address boundry checking
                      00023 ; Functions do not poll EEPROM for Ready so period between EEPROM write requests must be >5mS per CAT251
                            28 datasheet
                      00024 
                      00025 ;**********************************************************************
                      00026 ; INCLUDES
                      00027 ;**********************************************************************
                      00028 
                      00029         #include "../header/eeprom.h"
                      00215 
                      00216 ;**********************************************************************
                      00217 ;                                                                     *
                      00218 ;    Project:       deMIDulator                                       *
                      00219 ;    Filename:      eeprom.h                                          *
                      00220 ;    Date:                                                            *
                      00221 ;    File Version:                                                    *
                      00222 ;                                                                     *
                      00223 ;    Author:        Derek Enos                                        *
                      00224 ;    Company:                                                         *
                      00225 ;                                                                     * 
                      00226 ;                                                                     *
                      00227 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 99


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00228 ;                                                                     *
                      00229 ;    Files required:                                                  *
                      00230 ;                                                                     *
                      00231 ;                                                                     *
                      00232 ;                                                                     *
                      00233 ;**********************************************************************
                      00234 
                      00235 #ifndef _EEPROMH_
                      00236 #define _EEPROMH_
                      00237 
                      00238 ; ******************* FLAG VARIABLE DEFINITIONS ***********************
                      00239 
                      00240 ; eepromFlags
                      00241 #define sampleChunkReady        0
                      00242 #define samplesLoaded                   1
                      00243 #define intState                                        2
                      00244 #define ready                                           3
                      00245 
                      00246 ; CAT25128 Status reg flags
                      00247 #define NOT_RDY 0
                      00248 #define WEL                     1
                      00249 #define BP0                     2
                      00250 #define BP1                     3
                      00251 #define WPEN            7
                      00252 
                      00253 ; ******************* COMMAND DEFINES ***********************
                      00254 #define EE_WREN         B'00000110'     ; Enable Write Operations
                      00255 #define EE_WRDI         B'00000100'     ; Disable Write Operations
                      00256 #define EE_RDSR         B'00000101'     ; Read Status Register
                      00257 #define EE_WRSR         B'00000001'     ; Write Status Register
                      00258 #define EE_READ         B'00000011'     ; Read Data from Memory
                      00259 #define EE_WRITE        B'00000010'     ; Write Data to Memory
                      00260 
                      00261 ; ******************* GENERAL DEFINES ***********************
                      00262 #define SAMPLE_DATA_BUFFER_SIZE 64
                      00263 #define EEPROM_SIZE_BITS 128000
                      00264 #define NEXT_SAMPLE_ADDRESSES_EL_SIZE   2
                      00265 
                      00266 ;**********************************************************************
                      00267 ; MACROS
                      00268 ;**********************************************************************
                      00269 
                      00270 
                      00271 ;**********************************************************************
                      00272 ASSERT_SS       MACRO
                      00273         bcf             LATC, RC6, ACCESS       ; Chip select is active
                      00274         ENDM
                      00275 
                      00276 ;**********************************************************************
                      00277 DEASSERT_SS     MACRO
                      00278         bsf             LATC, RC6, ACCESS       ; Chip select is idle
                      00279         ENDM
                      00280 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 100


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00281 ;**********************************************************************
                      00282 EE_DISABLE_INTS MACRO
                      00283         bcf             eepromFlags, intState, ACCESS
                      00284         btfsc   INTCON, GIE, ACCESS
                      00285         bsf             eepromFlags, intState, ACCESS
                      00286         bcf             INTCON, GIE, ACCESS
                      00287         ENDM
                      00288 
                      00289 ;**********************************************************************
                      00290 EE_RESTORE_INTS MACRO
                      00291         btfsc   eepromFlags, intState, ACCESS
                      00292         bsf             INTCON, GIE, ACCESS
                      00293         ENDM
                      00294 
                      00295 ;**********************************************************************
                      00296 WRITE_INTERNAL_EEPROM   MACRO   literal_address, register_value
                      00297         local   writeIntEE_loop
                      00298         
                      00299         ; load address
                      00300         movlw   literal_address
                      00301         movwf   EEADR, ACCESS
                      00302         ; load value
                      00303         movff   register_value, EEDATA
                      00304         ; configure eeprom
                      00305         ; point to EEPROM DATA memory
                      00306         bcf             EECON1, EEPGD, ACCESS
                      00307         ; Access EEPROM/Program
                      00308         bcf             EECON1, CFGS, ACCESS    
                      00309         ; Enable writes
                      00310         bsf             EECON1, WREN, ACCESS
                      00311 
                      00312         ; don't have to disable interrupts because I'm only calling this
                      00313         ; from within the high-priority ISR
                      00314 
                      00315         ; required write enable sequence
                      00316         movlw   0x55
                      00317         movwf   EECON2, ACCESS
                      00318         movlw   0xAA
                      00319         movwf   EECON2, ACCESS
                      00320 
                      00321         ; set WR bit to begin write
                      00322         bsf             EECON1, WR, ACCESS
                      00323 writeIntEE_loop
                      00324         ; wait for write to complete
                      00325         btfsc   EECON1, WR, ACCESS
                      00326         bra             writeIntEE_loop
                      00327         ; disable writes
                      00328         bcf             EECON1, WREN, ACCESS
                      00329 
                      00330         ; point to Program memory
                      00331         bsf             EECON1, EEPGD, ACCESS
                      00332 
                      00333         ENDM
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 101


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00334 
                      00335 ;**********************************************************************
                      00336 WRITE_INTERNAL_EEPROM_FROM_REGS MACRO   address, data
                      00337         local   writeIntEE_loop
                      00338         
                      00339         ; load address
                      00340         movff   address, EEADR
                      00341         ; load value
                      00342         movff   data, EEDATA
                      00343         ; configure eeprom
                      00344         ; point to EEPROM DATA memory
                      00345         bcf             EECON1, EEPGD, ACCESS
                      00346         ; Access EEPROM/Program
                      00347         bcf             EECON1, CFGS, ACCESS    
                      00348         ; Enable writes
                      00349         bsf             EECON1, WREN, ACCESS
                      00350 
                      00351         ; don't have to disable interrupts because I'm only calling this
                      00352         ; from within the high-priority ISR
                      00353 
                      00354         ; required write enable sequence
                      00355         movlw   0x55
                      00356         movwf   EECON2, ACCESS
                      00357         movlw   0xAA
                      00358         movwf   EECON2, ACCESS
                      00359 
                      00360         ; set WR bit to begin write
                      00361         bsf             EECON1, WR, ACCESS
                      00362 writeIntEE_loop
                      00363         ; wait for write to complete
                      00364         btfsc   EECON1, WR, ACCESS
                      00365         bra             writeIntEE_loop
                      00366         ; disable writes
                      00367         bcf             EECON1, WREN, ACCESS
                      00368 
                      00369         ; point to Program memory
                      00370         bsf             EECON1, EEPGD, ACCESS
                      00371 
                      00372         ENDM
                      00373 
                      00374 ;;**********************************************************************
                      00375 ;;SPI_TX_LITERAL_RX_IN_WREG     MACRO   value
                      00376 ;       local   waitLoop
                      00377 ;
                      00378 ;; routine as recommended in Microchip PIC18F2458/2553/4458/4553 errata
                      00379 ;
                      00380 ;       ; clear interrupt flag
                      00381 ;       bcf             PIR1, SSPIF, ACCESS
                      00382 ;
                      00383 ;       ; perform read, even if the data in SSPBUF is not important 
                      00384 ;       movf    SSPBUF, w, ACCESS
                      00385 ;
                      00386 ;       ; SSPBUF = value
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 102


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00387 ;       movlw   value
                      00388 ;       movwf   SSPBUF, ACCESS
                      00389 ;
                      00390 ;       ; wait fro transfer to complete
                      00391 ;waitLoop
                      00392 ;       btfss   PIR1, SSPIF, ACCESS
                      00393 ;       bra             waitLoop
                      00394 ;
                      00395 ;       ; the data received should be valid
                      00396 ;       movf    SSPBUF, w, ACCESS
                      00397 ;
                      00398 ;       ENDM
                      00399                                                 
                      00400 ;;**********************************************************************
                      00401 ;SPI_TX_WREG_RX_IN_WREG MACRO
                      00402 ;       local   waitLoop
                      00403 ;
                      00404 ;       ; save WREG to software stack
                      00405 ;       PUSH_R  WREG
                      00406 ;       
                      00407 ;; routine as recommended in Microchip PIC18F2458/2553/4458/4553 errata
                      00408 ;       ; clear interrupt flag
                      00409 ;       bcf             PIR1, SSPIF, ACCESS
                      00410 ;
                      00411 ;       ; perform read, even if the data in SSPBUF is not important 
                      00412 ;       movf    SSPBUF, w, ACCESS
                      00413 ;
                      00414 ;       ; SSPBUF = restored WREG from software stack
                      00415 ;       POP_R   WREG
                      00416 ;       movwf   SSPBUF, ACCESS
                      00417 ;
                      00418 ;       ; wait for transfer to complete
                      00419 ;waitLoop
                      00420 ;       btfss   PIR1, SSPIF, ACCESS
                      00421 ;       bra             waitLoop
                      00422 ;
                      00423 ;       ; the data received should be valid
                      00424 ;       movf    SSPBUF, w, ACCESS
                      00425 ;
                      00426 ;       ENDM
                      00427 
                      00428 #endif
                      00030         #include "../header/softwareStack.h"
                      00042 
                      00043 ;**********************************************************************
                      00044 ;                                                                     *
                      00045 ;    Project:       deMIDulator                                       *
                      00046 ;    Filename:      softwareStack.h                                   *
                      00047 ;    Date:                                                            *
                      00048 ;    File Version:                                                    *
                      00049 ;                                                                     *
                      00050 ;    Author:        Derek Enos                                        *
                      00051 ;    Company:                                                         *
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 103


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00052 ;                                                                     * 
                      00053 ;                                                                     *
                      00054 ;**********************************************************************
                      00055 ;                                                                     *
                      00056 ;    Files required:                                                  *
                      00057 ;                                                                     *
                      00058 ;                                                                     *
                      00059 ;                                                                     *
                      00060 ;**********************************************************************
                      00061 
                      00062 #ifndef SOFTWARESTACK_H
                      00063 #define SOFTWARESTACK_H
                      00064 
                      00065         #define softwareStackPointerFSR         FSR2
                      00066         #define softwareStackPointerINDF        INDF2
                      00067         #define softwareStackPointerPOSTINC     POSTINC2
                      00068         #define softwareStackPointerPOSTDEC     POSTDEC2
                      00069         #define softwareStackPointerPREINC      PREINC2 
                      00070         #define softwareStackPointerPLUSW       PLUSW2  
                      00071 
                      00072 ; **** MACRO: PUSH_R    regName
                      00073 PUSH_R  MACRO   regName
                      00074         movff   regName, softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00075                 ENDM
                      00076                 
                      00077 ; **** MACRO: POP_R     regName
                      00078 POP_R   MACRO   regName
                      00079         movff   softwareStackPointerPREINC, regName     ; ++softwareStackPointerINDF = regName
                      00080                 ENDM
                      00081 
                      00082 #endif
                      00031         
                      00032 
                      00033 ;**********************************************************************
                      00034 ; LOCAL VARIABLES
                      00035 ;**********************************************************************
                      00036 
                      00037         CBLOCK
  00000012            00038                 sampleDataBufferIndex:1
  00000013            00039                 sampleChunkCount:1
  00000014            00040                 sampleEndAddress:2
  00000016            00041                 nextSampleAddress:2
                      00042                 
  00000018            00043                 eepromFlags:1
                      00044                 ; bits defined in eeprom.h
                      00045                 ; #define sampleChunkReady      0
                      00046                 ; #define samplesLoaded                 1
                      00047                 ; #define intState                                      2
                      00048                 ; #define       ready                                           3
                      00049 
                      00050                 ; Declared at end of main.asm to ensure that arrays are pushed to end of memory...
                      00051                 ; with smaller variables in ACCESS memory
                      00052                 ; ---------------------------------------
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 104


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00053                 ; sampleDataBuffer:SAMPLE_DATA_BUFFER_SIZE
                      00054                 ; nextSampleAddresses:MAX_POLY_DEPTH * NEXT_SAMPLE_ADDRESSES_EL_SIZE
                      00055 
                      00056         ENDC
                      00057                         
                      00058 
                      00059 ;**********************************************************************
                      00060 ; LOCAL FUNCTIONS
                      00061 ;**********************************************************************
                      00062 
                      00063 ;**********************************************************************
                      00064 ; Function: wreg eepromXferSingleByte(byte wreg)
                      00065 ;**********************************************************************
                      00066         ; !! Function does not assert Slave Select signal and so should not be called directly
                      00067         ; !! Function is called by other EEPROM functions
000770                00068 eepromXferSingleByte
                      00069 
                      00070         ; save current global interrupt enable state, disable global interrupts
                      00071         EE_DISABLE_INTS
000770 9418               M         bcf             eepromFlags, intState, ACCESS
000772 BEF2               M         btfsc   INTCON, GIE, ACCESS
000774 8418               M         bsf             eepromFlags, intState, ACCESS
000776 9EF2               M         bcf             INTCON, GIE, ACCESS
                      00072 
                      00073         ;**** start procedure: SPI transfer. TX value = WREG, WREG = RX value ****
                      00074         ; push WREG to software stack
                      00075         PUSH_R  WREG
000778 CFE8 FFDD          M         movff   WREG,    softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00076 
                      00077         ; perform read, even if the data in SSPBUF is not important 
00077C 50C9           00078         movf    SSPBUF, w, ACCESS
                      00079 
                      00080         ; clear Write Collision flag
00077E 9EC6           00081         bcf             SSPCON1, WCOL, ACCESS
                      00082 
                      00083         ; SSPBUF = restored WREG from software stack
                      00084         POP_R   WREG
000780 CFDC FFE8          M         movff   softwareStackPointerPREINC, WREG        ; ++softwareStackPointerINDF = regName
000784 6EC9           00085         movwf   SSPBUF, ACCESS
                      00086 
                      00087         ; skip if no Write Collision occurred 
000786 BEC6           00088         btfsc   SSPCON1, WCOL, ACCESS
                      00089         ; collision occured, return WREG
000788 D???           00090         bra             eepromXferSingleByte_exit
                      00091 
                      00092         ; clear interrupt flag
00078A 969E           00093         bcf             PIR1, SSPIF, ACCESS
                      00094 
00078C                00095 eepromXferSingleByte_lp
                      00096         ; wait for transfer to complete
                      00097 #ifndef __DEBUG
00078C A69E           00098         btfss   PIR1, SSPIF, ACCESS
00078E D???           00099         bra             eepromXferSingleByte_lp 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 105


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00100 #else
                      00101         ; if DEBUG then simulate worst case transaction time
                      00102         ; SPI Clock = 4MHz = Instruction Clock so it should take 8 instruction cycles per byte transfer
                      00103         ; 3 cycles elapsed since SSPBUF load so make up the 5 cycle balance + loop error of ~5 cycles
                      00104         ; balance
                      00105         nop
                      00106         nop
                      00107         nop
                      00108         nop
                      00109         nop
                      00110         ; potential error
                      00111         nop
                      00112         nop
                      00113         nop
                      00114         nop
                      00115         nop
                      00116 #endif
                      00117 
                      00118         ; the data received should be valid
000790 50C9           00119         movf    SSPBUF, w, ACCESS
                      00120         
000792                00121 eepromXferSingleByte_exit
                      00122 
                      00123         ; restore global interrupt enable state
                      00124         EE_RESTORE_INTS
000792 B418               M         btfsc   eepromFlags, intState, ACCESS
000794 8EF2               M         bsf             INTCON, GIE, ACCESS
                      00125 
000796 0012           00126         return
                      00127 
                      00128 
                      00129 ;**********************************************************************
                      00130 ; Function: void initExternalEEPROM(void)
                      00131 ;**********************************************************************
                      00132 
000798                00133 initExternalEEPROM
                      00134         ; enable EEPROM writes
000798 EC?? F???      00135         call    eepromWriteEnable
                      00136 
                      00137         ; init Status register
                      00138         ; Bank Protect bits, BP1:0, = 0
                      00139         ; Write Protect Enable bit, WPEN, = 0
                      00140         ; !WP pin on IC is pulled HIGH so WPEN would have no effect either way 
00079C 0E00           00141         movlw   0
00079E EC?? F???      00142         call    eepromWriteStatusReg
                      00143 
                      00144         ; init EEPROM variables 
0007A2 6A12           00145         clrf    sampleDataBufferIndex, ACCESS
0007A4 6A13           00146         clrf    sampleChunkCount, ACCESS
0007A6 6A16           00147         clrf    nextSampleAddress, ACCESS
0007A8 6A17           00148         clrf    nextSampleAddress + 1, ACCESS
0007AA 9018           00149         bcf             eepromFlags, sampleChunkReady, ACCESS
0007AC 9218           00150         bcf             eepromFlags, samplesLoaded, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 106


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00151 
                      00152         ; recall saved sampleEndAddress from uC's internal EEPROM in little endian format
0007AE 0E00           00153         movlw   0
0007B0 EC?? F???      00154         call    eepromInternalRead
0007B4 6E14           00155         movwf   sampleEndAddress, ACCESS
0007B6 0E01           00156         movlw   1
0007B8 EC?? F???      00157         call    eepromInternalRead
0007BC 6E15           00158         movwf   sampleEndAddress + 1, ACCESS
                      00159         
0007BE 0012           00160         return
                      00161 
                      00162 
                      00163 ;**********************************************************************
                      00164 ; Function: void eepromWriteEnable(void)
                      00165 ;**********************************************************************
                      00166 
0007C0                00167 eepromWriteEnable
                      00168 
                      00169         ; assert SLave Select signal
                      00170         ASSERT_SS
0007C0 9C8B               M         bcf             LATC, RC6, ACCESS       ; Chip select is active
                      00171 
                      00172         ; first write to SSPBUF in routine so we need to check for collision
                      00173         ; if collision then continue to attempt write
0007C2                00174 eepromWriteEnable_lp
0007C2 0E06           00175         movlw   EE_WREN
0007C4 EC?? F???      00176         call    eepromXferSingleByte
0007C8 BEC6           00177         btfsc   SSPCON1, WCOL, ACCESS
0007CA D???           00178         bra             eepromWriteEnable_lp
                      00179 
                      00180         ; deassert Slave Select signal
                      00181         DEASSERT_SS
0007CC 8C8B               M         bsf             LATC, RC6, ACCESS       ; Chip select is idle
                      00182         
0007CE 0012           00183         return
                      00184 
                      00185 
                      00186 ;**********************************************************************
                      00187 ; Function: void eepromReadStatusReg(byte wreg)
                      00188 ;**********************************************************************
                      00189 
0007D0                00190 eepromReadStatusReg
                      00191         
                      00192         ; assert Slave Select signal
                      00193         ASSERT_SS
0007D0 9C8B               M         bcf             LATC, RC6, ACCESS       ; Chip select is active
                      00194 
                      00195         ; first write to SSPBUF in routine so we need to check for collision
                      00196         ; if collision then continue to attempt write
0007D2                00197 eepromReadStatusReg_doLp1
0007D2 0E05           00198         movlw   EE_RDSR
0007D4 EC?? F???      00199         call    eepromXferSingleByte
0007D8 BEC6           00200         btfsc   SSPCON1, WCOL, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 107


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0007DA D???           00201         bra             eepromReadStatusReg_doLp1
                      00202         
                      00203         ; routine is now synchronized with SSP operation so no need to check WCOl
                      00204 
                      00205         ; send dummy value while receiving Status register
0007DC 0E00           00206         movlw   0
0007DE EC?? F???      00207         call    eepromXferSingleByte
                      00208 
                      00209         ; read Status Reg complete
                      00210         ; WREG = EEPROM Status
                      00211 
                      00212         ; deassert Slave Select signal
                      00213         DEASSERT_SS
0007E2 8C8B               M         bsf             LATC, RC6, ACCESS       ; Chip select is idle
                      00214 
0007E4 0012           00215         return
                      00216 
                      00217 
                      00218 ;**********************************************************************
                      00219 ; Function: void eepromWriteStatusReg(byte wreg)
                      00220 ;**********************************************************************
                      00221 
0007E6                00222 eepromWriteStatusReg
                      00223 
                      00224         ; push working regs onto software stack
                      00225         PUSH_R  r0
0007E6 C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00226         ; define variables to pushed registers
                      00227         #define statusRegValue  r0
                      00228 
                      00229         ; save argument passed in WREG
0007EA 6E03           00230         movwf   statusRegValue, ACCESS
                      00231         
                      00232         ; assert Slave Select signal
                      00233         ASSERT_SS
0007EC 9C8B               M         bcf             LATC, RC6, ACCESS       ; Chip select is active
                      00234 
                      00235         ; first write to SSPBUF in routine so we need to check for collision
                      00236         ; if collision then continue to attempt write
0007EE                00237 eepromWriteStatusReg_doLp1
0007EE 0E01           00238         movlw   EE_WRSR
0007F0 EC?? F???      00239         call    eepromXferSingleByte
0007F4 BEC6           00240         btfsc   SSPCON1, WCOL, ACCESS
0007F6 D???           00241         bra             eepromWriteStatusReg_doLp1
                      00242         
                      00243         ; routine is now synchronized with SSP operation so no need to check WCOl
                      00244 
                      00245         ; send Status register value to write
0007F8 5003           00246         movf    statusRegValue, w, ACCESS
0007FA EC?? F???      00247         call    eepromXferSingleByte
                      00248 
                      00249         ; write Status Reg complete
                      00250 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 108


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00251         ; deassert Slave Select signal
                      00252         DEASSERT_SS
0007FE 8C8B               M         bsf             LATC, RC6, ACCESS       ; Chip select is idle
                      00253 
                      00254         ; pop working regs onto software stack
                      00255         POP_R   r0
000800 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00256         ; undefine variables from popped registers
                      00257         #undefine       statusRegValue
                      00258 
000804 0012           00259         return
                      00260 
                      00261 
                      00262 ;**********************************************************************
                      00263 ; Function: sampleDataBuffer[0] = eepromReadSingleByte(nextSampleAddress)
                      00264 ;**********************************************************************
                      00265 
000806                00266 eepromReadSingleByte
                      00267 
                      00268         ; push working regs onto software stack
                      00269         PUSH_R  r0
000806 C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00270         PUSH_R  FSR0L
00080A CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00271         PUSH_R  FSR0H
00080E CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00272         ; define variables to pushed registers
                      00273         #define tmpValue                                r0
                      00274         #define FSR_sampleDataBuffer    FSR0
                      00275         #define PLUSW_sampleDataBuffer  PLUSW0  
                      00276                 
                      00277         ; load pointer
000812 EE00 F072      00278         lfsr    FSR_sampleDataBuffer, sampleDataBuffer
                      00279 
                      00280         ; assert Slave Select signal
                      00281         ASSERT_SS
000816 9C8B               M         bcf             LATC, RC6, ACCESS       ; Chip select is active
                      00282         
                      00283         ; first write to SSPBUF in routine so we need to check for collision
                      00284         ; if collision then continue to attempt write
000818                00285 eepromReadSingleByte_lp1
000818 0E03           00286         movlw   EE_READ
00081A EC?? F???      00287         call    eepromXferSingleByte
00081E BEC6           00288         btfsc   SSPCON1, WCOL, ACCESS
000820 D???           00289         bra             eepromReadSingleByte_lp1
                      00290         
                      00291         ; send address HIGH byte
000822 5017           00292         movf    nextSampleAddress + 1, w, ACCESS
000824 EC?? F???      00293         call    eepromXferSingleByte
                      00294 
                      00295         ; send address LOW byte
000828 5016           00296         movf    nextSampleAddress, w, ACCESS
00082A EC?? F???      00297         call    eepromXferSingleByte
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 109


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00298 
                      00299         ; send dummy 0x00 value, get byte from EEPROM
00082E 0E00           00300         movlw   0
000830 EC?? F???      00301         call    eepromXferSingleByte
                      00302         
                      00303         ; deassert Slave Select signal
                      00304         DEASSERT_SS
000834 8C8B               M         bsf             LATC, RC6, ACCESS       ; Chip select is idle
                      00305 
                      00306         ; pop working regs from software stack
                      00307         POP_R   FSR0H
000836 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00308         POP_R   FSR0L
00083A CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00309         POP_R   r0
00083E CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00310         ; undefine variables from popped registers
                      00311         #undefine       tmpValue
                      00312         #undefine       FSR_sampleDataBuffer
                      00313         #undefine       PLUSW_sampleDataBuffer
                      00314 
000842 0012           00315         return
                      00316 
                      00317 
                      00318 ;**********************************************************************
                      00319 ; Function: void eepromWrite64(void)
                      00320 ;**********************************************************************
                      00321 
000844                00322 eepromWrite64
                      00323         ; push working regs onto software stack
                      00324         PUSH_R  r0
000844 C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00325         PUSH_R  FSR0L
000848 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00326         PUSH_R  FSR0H
00084C CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00327         PUSH_R  PRODL   
000850 CFF3 FFDD          M         movff   PRODL,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00328         PUSH_R  PRODH
000854 CFF4 FFDD          M         movff   PRODH,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00329         ; define variables to pushed registers
                      00330         #define index                                           r0
                      00331         #define FSR_sampleDataBuffer            FSR0
                      00332         #define PLUSW_sampleDataBuffer          PLUSW0  
                      00333 
                      00334         ; load fsr
000858 EE00 F072      00335         lfsr    FSR_sampleDataBuffer, sampleDataBuffer  
                      00336         
                      00337         ;**** start procedure: send 'WRITE ENABLE' command to EEPROM ****
                      00338         ; eepromWriteEnable function takes care of waiting for collision-free write
00085C EC?? F???      00339         call    eepromWriteEnable
                      00340 
                      00341         ; routine is now synchronized with SSP operation so no need to check WCOl
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 110


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00342         
                      00343         ;**** start procedure: send 'WRITE' command to EEPROM ****
                      00344         ; assert Slave Select signal
                      00345         ASSERT_SS
000860 9C8B               M         bcf             LATC, RC6, ACCESS       ; Chip select is active
                      00346 
                      00347         ; load EEPROM WRITE command value into WREG
000862 0E02           00348         movlw   EE_WRITE
                      00349         ; write command value into SSPBUF
000864 EC?? F???      00350         call    eepromXferSingleByte
                      00351 
                      00352         ; load EEPROM WRITE ADDRESS into SSPBUF
                      00353         ; calculate EEPROM write address for current sample data chunk
                      00354         ; address = ((sampleChunkCount - 1) * SAMPLE_DATA_BUFFER_SIZE);
                      00355         ; after multiply, registers PRODH:L = address
000868 0413           00356         decf    sampleChunkCount, w, ACCESS
00086A 0D40           00357         mullw   SAMPLE_DATA_BUFFER_SIZE
                      00358 
                      00359         ; load EEPROM WRITE ADDRESS HIGH BYTE into SSPBUF
                      00360 
                      00361 ; [Problem Code Begin]
                      00362 ; this code breaks EEPROM write
                      00363 ;       movff   PRODH, SSPBUF
                      00364 ; DEBUG
                      00365 ; but this code works
00086C 50F4           00366         movf    PRODH, w, ACCESS
                      00367         ; write command value into SSPBUF
00086E EC?? F???      00368         call    eepromXferSingleByte
                      00369 ; [Problem Code End]
                      00370 
                      00371         ; load EEPROM WRITE ADDRESS LOW BYTE into SSPBUF
                      00372 
                      00373 ; [Problem Code Begin]
                      00374 ; this code breaks EEPROM write
                      00375 ;       movff   PRODL, SSPBUF
                      00376 ; DEBUG
                      00377 ; but this code works
000872 50F3           00378         movf    PRODL, w, ACCESS
                      00379         ; write command value into SSPBUF
000874 EC?? F???      00380         call    eepromXferSingleByte
                      00381 ; [Problem Code End]
                      00382         
                      00383         ; write 64-byte sampleDataBuffer to EEPROM
                      00384         ; init index to point at first element in buffer
000878 6A03           00385         clrf    index, ACCESS
00087A                00386 eepromWrite64_sendBuffer
                      00387         ; SSPBUF = sampleDataBuffer(index)
                      00388 
                      00389 ; [Problem Code Begin]
                      00390 ; this code breaks EEPROM writing
                      00391 ;       movf    index, w, ACCESS
                      00392 ;       movff   PLUSW_sampleDataBuffer, SSPBUF
                      00393 ; DEBUG
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 111


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00394 ; but this code works
00087A 5003           00395         movf    index, w, ACCESS
00087C 50EB           00396         movf    PLUSW_sampleDataBuffer, w, ACCESS
                      00397         ; write data into SSPBUF
00087E EC?? F???      00398         call    eepromXferSingleByte
                      00399 ; [Problem Code End]
                      00400 
                      00401         ; increment index
000882 2A03           00402         incf    index, f, ACCESS
                      00403         ; if index is == SAMPLE_DATA_BUFFER_SIZE then entire buffer has been sent
000884 0E40           00404         movlw   SAMPLE_DATA_BUFFER_SIZE
000886 6203           00405         cpfseq  index, ACCESS
                      00406         ; not done so continue
000888 D???           00407         bra             eepromWrite64_sendBuffer
                      00408         
                      00409         ; entire buffer has been sent
                      00410         ; buffer write request complete
                      00411 
                      00412         ; clear eeprom ready flag to signal that eeprom will be unavailable for a bit while the write co
                            mpletes
00088A 9618           00413         bcf             eepromFlags, ready, ACCESS
                      00414 
                      00415         ; deassert Slave Select signal
                      00416         DEASSERT_SS                                                     
00088C 8C8B               M         bsf             LATC, RC6, ACCESS       ; Chip select is idle
                      00417 
                      00418         ; undefine variables from pushed registers
                      00419         #undefine       index
                      00420         #undefine       FSR_sampleDataBuffer
                      00421         #undefine       PLUSW_sampleDataBuffer
                      00422         ; pop working regs from software stack
                      00423         POP_R   PRODH   
00088E CFDC FFF4          M         movff   softwareStackPointerPREINC, PRODH       ; ++softwareStackPointerINDF = regName
                      00424         POP_R   PRODL
000892 CFDC FFF3          M         movff   softwareStackPointerPREINC, PRODL       ; ++softwareStackPointerINDF = regName
                      00425         POP_R   FSR0H   
000896 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00426         POP_R   FSR0L
00089A CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00427         POP_R   r0
00089E CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00428 
0008A2 0012           00429         return
                      00430         
                      00431         
                      00432 ;**********************************************************************
                      00433 ; Function: void initInternalEEPROM(void)
                      00434 ;**********************************************************************
                      00435 
0008A4                00436 initInternalEEPROM
                      00437         ; ensure that access is always to Program Memory aside from inside EEPROM functions
                      00438         ; EEPGD (1 = Access Program Memory, 0 = Access EEPROM)
0008A4 8EA6           00439         bsf             EECON1, EEPGD, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 112


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00440         ; CFGS (1 = Access Configuration Registers, 0 = Access Program Memory or EEPROM)
0008A6 9CA6           00441         bcf             EECON1, CFGS, ACCESS
                      00442 
0008A8 0012           00443         return
                      00444         
                      00445 
                      00446 ;**********************************************************************
                      00447 ; Function: wreg eepromInternalRead(wreg address)
                      00448 ;**********************************************************************
                      00449 
0008AA                00450 eepromInternalRead
                      00451         ; load address
0008AA 6EA9           00452         movwf   EEADR, ACCESS
                      00453         ; EEPGD (1 = Access Program Memory, 0 = Access EEPROM)
0008AC 9EA6           00454         bcf             EECON1, EEPGD, ACCESS
                      00455         ; start read
0008AE 80A6           00456         bsf             EECON1, RD, ACCESS
                      00457         ; save read value to wreg
0008B0 50A8           00458         movf    EEDATA, w, ACCESS
                      00459         ; ensure that access is always to Program Memory aside from inside EEPROM functions
                      00460         ; EEPGD (1 = Access Program Memory, 0 = Access EEPROM)
0008B2 8EA6           00461         bsf             EECON1, EEPGD, ACCESS
                      00462 
0008B4 0012           00463         return
                      00464 
                      00465 
                      00466 
                      00467 
                      00324         #include        "../source/soundGen.asm"
                      00001         
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      soundGen.asm                                      *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 ;**********************************************************************
                      00022 ; INCLUDE FILES
                      00023 ;**********************************************************************
                      00024 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 113


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00025         #include        "../header/soundGen.h"
                      01055 
                      01056 ;**********************************************************************
                      01057 ;                                                                     *
                      01058 ;    Project:       deMIDulator                                       *
                      01059 ;    Filename:      soundGen.h                                        *
                      01060 ;    Date:                                                            *
                      01061 ;    File Version:                                                    *
                      01062 ;                                                                     *
                      01063 ;    Author:        Derek Enos                                        *
                      01064 ;    Company:                                                         *
                      01065 ;                                                                     * 
                      01066 ;                                                                     *
                      01067 ;**********************************************************************
                      01068 ;                                                                     *
                      01069 ;    Files required:                                                  *
                      01070 ;                                                                     *
                      01071 ;                                                                     *
                      01072 ;                                                                     *
                      01073 ;**********************************************************************
                      01074 
                      01075 #ifndef _SOUNDGENH_
                      01076 #define _SOUNDGENH_
                      01077 
                      01078 ;**********************************************************************
                      01079 ; GENERAL
                      01080 ;**********************************************************************
                      01081 
                      01082 ; Current code structure requires that MAX_POLY_DEPTH be set to 4!
                      01083 #define MAX_POLY_DEPTH                                  4       
                      01084 
                      01085 #define ACTIVE_NOTE_DELTAS_ELEMENT_SIZE 2
                      01086 #define ACTIVE_NOTE_DELTAS_SIZE                 MAX_POLY_DEPTH * ACTIVE_NOTE_DELTAS_ELEMENT_SIZE
                      01087 
                      01088 #define DELEGATED_DELTAS_ELEMENT_SIZE   2
                      01089 #define DELEGATED_DELTAS_SIZE                   MAX_POLY_DEPTH * DELEGATED_DELTAS_ELEMENT_SIZE
                      01090 
                      01091 #define OSC_DELTAS_ELEMENT_SIZE                 2
                      01092 #define OSC_DELTAS_SIZE                                 MAX_POLY_DEPTH * OSC_DELTAS_ELEMENT_SIZE
                      01093 
                      01094 #define ACCUMULATORS_ELEMENT_SIZE               4
                      01095 #define ACCUMULATORS_SIZE                               MAX_POLY_DEPTH * ACCUMULATORS_ELEMENT_SIZE
                      01096 
                      01097 #define ACTIVE_OUTPUT_VALUES_EL_SIZE    1
                      01098 #define ACTIVE_OUTPUT_VALUES_SIZE               MAX_POLY_DEPTH * ACTIVE_OUTPUT_VALUES_EL_SIZE
                      01099 
                      01100 #define LED_BLINK_RATE_VOICE_THROUGH    20
                      01101 #define LED_BLINK_RATE_VOICE_RECORD             6
                      01102 
                      01103 ; set soundGen timebase prescales for wave and sample modes
                      01104 ; Timer2 interrupt period is currently 32uS
                      01105 ; set sample timebase period to 192uS (5208 Hz)
                      01106 #define SAMPLE_PRESCALE 6
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 114


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01107 ; wave sine/square timebase period to 64uS (15.625 kHz)
                      01108 #define WAVE_PRESCALE   2
                      01109 
                      01110 #define MAX_MODE_LEVEL  MONO
                      01111 
                      01112 ; set power-up Attack and Release parameters
                      01113 ; adsrAttackRate and adsrReleaseRate variables have a range of 0 - 64
                      01114 ; rate of 0 == MIDI Attack/Release Time of 127
                      01115 ; rate of 64 == MIDI Attack/Release Time of 0
                      01116 #define ADSR_ATTACK_RATE        64
                      01117 #define ADSR_RELEASE_RATE       64
                      01118 
                      01119 ; set adsr prescale target to increment adsrLimiterRegs value every 19.52mS
                      01120 ; 19.52mS gives a max individual attack/release time of 4.99712 Seconds
                      01121 ; the "increment" value is set by adsrAttackRate and adsrReleaseRate
                      01122 #define ADSR_PRESCALE 610
                      01123 
                      01124 ; changing from 0x00 reference to 0x80 to improve Attack/Release waveform quality
                      01125 #define PWM_IDLE_OUTPUT_VALUE 0x80
                      01126 
                      01127 ; In SINE mode, this values sets the range (+/- PWM_IDLE_OUTPUT_VALUE) of activeOutputValue within which
                             an oscillator will be
                      01128 ; ungated for changes to its delegatedDelta value.  Only allowing changes when activeOutputValue is appr
                            oximately == PWM_IDLE_OUTPUT_VALUE
                      01129 ; greatly reduces popping caused by Sine wave cycle clipping
                      01130 #define OSC_TRANSITION_OUTPUT_THRESHOLD 0x04
                      01131 
                      01132 ; Audio input DC Bias measurement, 253 ADC sample average:
                      01133 ;   (VDD == 3.2V / 256 = 0.0125V per ADC increment)
                      01134 ;   on-board mic selected, MIC connceted      = 0x47 (@ VDD = 3.2V, 0x47 correlates to 0.8875V)
                      01135 ;   external mic selected, input floating     = 0x38 (@ VDD = 3.2V, 0x38 correlates to 0.7000V)
                      01136 ;   line-in selected, input floating          = 0x53 (@ VDD = 3.2V, 0x53 correlates to 1.0375V)
                      01137 ; Should have balanced these offsets in the hardware. oh well.
                      01138 ; Sine and Square outputs idle at 0x80, so compensate for difference in Sample bias to mitigate popping
                      01139 ; average of above measurement is 0x46, 0x80 - 0x46 = 0x3A
                      01140 ;#define SAMPLE_DC_OFFSET (PWM_IDLE_OUTPUT_VALUE - 0x46)
                      01141 ; DEBUG - sample dc offset will change with component tolerances.  need to set manually for each PCB
                      01142 ; measured 0.930V RMS, 0.930 / 0.0125 = 74.4
                      01143 #define SAMPLE_DC_OFFSET (PWM_IDLE_OUTPUT_VALUE - 74)
                      01144 
                      01145 ; define the time to wait from record button release to start of sample recording
                      01146 ; this is an attempt to eliminate the record button's physical noise from the sample
                      01147 ;   Calculation Method:
                      01148 ;     timer2 int period == 32uS
                      01149 ;     samplePrescaleCounter == 6
                      01150 ;     32uS * 6 = 192uS
                      01151 ;     RECORD_BUTTON_RELEASE_WAIT_TIME = waitTimeInMs / 0.192
                      01152 ;                 maxTime = 192uS * 256 = 49.152mS
                      01153 ;
                      01154 ; load for delay of 5mS. (5 / 0.192 = 26.0417)
                      01155 #define RECORD_BUTTON_RELEASE_WAIT_TIME 26
                      01156 
                      01157 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 115


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01158 ; ENUM TYPE DEFINITIONS
                      01159 ;**********************************************************************
                      01160 
                      01161 ; waveShape
                      01162 #define SINE 0
                      01163 #define SQUARE 1
                      01164 #define SAMPLE 2
                      01165 
                      01166 ; recordOrPlayback
                      01167 #define VOICE_THROUGH 0
                      01168 #define RECORD 1
                      01169 #define PLAYBACK 2
                      01170 
                      01171 ; modeLevels
                      01172 #define POLY 0
                      01173 #define SUSTAIN 1
                      01174 #define MONO 2
                      01175 
                      01176 
                      01177 ;**********************************************************************
                      01178 ; FLAG VARIABLE DEFINITIONS
                      01179 ;**********************************************************************
                      01180 
                      01181 ; midiFlags
                      01182 #define turnSoundOn 3
                      01183 #define turnSoundOff 4
                      01184 #define keyPressed 5
                      01185 #define soundOn 6
                      01186 
                      01187 ; soundGenFlags
                      01188 #define delegatorBusy 0
                      01189 #define pgDec 1
                      01190 #define needRefresh 2
                      01191 #define activeNoteTableModified 3
                      01192 
                      01193 ; oscResetFlags
                      01194 #define osc0    0
                      01195 #define osc1    1
                      01196 #define osc2    2
                      01197 #define osc3    3
                      01198 
                      01199 ; oscStateFlags
                      01200 #define release 0
                      01201 #define sustain 1
                      01202 #define decay 2
                      01203 #define attack 3
                      01204 
                      01205 
                      01206 ;**********************************************************************
                      01207 ; MACROS
                      01208 ;**********************************************************************
                      01209 
                      01210 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 116


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01211 CLEAR_ACCUMULATORS      MACRO
                      01212         local   loop
                      01213 
                      01214         ; init local variables
                      01215         PUSH_R  r0
                      01216         PUSH_R  FSR0L
                      01217         PUSH_R  FSR0H
                      01218         
                      01219         ; load fsr
                      01220         lfsr    FSR0, accumulators
                      01221 
                      01222         ; init count
                      01223         movf    polyDepth, w, ACCESS
                      01224         movwf   r0, ACCESS
                      01225 loop    
                      01226         ; each accumulator is 4 bytes wide
                      01227         clrf    POSTINC0, ACCESS        
                      01228         clrf    POSTINC0, ACCESS        
                      01229         clrf    POSTINC0, ACCESS        
                      01230         clrf    POSTINC0, ACCESS        
                      01231         ; decrement count, skip if done
                      01232         decfsz  r0, f, ACCESS
                      01233         bra             loop
                      01234 
                      01235         ; restore variables
                      01236         POP_R   FSR0H
                      01237         POP_R   FSR0L
                      01238         POP_R   r0
                      01239         
                      01240         ENDM
                      01241         
                      01242 
                      01243 ;**********************************************************************
                      01244 ENABLE_SUSTAIN  MACRO
                      01245         comf    oscResetFlags, w, ACCESS
                      01246         andlw   0x0f
                      01247         movwf   sustainFlags, ACCESS
                      01248         ENDM
                      01249         
                      01250 ;**********************************************************************
                      01251 DISABLE_SUSTAIN MACRO
                      01252         clrf    sustainFlags, ACCESS
                      01253         ENDM
                      01254 
                      01255 ;**********************************************************************
                      01256 REVERSE_SAMPLE_IF_MOD_OVER_63   MACRO
                      01257         local exitMacro
                      01258         ; if modulation > 63 then reverse sample
                      01259         movlw   63
                      01260         cpfsgt  modulation, ACCESS
                      01261         bra             exitMacro
                      01262         ; modulation > 63 so do nextSampleAddress = (sampleEndAddress - nextSampleAddress)
                      01263         movf    nextSampleAddress, w, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 117


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01264         subwf   sampleEndAddress, w, ACCESS
                      01265         movwf   nextSampleAddress, ACCESS
                      01266         movf    nextSampleAddress + 1, w, ACCESS
                      01267         subwfb  sampleEndAddress + 1, w, ACCESS
                      01268         movwf   nextSampleAddress + 1, ACCESS
                      01269 exitMacro
                      01270         ENDM
                      01271 
                      01272 ;**********************************************************************
                      01273 OSC_READ_ADSR_FLAG      MACRO   FLAG
                      01274 ; oscillator number passed in WREG
                      01275 ; boolean value is returned in WREG and ZERO flag is set accordingly
                      01276 
                      01277         ; push working regs onto software stack
                      01278         PUSH_R  FSR0L
                      01279         PUSH_R  FSR0H
                      01280         
                      01281         ; load fsr
                      01282         lfsr    FSR0, oscStateFlags
                      01283         ; read the register into WREG
                      01284         movf    PLUSW0, w, ACCESS
                      01285         andlw   1<<FLAG
                      01286         
                      01287         ; restore working regs from stack
                      01288         POP_R   FSR0H
                      01289         POP_R   FSR0L   
                      01290         
                      01291         ENDM
                      01292 
                      01293 ;**********************************************************************
                      01294 OSC_ADVANCE_ADSR        MACRO   OSC_NUMBER
                      01295         local   macroDone, doAttack, attackDone, doRelease, releaseDone
                      01296 
                      01297         ; ignore advance if oscillator is sustained
                      01298         btfsc   sustainFlags, OSC_NUMBER, ACCESS
                      01299         bra             macroDone
                      01300         
                      01301         btfsc   oscStateFlags + OSC_NUMBER, attack, ACCESS
                      01302         bra             doAttack
                      01303         btfsc   oscStateFlags + OSC_NUMBER, release, ACCESS
                      01304         bra             doRelease
                      01305         bra             macroDone
                      01306         
                      01307 doAttack
                      01308         ; osc is attacking
                      01309 
                      01310         ; test condition ((adsrLimiterRegs -= ADSR_ATTACK_RATE) <=0)
                      01311         movf    adsrAttackRate, w, ACCESS
                      01312         subwf   adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      01313         bnc             attackDone
                      01314         bz              attackDone
                      01315 
                      01316         ; condition is FALSE so do the subtraction and exit
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 118


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01317         ; (adsrLimiterRegs -= ADSR_ATTACK_RATE)
                      01318         movf    adsrAttackRate, w, ACCESS
                      01319         subwf   adsrLimiterRegs + OSC_NUMBER, f, ACCESS
                      01320         bra             macroDone
                      01321 
                      01322 attackDone
                      01323         ; clear attack flag
                      01324         bcf             oscStateFlags + OSC_NUMBER, attack, ACCESS
                      01325         clrf    adsrLimiterRegs + OSC_NUMBER, ACCESS
                      01326         bra     macroDone
                      01327 
                      01328 doRelease
                      01329         ; osc is releasing
                      01330 
                      01331         ; test condition: ((adsrLimiterRegs + ADSR_ATTACK_RATE) >= 255)
                      01332         movf    adsrReleaseRate, w, ACCESS
                      01333         addwf   adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      01334         ; condition is TRUE so skip the addition and leave adsrLimiterRegs at its current value
                      01335         bc              releaseDone
                      01336         comf    WREG, w, ACCESS
                      01337         ; condition is TRUE so skip the addition and leave adsrLimiterRegs at its current value
                      01338         bz              releaseDone
                      01339 
                      01340         ; condition is FALSE so do the addition and exit
                      01341         ; do (adsrLimiterRegs += ADSR_ATTACK_RATE)      
                      01342         movf    adsrReleaseRate, w, ACCESS
                      01343         addwf   adsrLimiterRegs + OSC_NUMBER, f, ACCESS
                      01344         bra             macroDone
                      01345         
                      01346 releaseDone
                      01347         ; clear release flag
                      01348         bcf             oscStateFlags + OSC_NUMBER, release, ACCESS
                      01349         ; set limit reg to max
                      01350         setf    adsrLimiterRegs + OSC_NUMBER, ACCESS
                      01351         ; clear oscillator's delegatedDelta
                      01352         clrf    delegatedDeltas + OSC_NUMBER * 2;
                      01353         clrf    delegatedDeltas + (OSC_NUMBER * 2) + 1; 
                      01354         bra     macroDone
                      01355         
                      01356 macroDone
                      01357         ENDM
                      01358         
                      01359 ;**********************************************************************
                      01360 OSC_MIX MACRO   OSC_NUMBER
                      01361         local   mixDone, mixDoPos, mixDoNeg, mixDoDone
                      01362                 
                      01363         ; check polarity of current activeOutputValue compared to PWM_IDLE_OUTPUT_VALUE
                      01364         movlw   PWM_IDLE_OUTPUT_VALUE
                      01365         subwf   activeOutputValues + OSC_NUMBER, w
                      01366         bnc             mixDoNeg
                      01367 mixDoPos
                      01368         ; WREG = adsrLimiterRegs/2
                      01369         bcf             STATUS, C, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 119


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01370         rrcf    adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      01371         subwf   activeOutputValues + OSC_NUMBER, w
                      01372         bra             mixDoDone
                      01373 mixDoNeg
                      01374         ; WREG = adsrLimiterRegs/2
                      01375         bcf             STATUS, C, ACCESS
                      01376         rrcf    adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      01377         addwf   activeOutputValues + OSC_NUMBER, w      
                      01378 mixDoDone
                      01379         ; overflow indicates that last operation toggled bit 7
                      01380         btfsc   STATUS, OV, ACCESS
                      01381         movlw   PWM_IDLE_OUTPUT_VALUE
                      01382 
                      01383 mixDone
                      01384         ; add WREG to mixedOutputL/H
                      01385         addwf   mixedOutputL, f, ACCESS
                      01386         btfsc   STATUS, C, ACCESS
                      01387         incf    mixedOutputH, f, ACCESS
                      01388         
                      01389         ENDM
                      01390 
                      01391 ;**********************************************************************
                      01392 OSC_STATE_BLOCK MACRO   OSC_NUMBER
                      01393         local   checkDelegating, oscCheckActive, zeroAcc, oscActive, waveIsSample, noTransition, oscChec
                            kNotSine
                      01394         local   clrSampleAcc, addressOk, waveIsNotSample, waveIsSine, waveIsSquare, tableAddressLoaded, 
                            resetOscillator, macroDone
                      01395                 
                      01396         ; if oscillator is locked for sustain then leave it alone
                      01397         btfsc   sustainFlags, OSC_NUMBER, ACCESS
                      01398         bra             oscActive
                      01399                         
                      01400 checkDelegating
                      01401         ; don't update if delegator is busy because delegatedDelta value is volatile
                      01402         btfsc   soundGenFlags, delegatorBusy, ACCESS
                      01403         ; delegator is busy so just keep spinning
                      01404         bra             oscCheckActive
                      01405         
                      01406         ; THRESHOLD METHOD WORKS WELL
                      01407         movlw   SINE
                      01408         cpfseq waveShape, ACCESS
                      01409         bra             oscCheckNotSine
                      01410         ; calculate absolute offset between PWM_IDLE_OUTPUT_VALUE and current activeOutputValue
                      01411         movlw   PWM_IDLE_OUTPUT_VALUE
                      01412         subwf   activeOutputValues + OSC_NUMBER, w
                      01413         ; invert if negative
                      01414         btfss   STATUS, C, ACCESS
                      01415         negf    WREG, ACCESS
                      01416         ; check if offset is below threshold value
                      01417         ; do (WREG = OSC_OUTPUT_GATE_THRESHOLD - WREG)
                      01418         sublw   OSC_TRANSITION_OUTPUT_THRESHOLD
                      01419         ; if result is positive then activeOutputValue offset from IDLE is <= THRESHOLD so allow changes
                      01420         bnc             oscCheckActive
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 120


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01421 
                      01422 oscCheckNotSine
                      01423 
                      01424         ; delegator is idle and oscillator is enabled so copy delegated delta as internal
                      01425         movff   delegatedDeltas + (OSC_NUMBER * DELEGATED_DELTAS_ELEMENT_SIZE) + 0, oscDeltas + (OSC_NUM
                            BER * OSC_DELTAS_ELEMENT_SIZE) + 0
                      01426         movff   delegatedDeltas + (OSC_NUMBER * DELEGATED_DELTAS_ELEMENT_SIZE) + 1, oscDeltas + (OSC_NUM
                            BER * OSC_DELTAS_ELEMENT_SIZE) + 1
                      01427 
                      01428 oscCheckActive
                      01429         ; if oscDeltas[OSC_NUMBER] == 0x00 then oscillator is not really active so reset
                      01430         ; this check is required in event that (activeOutput == 0 && delegatorBusy == TRUE && oscDelta =
                            = 0)
                      01431         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, f
                      01432         bnz             oscActive
                      01433         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, f
                      01434         bz              resetOscillator
                      01435         
                      01436 oscActive
                      01437         ; if oscillator is starting from reset state then begin with 0x0000 accumulator
                      01438         btfsc   oscResetFlags, OSC_NUMBER, ACCESS
                      01439         bra             zeroAcc
                      01440 
                      01441         ;**** start procedure: step Accumulator (SINE/SQUARE/SAMPLE) ****
                      01442         ; accumulator += activeNoteDelta
                      01443         ; accumulators are 4 bytes wide, activeNoteDeltas are 2 bytes wide
                      01444         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, w
                      01445         addwf   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
                      01446         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, w  
                      01447         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
                      01448         movlw   0
                      01449         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
                      01450         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                      01451         
                      01452 zeroAcc
                      01453         ; we're done with oscResetFlags flag so ensure that it's clear
                      01454         bcf             oscResetFlags, OSC_NUMBER, ACCESS
                      01455         
                      01456         ;**** start procedure: handle Pitch Wheel (SINE/SQUARE/SAMPLE) ****
                      01457         ; accumulator += pitchWheel
                      01458         movf    pitchWheel                                                                              
                                                                            + 0, w, ACCESS
                      01459         addwf   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
                      01460         movf    pitchWheel                                                                              
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 121


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                                                                            + 1, w, ACCESS
                      01461         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
                      01462         movf    pitchWheel                                                                              
                                                                            + 2, w, ACCESS
                      01463         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
                      01464         movf    pitchWheel                                                                              
                                                                            + 3, w, ACCESS
                      01465         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                      01466         
                      01467         ;**** start procedure: if SAMPLE waveshape then load next read address  (SAMPLE ONLY) ****
                      01468         ; branch to waveform specific table address load
                      01469         movlw   SAMPLE
                      01470         cpfseq  waveShape, ACCESS
                      01471         bra             waveIsNotSample
                      01472 waveIsSample
                      01473 
                      01474         ; if samplesLoaded flag is set then load next EEPROM read address
                      01475         ; checking this here as opposed to before accumulator update will, in the event of the mainline 
                            not…
                      01476         ; being able to load the samples in time, cause audio chopping rather than detuning
                      01477         btfss   eepromFlags, samplesLoaded, ACCESS
                      01478         bra             macroDone
                      01479         
                      01480         ; check for note transition
                      01481         ; keyPressed flag is set every time a MIDI Note On message is received
                      01482         ; when a sample is playing back in POLY or SUSTAIN modes, we want the sample to restart from the
                             beginning...
                      01483         ; whenever a Note On message is received.
                      01484         btfss   midiFlags, keyPressed, ACCESS
                      01485         bra             noTransition
                      01486         ; is modeLevel == POLY
                      01487         movlw   POLY
                      01488         xorwf   modeLevel, w, ACCESS
                      01489         ; mode is POLY so reset accumulator to restart sample from beginning
                      01490         bz              clrSampleAcc
                      01491 
                      01492 noTransition    
                      01493         ; nextSampleAddress = ((accumulator >> 8) & 0xffff)
                      01494         ; reset accumulator if nextSampleAddress value will exceed sampleEndAddress
                      01495         ; is waveTableIndex > sampleEndAddress?
                      01496         movf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, w
                      01497         subwf   sampleEndAddress, w, ACCESS
                      01498         movf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, w
                      01499         subwfb  sampleEndAddress + 1, w, ACCESS
                      01500         ; result is positive so waveTableIndex is within valid range
                      01501         bc              addressOk
                      01502         ; ((accumulator >> 8) & 0xffff) is out of valid sample range so restart sample from beginning
                      01503         ; reset accumulator
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 122


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01504 clrSampleAcc
                      01505         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0
                      01506         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1
                      01507         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2
                      01508         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3
                      01509 addressOk
                      01510         
                      01511         ; do nextSampleAddress = ((accumulator >> 8) & 0xffff)
                      01512         movff   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, nextSampleAddresses + (OSC_NUMBER * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 0
                      01513         movff   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, nextSampleAddresses + (OSC_NUMBER * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 1
                      01514         
                      01515         bra             macroDone
                      01516         
                      01517 waveIsNotSample
                      01518         ;**** start procedure: waveshape is SINE or SQUARE so read Program Memory table  (SINE/SQUARE ON
                            LY) ****
                      01519         ; branch to waveform specific table address load
                      01520         movlw   SINE
                      01521         cpfseq  waveShape, ACCESS
                      01522         bra             waveIsSquare
                      01523 
                      01524 waveIsSine      
                      01525         ; 
                      01526         ; load address of SINE table read
                      01527         ; offset = ((accumulator >> 8) & 0xff)
                      01528         movf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1, w
                      01529         addwf   sineTableBaseAddress + 0, w
                      01530         movwf   TBLPTRL, ACCESS
                      01531         movf    sineTableBaseAddress + 1, w
                      01532         btfsc   STATUS, C, ACCESS
                      01533         addlw   1
                      01534         movwf   TBLPTRH, ACCESS
                      01535         movf    sineTableBaseAddress + 2, w
                      01536         btfsc   STATUS, C, ACCESS
                      01537         addlw   1
                      01538         movwf   TBLPTRU, ACCESS
                      01539         bra             tableAddressLoaded
                      01540 
                      01541 waveIsSquare
                      01542         ; load address of SQUARE table read
                      01543         ; offset = ((accumulator >> 8) & 0xff)
                      01544         movf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1, w
                      01545         addwf   squareTableBaseAddress + 0, w
                      01546         movwf   TBLPTRL, ACCESS
                      01547         movf    squareTableBaseAddress + 1, w
                      01548         btfsc   STATUS, C, ACCESS
                      01549         addlw   1
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 123


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01550         movwf   TBLPTRH, ACCESS
                      01551         movf    squareTableBaseAddress + 2, w
                      01552         btfsc   STATUS, C, ACCESS
                      01553         addlw   1
                      01554         movwf   TBLPTRU, ACCESS
                      01555 
                      01556 tableAddressLoaded
                      01557         ; read value from program memory
                      01558         tblrd*
                      01559         movff   TABLAT, activeOutputValues + (OSC_NUMBER * ACTIVE_OUTPUT_VALUES_EL_SIZE) + 0
                      01560         bra             macroDone
                      01561         
                      01562 resetOscillator
                      01563         ; set oscillator reset flag
                      01564         bsf             oscResetFlags, OSC_NUMBER, ACCESS
                      01565         movlw   PWM_IDLE_OUTPUT_VALUE
                      01566         movwf   activeOutputValues + (OSC_NUMBER * ACTIVE_OUTPUT_VALUES_EL_SIZE)
                      01567         clrf    oscDeltas + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE) + 0
                      01568         clrf    oscDeltas + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE) + 1
                      01569         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 0
                      01570         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1
                      01571         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 2
                      01572         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 3
                      01573 
                      01574 macroDone
                      01575 
                      01576         ENDM
                      01577         
                      01578         
                      01579 #endif
                      01580 
                      01581 
                      00026         #include        "../header/midi.h"
                      00682 
                      00683 ;**********************************************************************
                      00684 ;                                                                     *
                      00685 ;    Project:       deMIDulator                                       *
                      00686 ;    Filename:      midi.h                                            *
                      00687 ;    Date:                                                            *
                      00688 ;    File Version:                                                    *
                      00689 ;                                                                     *
                      00690 ;    Author:        Derek Enos                                        *
                      00691 ;    Company:                                                         *
                      00692 ;                                                                     * 
                      00693 ;                                                                     *
                      00694 ;**********************************************************************
                      00695 ;                                                                     *
                      00696 ;    Files required:                                                  *
                      00697 ;                                                                     *
                      00698 ;                                                                     *
                      00699 ;                                                                     *
                      00700 ;**********************************************************************
                      00701 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 124


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00702 #ifndef _MIDIH_
                      00703 #define _MIDIH_
                      00704 
                      00705 
                      00706 ; ******************* GENERAL MIDI DEFINES ***********************
                      00707 ; ** Define default MIDI channel **
                      00708 ; values 0 - 5 (actual MIDI channels 1 - 6) will make deMIDUlator respond to only that channel
                      00709 ; value of 6 (actual MIDI channel 7) will make deMIDulator respond to ALL channels
                      00710         #define         DEFAULT_MIDI_CHANNEL    6
                      00711 
                      00712 ; ******************* MIDI SYSEX DEFINES ***********************
                      00713 #define         VENDOR_ID       0x77
                      00714 #define         DEVICE_ID       0x1D
                      00715 #define         TERMINAL_PACKET_COMMAND_VALUE   0x1E
                      00716 
                      00717 ; ******************* MIDI BUFFER SIZES ***********************
                      00718 
                      00719 #define         MAX_MIDI_MESSAGE_SIZE   24
                      00720 #define         ACTIVE_NOTE_TABLE_SIZE  25
                      00721 
                      00722 
                      00723 ; ******************* STATUS BYTE DEFINITONS ***********************
                      00724 
                      00725 ; Note that lower nybble (channel) should be masked out for comparison
                      00726 ;------------------------
                      00727 #define         NOTE_OFF                                0x80
                      00728 #define         NOTE_ON                                 0x90
                      00729 #define         KEY_PRESSURE                    0xA0
                      00730 #define         CONTROL_CHANGE                  0xB0
                      00731 #define         PROGRAM_CHANGE                  0xC0
                      00732 #define         CHANNEL_PRESSURE                0xD0
                      00733 #define         PITCH_WHEEL                             0xE0
                      00734 
                      00735 ; Sysex Status Byte Definitions
                      00736 #define         SYSEX                                   0xF0
                      00737 #define         EOX                                             0xF7
                      00738 
                      00739 #define         NOTE_OFF_MESSAGE_LENGTH                         3
                      00740 #define         NOTE_ON_MESSAGE_LENGTH                          3
                      00741 #define         KEY_PRESSURE_MESSAGE_LENGTH                     3
                      00742 #define         CONTROL_CHANGE_MESSAGE_LENGTH           3
                      00743 #define         PROGRAM_CHANGE_MESSAGE_LENGTH           2
                      00744 #define         CHANNEL_PRESSURE_MESSAGE_LENGTH         2
                      00745 #define         PITCH_WHEEL_MESSAGE_LENGTH                      3
                      00746 
                      00747 ; SysEx Sub Types
                      00748 ;----------------------------
                      00749 #define         NON_REAL_TIME                                           0x7E
                      00750 #define         GENERAL_INFORMATION                                     0x06
                      00751 #define         IDENTITY_REQUEST                                        0x01
                      00752 #define         IDENTITY_REPLY                                          0x02
                      00753 
                      00754 ; Control Change Data Types
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 125


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00755 ;----------------------------
                      00756 #define         BANK_SELECT_MSB                                         0
                      00757 #define         MODULATION_WHEEL_MSB                            1
                      00758 #define         BREATH_CONTROLLER_MSB                           2
                      00759 #define         UNDEFINED_003                                           3
                      00760 #define         FOOT_CONTROLLER_MSB                                     4
                      00761 #define         PORTAMENTO_TIME                                         5
                      00762 #define         DATA_ENTRY_MSB                                          6
                      00763 #define         CHANNEL_VOLUME_MSB                                      7
                      00764 #define         BALANCE_MSB                                                     8
                      00765 #define         UNDEFINED_MSB                                           9
                      00766 #define         PAN_MSB                                                         10
                      00767 #define         EXPRESSION_MSB                                          11
                      00768 #define         EFFECT_CONTROL_1_MSB                            12
                      00769 #define         EFFECT_CONTROL_2_MSB                            13
                      00770 #define         UNDEFINED_014                                           14
                      00771 #define         UNDEFINED_015                                           15
                      00772 #define         GENERAL_PURPOSE_CONTROLLER_1_MSB        16
                      00773 #define         GENERAL_PURPOSE_CONTROLLER_2_MSB        17
                      00774 #define         GENERAL_PURPOSE_CONTROLLER_3_MSB        18
                      00775 #define         GENERAL_PURPOSE_CONTROLLER_4_MSB        19
                      00776 #define         UNDEFINED_020                                           20
                      00777 #define         UNDEFINED_021                                           21
                      00778 #define         UNDEFINED_022                                           22
                      00779 #define         UNDEFINED_023                                           23
                      00780 #define         UNDEFINED_024                                           24
                      00781 #define         UNDEFINED_025                                           25
                      00782 #define         UNDEFINED_026                                           26
                      00783 #define         UNDEFINED_027                                           27
                      00784 #define         UNDEFINED_028                                           28
                      00785 #define         UNDEFINED_029                                           29
                      00786 #define         UNDEFINED_030                                           30
                      00787 #define         UNDEFINED_031                                           31
                      00788 #define         BANK_SELECT_LSB                                         32
                      00789 #define         MODULATION_WHEEL_LSB                            33
                      00790 #define         BREATH_CONTROLLER_LSB                           34
                      00791 #define         UNDEFINED_035                                           35
                      00792 #define         FOOT_CONTROLLER_LSB                                     36
                      00793 #define         PORTAMENTO_TIME_LSB                                     37
                      00794 #define         DATA_ENTRY_LSB                                          38
                      00795 #define         CHANNEL_VOLUME_LSB                                      39
                      00796 #define         BALANCE_LSB                                                     40
                      00797 #define         UNDEFINED_041                                           41
                      00798 #define         PAN_LSB                                                         42
                      00799 #define         EXPRESSION_LSB                                          43
                      00800 #define         EFFECT_CONTROL_1_LSB                            44
                      00801 #define         EFFECT_CONTROL_2_LSB                            45
                      00802 #define         UNDEFINED_046                                           46
                      00803 #define         UNDEFINED_047                                           47
                      00804 #define         GENERAL_PURPOSE_CONTROLLER_1_LSB        48
                      00805 #define         GENERAL_PURPOSE_CONTROLLER_2_LSB        49
                      00806 #define         GENERAL_PURPOSE_CONTROLLER_3_LSB        50
                      00807 #define         GENERAL_PURPOSE_CONTROLLER_4_LSB        51
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 126


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00808 #define         UNDEFINED_052                                           52
                      00809 #define         UNDEFINED_053                                           53
                      00810 #define         UNDEFINED_054                                           54
                      00811 #define         UNDEFINED_055                                           55
                      00812 #define         UNDEFINED_056                                           56
                      00813 #define         UNDEFINED_057                                           57
                      00814 #define         UNDEFINED_058                                           58
                      00815 #define         UNDEFINED_059                                           59
                      00816 #define         UNDEFINED_060                                           60
                      00817 #define         UNDEFINED_061                                           61
                      00818 #define         UNDEFINED_062                                           62
                      00819 #define         UNDEFINED_063                                           63
                      00820 #define         SUSTAIN_PEDAL                                           64
                      00821 #define         PORTAMENTO_ONOFF                                        65
                      00822 #define         SOSTENUTO                                                       66
                      00823 #define         SOFT_PEDAL                                                      67
                      00824 #define         LEGATO_FOOTSWITCH                                       68
                      00825 #define         HOLD_2                                                          69
                      00826 #define         SOUND_CONTROLLER_1_DEFAULT_SOUND_VARIATION                              70
                      00827 #define         SOUND_CONTROLLER_2_DEFAULT_TIMBRE_HARMONIC_QUALITY              71
                      00828 #define         SOUND_CONTROLLER_3_DEFAULT_RELEASE_TIME                                 72
                      00829 #define         SOUND_CONTROLLER_4_DEFAULT_ATTACK_TIME                                  73
                      00830 #define         SOUND_CONTROLLER_5_DEFAULT_BRIGHTNESS                                   74
                      00831 #define         SOUND_CONTROLLER_6_GM2_DEFAULT_DECAY_TIME                               75
                      00832 #define         SOUND_CONTROLLER_7_GM2_DEFAULT_VIBRATO_RATE                             76
                      00833 #define         SOUND_CONTROLLER_8_GM2_DEFAULT_VIBRATO_DEPTH                    77
                      00834 #define         SOUND_CONTROLLER_9_GM2_DEFAULT_VIBRATO_DELAY                    78
                      00835 #define         SOUND_CONTROLLER_10_GM2_DEFAULT_UNDEFINED                               79
                      00836 #define         GENERAL_PURPOSE_CONTROLLER_5                                                    80
                      00837 #define         GENERAL_PURPOSE_CONTROLLER_6                                                    81
                      00838 #define         GENERAL_PURPOSE_CONTROLLER_7                                                    82
                      00839 #define         GENERAL_PURPOSE_CONTROLLER_8                                                    83
                      00840 #define         PORTAMENTO_CONTROL                                                                      
                                    84
                      00841 #define         UNDEFINED_85                                                                    85
                      00842 #define         UNDEFINED_86                                                                    86
                      00843 #define         UNDEFINED_87                                                                    87
                      00844 #define         UNDEFINED_88                                                                    88
                      00845 #define         UNDEFINED_89                                                                    89
                      00846 #define         UNDEFINED_90                                                                    90
                      00847 #define         EFFECTS_1_DEPTH_DEFAULT_REVERB_SEND                             91
                      00848 #define         EFFECTS_2_DEPTH_DEFAULT_TREMOLO_DEPTH                   92
                      00849 #define         EFFECTS_3_DEPTH_DEFAULT_CHORUS_SEND                             93
                      00850 #define         EFFECTS_4_DEPTH_DEFAULT_CELESTE_[DETUNE]_DEPTH  94
                      00851 #define         EFFECTS_5_DEPTH_DEFAULT_PHASER_DEPTH                    95
                      00852 #define         DATA_INCREMENT                                                                  96
                      00853 #define         DATA_DECREMENT                                                                  97
                      00854 #define         NON_REG_PARAMETER_NUMBER_LSB                            98
                      00855 #define         NON_REG_PARAMETER_NUMBER_MSB                            99
                      00856 #define         REGISTERED_PARAMETER_NUMBER_LSB                                 100
                      00857 #define         REGISTERED_PARAMETER_NUMBERMSB                                  101
                      00858 #define         UNDEFINED_102                                           102
                      00859 #define         UNDEFINED_103                                           103
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 127


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00860 #define         UNDEFINED_104                                           104
                      00861 #define         UNDEFINED_105                                           105
                      00862 #define         UNDEFINED_106                                           106
                      00863 #define         UNDEFINED_107                                           107
                      00864 #define         UNDEFINED_108                                           108
                      00865 #define         UNDEFINED_109                                           109
                      00866 #define         UNDEFINED_110                                           110
                      00867 #define         UNDEFINED_111                                           111
                      00868 #define         UNDEFINED_112                                           112
                      00869 #define         UNDEFINED_113                                           113
                      00870 #define         UNDEFINED_114                                           114
                      00871 #define         UNDEFINED_115                                           115
                      00872 #define         UNDEFINED_116                                           116
                      00873 #define         UNDEFINED_117                                           117
                      00874 #define         UNDEFINED_118                                           118
                      00875 #define         UNDEFINED_119                                           119
                      00876 #define         ALL_SOUND_OFF                                           120
                      00877 #define         RESET_ALL_CONTROLLERS                           121
                      00878 #define         LOCAL_CONTROL_ONOFF                                     122
                      00879 #define         ALL_NOTES_OFF                                           123
                      00880 #define         OMNI_MODE_OFF                                           124
                      00881 #define         OMNI_MODE_ON                                            125
                      00882 #define         POLY_MODE_OFF                                           126
                      00883 #define         POLY_MODE_ON                                            127
                      00884 
                      00885 
                      00886 ; ******************* MIDI MESSAGE STATES ***********************
                      00887 
                      00888 #define CHANNEL                                         0x00
                      00889 #define DATA_BYTE0                                      0x01
                      00890 #define DATA_BYTE1                                      0x02
                      00891 #define MESSAGE_COMPLETE                        0xFF
                      00892 
                      00893 #define NOTE_COMPLETE                           DATA_BYTE1
                      00894 #define AFTERTOUCH_COMPLETE                     DATA_BYTE1
                      00895 #define CONTROL_CHANGE_COMPLETE         DATA_BYTE1
                      00896 #define PROGRAM_CHANGE_COMPLETE         DATA_BYTE0
                      00897 #define PITCH_WHEEL_COMPLETE            DATA_BYTE1
                      00898 
                      00899 
                      00900 ; ******************* FLAG VARIABLE DEFINITIONS ***********************
                      00901 
                      00902 ; midiFlags (bits 3:7 free for use by other modules)
                      00903 #define uartState_rxInProgress                  0
                      00904 #define midiState_messageNeedsMapping   1
                      00905 #define midiThruModeEnabled                             2
                      00906 
                      00907 
                      00908 #endif
                      00027 
                      00028 
                      00029 ;**********************************************************************
                      00030 ; LOCAL VARIABLES
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 128


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00031 ;**********************************************************************
                      00032 
                      00033         CBLOCK
                      00034 
  00000019            00035                 soundGenFlags:1
                      00036                 ; bits defined in soundGen.h
                      00037                 ;       #define delegatorBusy 0
                      00038                 ;       #define pgDec 1
                      00039                 ;       #define needRefresh 2
  0000001A            00040                 pitchWheel:4
  0000001E            00041                 modulation:1
  0000001F            00042                 waveShape:1
  00000020            00043                 recordOrPlayback:1
  00000021            00044                 modeLevel:1
  00000022            00045                 samplePrescaleCounter:1
  00000023            00046                 wavePrescaleCounter:1
                      00047                 ; polyDepth (assigned from MAX_POLY_DEPTH during init) needs to be > 2 and a multiple of
                             2
  00000024            00048                 polyDepth:1
                      00049                 ; adding table addresses as variable to allow for roaming program memory samples
  00000025            00050                 sineTableBaseAddress:3
  00000028            00051                 squareTableBaseAddress:3
  0000002B            00052                 oscResetFlags:1
                      00053                 ; bits defined in soundGen.h
                      00054                 ; #define       osc0    0
                      00055                 ; #define       osc1    1
                      00056                 ; #define       osc2    2
                      00057                 ; #define       osc3    3
                      00058 
                      00059                 ; making these variables global to save time during processSoundState ISR call
  0000002C            00060                 sustainFlags:1
  0000002D            00061                 sample:1
  0000002E            00062                 mixedOutputL:1
  0000002F            00063                 mixedOutputH:1
  00000030            00064                 oscStateFlags:4
                      00065                 ; bits defined in soundGen.h
                      00066                 ; #define       release 0
                      00067                 ; #define       sustain 1
                      00068                 ; #define       decay 2
                      00069                 ; #define       attack 3
  00000034            00070                 adsrLimiterRegs:4
  00000038            00071                 adsrAttackRate:1
  00000039            00072                 adsrReleaseRate:1
  0000003A            00073                 adsrPrescaleCounter:2
                      00074                 
  0000003C            00075                 recordWaitCountdown:1
                      00076                 
                      00077                 ; Declared at end of main.asm to ensure that arrays are pushed to end of memory...
                      00078                 ; with smaller variables in ACCESS memory
                      00079                 ; ---------------------------------------
                      00080                 ; activeNoteDeltas:ACTIVE_NOTE_DELTAS_SIZE
                      00081                 ; delegatedDeltas:DELEGATED_DELTAS_SIZE
                      00082                 ; oscDeltas:OSC_DELTAS_SIZE
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 129


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00083                 ; accumulators:ACCUMULATORS_SIZE
                      00084                 ; activeOutputValues:ACTIVE_OUTPUT_VALUES_SIZE
                      00085 
                      00086         ENDC
                      00087 
                      00088 
                      00089 ;**********************************************************************
                      00090 ; LOCAL FUNCTIONS
                      00091 ;**********************************************************************
                      00092 
                      00093 ; [Function Summary]
                      00094 ;
                      00095 ; Function: initSoundGen()
                      00096 ; Abstract: initialize sound sound generation state variables
                      00097 ;
                      00098 ; Function: activeNoteTableAdd(WREG)
                      00099 ; Abstract: shift all values in activeNoteTable one level deeper and write note value passed in WREG to 
                            index 0
                      00100 ;           call refreshActiveNoteState()
                      00101 ;
                      00102 ; Function: activeNoteTableRemove(WREG)
                      00103 ; Abstract: look for index of note value passed in WREG in activeNoteTable and wipe location to 0xff if 
                            found
                      00104 ;           bubble sort all non-0xff values toward index 0
                      00105 ;           call refreshActiveNoteState()
                      00106 ;
                      00107 ; Function: refreshActiveNoteState()
                      00108 ; Abstract: check status of activeNoteTable entries and set turnSoundOn, turnSoundOff and notTransition 
                            flags appropriately
                      00109 ;           call getActiveNoteDeltas()
                      00110 ;
                      00111 ; Function: getActiveNoteDeltas()
                      00112 ; Abstract: for all active entries (non-0xff) in activeNoteTable from index 0 - polyDepth...
                      00113 ;           read accumulator delta value from Flash Program Memory table and save to corresponding index
                             in activeNoteDeltas table
                      00114 ;
                      00115 ; Function: processSoundState()
                      00116 ; Abstract: called by Timer2 ISR
                      00117 ;           handles audio sampling/recording, calls eepromWrite64() when 64-byte sample buffer is full
                      00118 ;           handles all sound generation.  reading from Program Mem or EEPROM and writing to PWM
                      00119 
                      00120 
                      00121         ; ***********************************************************************
                      00122         ; Function: void initSoundGen(void)
                      00123         ; ***********************************************************************
0008B6                00124 initSoundGen
                      00125         ; push working regs onto software stack
                      00126         PUSH_R  r0
0008B6 C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00127         PUSH_R  FSR0L
0008BA CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00128         PUSH_R  FSR0H
0008BE CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 130


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00129         ; define variables to pushed registers
                      00130         #define count   r0
                      00131         
                      00132         ; using FSR0 for all inits, no need for fancy defines
                      00133         
                      00134         ; recall saved modulation from uC's internal EEPROM
0008C2 6A1E           00135         clrf    modulation, ACCESS      
                      00136 
                      00137         ; recall saved pitchWheel from uC's internal EEPROM
0008C4 6A1A           00138         clrf    pitchWheel + 0, ACCESS  
0008C6 6A1B           00139         clrf    pitchWheel + 1, ACCESS  
0008C8 6A1C           00140         clrf    pitchWheel + 2, ACCESS  
0008CA 6A1D           00141         clrf    pitchWheel + 3, ACCESS  
                      00142                 
0008CC 0E00           00143         movlw   SINE
0008CE 6E1F           00144         movwf   waveShape, ACCESS
0008D0 0E02           00145         movlw   PLAYBACK
0008D2 6E20           00146         movwf   recordOrPlayback, ACCESS        
0008D4 0E00           00147         movlw   POLY
0008D6 6E21           00148         movwf   modeLevel, ACCESS
                      00149         
0008D8 0E04           00150         movlw   MAX_POLY_DEPTH
0008DA 6E24           00151         movwf   polyDepth, ACCESS
                      00152 
0008DC 6A22           00153         clrf    samplePrescaleCounter, ACCESS
0008DE 6A23           00154         clrf    wavePrescaleCounter, ACCESS
                      00155 
0008E0 9611           00156         bcf             midiFlags, turnSoundOn, ACCESS          
0008E2 9811           00157         bcf             midiFlags, turnSoundOff, ACCESS         
0008E4 9A11           00158         bcf             midiFlags, keyPressed, ACCESS           
0008E6 9C11           00159         bcf             midiFlags, soundOn, ACCESS
                      00160 
0008E8 9019           00161         bcf             soundGenFlags, delegatorBusy, ACCESS
0008EA 9219           00162         bcf             soundGenFlags, pgDec, ACCESS    
0008EC 9419           00163         bcf             soundGenFlags, needRefresh, ACCESS
0008EE 9619           00164         bcf             soundGenFlags, activeNoteTableModified, ACCESS
                      00165         
0008F0 0E??           00166         movlw   low(sineTable)
0008F2 6E25           00167         movwf   sineTableBaseAddress + 0
0008F4 0E??           00168         movlw   high(sineTable)
0008F6 6E26           00169         movwf   sineTableBaseAddress + 1
0008F8 0E??           00170         movlw   upper(sineTable)
0008FA 6E27           00171         movwf   sineTableBaseAddress + 2
                      00172         
0008FC 0E??           00173         movlw   low(squareTable)
0008FE 6E28           00174         movwf   squareTableBaseAddress + 0
000900 0E??           00175         movlw   high(squareTable)
000902 6E29           00176         movwf   squareTableBaseAddress + 1
000904 0E??           00177         movlw   upper(squareTable)
000906 6E2A           00178         movwf   squareTableBaseAddress + 2
                      00179         
000908 802B           00180         bsf             oscResetFlags, osc0, ACCESS             
00090A 822B           00181         bsf             oscResetFlags, osc1, ACCESS             
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 131


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00090C 842B           00182         bsf             oscResetFlags, osc2, ACCESS             
00090E 862B           00183         bsf             oscResetFlags, osc3, ACCESS             
                      00184         
000910 6A2C           00185         clrf    sustainFlags, ACCESS
                      00186 
                      00187         ; init ADSR variables
000912 6A30           00188         clrf    oscStateFlags + 0, ACCESS
000914 6A31           00189         clrf    oscStateFlags + 1, ACCESS
000916 6A32           00190         clrf    oscStateFlags + 2, ACCESS
000918 6A33           00191         clrf    oscStateFlags + 3, ACCESS
                      00192         
00091A 6834           00193         setf    adsrLimiterRegs + 0, ACCESS
00091C 6835           00194         setf    adsrLimiterRegs + 1, ACCESS
00091E 6836           00195         setf    adsrLimiterRegs + 2, ACCESS
000920 6837           00196         setf    adsrLimiterRegs + 3, ACCESS
000922 6A3A           00197         clrf    adsrPrescaleCounter + 0, ACCESS
000924 6A3B           00198         clrf    adsrPrescaleCounter + 1, ACCESS
                      00199         
000926 6A3C           00200         clrf    recordWaitCountdown, ACCESS
                      00201                 
                      00202         ; load default adsr attack and release rates
000928 0E03           00203         movlw   3
00092A EC?? F???      00204         call    eepromInternalRead
00092E 6E38           00205         movwf   adsrAttackRate, ACCESS  
000930 0E04           00206         movlw   4
000932 EC?? F???      00207         call    eepromInternalRead
000936 6E39           00208         movwf   adsrReleaseRate, ACCESS 
                      00209                         
                      00210         ; load fsr
000938 EE00 F0BA      00211         lfsr    FSR0, activeNoteDeltas
                      00212 
00093C 0E08           00213         movlw   ACTIVE_NOTE_DELTAS_SIZE
00093E 6E03           00214         movwf   count, ACCESS
000940                00215 initSoundGen_lp1                
000940 6AEE           00216         clrf    POSTINC0, ACCESS
000942 2E03           00217         decfsz  count, f, ACCESS
000944 D???           00218         bra             initSoundGen_lp1
                      00219 
                      00220         ; load fsr
000946 EE00 F0D2      00221         lfsr    FSR0, accumulators
                      00222 
00094A 0E10           00223         movlw   ACCUMULATORS_SIZE
00094C 6E03           00224         movwf   count, ACCESS
00094E                00225 initSoundGen_lp2        
00094E 6AEE           00226         clrf    POSTINC0, ACCESS
000950 2E03           00227         decfsz  count, f, ACCESS
000952 D???           00228         bra             initSoundGen_lp2
                      00229 
                      00230         ; load fsr
000954 EE00 F0E2      00231         lfsr    FSR0, activeOutputValues
                      00232 
000958 0E04           00233         movlw   ACTIVE_OUTPUT_VALUES_SIZE
00095A 6E03           00234         movwf   count, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 132


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00095C                00235 initSoundGen_lp3
00095C 0E80           00236         movlw   PWM_IDLE_OUTPUT_VALUE
00095E 6EEE           00237         movwf   POSTINC0, ACCESS
                      00238 
000960 2E03           00239         decfsz  count, f, ACCESS
000962 D???           00240         bra             initSoundGen_lp3
                      00241 
                      00242         ; load fsr
000964 EE00 F0C2      00243         lfsr    FSR0, delegatedDeltas
                      00244 
000968 0E08           00245         movlw   DELEGATED_DELTAS_SIZE
00096A 6E03           00246         movwf   count, ACCESS
00096C                00247 initSoundGen_lp4
                      00248         ; 0xff indicates that delta is unowned
00096C 6AEE           00249         clrf    POSTINC0, ACCESS
00096E 2E03           00250         decfsz  count, f, ACCESS
000970 D???           00251         bra             initSoundGen_lp4
                      00252 
                      00253         ; load fsr
000972 EE00 F0CA      00254         lfsr    FSR0, oscDeltas
                      00255 
000976 0E08           00256         movlw   OSC_DELTAS_SIZE
000978 6E03           00257         movwf   count, ACCESS
00097A                00258 initSoundGen_lp5
00097A 6AEE           00259         clrf    POSTINC0, ACCESS
00097C 2E03           00260         decfsz  count, f, ACCESS
00097E D???           00261         bra             initSoundGen_lp5
                      00262 
                      00263         ; undefine variables from pushed registers
                      00264         #undefine count
                      00265         ; pop working regs from software stack
                      00266         POP_R   FSR0H
000980 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00267         POP_R   FSR0L
000984 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00268         POP_R   r0
000988 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00269         
00098C 0012           00270         return
                      00271 
                      00272 
                      00273         ; ***********************************************************************
                      00274         ; Function: void activeNoteTableAdd(byte note)
                      00275         ; ***********************************************************************
00098E                00276 activeNoteTableAdd
                      00277         ; push working regs onto software stack
                      00278         PUSH_R  r0
00098E C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00279         PUSH_R  r1
000992 C004 FFDD          M         movff   r1,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00280         PUSH_R  r2
000996 C005 FFDD          M         movff   r2,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00281         PUSH_R  FSR0L
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 133


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00099A CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00282         PUSH_R  FSR0H
00099E CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00283         ; define variables to pushed registers
                      00284         #define note                                    r0
                      00285         #define index                                   r1
                      00286         #define tmpValue                                r2
                      00287         #define FSR_activeNoteTable             FSR0
                      00288         #define PLUSW_activeNoteTable   PLUSW0
                      00289 
                      00290         ; load fsr
0009A2 EE00 F059      00291         lfsr    FSR_activeNoteTable, activeNoteTable
                      00292 
                      00293         ; saved argument passed in WREG
0009A6 6E03           00294         movwf   note, ACCESS
                      00295                 
                      00296         ;**** start procedure: add note to activeNoteTable index 0 ****
                      00297         ; start at end of table and shift all entries 1 level deeper
                      00298         ; note that if all activeNoteTable entries are active then note at index ACTIVE_NOTE_TABLE_SIZE 
                            - 1 will be lost
                      00299 
                      00300         ; initialize index to end of table
0009A8 0E18           00301         movlw   ACTIVE_NOTE_TABLE_SIZE - 1
0009AA 6E04           00302         movwf   index, ACCESS
0009AC                00303 activeNoteTableAdd_lp1
                      00304         ; tmpValue = activeNoteTable[index - 1]
0009AC 0404           00305         decf    index, w, ACCESS
0009AE 50EB           00306         movf    PLUSW_activeNoteTable, w, ACCESS
0009B0 6E05           00307         movwf   tmpValue, ACCESS
                      00308         ; activeNoteTable[index] = activeNoteTable[index - 1]
0009B2 5004           00309         movf    index, w, ACCESS
0009B4 C005 FFEB      00310         movff   tmpValue, PLUSW_activeNoteTable
                      00311         ; decrement index and abort if we've reach the beginning of the table
0009B8 2E04           00312         decfsz  index, f, ACCESS
0009BA D???           00313         bra             activeNoteTableAdd_lp1
                      00314 
                      00315         ; save note value to activeNoteTable index 0
0009BC C003 F059      00316         movff   note, activeNoteTable
                      00317 
0009C0                00318 activeNoteTableAdd_exit
                      00319         ; undefine variables from pushed registers
                      00320         #undefine       note
                      00321         #undefine       index
                      00322         #undefine       tmpValue
                      00323         #undefine       FSR_activeNoteTable
                      00324         #undefine       PLUSW_activeNoteTable
                      00325         ; pop working regs from software stack
                      00326         POP_R   FSR0H
0009C0 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00327         POP_R   FSR0L
0009C4 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00328         POP_R   r2
0009C8 CFDC F005          M         movff   softwareStackPointerPREINC, r2          ; ++softwareStackPointerINDF = regName
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 134


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00329         POP_R   r1
0009CC CFDC F004          M         movff   softwareStackPointerPREINC, r1          ; ++softwareStackPointerINDF = regName
                      00330         POP_R   r0
0009D0 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00331 
                      00332         ; set MIDI keyPressed flag to indicate Note On message received
                      00333         ; this flag is checked and then cleared in processSoundState() to determine when to terminate an
                             audio sample recording
                      00334         ; and whether or not to retrigger sample playback from beginning
0009D4 8A11           00335         bsf             midiFlags, keyPressed, ACCESS           
                      00336 
0009D6 D???           00337         rcall   refreshActiveNoteState
                      00338         
0009D8 0012           00339         return
                      00340         
                      00341         ; ***********************************************************************
                      00342         ; Function: void activeNoteTableRemove(byte note)
                      00343         ; ***********************************************************************
0009DA                00344 activeNoteTableRemove
                      00345         ; push working regs onto software stack
                      00346         PUSH_R  r0
0009DA C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00347         PUSH_R  r1
0009DE C004 FFDD          M         movff   r1,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00348         PUSH_R  r2
0009E2 C005 FFDD          M         movff   r2,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00349         PUSH_R  r3
0009E6 C006 FFDD          M         movff   r3,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00350         PUSH_R  FSR0L
0009EA CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00351         PUSH_R  FSR0H
0009EE CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00352         ; define variables to pushed registers
                      00353         #define note                                    r0
                      00354         #define index                                   r1
                      00355         #define tmpValue                                r2
                      00356         #define sorting                                 r3
                      00357         #define FSR_activeNoteTable             FSR0
                      00358         #define PLUSW_activeNoteTable   PLUSW0
                      00359 
                      00360         ; load fsr
0009F2 EE00 F059      00361         lfsr    FSR_activeNoteTable, activeNoteTable
                      00362 
                      00363         ; save argument passed in WREG
0009F6 6E03           00364         movwf   note, ACCESS
                      00365                 
                      00366         ;**** start procedure: find all activeNoteTable entries equal to note value and wipe to 0xff ***
                            *
                      00367         ; init index
0009F8 6A04           00368         clrf    index, ACCESS
                      00369 
0009FA                00370 activeNoteTableRemove_lp1
                      00371         ; if passed noteNumber is 0xff then ignore compare and just wipe location
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 135


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0009FA 1C03           00372         comf    note, w, ACCESS
0009FC E0??           00373         bz              activeNoteTableRemove_lp1Wipe
                      00374 
                      00375         ; WREG = activeNoteTable[index]
0009FE 5004           00376         movf    index, w, ACCESS
000A00 50EB           00377         movf    PLUSW_activeNoteTable, w, ACCESS
                      00378         ; skip if activeNoteTable[index] == note
000A02 6203           00379         cpfseq  note, ACCESS
                      00380         ; activeNoteTable[index] is != note so bypass wipe
000A04 D???           00381         bra             activeNoteTableRemove_lp1Jmp1
                      00382 
000A06                00383 activeNoteTableRemove_lp1Wipe
                      00384         ; activeNoteTable[index] is == note or passed noteNumber was 0xff so wipe location value to 0xff
000A06 5004           00385         movf    index, w, ACCESS
000A08 68EB           00386         setf    PLUSW_activeNoteTable, ACCESS
                      00387         ; previously was aborting operation at this point but doing so provides...
                      00388         ; less robust Note Off handling. In event of missed Note Off, note value can occupy multiple ind
                            exes
000A0A                00389 activeNoteTableRemove_lp1Jmp1
                      00390         ; increment index indexer
000A0A 2A04           00391         incf    index, f, ACCESS
                      00392         ; compare to ACTIVE_NOTE_TABLE_SIZE, skip if equal
000A0C 0E19           00393         movlw   ACTIVE_NOTE_TABLE_SIZE
000A0E 6204           00394         cpfseq  index, ACCESS
000A10 D???           00395         bra             activeNoteTableRemove_lp1
                      00396 
                      00397         
                      00398         ;**** start procedure: bubble sort all non-0xff values toward index 0 ****
                      00399         ; logic of routine in C:
                      00400         ;
                      00401         ;       sorting = TRUE; 
                      00402         ;       while(sorting)
                      00403         ;       {
                      00404         ;               sorting = FALSE;
                      00405         ;
                      00406         ;               for(index = 0; index < ACTIVE_NOTE_TABLE_SIZE - 1; index++)
                      00407         ;               {
                      00408         ;                       if((activeNoteTable[index] == 0xff) && (activeNoteTable[index + 1] != 0x
                            ff))
                      00409         ;                       {
                      00410         ;                               activeNoteTable[index] = activeNoteTable[index + 1];
                      00411         ;                               activeNoteTable[index + 1] = 0xff;
                      00412         ;                               sorting = TRUE;
                      00413         ;                       }
                      00414         ;               }
                      00415         ;       }
                      00416 
                      00417         ; using entire register for single bit sorting flag, set to TRUE to start first cycle
000A12 6806           00418         setf    sorting, ACCESS
                      00419         
000A14                00420 activeNoteTableRemove_sortLoop
                      00421         ; are we still sorting?
000A14 5206           00422         movf    sorting, f, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 136


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00423         ; no so abort
000A16 E0??           00424         bz              activeNoteTableRemove_sortDone
                      00425         
                      00426         ; reset sorting flag to FALSE. will be set by following code if we're not actually done
000A18 6A06           00427         clrf    sorting, ACCESS
                      00428 
                      00429         ; init index
000A1A 6A04           00430         clrf    index, ACCESS
000A1C                00431 activeNoteTableRemove_bubbleLoop
                      00432         ; is activeNoteTable[index] == 0xff?
000A1C 5004           00433         movf    index, w, ACCESS
000A1E 1CEB           00434         comf    PLUSW_activeNoteTable, w, ACCESS
                      00435         ; no so increment index and continue
000A20 E1??           00436         bnz             activeNoteTableRemove_bubbleContinue
                      00437 
                      00438         ; is activeNoteTable[i+1] != 0xff?
000A22 2804           00439         incf    index, w, ACCESS
000A24 1CEB           00440         comf    PLUSW_activeNoteTable, w, ACCESS
                      00441         ; no so increment index and continue
000A26 E0??           00442         bz              activeNoteTableRemove_bubbleContinue
                      00443                 
                      00444         ; sorting condition was met so set flag
000A28 6806           00445         setf    sorting, ACCESS         
                      00446 
                      00447         ; activeNoteTable[index] = activeNoteTable[index+1]
000A2A 2804           00448         incf    index, w, ACCESS
000A2C 50EB           00449         movf    PLUSW_activeNoteTable, w, ACCESS
000A2E 6E05           00450         movwf   tmpValue, ACCESS
000A30 5004           00451         movf    index, w, ACCESS
000A32 C005 FFEB      00452         movff   tmpValue, PLUSW_activeNoteTable
                      00453         
                      00454         ; activeNoteTable[index+1] = 0xff
000A36 2804           00455         incf    index, w, ACCESS
000A38 68EB           00456         setf    PLUSW_activeNoteTable, ACCESS
                      00457         
Warning[208]: Label truncated at 32 characters. (activeNoteTableRemove_bubbleContinue)
000A3A                00458 activeNoteTableRemove_bubbleContinue
                      00459         ; increment index and save in self
000A3A 2A04           00460         incf    index, f, ACCESS
000A3C 0E18           00461         movlw   ACTIVE_NOTE_TABLE_SIZE - 1
                      00462         ; if index is == ACTIVE_NOTE_TABLE_SIZE - 1 then we've reach the end of the table so skip loop b
                            ranch
000A3E 6204           00463         cpfseq  index, ACCESS
                      00464         ; not done stepping through activeNoteTable so continue
000A40 D???           00465         bra             activeNoteTableRemove_bubbleLoop        
                      00466         
                      00467         ; done stepping through activeNoteTable
                      00468         ; branch to check if any sorting action was taken
                      00469         ; process will keep looping until stepping through entire activeNoteTable causes no data swappin
                            g to occur
000A42 D???           00470         bra             activeNoteTableRemove_sortLoop
                      00471 
000A44                00472 activeNoteTableRemove_sortDone
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 137


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00473 
                      00474         ; undefine variables from pushed registers
                      00475         #undefine       note
                      00476         #undefine       index
                      00477         #undefine       tmpValue
                      00478         #undefine       sorting
                      00479         #undefine       FSR_activeNoteTable
                      00480         #undefine       PLUSW_activeNoteTable
                      00481         ; pop working regs from software stack
                      00482         POP_R   FSR0H
000A44 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00483         POP_R   FSR0L
000A48 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00484         POP_R   r3
000A4C CFDC F006          M         movff   softwareStackPointerPREINC, r3          ; ++softwareStackPointerINDF = regName
                      00485         POP_R   r2
000A50 CFDC F005          M         movff   softwareStackPointerPREINC, r2          ; ++softwareStackPointerINDF = regName
                      00486         POP_R   r1
000A54 CFDC F004          M         movff   softwareStackPointerPREINC, r1          ; ++softwareStackPointerINDF = regName
                      00487         POP_R   r0
000A58 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00488 
000A5C D???           00489         rcall   refreshActiveNoteState
                      00490         
000A5E 0012           00491         return
                      00492 
                      00493 
                      00494 ;**********************************************************************
                      00495 ; Function: void refreshActiveNoteState(void)
                      00496 ;**********************************************************************
000A60                00497 refreshActiveNoteState
                      00498         ; check if there are any active notes
                      00499         ; if activeNoteTable[0] == 0xff then there are no active notes
000A60 1C59           00500         comf    activeNoteTable + 0, w
                      00501         ; at least one note is active so keep sound on
000A62 E1??           00502         bnz             refreshActiveNoteState_active
                      00503         ; no notes are active so request sound off
000A64 8811           00504         bsf             midiFlags, turnSoundOff, ACCESS
000A66 9611           00505         bcf             midiFlags, turnSoundOn, ACCESS
000A68 D???           00506         bra             refreshActiveNoteState_exit
                      00507 
000A6A                00508 refreshActiveNoteState_active           
                      00509         ; check if sound is on  
000A6A AC11           00510         btfss   midiFlags, soundOn, ACCESS
000A6C D???           00511         bra             refreshActiveNoteState_soundIsOff
                      00512 
                      00513         ; sound is on so request transition
000A6E 9811           00514         bcf             midiFlags, turnSoundOff, ACCESS
000A70 9611           00515         bcf             midiFlags, turnSoundOn, ACCESS
000A72 D???           00516         bra             refreshActiveNoteState_exit
                      00517 
Warning[208]: Label truncated at 32 characters. (refreshActiveNoteState_soundIsOff)
000A74                00518 refreshActiveNoteState_soundIsOff
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 138


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00519         ; sound is off so request sound on
000A74 9811           00520         bcf             midiFlags, turnSoundOff, ACCESS
000A76 8611           00521         bsf             midiFlags, turnSoundOn, ACCESS
                      00522         
000A78                00523 refreshActiveNoteState_exit
                      00524         ; calling getActiveNoteDeltas() is a big task which includes theDelegator()
                      00525         ; so just try setting the refresh flag since we're inside the UART ISR right now
000A78 8419           00526         bsf             soundGenFlags, needRefresh, ACCESS
                      00527 
                      00528         ; set flag to indicate to getActiveNoteDeltas() that activeNoteTable has been modified
000A7A 8619           00529         bsf             soundGenFlags, activeNoteTableModified, ACCESS
                      00530 
000A7C 0012           00531         return
                      00532 
                      00533 
                      00534 ;**********************************************************************
                      00535 ; Function: void getActiveNoteDeltas(void)
                      00536 ;**********************************************************************
000A7E                00537 getActiveNoteDeltas
                      00538 
                      00539         ; push working regs onto software stack
                      00540         PUSH_R  r0
000A7E C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00541         PUSH_R  FSR0L
000A82 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00542         PUSH_R  FSR0H
000A86 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00543         PUSH_R  FSR1L
000A8A CFE1 FFDD          M         movff   FSR1L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00544         PUSH_R  FSR1H
000A8E CFE2 FFDD          M         movff   FSR1H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00545         PUSH_R  TBLPTRL
000A92 CFF6 FFDD          M         movff   TBLPTRL, softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00546         PUSH_R  TBLPTRH
000A96 CFF7 FFDD          M         movff   TBLPTRH, softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00547         PUSH_R  TBLPTRU
000A9A CFF8 FFDD          M         movff   TBLPTRU, softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00548         PUSH_R  TABLAT
000A9E CFF5 FFDD          M         movff   TABLAT,  softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00549         ; define variables to pushed registers
                      00550         #define index                                           r0
                      00551         #define FSR_activeNoteTable                     FSR0
                      00552         #define PLUSW_activeNoteTable           PLUSW0
                      00553         #define FSR_activeNoteDeltas            FSR1
                      00554         #define PLUSW_activeNoteDeltas          PLUSW1
                      00555 
                      00556         ; load FSR
000AA2 EE00 F059      00557         lfsr    FSR_activeNoteTable, activeNoteTable
000AA6 EE10 F0BA      00558         lfsr    FSR_activeNoteDeltas, activeNoteDeltas
                      00559 
000AAA                00560 getActiveNoteDeltasAgain
                      00561         ; activeNoteTable is modified by ISR so is VOLATILE!
                      00562         ; clear activeNoteTableModified flag so that we can check it again once we're done updating acti
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 139


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            veNoteDeltas
                      00563         ; if the flag is set upon routine completion, then there's a chance that activeNoteDeltas are co
                            rrupt so do it again
000AAA 9619           00564         bcf             soundGenFlags, activeNoteTableModified, ACCESS
                      00565 
                      00566         ; init index
000AAC 6A03           00567         clrf    index, ACCESS
                      00568 
000AAE                00569 getActiveNoteDeltas_loop        
                      00570         ; check if reading note or sample delta table
000AAE 0E02           00571         movlw   SAMPLE
000AB0 181F           00572         xorwf   waveShape, w, ACCESS
000AB2 E0??           00573         bz              getActiveNoteDeltas_loadSampleDelta
                      00574 
                      00575         ; **** load value from midi delta table ****
                      00576         ; load table pointer address
                      00577         ; shift activeNote left once to get proper program memory offset since noteDelta values are word
                            -sized
                      00578         ; w = activeNoteTable[index]
000AB4 5003           00579         movf    index, w, ACCESS
                      00580         ; if bit 7 is set then note at index is not valid
000AB6 BEEB           00581         btfsc   PLUSW_activeNoteTable, 7, ACCESS
000AB8 D???           00582         bra             getActiveNoteDeltas_zeroDelta
                      00583         ; note at index is valid so continue
000ABA 90D8           00584         bcf             STATUS, C, ACCESS
000ABC 34EB           00585         rlcf    PLUSW_activeNoteTable, w, ACCESS
000ABE 0F??           00586         addlw   low(midiNoteDeltaTable)
000AC0 6EF6           00587         movwf   TBLPTRL, ACCESS
000AC2 0E??           00588         movlw   high(midiNoteDeltaTable)
000AC4 B0D8           00589         btfsc   STATUS, C, ACCESS
000AC6 0F01           00590         addlw   1
000AC8 6EF7           00591         movwf   TBLPTRH, ACCESS
000ACA 0E??           00592         movlw   upper(midiNoteDeltaTable)
000ACC B0D8           00593         btfsc   STATUS, C, ACCESS
000ACE 0F01           00594         addlw   1
000AD0 6EF8           00595         movwf   TBLPTRU, ACCESS
000AD2 D???           00596         bra             getActiveNoteDeltas_readTableAndSave
                      00597 
                      00598         ; **** load value from sample delta table ****
Warning[208]: Label truncated at 32 characters. (getActiveNoteDeltas_loadSampleDelta)
000AD4                00599 getActiveNoteDeltas_loadSampleDelta
                      00600         ; load table pointer address
                      00601         ; shift activeNote left once to get proper program memory offset since noteDelta values are word
                            -sized
                      00602         ; w = activeNoteTable[index]
000AD4 5003           00603         movf    index, w, ACCESS
                      00604         ; if bit 7 is set then note at index is not valid
000AD6 BEEB           00605         btfsc   PLUSW_activeNoteTable, 7, ACCESS
000AD8 D???           00606         bra             getActiveNoteDeltas_zeroDelta
                      00607         ; note at index is valid so continue
000ADA 90D8           00608         bcf             STATUS, C, ACCESS
000ADC 34EB           00609         rlcf    PLUSW_activeNoteTable, w, ACCESS
000ADE 0F??           00610         addlw   low(sampleMidiNoteDeltaTable)
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 140


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000AE0 6EF6           00611         movwf   TBLPTRL, ACCESS
000AE2 0E??           00612         movlw   high(sampleMidiNoteDeltaTable)
000AE4 B0D8           00613         btfsc   STATUS, C, ACCESS
000AE6 0F01           00614         addlw   1
000AE8 6EF7           00615         movwf   TBLPTRH, ACCESS
000AEA 0E??           00616         movlw   upper(sampleMidiNoteDeltaTable)
000AEC B0D8           00617         btfsc   STATUS, C, ACCESS
000AEE 0F01           00618         addlw   1
000AF0 6EF8           00619         movwf   TBLPTRU, ACCESS
000AF2 D???           00620         bra             getActiveNoteDeltas_readTableAndSave
                      00621 
000AF4                00622 getActiveNoteDeltas_zeroDelta
                      00623         ; w = index * 2
000AF4 90D8           00624         bcf             STATUS, C, ACCESS
000AF6 3403           00625         rlcf    index, w, ACCESS
                      00626 
                      00627         ; Critical Section Begin
                      00628         ; **************************
                      00629         ; clear global interrupt to avoid ISR reading partial delta value
000AF8 9EF2           00630         bcf             INTCON, GIE, ACCESS
                      00631 
000AFA 6AE3           00632         clrf    PLUSW_activeNoteDeltas, ACCESS
                      00633         ; w = (index * 2) + 1
000AFC 0F01           00634         addlw   1
000AFE 6AE3           00635         clrf    PLUSW_activeNoteDeltas, ACCESS
                      00636 
                      00637         ; re-enable interrupts
000B00 8EF2           00638         bsf             INTCON, GIE, ACCESS
                      00639         ; **************************
                      00640         ; Critical Section End
                      00641 
000B02 D???           00642         bra             getActiveNoteDeltas_next
                      00643 
Warning[208]: Label truncated at 32 characters. (getActiveNoteDeltas_readTableAndSave)
000B04                00644 getActiveNoteDeltas_readTableAndSave
                      00645         ; read low byte into TBLAT
000B04 0009           00646         tblrd*+
                      00647         ; w = index * 2
000B06 90D8           00648         bcf             STATUS, C, ACCESS
000B08 3403           00649         rlcf    index, w, ACCESS
                      00650 
                      00651         ; Critical Section Begin
                      00652         ; **************************
                      00653         ; clear global interrupt to avoid ISR reading partial delta value
000B0A 9EF2           00654         bcf             INTCON, GIE, ACCESS
                      00655         
000B0C CFF5 FFE3      00656         movff   TABLAT, PLUSW_activeNoteDeltas
                      00657         ; read high byte into TBLAT
000B10 0009           00658         tblrd*+
                      00659         ; w = (index * 2) + 1
000B12 0F01           00660         addlw   1
000B14 CFF5 FFE3      00661         movff   TABLAT, PLUSW_activeNoteDeltas
                      00662 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 141


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00663         ; re-enable interrupts
000B18 8EF2           00664         bsf             INTCON, GIE, ACCESS
                      00665         ; **************************
                      00666         ; Critical Section End
                      00667 
000B1A                00668 getActiveNoteDeltas_next        
                      00669         ; increment index
000B1A 2A03           00670         incf    index, f, ACCESS
                      00671         ; compare against polyDepth to check if done
000B1C 0E04           00672         movlw   MAX_POLY_DEPTH
000B1E 1803           00673         xorwf   index, w, ACCESS
000B20 E1??           00674         bnz             getActiveNoteDeltas_loop
                      00675 
000B22                00676 getActiveNoteDeltas_exit
                      00677         ; activeNoteTable is modified by ISR so is VOLATILE!
                      00678         ; if activeNoteTableModified flag is set, there's a chance that activeNoteDeltas are corrupt so 
                            do it again
000B22 B619           00679         btfsc   soundGenFlags, activeNoteTableModified, ACCESS
000B24 D???           00680         bra             getActiveNoteDeltasAgain
                      00681 
                      00682         ; undefine variables from pushed registers
                      00683         #undefine       index
                      00684         #undefine       FSR_activeNoteTable
                      00685         #undefine       PLUSW_activeNoteTable
                      00686         #undefine       FSR_activeNoteDeltas
                      00687         #undefine       PLUSW_activeNoteDeltas
                      00688         ; pop working regs from software stack
                      00689         POP_R   TABLAT
000B26 CFDC FFF5          M         movff   softwareStackPointerPREINC, TABLAT      ; ++softwareStackPointerINDF = regName
                      00690         POP_R   TBLPTRU
000B2A CFDC FFF8          M         movff   softwareStackPointerPREINC, TBLPTRU     ; ++softwareStackPointerINDF = regName
                      00691         POP_R   TBLPTRH
000B2E CFDC FFF7          M         movff   softwareStackPointerPREINC, TBLPTRH     ; ++softwareStackPointerINDF = regName
                      00692         POP_R   TBLPTRL
000B32 CFDC FFF6          M         movff   softwareStackPointerPREINC, TBLPTRL     ; ++softwareStackPointerINDF = regName
                      00693         POP_R   FSR1H
000B36 CFDC FFE2          M         movff   softwareStackPointerPREINC, FSR1H       ; ++softwareStackPointerINDF = regName
                      00694         POP_R   FSR1L
000B3A CFDC FFE1          M         movff   softwareStackPointerPREINC, FSR1L       ; ++softwareStackPointerINDF = regName
                      00695         POP_R   FSR0H
000B3E CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00696         POP_R   FSR0L
000B42 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00697         POP_R   r0
000B46 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00698 
                      00699         ; deltas have been updated so call the DelagatOr
                      00700         ; need this here because getActiveNoteDeltas is called when waveShape is change by user
000B4A D???           00701         rcall   theDelegatOr
                      00702 
000B4C 0012           00703         return
                      00704 
                      00705 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 142


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00706         ; ***********************************************************************
                      00707         ; Function: void theDelegatOr(void)
                      00708         ; ***********************************************************************
000B4E                00709 theDelegatOr
                      00710 
                      00711         PUSH_R  r0
000B4E C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00712         PUSH_R  r1
000B52 C004 FFDD          M         movff   r1,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00713         PUSH_R  r2
000B56 C005 FFDD          M         movff   r2,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00714         PUSH_R  r3
000B5A C006 FFDD          M         movff   r3,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00715         PUSH_R  r4
000B5E C007 FFDD          M         movff   r4,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00716         PUSH_R  r5
000B62 C008 FFDD          M         movff   r5,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00717         PUSH_R  r6
000B66 C009 FFDD          M         movff   r6,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00718         PUSH_R  FSR0L
000B6A CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00719         PUSH_R  FSR0H
000B6E CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00720         PUSH_R  FSR1L
000B72 CFE1 FFDD          M         movff   FSR1L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00721         PUSH_R  FSR1H
000B76 CFE2 FFDD          M         movff   FSR1H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00722         
                      00723         #define ddLockedFlags                           r0
                      00724         #define ddIndex                                 r1
                      00725         #define ddIndexMask                             r2
                      00726         #define andIndex                                r3
                      00727         #define andIndexMask                    r4
                      00728         #define tmpValue                                r5
                      00729         #define andLockedFlags  r6
                      00730         #define FSR_activeNoteDeltas    FSR0
                      00731         #define PLUSW_activeNoteDeltas  PLUSW0
                      00732         #define FSR_delegatedDeltas             FSR1
                      00733         #define PLUSW_delegatedDeltas   PLUSW1
                      00734         
000B7A EE00 F0BA      00735         lfsr    FSR_activeNoteDeltas, activeNoteDeltas
000B7E EE10 F0C2      00736         lfsr    FSR_delegatedDeltas, delegatedDeltas
                      00737 
                      00738         ; set flag to indicate to oscillators that delegatedDeltas are volatile
000B82 8019           00739         bsf             soundGenFlags, delegatorBusy, ACCESS
                      00740         
                      00741         ; check if poly or mono mode
000B84 0E01           00742         movlw   1
000B86 6424           00743         cpfsgt  polyDepth, ACCESS
000B88 D???           00744         bra             theDelgatOr_doMono
                      00745         
                      00746         ;**** start procedure: free up any oscillator whose current delta is no longer present in active
                            NoteDeltas ****
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 143


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00747 
                      00748         ; corresponding ddLockedFlags and andLockedFlags will be set for each delegatedDelta that matche
                            s an activeNoteDelta
                      00749         ; so clear em
000B8A 6A03           00750         clrf    ddLockedFlags, ACCESS
000B8C 6A09           00751         clrf    andLockedFlags, ACCESS
                      00752         
                      00753         ; the purpose of the following routine is to check each oscillator's delegatedDelta value agains
                            t the activeNoteDelta array
                      00754         ; and free any oscillator up that is no longer valid
                      00755         ; "ddLockedFlags" is used locally to indicate if an oscillator is locked to a current activeNote
                            Delta element
                      00756         
                      00757         ; start looking through delegatedDeltas[0...3] for a match in the activeNoteTable[0...polyDepth-
                            1]
                      00758         ; reset delegatedDeltas index count
000B8E 6A04           00759         clrf    ddIndex, ACCESS
                      00760         ; reset delegatedDeltas index mask
000B90 0E01           00761         movlw   1
000B92 6E05           00762         movwf   ddIndexMask, ACCESS
                      00763         ; start delegatedDelta iteration loop
000B94                00764 theDelegatOr_undelOutLp
                      00765         ; check for delegatedDeltas[ddIndex] == 0x0000
000B94 90D8           00766         bcf             STATUS, C, ACCESS
000B96 3404           00767         rlcf    ddIndex, w, ACCESS
000B98 52E3           00768         movf    PLUSW_delegatedDeltas, f, ACCESS
000B9A E1??           00769         bnz             theDelegatOr_undelDdNonZero
000B9C 0F01           00770         addlw   1
000B9E 52E3           00771         movf    PLUSW_delegatedDeltas, f, ACCESS
                      00772         ; delegatedDeltas[ddIndex] value is nonZero so continue
000BA0 E1??           00773         bnz     theDelegatOr_undelDdNonZero
                      00774         
                      00775         ; delegatedDeltas[ddIndex] value is 0x0000 so...
                      00776         ; iterate to next delegatedDelta
000BA2 D???           00777         bra             theDelegatOr_undelNextDD
                      00778 
000BA4                00779 theDelegatOr_undelDdNonZero
                      00780         ; reset activeNoteTable index count
000BA4 6A06           00781         clrf    andIndex, ACCESS
                      00782         ; reset activeNoteTable index mask
000BA6 0E01           00783         movlw   1
000BA8 6E07           00784         movwf   andIndexMask, ACCESS
                      00785 
                      00786         ; start activeNoteTable iteration loop
000BAA                00787 theDelegatOr_undelInLp
                      00788         ; try to match low byte
                      00789         ; elements are 2-bytes wide so WREG = index * 2
000BAA 90D8           00790         bcf             STATUS, C, ACCESS
000BAC 3404           00791         rlcf    ddIndex, w, ACCESS
000BAE 50E3           00792         movf    PLUSW_delegatedDeltas, w, ACCESS
000BB0 6E08           00793         movwf   tmpValue, ACCESS
000BB2 90D8           00794         bcf             STATUS, C, ACCESS
000BB4 3406           00795         rlcf    andIndex, w, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 144


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000BB6 50EB           00796         movf    PLUSW_activeNoteDeltas, w, ACCESS
000BB8 1808           00797         xorwf   tmpValue, w, ACCESS
                      00798         ; low byte does not match so iterate to next activeNoteDeltas index
000BBA E1??           00799         bnz             theDelegatOr_undelNextAnd
                      00800         ; low byte matches, try to match high byte
000BBC 90D8           00801         bcf             STATUS, C, ACCESS
000BBE 3404           00802         rlcf    ddIndex, w, ACCESS
000BC0 0F01           00803         addlw   1
000BC2 50E3           00804         movf    PLUSW_delegatedDeltas, w, ACCESS
000BC4 6E08           00805         movwf   tmpValue, ACCESS
000BC6 90D8           00806         bcf             STATUS, C, ACCESS
000BC8 3406           00807         rlcf    andIndex, w, ACCESS
000BCA 0F01           00808         addlw   1
000BCC 50EB           00809         movf    PLUSW_activeNoteDeltas, w, ACCESS
000BCE 1808           00810         xorwf   tmpValue, w, ACCESS
                      00811         ; elements do not match so iterate to next activeNoteDeltas index
000BD0 E1??           00812         bnz             theDelegatOr_undelNextAnd
                      00813 
                      00814         ; nonZero element in delegatedDeltas matches an element in activeNoteDeltas
                      00815         ; set activeNoteDelta and delegatedDelta locked flags
000BD2 5005           00816         movf    ddIndexMask, w, ACCESS
000BD4 1203           00817         iorwf   ddLockedFlags, f, ACCESS        
000BD6 5007           00818         movf    andIndexMask, w, ACCESS
000BD8 1209           00819         iorwf   andLockedFlags, f, ACCESS       
                      00820 
                      00821         ; if it's releasing then reattack
000BDA 5004           00822         movf    ddIndex, w, ACCESS
                      00823         ; macro returns boolean value in WREG and also sets ZERO flag accordingly
                      00824         OSC_READ_ADSR_FLAG release
                          M ; oscillator number passed in WREG
                          M ; boolean value is returned in WREG and ZERO flag is set accordingly
                          M 
                          M         ; push working regs onto software stack
                          M         PUSH_R  FSR0L
000BDC CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                          M         PUSH_R  FSR0H
000BE0 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                          M         
                          M         ; load fsr
000BE4 EE00 F030          M         lfsr    FSR0, oscStateFlags
                          M         ; read the register into WREG
000BE8 50EB               M         movf    PLUSW0, w, ACCESS
000BEA 0B01               M         andlw   1<<0
                          M         
                          M         ; restore working regs from stack
                          M         POP_R   FSR0H
000BEC CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                          M         POP_R   FSR0L   
000BF0 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                          M         
                      00825         ; don't reattack if it's not releasing
000BF4 E0??           00826         bz              theDelegatOr_undelNextDD
                      00827         ; oscillator is releasing so reattack
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 145


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000BF6 5004           00828         movf    ddIndex, w, ACCESS
000BF8 D???           00829         rcall   oscAdsrTriggerAttack
                      00830         
000BFA D???           00831         bra             theDelegatOr_undelNextDD        
                      00832         
000BFC                00833 theDelegatOr_undelNextAnd
                      00834         ; current activeNoteDelta does not match current delegatedDelta so iterate to next
                      00835         ; increment activeNoteDeltas index mask value
000BFC 90D8           00836         bcf             STATUS, C, ACCESS
000BFE 3607           00837         rlcf    andIndexMask, f, ACCESS
                      00838         ; increment activeNoteDeltas index
000C00 2A06           00839         incf    andIndex, f, ACCESS
                      00840         ; we're done if andIndex == MAX_POLY_DEPTH
000C02 5006           00841         movf    andIndex, w, ACCESS
000C04 0A04           00842         xorlw   MAX_POLY_DEPTH
                      00843         ; still have more activeNoteDelta elements to check for match so keep going
000C06 E1??           00844         bnz             theDelegatOr_undelInLp
                      00845 
000C08                00846 theDelegatOr_undelAndLoopDone
                      00847         ; done trying to match delegatedDeltas[ddIndex] to activeNoteDeltas[0 - polyDepth]
                      00848         ; did not find a match (any match would've branched to theDelegatOr_undelNextDD)
                      00849 
                      00850         ; delatedDeltas[ddIndex] is nonZero and has no match in activeNoteDeltas[0…polyDepth-1] so kil
                            l it with adsr-release  
                      00851         ; set the release flag
000C08 5004           00852         movf    ddIndex, w, ACCESS
000C0A D???           00853         rcall   oscAdsrTriggerRelease
                      00854 
                      00855         ; check next delegatedDelta
000C0C                00856 theDelegatOr_undelNextDD
000C0C 90D8           00857         bcf             STATUS, C, ACCESS
000C0E 3605           00858         rlcf    ddIndexMask, f, ACCESS
000C10 2A04           00859         incf    ddIndex, f, ACCESS
000C12 5004           00860         movf    ddIndex, w, ACCESS
000C14 0A04           00861         xorlw   MAX_POLY_DEPTH
000C16 E1??           00862         bnz             theDelegatOr_undelOutLp
                      00863                 
                      00864 
                      00865         ;**** start procedure: delegate any unlocked activeNoteDeltas to a free oscillator **** 
                      00866         ; this procedure is reversed from the previous in that it tries to match an unmatch activeNoteDe
                            lta to
                      00867         ; the first available unmatched oscillator
                      00868         
                      00869         ; reset activeNoteDelta index count
000C18 6A06           00870         clrf    andIndex, ACCESS
                      00871         ; reset activeNoteDelta index mask
000C1A 0E01           00872         movlw   1
000C1C 6E07           00873         movwf   andIndexMask, ACCESS
000C1E                00874 theDelegatOr_delOutLp
                      00875         ; ignore activeNoteDelta if it's locked
000C1E 5007           00876         movf    andIndexMask, w, ACCESS
000C20 1409           00877         andwf   andLockedFlags, w, ACCESS
000C22 E1??           00878         bnz             theDelegatOr_delOutLpNext
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 146


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00879         
                      00880         ; only attempt match if activeNoteDelta != 0x0000
                      00881         ; WREG = ddIndex * 2
000C24 90D8           00882         bcf             STATUS, C, ACCESS
000C26 3406           00883         rlcf    andIndex, w, ACCESS
000C28 52EB           00884         movf    PLUSW_activeNoteDeltas, f, ACCESS
000C2A E1??           00885         bnz             theDelegatOr_andNotZero
000C2C 0F01           00886         addlw   1
000C2E 52EB           00887         movf    PLUSW_activeNoteDeltas, f, ACCESS
000C30 E0??           00888         bz              theDelegatOr_delOutLpNext
                      00889 
000C32                00890 theDelegatOr_andNotZero                 
                      00891         ; if possible, we want to leave releasing oscillators alone and assign unmatch activeNoteDeltas 
                            to a completely
                      00892         ; idle oscillator.  If no idle oscillator is found then force assignment to a releasing oscillat
                            or
                      00893         ; ddLockedFlags bit 7 == 0 for available
                      00894         ; ddLockedFlags bit 7 == 1 for force assign to releasing        
000C32 9E03           00895         bcf             ddLockedFlags, 7, ACCESS
                      00896 
000C34                00897 theDelegatOr_delInLpInit
                      00898         ; found unmatched activeNoteDelta, so assign to first available oscillator's delegatedDelta
                      00899         ; reset delegatedDeltas index count
000C34 6A04           00900         clrf    ddIndex, ACCESS
                      00901         ; reset delegatedDeltas index mask
000C36 0E01           00902         movlw   1
000C38 6E05           00903         movwf   ddIndexMask, ACCESS
                      00904 
000C3A                00905 theDelegatOr_delInLp
                      00906         ; WREG = ddIndex * 2
000C3A 90D8           00907         bcf             STATUS, C, ACCESS
000C3C 3404           00908         rlcf    ddIndex, w, ACCESS
                      00909 
                      00910         ; IF YOU"RE GONNA HIJACK a releasing osc then maybe choose the one that the most released?
                      00911         
                      00912         ; check if we're still looking for idle oscillators or forcing assignment to a releasing osc
000C3E BE03           00913         btfsc   ddLockedFlags, 7, ACCESS
000C40 D???           00914         bra             theDelegatOr_delInLpForceAssign
                      00915 
                      00916         ; check low byte for zero
000C42 52E3           00917         movf    PLUSW_delegatedDeltas, f, ACCESS
000C44 E1??           00918         bnz             theDelegatOr_delInLpNext
                      00919         ; check high byte for zero
000C46 0F01           00920         addlw   1
000C48 52E3           00921         movf    PLUSW_delegatedDeltas, f, ACCESS
000C4A E1??           00922         bnz             theDelegatOr_delInLpNext
                      00923         ; found idle oscillator so assign it
000C4C D???           00924         bra             theDelegatOr_delInLpAssignOsc
                      00925         
000C4E                00926 theDelegatOr_delInLpForceAssign
                      00927         ; if oscillator is not locked then it may be releasing so force assignment
000C4E 5005           00928         movf    ddIndexMask, w, ACCESS
000C50 1403           00929         andwf   ddLockedFlags, w, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 147


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00930         ; oscillator is locked so don't touch it
000C52 E1??           00931         bnz             theDelegatOr_delInLpNext
                      00932 
000C54                00933 theDelegatOr_delInLpAssignOsc
                      00934         ; found suitable oscillator, ignore if locked for sustain
000C54 5005           00935         movf    ddIndexMask, w, ACCESS
000C56 142C           00936         andwf   sustainFlags, w, ACCESS
                      00937         ; oscillator is locked for sustain so consider it ineligible
000C58 E1??           00938         bnz             theDelegatOr_delInLpNext
                      00939 
                      00940         ; oscillator is not locked for sustain so do delegatedDeltas[ddIndex] = activeNoteDeltas[andInde
                            x]
                      00941         ; copy low byte
000C5A 90D8           00942         bcf             STATUS, C, ACCESS
000C5C 3406           00943         rlcf    andIndex, w, ACCESS
000C5E 50EB           00944         movf    PLUSW_activeNoteDeltas, w, ACCESS
000C60 6E08           00945         movwf   tmpValue, ACCESS
000C62 90D8           00946         bcf             STATUS, C, ACCESS
000C64 3404           00947         rlcf    ddIndex, w, ACCESS
000C66 C008 FFE3      00948         movff   tmpValue, PLUSW_delegatedDeltas
                      00949         ; copy high byte
000C6A 90D8           00950         bcf             STATUS, C, ACCESS
000C6C 3406           00951         rlcf    andIndex, w, ACCESS
000C6E 0F01           00952         addlw   1
000C70 50EB           00953         movf    PLUSW_activeNoteDeltas, w, ACCESS
000C72 6E08           00954         movwf   tmpValue, ACCESS
000C74 90D8           00955         bcf             STATUS, C, ACCESS
000C76 3404           00956         rlcf    ddIndex, w, ACCESS
000C78 0F01           00957         addlw   1
000C7A C008 FFE3      00958         movff   tmpValue, PLUSW_delegatedDeltas
                      00959 
                      00960         ; oscillator is starting up so set attack flag
000C7E 5004           00961         movf    ddIndex, w, ACCESS
000C80 D???           00962         rcall   oscAdsrTriggerAttack
                      00963         
                      00964         ; skip to next unlocked activeNoteDelta
000C82 D???           00965         bra             theDelegatOr_delOutLpNext
                      00966         
000C84                00967 theDelegatOr_delInLpNext
000C84 90D8           00968         bcf             STATUS, C, ACCESS
000C86 3605           00969         rlcf    ddIndexMask, f, ACCESS
000C88 2A04           00970         incf    ddIndex, f, ACCESS
000C8A 5004           00971         movf    ddIndex, w, ACCESS
000C8C 0A04           00972         xorlw   MAX_POLY_DEPTH
000C8E E1??           00973         bnz             theDelegatOr_delInLp
                      00974         
                      00975         ; toggle idle/forceOnReleasing flag if necessary
000C90 BE03           00976         btfsc   ddLockedFlags, 7, ACCESS
                      00977         ; just completed force on releasing cycle so continue
000C92 D???           00978         bra             theDelegatOr_delOutLpNext
                      00979         ; just complete idle assign loop so toggle to force
000C94 8E03           00980         bsf             ddLockedFlags, 7, ACCESS
                      00981         ; go try to find a releasing oscillator to snag
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 148


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000C96 D???           00982         bra             theDelegatOr_delInLpInit
                      00983 
000C98                00984 theDelegatOr_delOutLpNext
000C98 90D8           00985         bcf             STATUS, C, ACCESS
000C9A 3607           00986         rlcf    andIndexMask, f, ACCESS
000C9C 2A06           00987         incf    andIndex, f, ACCESS
000C9E 5006           00988         movf    andIndex, w, ACCESS
000CA0 0A04           00989         xorlw   MAX_POLY_DEPTH
000CA2 E1??           00990         bnz             theDelegatOr_delOutLp
                      00991         
000CA4 D???           00992         bra             theDelegatOr_done
                      00993 
000CA6                00994 theDelgatOr_doMono
                      00995         ; kill adsr for monophonic mode
000CA6 6A34           00996         clrf    adsrLimiterRegs + 0, ACCESS
000CA8 C0BA F0C2      00997         movff   activeNoteDeltas + 0, delegatedDeltas + 0       
000CAC C0BB F0C3      00998         movff   activeNoteDeltas + 1, delegatedDeltas + 1
000CB0 6BC4           00999         clrf    delegatedDeltas + 2
000CB2 6BC5           01000         clrf    delegatedDeltas + 3
000CB4 6BC6           01001         clrf    delegatedDeltas + 4
000CB6 6BC7           01002         clrf    delegatedDeltas + 5
000CB8 6BC8           01003         clrf    delegatedDeltas + 6
000CBA 6BC9           01004         clrf    delegatedDeltas + 7
                      01005 
000CBC                01006 theDelegatOr_done
                      01007         ; clear flag to indicate to oscillators that delegatedDeltas are no longer volatile
000CBC 9019           01008         bcf             soundGenFlags, delegatorBusy, ACCESS
                      01009 
                      01010         POP_R   FSR1H
000CBE CFDC FFE2          M         movff   softwareStackPointerPREINC, FSR1H       ; ++softwareStackPointerINDF = regName
                      01011         POP_R   FSR1L
000CC2 CFDC FFE1          M         movff   softwareStackPointerPREINC, FSR1L       ; ++softwareStackPointerINDF = regName
                      01012         POP_R   FSR0H
000CC6 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      01013         POP_R   FSR0L
000CCA CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      01014         POP_R   r6
000CCE CFDC F009          M         movff   softwareStackPointerPREINC, r6          ; ++softwareStackPointerINDF = regName
                      01015         POP_R   r5
000CD2 CFDC F008          M         movff   softwareStackPointerPREINC, r5          ; ++softwareStackPointerINDF = regName
                      01016         POP_R   r4
000CD6 CFDC F007          M         movff   softwareStackPointerPREINC, r4          ; ++softwareStackPointerINDF = regName
                      01017         POP_R   r3
000CDA CFDC F006          M         movff   softwareStackPointerPREINC, r3          ; ++softwareStackPointerINDF = regName
                      01018         POP_R   r2
000CDE CFDC F005          M         movff   softwareStackPointerPREINC, r2          ; ++softwareStackPointerINDF = regName
                      01019         POP_R   r1
000CE2 CFDC F004          M         movff   softwareStackPointerPREINC, r1          ; ++softwareStackPointerINDF = regName
                      01020         POP_R   r0
000CE6 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      01021         
                      01022         #undefine       ddLockedFlags
                      01023         #undefine       ddIndex
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 149


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01024         #undefine       ddIndexMask
                      01025         #undefine       andIndex
                      01026         #undefine       andIndexMask
                      01027         #undefine       tmpValue
                      01028         #undefine       andLockedFlags
                      01029         #undefine       FSR_activeNoteDeltas
                      01030         #undefine       PLUSW_activeNoteDeltas
                      01031         #undefine       FSR_delegatedDeltas
                      01032         #undefine       PLUSW_delegatedDeltas
                      01033 
000CEA 0012           01034         return
                      01035 
                      01036 
                      01037         ; ***********************************************************************
                      01038         ; Function: void processSoundState(void)
                      01039         ; ***********************************************************************
000CEC                01040 processSoundState
                      01041         ; push working regs onto software stack
                      01042         PUSH_R  FSR0L
000CEC CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01043         PUSH_R  FSR0H
000CF0 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01044         PUSH_R  FSR1L
000CF4 CFE1 FFDD          M         movff   FSR1L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01045         PUSH_R  FSR1H
000CF8 CFE2 FFDD          M         movff   FSR1H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01046         PUSH_R  TBLPTRL
000CFC CFF6 FFDD          M         movff   TBLPTRL, softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01047         PUSH_R  TBLPTRH
000D00 CFF7 FFDD          M         movff   TBLPTRH, softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01048         PUSH_R  TBLPTRU
000D04 CFF8 FFDD          M         movff   TBLPTRU, softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01049         PUSH_R  TABLAT
000D08 CFF5 FFDD          M         movff   TABLAT,  softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01050         PUSH_R  PRODL
000D0C CFF3 FFDD          M         movff   PRODL,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01051         PUSH_R  PRODH
000D10 CFF4 FFDD          M         movff   PRODH,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01052         ; Define FSR(s) for recording, playback pointers will be redefined as needed
                      01053         #define FSR_sampleDataBuffer            FSR0
                      01054         #define PLUSW_sampleDataBuffer          PLUSW0  
                      01055 
                      01056         ; load fsr
000D14 EE00 F072      01057         lfsr    FSR_sampleDataBuffer, sampleDataBuffer
                      01058 
                      01059         ;**** start procedure: sample audio if mode is VOICE_THROUGH or RECORD ****
000D18 0E00           01060         movlw   VOICE_THROUGH
000D1A 1820           01061         xorwf   recordOrPlayback, w, ACCESS
000D1C E0??           01062         bz              processSoundState_StartADC
000D1E 0E01           01063         movlw   RECORD
000D20 1820           01064         xorwf   recordOrPlayback, w, ACCESS
000D22 E0??           01065         bz              processSoundState_StartADC
000D24 D???           01066         bra             processSoundState_Playback      
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 150


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01067 
                      01068         ;**** start procedure: sample audio ****
000D26                01069 processSoundState_StartADC
                      01070         ; start ADC conversion
000D26 82C2           01071         bsf             ADCON0, GO, ACCESS
                      01072         ; wait for conversion to finish
000D28                01073 processSoundState_ADCWait
000D28 B2C2           01074         btfsc   ADCON0, DONE, ACCESS
000D2A D???           01075         bra             processSoundState_ADCWait
                      01076                 
                      01077         ; sample complete, save ADC value
000D2C 50C4           01078         movf    ADRESH, w, ACCESS
                      01079         ; add op-amp DC OFFSET
                      01080         ; REMEBER that DC-OFFSET will be affected by component tolerances so measure each circuit! No wa
                            y, you measure each circuit!
000D2E 0F36           01081         addlw   SAMPLE_DC_OFFSET 
                      01082         ; if overflow then clip at 0xff
000D30 B0D8           01083         btfsc   STATUS, C, ACCESS
000D32 0EFF           01084         movlw 0xff
                      01085         ; save value
000D34 6E2D           01086         movwf   sample, ACCESS
                      01087                 
                      01088 ; DEBUG - sample mix
                      01089         ; amplify incoming sample volume by 3
000D36 0E80           01090         movlw   PWM_IDLE_OUTPUT_VALUE
000D38 5C2D           01091         subwf   sample, w, ACCESS
000D3A E3??           01092         bnc             processSoundState_sampAmpNeg
                      01093         ; result was positive so increase value
000D3C 90D8           01094         bcf             STATUS, C, ACCESS
000D3E 34E8           01095         rlcf    WREG, w, ACCESS
000D40 242D           01096         addwf   sample, w, ACCESS
                      01097         ; if overflow then clip at 0xff
000D42 B0D8           01098         btfsc   STATUS, C, ACCESS
000D44 0EFF           01099         movlw 0xff
000D46 D???           01100         bra             processSoundState_sampAmpExit
000D48                01101 processSoundState_sampAmpNeg
                      01102         ; result was negative so decrease value
                      01103         ; invert difference so it's positive
000D48 6CE8           01104         negf    WREG, ACCESS
000D4A 90D8           01105         bcf             STATUS, C, ACCESS
000D4C 34E8           01106         rlcf    WREG, w, ACCESS
000D4E 5C2D           01107         subwf   sample, w, ACCESS
                      01108         ; if overflow then clip at 0x00
000D50 A0D8           01109         btfss   STATUS, C, ACCESS
000D52 0E00           01110         movlw   0
000D54                01111 processSoundState_sampAmpExit
000D54 6E2D           01112         movwf   sample, ACCESS
                      01113 
                      01114         ; write sample value to PWM for immediate playback
                      01115         ; /4 and add (PWM_IDLE_OUTPUT_VALUE/4 * 3) to simulate final single voice sound mix
000D56 90D8           01116   bcf           STATUS, C, ACCESS
000D58 302D           01117         rrcf    sample, w, ACCESS
000D5A 90D8           01118   bcf           STATUS, C, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 151


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000D5C 30E8           01119         rrcf    WREG, w, ACCESS
000D5E 0F60           01120         addlw   PWM_IDLE_OUTPUT_VALUE/4 * 3
000D60 6EBE           01121         movwf   CCPR1L, ACCESS
                      01122                 
                      01123         ;**** start procedure: should we be recording this? ****
                      01124         ; has RECORD button been released?
                      01125 #ifndef __DEBUG
                      01126         ; if debugging then assume that button has been released and we want to record
000D62 A282           01127         btfss   PORTC, RC1, ACCESS
                      01128         ; RECORD button is still depressed so don't record
000D64 EF?? F???      01129         goto    processSoundState_exit
                      01130 #endif
                      01131 
                      01132         ; RECORD button has been released
                      01133         
                      01134         ; is waveShape == SAMPLE?
000D68 0E02           01135         movlw   SAMPLE
000D6A 621F           01136         cpfseq  waveShape, ACCESS
                      01137         ; waveShape is != SAMPLE so don't record
000D6C EF?? F???      01138         goto    processSoundState_cancelVoiceThru
000D70 D???           01139         bra             processSoundState_recordGo
                      01140 
                      01141         ; waveShape != SAMPLE so cancel VOICE_THROUGH and return to PLAYBACK
Warning[208]: Label truncated at 32 characters. (processSoundState_cancelVoiceThru)
000D72                01142 processSoundState_cancelVoiceThru
000D72 0E02           01143         movlw   PLAYBACK
000D74 6E20           01144         movwf   recordOrPlayback, ACCESS
000D76 0E80           01145         movlw   PWM_IDLE_OUTPUT_VALUE
000D78 6EBE           01146         movwf   CCPR1L, ACCESS
000D7A EF?? F???      01147         goto    processSoundState_exit
                      01148 
                      01149         ;**********************************************************************
                      01150         ; Record Begin
                      01151 
000D7E                01152 processSoundState_recordGo
                      01153         ;**** start procedure: record sample ****
                      01154 
                      01155         ; don't start recording until recordWaitCountdown == 0x00
                      01156         ; recordWaitCountdown value is set by INT1 (record button) ISR
000D7E 523C           01157         movf    recordWaitCountdown, f, ACCESS
000D80 E0??           01158         bz              processSoundState_recordGoForRealz
000D82 063C           01159         decf    recordWaitCountdown, f, ACCESS
000D84 EF?? F???      01160         goto    processSoundState_exit
                      01161 
Warning[208]: Label truncated at 32 characters. (processSoundState_recordGoForRealz)
000D88                01162 processSoundState_recordGoForRealz
                      01163 
                      01164         ; update recordOrPlayback state to RECORD
000D88 0E01           01165         movlw   RECORD
000D8A 6E20           01166         movwf   recordOrPlayback, ACCESS
                      01167 
                      01168         ;**** start procedure: write sample into data buffer ****
                      01169         ; sampleDataBuffer[sampleDataBufferIndex] = sample
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 152


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000D8C 5012           01170         movf    sampleDataBufferIndex, w, ACCESS
000D8E C02D FFEB      01171         movff   sample, PLUSW_sampleDataBuffer
                      01172         
                      01173         ; increment index
000D92 2A12           01174         incf    sampleDataBufferIndex, f, ACCESS
                      01175 
                      01176         ; check buffer capacity
                      01177         ; buffer is full if sampleDataBufferIndex is == SAMPLE_DATA_BUFFER_SIZE
000D94 0E40           01178         movlw   SAMPLE_DATA_BUFFER_SIZE
000D96 6212           01179         cpfseq  sampleDataBufferIndex, ACCESS
                      01180         ; buffer is not full, our work here is done
000D98 D???           01181         bra             processSoundState_exit
                      01182 
                      01183         ; reset sampleDataBufferIndex to 0x0
000D9A 6A12           01184         clrf    sampleDataBufferIndex, ACCESS
                      01185         ; set sampleChunkReady flag to indicate that sample buffer is ready for EEPEROM write
000D9C 8018           01186         bsf             eepromFlags, sampleChunkReady, ACCESS
                      01187         ; sampleChunkCount indicates how many times the sample buffer has been filled, increment it
000D9E 2A13           01188         incf    sampleChunkCount, f, ACCESS
                      01189 
                      01190         ; buffer is full and ready for writing
                      01191 
                      01192         ; not using 'sample' to hold sample data anymore so change variable alias to 'tmpValue'
                      01193         #define         tmpValue        sample
                      01194         
                      01195         ; MOVED THIS TO MAINLINE WHICH WAITS FOR SAMPLECHUNKREADY TO BE SET
                      01196         ; write sampleDataBuffer to EEPROM. Call takes 548uS @ 16MHz clock and 4MHz SPI clock
                      01197 ;       call    eepromWrite64
                      01198         ; sample chunk has been written so clear sampleChunkReadyFlag
                      01199 ;       bcf             eepromFlags, sampleChunkReady, ACCESS
                      01200 
                      01201         ;**** start procedure: should we stop recording? ****
                      01202         ; if EEPROM is full then stop recording
000DA0 0EFA           01203         movlw   ((EEPROM_SIZE_BITS/8) / SAMPLE_DATA_BUFFER_SIZE)
000DA2 1813           01204         xorwf   sampleChunkCount, w, ACCESS
000DA4 B4D8           01205         btfsc   STATUS, Z, ACCESS
000DA6 D???           01206         bra             processSoundState_stopRecording
                      01207 
                      01208         ; if turnSoundOn or keyPressed is set then stop recording
                      01209         ; either flag being set indicates that a new Note On message has been received since record star
                            t
                      01210         ; this allows for using MIDI Note On message to set sample length
000DA8 B611           01211         btfsc   midiFlags, turnSoundOn, ACCESS
000DAA D???           01212         bra             processSoundState_stopRecording
000DAC AA11           01213         btfss   midiFlags, keyPressed, ACCESS
                      01214 
                      01215         ; EEPROM is not full and no Note On has been received since record start so keep recording, exit
                             ISR
000DAE EF?? F???      01216         goto    processSoundState_exit
                      01217 
                      01218         ;**** start procedure: stop recording ****
000DB2                01219 processSoundState_stopRecording
                      01220         ; set mode back to Playback
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 153


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000DB2 0E02           01221         movlw   PLAYBACK
000DB4 6E20           01222         movwf   recordOrPlayback, ACCESS
                      01223 
                      01224         ; leave PWM output at PWM_IDLE_OUTPUT_VALUE
000DB6 0E80           01225         movlw   PWM_IDLE_OUTPUT_VALUE
000DB8 6EBE           01226         movwf   CCPR1L, ACCESS
                      01227         
                      01228         ; use sampleChunkCount to calculate EEPROM end address
                      01229         ; sampleEndAddress = (sampleChunkCount * SAMPLE_DATA_BUFFER_SIZE) - 1
000DBA 0E40           01230         movlw   SAMPLE_DATA_BUFFER_SIZE
000DBC 0213           01231         mulwf   sampleChunkCount, ACCESS
000DBE 0E01           01232         movlw   1
000DC0 5EF3           01233         subwf   PRODL, f, ACCESS
000DC2 A0D8           01234         btfss   STATUS, C, ACCESS
000DC4 06F4           01235         decf    PRODH, f, ACCESS
                      01236 
                      01237         ; save sample end address to RAM for immediate playback
000DC6 CFF3 F014      01238         movff   PRODL, sampleEndAddress
000DCA CFF4 F015      01239         movff   PRODH, sampleEndAddress + 1
                      01240 
                      01241         ; save sample end address to on-chip EEPROM
                      01242         ; during power-up device init, initExternalEeprom() reads on-chip EEPROM address into RAM variab
                            le sampleEndAddress
                      01243         ; write address low byte
                      01244         WRITE_INTERNAL_EEPROM   0, sampleEndAddress
  0000                    M         local   writeIntEE_loop
                          M         
                          M         ; load address
000DCE 0E00               M         movlw   0
000DD0 6EA9               M         movwf   EEADR, ACCESS
                          M         ; load value
000DD2 C014 FFA8          M         movff   sampleEndAddress, EEDATA
                          M         ; configure eeprom
                          M         ; point to EEPROM DATA memory
000DD6 9EA6               M         bcf             EECON1, EEPGD, ACCESS
                          M         ; Access EEPROM/Program
000DD8 9CA6               M         bcf             EECON1, CFGS, ACCESS    
                          M         ; Enable writes
000DDA 84A6               M         bsf             EECON1, WREN, ACCESS
                          M 
                          M         ; don't have to disable interrupts because I'm only calling this
                          M         ; from within the high-priority ISR
                          M 
                          M         ; required write enable sequence
000DDC 0E55               M         movlw   0x55
000DDE 6EA7               M         movwf   EECON2, ACCESS
000DE0 0EAA               M         movlw   0xAA
000DE2 6EA7               M         movwf   EECON2, ACCESS
                          M 
                          M         ; set WR bit to begin write
000DE4 82A6               M         bsf             EECON1, WR, ACCESS
000DE6                    M writeIntEE_loop
                          M         ; wait for write to complete
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 154


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000DE6 B2A6               M         btfsc   EECON1, WR, ACCESS
000DE8 D???               M         bra             writeIntEE_loop
                          M         ; disable writes
000DEA 94A6               M         bcf             EECON1, WREN, ACCESS
                          M 
                          M         ; point to Program memory
000DEC 8EA6               M         bsf             EECON1, EEPGD, ACCESS
                          M 
                      01245         ; write address high byte
                      01246         WRITE_INTERNAL_EEPROM   1, (sampleEndAddress + 1)
  0000                    M         local   writeIntEE_loop
                          M         
                          M         ; load address
000DEE 0E01               M         movlw   1
000DF0 6EA9               M         movwf   EEADR, ACCESS
                          M         ; load value
000DF2 C015 FFA8          M         movff   (sampleEndAddress + 1), EEDATA
                          M         ; configure eeprom
                          M         ; point to EEPROM DATA memory
000DF6 9EA6               M         bcf             EECON1, EEPGD, ACCESS
                          M         ; Access EEPROM/Program
000DF8 9CA6               M         bcf             EECON1, CFGS, ACCESS    
                          M         ; Enable writes
000DFA 84A6               M         bsf             EECON1, WREN, ACCESS
                          M 
                          M         ; don't have to disable interrupts because I'm only calling this
                          M         ; from within the high-priority ISR
                          M 
                          M         ; required write enable sequence
000DFC 0E55               M         movlw   0x55
000DFE 6EA7               M         movwf   EECON2, ACCESS
000E00 0EAA               M         movlw   0xAA
000E02 6EA7               M         movwf   EECON2, ACCESS
                          M 
                          M         ; set WR bit to begin write
000E04 82A6               M         bsf             EECON1, WR, ACCESS
000E06                    M writeIntEE_loop
                          M         ; wait for write to complete
000E06 B2A6               M         btfsc   EECON1, WR, ACCESS
000E08 D???               M         bra             writeIntEE_loop
                          M         ; disable writes
000E0A 94A6               M         bcf             EECON1, WREN, ACCESS
                          M 
                          M         ; point to Program memory
000E0C 8EA6               M         bsf             EECON1, EEPGD, ACCESS
                          M 
                      01247 
                      01248         ; reset accumulators for good measure
                      01249         CLEAR_ACCUMULATORS
  0000                    M         local   loop
                          M 
                          M         ; init local variables
                          M         PUSH_R  r0
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 155


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000E0E C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                          M         PUSH_R  FSR0L
000E12 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                          M         PUSH_R  FSR0H
000E16 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                          M         
                          M         ; load fsr
000E1A EE00 F0D2          M         lfsr    FSR0, accumulators
                          M 
                          M         ; init count
000E1E 5024               M         movf    polyDepth, w, ACCESS
000E20 6E03               M         movwf   r0, ACCESS
000E22                    M loop    
                          M         ; each accumulator is 4 bytes wide
000E22 6AEE               M         clrf    POSTINC0, ACCESS        
000E24 6AEE               M         clrf    POSTINC0, ACCESS        
000E26 6AEE               M         clrf    POSTINC0, ACCESS        
000E28 6AEE               M         clrf    POSTINC0, ACCESS        
                          M         ; decrement count, skip if done
000E2A 2E03               M         decfsz  r0, f, ACCESS
000E2C D???               M         bra             loop
                          M 
                          M         ; restore variables
                          M         POP_R   FSR0H
000E2E CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                          M         POP_R   FSR0L
000E32 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                          M         POP_R   r0
000E36 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                          M         
                      01250 
                      01251         ; fixes bug if key was held during record start
000E3A 9811           01252         bcf             midiFlags, turnSoundOff, ACCESS
                      01253 
000E3C D???           01254         bra             processSoundState_exit
                      01255 
                      01256         ; undefine local FSRs
                      01257         #undefine       FSR_sampleDataBuffer
                      01258         #undefine       PLUSW_sampleDataBuffer
                      01259 
                      01260         ;**********************************************************************
                      01261         ; Playback Begin
                      01262 
000E3E                01263 processSoundState_Playback      
                      01264         ;**** start procedure: playback waveform or sample ****
                      01265 
                      01266         ; not using 'tmpValue' to hold anymore so change variable alias to 'count'
                      01267         #undefine       tmpValue
                      01268         #define         count   sample
                      01269                 
                      01270         ;**** start procedure: should we make any noise? ****
                      01271         ; if soundOn is set then continue to generate sound
000E3E BC11           01272         btfsc   midiFlags, soundOn, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 156


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000E40 D???           01273         bra             processSoundState_SoundOn
                      01274 
                      01275         ; if turnSoundOn is set then start generating sound
000E42 A611           01276         btfss   midiFlags, turnSoundOn, ACCESS
                      01277         ; neither is set so reset sound gen state and exit ISR
                      01278 ;       bra             processSoundState_reset
000E44 D???           01279         bra             processSoundState_SoundOn
                      01280         ; request has been made for sound to turn on so do it
000E46 9611           01281         bcf             midiFlags, turnSoundOn, ACCESS
000E48 8C11           01282         bsf             midiFlags, soundOn, ACCESS
                      01283         ; for SAMPLE mode, clear the samplesLoaded flag to tell the mainline that you need a new sample
000E4A 9218           01284         bcf             eepromFlags, samplesLoaded, ACCESS
                      01285         
                      01286         ;**** start procedure: make some noise ****
000E4C                01287 processSoundState_SoundOn
                      01288         ;**** start procedure: update oscillator states ****
                      01289         ; if waveShape is == SINE or SQUARE then macro will update oscillator's activeOutputValue regist
                            er
                      01290         ; if waveShape is == SAMPLE and samplesLoaded flag is set then macro will clear flag and load ne
                            xtSampleAddress register
                      01291         OSC_STATE_BLOCK 0
  0000                    M         local   checkDelegating, oscCheckActive, zeroAcc, oscActive, waveIsSample, noTransition, oscChec
                            kNotSine
  0000                    M         local   clrSampleAcc, addressOk, waveIsNotSample, waveIsSine, waveIsSquare, tableAddressLoaded, 
                            resetOscillator, macroDone
                          M                 
                          M         ; if oscillator is locked for sustain then leave it alone
000E4C B02C               M         btfsc   sustainFlags, 0,          ACCESS
000E4E D???               M         bra             oscActive
                          M                         
000E50                    M checkDelegating
                          M         ; don't update if delegator is busy because delegatedDelta value is volatile
000E50 B019               M         btfsc   soundGenFlags, delegatorBusy, ACCESS
                          M         ; delegator is busy so just keep spinning
000E52 D???               M         bra             oscCheckActive
                          M         
                          M         ; THRESHOLD METHOD WORKS WELL
000E54 0E00               M         movlw   SINE
000E56 621F               M         cpfseq waveShape, ACCESS
000E58 D???               M         bra             oscCheckNotSine
                          M         ; calculate absolute offset between PWM_IDLE_OUTPUT_VALUE and current activeOutputValue
000E5A 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
000E5C 5DE2               M         subwf   activeOutputValues + 0,          w
                          M         ; invert if negative
000E5E A0D8               M         btfss   STATUS, C, ACCESS
000E60 6CE8               M         negf    WREG, ACCESS
                          M         ; check if offset is below threshold value
                          M         ; do (WREG = OSC_OUTPUT_GATE_THRESHOLD - WREG)
000E62 0804               M         sublw   OSC_TRANSITION_OUTPUT_THRESHOLD
                          M         ; if result is positive then activeOutputValue offset from IDLE is <= THRESHOLD so allow changes
000E64 E3??               M         bnc             oscCheckActive
                          M 
000E66                    M oscCheckNotSine
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 157


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
                          M         ; delegator is idle and oscillator is enabled so copy delegated delta as internal
000E66 C0C2 F0CA          M         movff   delegatedDeltas + (0          * DELEGATED_DELTAS_ELEMENT_SIZE) + 0, oscDeltas + (0      
                                * OSC_DELTAS_ELEMENT_SIZE) + 0
000E6A C0C3 F0CB          M         movff   delegatedDeltas + (0          * DELEGATED_DELTAS_ELEMENT_SIZE) + 1, oscDeltas + (0      
                                * OSC_DELTAS_ELEMENT_SIZE) + 1
                          M 
000E6E                    M oscCheckActive
                          M         ; if oscDeltas[OSC_NUMBER] == 0x00 then oscillator is not really active so reset
                          M         ; this check is required in event that (activeOutput == 0 && delegatorBusy == TRUE && oscDelta =
                            = 0)
000E6E 53CA               M         movf    oscDeltas                       + (0          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, f
000E70 E1??               M         bnz             oscActive
000E72 53CB               M         movf    oscDeltas                       + (0          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, f
000E74 E0??               M         bz              resetOscillator
                          M         
000E76                    M oscActive
                          M         ; if oscillator is starting from reset state then begin with 0x0000 accumulator
000E76 B02B               M         btfsc   oscResetFlags, 0,          ACCESS
000E78 D???               M         bra             zeroAcc
                          M 
                          M         ;**** start procedure: step Accumulator (SINE/SQUARE/SAMPLE) ****
                          M         ; accumulator += activeNoteDelta
                          M         ; accumulators are 4 bytes wide, activeNoteDeltas are 2 bytes wide
000E7A 51CA               M         movf    oscDeltas                       + (0          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, w
000E7C 27D2               M         addwf   accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
000E7E 51CB               M         movf    oscDeltas                       + (0          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, w  
000E80 23D3               M         addwfc  accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
000E82 0E00               M         movlw   0
000E84 23D4               M         addwfc  accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
000E86 23D5               M         addwfc  accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                          M         
000E88                    M zeroAcc
                          M         ; we're done with oscResetFlags flag so ensure that it's clear
000E88 902B               M         bcf             oscResetFlags, 0,          ACCESS
                          M         
                          M         ;**** start procedure: handle Pitch Wheel (SINE/SQUARE/SAMPLE) ****
                          M         ; accumulator += pitchWheel
000E8A 501A               M         movf    pitchWheel                                                                              
                                                                            + 0, w, ACCESS
000E8C 27D2               M         addwf   accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
000E8E 501B               M         movf    pitchWheel                                                                              
                                                                            + 1, w, ACCESS
000E90 23D3               M         addwfc  accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 158


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            + 1, f
000E92 501C               M         movf    pitchWheel                                                                              
                                                                            + 2, w, ACCESS
000E94 23D4               M         addwfc  accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
000E96 501D               M         movf    pitchWheel                                                                              
                                                                            + 3, w, ACCESS
000E98 23D5               M         addwfc  accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                          M         
                          M         ;**** start procedure: if SAMPLE waveshape then load next read address  (SAMPLE ONLY) ****
                          M         ; branch to waveform specific table address load
000E9A 0E02               M         movlw   SAMPLE
000E9C 621F               M         cpfseq  waveShape, ACCESS
000E9E D???               M         bra             waveIsNotSample
000EA0                    M waveIsSample
                          M 
                          M         ; if samplesLoaded flag is set then load next EEPROM read address
                          M         ; checking this here as opposed to before accumulator update will, in the event of the mainline 
                            not…
                          M         ; being able to load the samples in time, cause audio chopping rather than detuning
000EA0 A218               M         btfss   eepromFlags, samplesLoaded, ACCESS
000EA2 D???               M         bra             macroDone
                          M         
                          M         ; check for note transition
                          M         ; keyPressed flag is set every time a MIDI Note On message is received
                          M         ; when a sample is playing back in POLY or SUSTAIN modes, we want the sample to restart from the
                             beginning...
                          M         ; whenever a Note On message is received.
000EA4 AA11               M         btfss   midiFlags, keyPressed, ACCESS
000EA6 D???               M         bra             noTransition
                          M         ; is modeLevel == POLY
000EA8 0E00               M         movlw   POLY
000EAA 1821               M         xorwf   modeLevel, w, ACCESS
                          M         ; mode is POLY so reset accumulator to restart sample from beginning
000EAC E0??               M         bz              clrSampleAcc
                          M 
000EAE                    M noTransition    
                          M         ; nextSampleAddress = ((accumulator >> 8) & 0xffff)
                          M         ; reset accumulator if nextSampleAddress value will exceed sampleEndAddress
                          M         ; is waveTableIndex > sampleEndAddress?
000EAE 51D3               M         movf    accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, w
000EB0 5C14               M         subwf   sampleEndAddress, w, ACCESS
000EB2 51D4               M         movf    accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, w
000EB4 5815               M         subwfb  sampleEndAddress + 1, w, ACCESS
                          M         ; result is positive so waveTableIndex is within valid range
000EB6 E2??               M         bc              addressOk
                          M         ; ((accumulator >> 8) & 0xffff) is out of valid sample range so restart sample from beginning
                          M         ; reset accumulator
000EB8                    M clrSampleAcc
000EB8 6BD2               M         clrf    accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 159


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            + 0
000EBA 6BD3               M         clrf    accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1
000EBC 6BD4               M         clrf    accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2
000EBE 6BD5               M         clrf    accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3
000EC0                    M addressOk
                          M         
                          M         ; do nextSampleAddress = ((accumulator >> 8) & 0xffff)
000EC0 C0D3 F0B2          M         movff   accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, nextSampleAddresses + (0          * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 0
000EC4 C0D4 F0B3          M         movff   accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, nextSampleAddresses + (0          * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 1
                          M         
000EC8 D???               M         bra             macroDone
                          M         
000ECA                    M waveIsNotSample
                          M         ;**** start procedure: waveshape is SINE or SQUARE so read Program Memory table  (SINE/SQUARE ON
                            LY) ****
                          M         ; branch to waveform specific table address load
000ECA 0E00               M         movlw   SINE
000ECC 621F               M         cpfseq  waveShape, ACCESS
000ECE D???               M         bra             waveIsSquare
                          M 
000ED0                    M waveIsSine      
                          M         ; 
                          M         ; load address of SINE table read
                          M         ; offset = ((accumulator >> 8) & 0xff)
000ED0 51D3               M         movf    accumulators + (0          * ACCUMULATORS_ELEMENT_SIZE) + 1, w
000ED2 2425               M         addwf   sineTableBaseAddress + 0, w
000ED4 6EF6               M         movwf   TBLPTRL, ACCESS
000ED6 5026               M         movf    sineTableBaseAddress + 1, w
000ED8 B0D8               M         btfsc   STATUS, C, ACCESS
000EDA 0F01               M         addlw   1
000EDC 6EF7               M         movwf   TBLPTRH, ACCESS
000EDE 5027               M         movf    sineTableBaseAddress + 2, w
000EE0 B0D8               M         btfsc   STATUS, C, ACCESS
000EE2 0F01               M         addlw   1
000EE4 6EF8               M         movwf   TBLPTRU, ACCESS
000EE6 D???               M         bra             tableAddressLoaded
                          M 
000EE8                    M waveIsSquare
                          M         ; load address of SQUARE table read
                          M         ; offset = ((accumulator >> 8) & 0xff)
000EE8 51D3               M         movf    accumulators + (0          * ACCUMULATORS_ELEMENT_SIZE) + 1, w
000EEA 2428               M         addwf   squareTableBaseAddress + 0, w
000EEC 6EF6               M         movwf   TBLPTRL, ACCESS
000EEE 5029               M         movf    squareTableBaseAddress + 1, w
000EF0 B0D8               M         btfsc   STATUS, C, ACCESS
000EF2 0F01               M         addlw   1
000EF4 6EF7               M         movwf   TBLPTRH, ACCESS
000EF6 502A               M         movf    squareTableBaseAddress + 2, w
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 160


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000EF8 B0D8               M         btfsc   STATUS, C, ACCESS
000EFA 0F01               M         addlw   1
000EFC 6EF8               M         movwf   TBLPTRU, ACCESS
                          M 
000EFE                    M tableAddressLoaded
                          M         ; read value from program memory
000EFE 0008               M         tblrd*
000F00 CFF5 F0E2          M         movff   TABLAT, activeOutputValues + (0          * ACTIVE_OUTPUT_VALUES_EL_SIZE) + 0
000F04 D???               M         bra             macroDone
                          M         
000F06                    M resetOscillator
                          M         ; set oscillator reset flag
000F06 802B               M         bsf             oscResetFlags, 0,          ACCESS
000F08 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
000F0A 6FE2               M         movwf   activeOutputValues + (0          * ACTIVE_OUTPUT_VALUES_EL_SIZE)
000F0C 6BCA               M         clrf    oscDeltas + (0          * OSC_DELTAS_ELEMENT_SIZE) + 0
000F0E 6BCB               M         clrf    oscDeltas + (0          * OSC_DELTAS_ELEMENT_SIZE) + 1
000F10 6BD2               M         clrf    accumulators + (0          * ACCUMULATORS_ELEMENT_SIZE) + 0
000F12 6BD3               M         clrf    accumulators + (0          * ACCUMULATORS_ELEMENT_SIZE) + 1
000F14 6BD4               M         clrf    accumulators + (0          * ACCUMULATORS_ELEMENT_SIZE) + 2
000F16 6BD5               M         clrf    accumulators + (0          * ACCUMULATORS_ELEMENT_SIZE) + 3
                          M 
000F18                    M macroDone
                          M 
                      01292         OSC_STATE_BLOCK 1
  0000                    M         local   checkDelegating, oscCheckActive, zeroAcc, oscActive, waveIsSample, noTransition, oscChec
                            kNotSine
  0000                    M         local   clrSampleAcc, addressOk, waveIsNotSample, waveIsSine, waveIsSquare, tableAddressLoaded, 
                            resetOscillator, macroDone
                          M                 
                          M         ; if oscillator is locked for sustain then leave it alone
000F18 B22C               M         btfsc   sustainFlags, 1,          ACCESS
000F1A D???               M         bra             oscActive
                          M                         
000F1C                    M checkDelegating
                          M         ; don't update if delegator is busy because delegatedDelta value is volatile
000F1C B019               M         btfsc   soundGenFlags, delegatorBusy, ACCESS
                          M         ; delegator is busy so just keep spinning
000F1E D???               M         bra             oscCheckActive
                          M         
                          M         ; THRESHOLD METHOD WORKS WELL
000F20 0E00               M         movlw   SINE
000F22 621F               M         cpfseq waveShape, ACCESS
000F24 D???               M         bra             oscCheckNotSine
                          M         ; calculate absolute offset between PWM_IDLE_OUTPUT_VALUE and current activeOutputValue
000F26 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
000F28 5DE3               M         subwf   activeOutputValues + 1,          w
                          M         ; invert if negative
000F2A A0D8               M         btfss   STATUS, C, ACCESS
000F2C 6CE8               M         negf    WREG, ACCESS
                          M         ; check if offset is below threshold value
                          M         ; do (WREG = OSC_OUTPUT_GATE_THRESHOLD - WREG)
000F2E 0804               M         sublw   OSC_TRANSITION_OUTPUT_THRESHOLD
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 161


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         ; if result is positive then activeOutputValue offset from IDLE is <= THRESHOLD so allow changes
000F30 E3??               M         bnc             oscCheckActive
                          M 
000F32                    M oscCheckNotSine
                          M 
                          M         ; delegator is idle and oscillator is enabled so copy delegated delta as internal
000F32 C0C4 F0CC          M         movff   delegatedDeltas + (1          * DELEGATED_DELTAS_ELEMENT_SIZE) + 0, oscDeltas + (1      
                                * OSC_DELTAS_ELEMENT_SIZE) + 0
000F36 C0C5 F0CD          M         movff   delegatedDeltas + (1          * DELEGATED_DELTAS_ELEMENT_SIZE) + 1, oscDeltas + (1      
                                * OSC_DELTAS_ELEMENT_SIZE) + 1
                          M 
000F3A                    M oscCheckActive
                          M         ; if oscDeltas[OSC_NUMBER] == 0x00 then oscillator is not really active so reset
                          M         ; this check is required in event that (activeOutput == 0 && delegatorBusy == TRUE && oscDelta =
                            = 0)
000F3A 53CC               M         movf    oscDeltas                       + (1          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, f
000F3C E1??               M         bnz             oscActive
000F3E 53CD               M         movf    oscDeltas                       + (1          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, f
000F40 E0??               M         bz              resetOscillator
                          M         
000F42                    M oscActive
                          M         ; if oscillator is starting from reset state then begin with 0x0000 accumulator
000F42 B22B               M         btfsc   oscResetFlags, 1,          ACCESS
000F44 D???               M         bra             zeroAcc
                          M 
                          M         ;**** start procedure: step Accumulator (SINE/SQUARE/SAMPLE) ****
                          M         ; accumulator += activeNoteDelta
                          M         ; accumulators are 4 bytes wide, activeNoteDeltas are 2 bytes wide
000F46 51CC               M         movf    oscDeltas                       + (1          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, w
000F48 27D6               M         addwf   accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
000F4A 51CD               M         movf    oscDeltas                       + (1          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, w  
000F4C 23D7               M         addwfc  accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
000F4E 0E00               M         movlw   0
000F50 23D8               M         addwfc  accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
000F52 23D9               M         addwfc  accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                          M         
000F54                    M zeroAcc
                          M         ; we're done with oscResetFlags flag so ensure that it's clear
000F54 922B               M         bcf             oscResetFlags, 1,          ACCESS
                          M         
                          M         ;**** start procedure: handle Pitch Wheel (SINE/SQUARE/SAMPLE) ****
                          M         ; accumulator += pitchWheel
000F56 501A               M         movf    pitchWheel                                                                              
                                                                            + 0, w, ACCESS
000F58 27D6               M         addwf   accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 162


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            + 0, f
000F5A 501B               M         movf    pitchWheel                                                                              
                                                                            + 1, w, ACCESS
000F5C 23D7               M         addwfc  accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
000F5E 501C               M         movf    pitchWheel                                                                              
                                                                            + 2, w, ACCESS
000F60 23D8               M         addwfc  accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
000F62 501D               M         movf    pitchWheel                                                                              
                                                                            + 3, w, ACCESS
000F64 23D9               M         addwfc  accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                          M         
                          M         ;**** start procedure: if SAMPLE waveshape then load next read address  (SAMPLE ONLY) ****
                          M         ; branch to waveform specific table address load
000F66 0E02               M         movlw   SAMPLE
000F68 621F               M         cpfseq  waveShape, ACCESS
000F6A D???               M         bra             waveIsNotSample
000F6C                    M waveIsSample
                          M 
                          M         ; if samplesLoaded flag is set then load next EEPROM read address
                          M         ; checking this here as opposed to before accumulator update will, in the event of the mainline 
                            not…
                          M         ; being able to load the samples in time, cause audio chopping rather than detuning
000F6C A218               M         btfss   eepromFlags, samplesLoaded, ACCESS
000F6E D???               M         bra             macroDone
                          M         
                          M         ; check for note transition
                          M         ; keyPressed flag is set every time a MIDI Note On message is received
                          M         ; when a sample is playing back in POLY or SUSTAIN modes, we want the sample to restart from the
                             beginning...
                          M         ; whenever a Note On message is received.
000F70 AA11               M         btfss   midiFlags, keyPressed, ACCESS
000F72 D???               M         bra             noTransition
                          M         ; is modeLevel == POLY
000F74 0E00               M         movlw   POLY
000F76 1821               M         xorwf   modeLevel, w, ACCESS
                          M         ; mode is POLY so reset accumulator to restart sample from beginning
000F78 E0??               M         bz              clrSampleAcc
                          M 
000F7A                    M noTransition    
                          M         ; nextSampleAddress = ((accumulator >> 8) & 0xffff)
                          M         ; reset accumulator if nextSampleAddress value will exceed sampleEndAddress
                          M         ; is waveTableIndex > sampleEndAddress?
000F7A 51D7               M         movf    accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, w
000F7C 5C14               M         subwf   sampleEndAddress, w, ACCESS
000F7E 51D8               M         movf    accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, w
000F80 5815               M         subwfb  sampleEndAddress + 1, w, ACCESS
                          M         ; result is positive so waveTableIndex is within valid range
000F82 E2??               M         bc              addressOk
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 163


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         ; ((accumulator >> 8) & 0xffff) is out of valid sample range so restart sample from beginning
                          M         ; reset accumulator
000F84                    M clrSampleAcc
000F84 6BD6               M         clrf    accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0
000F86 6BD7               M         clrf    accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1
000F88 6BD8               M         clrf    accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2
000F8A 6BD9               M         clrf    accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3
000F8C                    M addressOk
                          M         
                          M         ; do nextSampleAddress = ((accumulator >> 8) & 0xffff)
000F8C C0D7 F0B4          M         movff   accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, nextSampleAddresses + (1          * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 0
000F90 C0D8 F0B5          M         movff   accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, nextSampleAddresses + (1          * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 1
                          M         
000F94 D???               M         bra             macroDone
                          M         
000F96                    M waveIsNotSample
                          M         ;**** start procedure: waveshape is SINE or SQUARE so read Program Memory table  (SINE/SQUARE ON
                            LY) ****
                          M         ; branch to waveform specific table address load
000F96 0E00               M         movlw   SINE
000F98 621F               M         cpfseq  waveShape, ACCESS
000F9A D???               M         bra             waveIsSquare
                          M 
000F9C                    M waveIsSine      
                          M         ; 
                          M         ; load address of SINE table read
                          M         ; offset = ((accumulator >> 8) & 0xff)
000F9C 51D7               M         movf    accumulators + (1          * ACCUMULATORS_ELEMENT_SIZE) + 1, w
000F9E 2425               M         addwf   sineTableBaseAddress + 0, w
000FA0 6EF6               M         movwf   TBLPTRL, ACCESS
000FA2 5026               M         movf    sineTableBaseAddress + 1, w
000FA4 B0D8               M         btfsc   STATUS, C, ACCESS
000FA6 0F01               M         addlw   1
000FA8 6EF7               M         movwf   TBLPTRH, ACCESS
000FAA 5027               M         movf    sineTableBaseAddress + 2, w
000FAC B0D8               M         btfsc   STATUS, C, ACCESS
000FAE 0F01               M         addlw   1
000FB0 6EF8               M         movwf   TBLPTRU, ACCESS
000FB2 D???               M         bra             tableAddressLoaded
                          M 
000FB4                    M waveIsSquare
                          M         ; load address of SQUARE table read
                          M         ; offset = ((accumulator >> 8) & 0xff)
000FB4 51D7               M         movf    accumulators + (1          * ACCUMULATORS_ELEMENT_SIZE) + 1, w
000FB6 2428               M         addwf   squareTableBaseAddress + 0, w
000FB8 6EF6               M         movwf   TBLPTRL, ACCESS
000FBA 5029               M         movf    squareTableBaseAddress + 1, w
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 164


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000FBC B0D8               M         btfsc   STATUS, C, ACCESS
000FBE 0F01               M         addlw   1
000FC0 6EF7               M         movwf   TBLPTRH, ACCESS
000FC2 502A               M         movf    squareTableBaseAddress + 2, w
000FC4 B0D8               M         btfsc   STATUS, C, ACCESS
000FC6 0F01               M         addlw   1
000FC8 6EF8               M         movwf   TBLPTRU, ACCESS
                          M 
000FCA                    M tableAddressLoaded
                          M         ; read value from program memory
000FCA 0008               M         tblrd*
000FCC CFF5 F0E3          M         movff   TABLAT, activeOutputValues + (1          * ACTIVE_OUTPUT_VALUES_EL_SIZE) + 0
000FD0 D???               M         bra             macroDone
                          M         
000FD2                    M resetOscillator
                          M         ; set oscillator reset flag
000FD2 822B               M         bsf             oscResetFlags, 1,          ACCESS
000FD4 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
000FD6 6FE3               M         movwf   activeOutputValues + (1          * ACTIVE_OUTPUT_VALUES_EL_SIZE)
000FD8 6BCC               M         clrf    oscDeltas + (1          * OSC_DELTAS_ELEMENT_SIZE) + 0
000FDA 6BCD               M         clrf    oscDeltas + (1          * OSC_DELTAS_ELEMENT_SIZE) + 1
000FDC 6BD6               M         clrf    accumulators + (1          * ACCUMULATORS_ELEMENT_SIZE) + 0
000FDE 6BD7               M         clrf    accumulators + (1          * ACCUMULATORS_ELEMENT_SIZE) + 1
000FE0 6BD8               M         clrf    accumulators + (1          * ACCUMULATORS_ELEMENT_SIZE) + 2
000FE2 6BD9               M         clrf    accumulators + (1          * ACCUMULATORS_ELEMENT_SIZE) + 3
                          M 
000FE4                    M macroDone
                          M 
                      01293         OSC_STATE_BLOCK 2
  0000                    M         local   checkDelegating, oscCheckActive, zeroAcc, oscActive, waveIsSample, noTransition, oscChec
                            kNotSine
  0000                    M         local   clrSampleAcc, addressOk, waveIsNotSample, waveIsSine, waveIsSquare, tableAddressLoaded, 
                            resetOscillator, macroDone
                          M                 
                          M         ; if oscillator is locked for sustain then leave it alone
000FE4 B42C               M         btfsc   sustainFlags, 2,          ACCESS
000FE6 D???               M         bra             oscActive
                          M                         
000FE8                    M checkDelegating
                          M         ; don't update if delegator is busy because delegatedDelta value is volatile
000FE8 B019               M         btfsc   soundGenFlags, delegatorBusy, ACCESS
                          M         ; delegator is busy so just keep spinning
000FEA D???               M         bra             oscCheckActive
                          M         
                          M         ; THRESHOLD METHOD WORKS WELL
000FEC 0E00               M         movlw   SINE
000FEE 621F               M         cpfseq waveShape, ACCESS
000FF0 D???               M         bra             oscCheckNotSine
                          M         ; calculate absolute offset between PWM_IDLE_OUTPUT_VALUE and current activeOutputValue
000FF2 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
000FF4 5DE4               M         subwf   activeOutputValues + 2,          w
                          M         ; invert if negative
000FF6 A0D8               M         btfss   STATUS, C, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 165


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000FF8 6CE8               M         negf    WREG, ACCESS
                          M         ; check if offset is below threshold value
                          M         ; do (WREG = OSC_OUTPUT_GATE_THRESHOLD - WREG)
000FFA 0804               M         sublw   OSC_TRANSITION_OUTPUT_THRESHOLD
                          M         ; if result is positive then activeOutputValue offset from IDLE is <= THRESHOLD so allow changes
000FFC E3??               M         bnc             oscCheckActive
                          M 
000FFE                    M oscCheckNotSine
                          M 
                          M         ; delegator is idle and oscillator is enabled so copy delegated delta as internal
000FFE C0C6 F0CE          M         movff   delegatedDeltas + (2          * DELEGATED_DELTAS_ELEMENT_SIZE) + 0, oscDeltas + (2      
                                * OSC_DELTAS_ELEMENT_SIZE) + 0
001002 C0C7 F0CF          M         movff   delegatedDeltas + (2          * DELEGATED_DELTAS_ELEMENT_SIZE) + 1, oscDeltas + (2      
                                * OSC_DELTAS_ELEMENT_SIZE) + 1
                          M 
001006                    M oscCheckActive
                          M         ; if oscDeltas[OSC_NUMBER] == 0x00 then oscillator is not really active so reset
                          M         ; this check is required in event that (activeOutput == 0 && delegatorBusy == TRUE && oscDelta =
                            = 0)
001006 53CE               M         movf    oscDeltas                       + (2          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, f
001008 E1??               M         bnz             oscActive
00100A 53CF               M         movf    oscDeltas                       + (2          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, f
00100C E0??               M         bz              resetOscillator
                          M         
00100E                    M oscActive
                          M         ; if oscillator is starting from reset state then begin with 0x0000 accumulator
00100E B42B               M         btfsc   oscResetFlags, 2,          ACCESS
001010 D???               M         bra             zeroAcc
                          M 
                          M         ;**** start procedure: step Accumulator (SINE/SQUARE/SAMPLE) ****
                          M         ; accumulator += activeNoteDelta
                          M         ; accumulators are 4 bytes wide, activeNoteDeltas are 2 bytes wide
001012 51CE               M         movf    oscDeltas                       + (2          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, w
001014 27DA               M         addwf   accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
001016 51CF               M         movf    oscDeltas                       + (2          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, w  
001018 23DB               M         addwfc  accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
00101A 0E00               M         movlw   0
00101C 23DC               M         addwfc  accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
00101E 23DD               M         addwfc  accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                          M         
001020                    M zeroAcc
                          M         ; we're done with oscResetFlags flag so ensure that it's clear
001020 942B               M         bcf             oscResetFlags, 2,          ACCESS
                          M         
                          M         ;**** start procedure: handle Pitch Wheel (SINE/SQUARE/SAMPLE) ****
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 166


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         ; accumulator += pitchWheel
001022 501A               M         movf    pitchWheel                                                                              
                                                                            + 0, w, ACCESS
001024 27DA               M         addwf   accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
001026 501B               M         movf    pitchWheel                                                                              
                                                                            + 1, w, ACCESS
001028 23DB               M         addwfc  accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
00102A 501C               M         movf    pitchWheel                                                                              
                                                                            + 2, w, ACCESS
00102C 23DC               M         addwfc  accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
00102E 501D               M         movf    pitchWheel                                                                              
                                                                            + 3, w, ACCESS
001030 23DD               M         addwfc  accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                          M         
                          M         ;**** start procedure: if SAMPLE waveshape then load next read address  (SAMPLE ONLY) ****
                          M         ; branch to waveform specific table address load
001032 0E02               M         movlw   SAMPLE
001034 621F               M         cpfseq  waveShape, ACCESS
001036 D???               M         bra             waveIsNotSample
001038                    M waveIsSample
                          M 
                          M         ; if samplesLoaded flag is set then load next EEPROM read address
                          M         ; checking this here as opposed to before accumulator update will, in the event of the mainline 
                            not…
                          M         ; being able to load the samples in time, cause audio chopping rather than detuning
001038 A218               M         btfss   eepromFlags, samplesLoaded, ACCESS
00103A D???               M         bra             macroDone
                          M         
                          M         ; check for note transition
                          M         ; keyPressed flag is set every time a MIDI Note On message is received
                          M         ; when a sample is playing back in POLY or SUSTAIN modes, we want the sample to restart from the
                             beginning...
                          M         ; whenever a Note On message is received.
00103C AA11               M         btfss   midiFlags, keyPressed, ACCESS
00103E D???               M         bra             noTransition
                          M         ; is modeLevel == POLY
001040 0E00               M         movlw   POLY
001042 1821               M         xorwf   modeLevel, w, ACCESS
                          M         ; mode is POLY so reset accumulator to restart sample from beginning
001044 E0??               M         bz              clrSampleAcc
                          M 
001046                    M noTransition    
                          M         ; nextSampleAddress = ((accumulator >> 8) & 0xffff)
                          M         ; reset accumulator if nextSampleAddress value will exceed sampleEndAddress
                          M         ; is waveTableIndex > sampleEndAddress?
001046 51DB               M         movf    accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, w
001048 5C14               M         subwf   sampleEndAddress, w, ACCESS
00104A 51DC               M         movf    accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 167


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            + 2, w
00104C 5815               M         subwfb  sampleEndAddress + 1, w, ACCESS
                          M         ; result is positive so waveTableIndex is within valid range
00104E E2??               M         bc              addressOk
                          M         ; ((accumulator >> 8) & 0xffff) is out of valid sample range so restart sample from beginning
                          M         ; reset accumulator
001050                    M clrSampleAcc
001050 6BDA               M         clrf    accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0
001052 6BDB               M         clrf    accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1
001054 6BDC               M         clrf    accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2
001056 6BDD               M         clrf    accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3
001058                    M addressOk
                          M         
                          M         ; do nextSampleAddress = ((accumulator >> 8) & 0xffff)
001058 C0DB F0B6          M         movff   accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, nextSampleAddresses + (2          * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 0
00105C C0DC F0B7          M         movff   accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, nextSampleAddresses + (2          * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 1
                          M         
001060 D???               M         bra             macroDone
                          M         
001062                    M waveIsNotSample
                          M         ;**** start procedure: waveshape is SINE or SQUARE so read Program Memory table  (SINE/SQUARE ON
                            LY) ****
                          M         ; branch to waveform specific table address load
001062 0E00               M         movlw   SINE
001064 621F               M         cpfseq  waveShape, ACCESS
001066 D???               M         bra             waveIsSquare
                          M 
001068                    M waveIsSine      
                          M         ; 
                          M         ; load address of SINE table read
                          M         ; offset = ((accumulator >> 8) & 0xff)
001068 51DB               M         movf    accumulators + (2          * ACCUMULATORS_ELEMENT_SIZE) + 1, w
00106A 2425               M         addwf   sineTableBaseAddress + 0, w
00106C 6EF6               M         movwf   TBLPTRL, ACCESS
00106E 5026               M         movf    sineTableBaseAddress + 1, w
001070 B0D8               M         btfsc   STATUS, C, ACCESS
001072 0F01               M         addlw   1
001074 6EF7               M         movwf   TBLPTRH, ACCESS
001076 5027               M         movf    sineTableBaseAddress + 2, w
001078 B0D8               M         btfsc   STATUS, C, ACCESS
00107A 0F01               M         addlw   1
00107C 6EF8               M         movwf   TBLPTRU, ACCESS
00107E D???               M         bra             tableAddressLoaded
                          M 
001080                    M waveIsSquare
                          M         ; load address of SQUARE table read
                          M         ; offset = ((accumulator >> 8) & 0xff)
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 168


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001080 51DB               M         movf    accumulators + (2          * ACCUMULATORS_ELEMENT_SIZE) + 1, w
001082 2428               M         addwf   squareTableBaseAddress + 0, w
001084 6EF6               M         movwf   TBLPTRL, ACCESS
001086 5029               M         movf    squareTableBaseAddress + 1, w
001088 B0D8               M         btfsc   STATUS, C, ACCESS
00108A 0F01               M         addlw   1
00108C 6EF7               M         movwf   TBLPTRH, ACCESS
00108E 502A               M         movf    squareTableBaseAddress + 2, w
001090 B0D8               M         btfsc   STATUS, C, ACCESS
001092 0F01               M         addlw   1
001094 6EF8               M         movwf   TBLPTRU, ACCESS
                          M 
001096                    M tableAddressLoaded
                          M         ; read value from program memory
001096 0008               M         tblrd*
001098 CFF5 F0E4          M         movff   TABLAT, activeOutputValues + (2          * ACTIVE_OUTPUT_VALUES_EL_SIZE) + 0
00109C D???               M         bra             macroDone
                          M         
00109E                    M resetOscillator
                          M         ; set oscillator reset flag
00109E 842B               M         bsf             oscResetFlags, 2,          ACCESS
0010A0 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
0010A2 6FE4               M         movwf   activeOutputValues + (2          * ACTIVE_OUTPUT_VALUES_EL_SIZE)
0010A4 6BCE               M         clrf    oscDeltas + (2          * OSC_DELTAS_ELEMENT_SIZE) + 0
0010A6 6BCF               M         clrf    oscDeltas + (2          * OSC_DELTAS_ELEMENT_SIZE) + 1
0010A8 6BDA               M         clrf    accumulators + (2          * ACCUMULATORS_ELEMENT_SIZE) + 0
0010AA 6BDB               M         clrf    accumulators + (2          * ACCUMULATORS_ELEMENT_SIZE) + 1
0010AC 6BDC               M         clrf    accumulators + (2          * ACCUMULATORS_ELEMENT_SIZE) + 2
0010AE 6BDD               M         clrf    accumulators + (2          * ACCUMULATORS_ELEMENT_SIZE) + 3
                          M 
0010B0                    M macroDone
                          M 
                      01294         OSC_STATE_BLOCK 3
  0000                    M         local   checkDelegating, oscCheckActive, zeroAcc, oscActive, waveIsSample, noTransition, oscChec
                            kNotSine
  0000                    M         local   clrSampleAcc, addressOk, waveIsNotSample, waveIsSine, waveIsSquare, tableAddressLoaded, 
                            resetOscillator, macroDone
                          M                 
                          M         ; if oscillator is locked for sustain then leave it alone
0010B0 B62C               M         btfsc   sustainFlags, 3,          ACCESS
0010B2 D???               M         bra             oscActive
                          M                         
0010B4                    M checkDelegating
                          M         ; don't update if delegator is busy because delegatedDelta value is volatile
0010B4 B019               M         btfsc   soundGenFlags, delegatorBusy, ACCESS
                          M         ; delegator is busy so just keep spinning
0010B6 D???               M         bra             oscCheckActive
                          M         
                          M         ; THRESHOLD METHOD WORKS WELL
0010B8 0E00               M         movlw   SINE
0010BA 621F               M         cpfseq waveShape, ACCESS
0010BC D???               M         bra             oscCheckNotSine
                          M         ; calculate absolute offset between PWM_IDLE_OUTPUT_VALUE and current activeOutputValue
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 169


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0010BE 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
0010C0 5DE5               M         subwf   activeOutputValues + 3,          w
                          M         ; invert if negative
0010C2 A0D8               M         btfss   STATUS, C, ACCESS
0010C4 6CE8               M         negf    WREG, ACCESS
                          M         ; check if offset is below threshold value
                          M         ; do (WREG = OSC_OUTPUT_GATE_THRESHOLD - WREG)
0010C6 0804               M         sublw   OSC_TRANSITION_OUTPUT_THRESHOLD
                          M         ; if result is positive then activeOutputValue offset from IDLE is <= THRESHOLD so allow changes
0010C8 E3??               M         bnc             oscCheckActive
                          M 
0010CA                    M oscCheckNotSine
                          M 
                          M         ; delegator is idle and oscillator is enabled so copy delegated delta as internal
0010CA C0C8 F0D0          M         movff   delegatedDeltas + (3          * DELEGATED_DELTAS_ELEMENT_SIZE) + 0, oscDeltas + (3      
                                * OSC_DELTAS_ELEMENT_SIZE) + 0
0010CE C0C9 F0D1          M         movff   delegatedDeltas + (3          * DELEGATED_DELTAS_ELEMENT_SIZE) + 1, oscDeltas + (3      
                                * OSC_DELTAS_ELEMENT_SIZE) + 1
                          M 
0010D2                    M oscCheckActive
                          M         ; if oscDeltas[OSC_NUMBER] == 0x00 then oscillator is not really active so reset
                          M         ; this check is required in event that (activeOutput == 0 && delegatorBusy == TRUE && oscDelta =
                            = 0)
0010D2 53D0               M         movf    oscDeltas                       + (3          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, f
0010D4 E1??               M         bnz             oscActive
0010D6 53D1               M         movf    oscDeltas                       + (3          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, f
0010D8 E0??               M         bz              resetOscillator
                          M         
0010DA                    M oscActive
                          M         ; if oscillator is starting from reset state then begin with 0x0000 accumulator
0010DA B62B               M         btfsc   oscResetFlags, 3,          ACCESS
0010DC D???               M         bra             zeroAcc
                          M 
                          M         ;**** start procedure: step Accumulator (SINE/SQUARE/SAMPLE) ****
                          M         ; accumulator += activeNoteDelta
                          M         ; accumulators are 4 bytes wide, activeNoteDeltas are 2 bytes wide
0010DE 51D0               M         movf    oscDeltas                       + (3          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, w
0010E0 27DE               M         addwf   accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
0010E2 51D1               M         movf    oscDeltas                       + (3          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, w  
0010E4 23DF               M         addwfc  accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
0010E6 0E00               M         movlw   0
0010E8 23E0               M         addwfc  accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
0010EA 23E1               M         addwfc  accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                          M         
0010EC                    M zeroAcc
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 170


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         ; we're done with oscResetFlags flag so ensure that it's clear
0010EC 962B               M         bcf             oscResetFlags, 3,          ACCESS
                          M         
                          M         ;**** start procedure: handle Pitch Wheel (SINE/SQUARE/SAMPLE) ****
                          M         ; accumulator += pitchWheel
0010EE 501A               M         movf    pitchWheel                                                                              
                                                                            + 0, w, ACCESS
0010F0 27DE               M         addwf   accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
0010F2 501B               M         movf    pitchWheel                                                                              
                                                                            + 1, w, ACCESS
0010F4 23DF               M         addwfc  accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
0010F6 501C               M         movf    pitchWheel                                                                              
                                                                            + 2, w, ACCESS
0010F8 23E0               M         addwfc  accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
0010FA 501D               M         movf    pitchWheel                                                                              
                                                                            + 3, w, ACCESS
0010FC 23E1               M         addwfc  accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                          M         
                          M         ;**** start procedure: if SAMPLE waveshape then load next read address  (SAMPLE ONLY) ****
                          M         ; branch to waveform specific table address load
0010FE 0E02               M         movlw   SAMPLE
001100 621F               M         cpfseq  waveShape, ACCESS
001102 D???               M         bra             waveIsNotSample
001104                    M waveIsSample
                          M 
                          M         ; if samplesLoaded flag is set then load next EEPROM read address
                          M         ; checking this here as opposed to before accumulator update will, in the event of the mainline 
                            not…
                          M         ; being able to load the samples in time, cause audio chopping rather than detuning
001104 A218               M         btfss   eepromFlags, samplesLoaded, ACCESS
001106 D???               M         bra             macroDone
                          M         
                          M         ; check for note transition
                          M         ; keyPressed flag is set every time a MIDI Note On message is received
                          M         ; when a sample is playing back in POLY or SUSTAIN modes, we want the sample to restart from the
                             beginning...
                          M         ; whenever a Note On message is received.
001108 AA11               M         btfss   midiFlags, keyPressed, ACCESS
00110A D???               M         bra             noTransition
                          M         ; is modeLevel == POLY
00110C 0E00               M         movlw   POLY
00110E 1821               M         xorwf   modeLevel, w, ACCESS
                          M         ; mode is POLY so reset accumulator to restart sample from beginning
001110 E0??               M         bz              clrSampleAcc
                          M 
001112                    M noTransition    
                          M         ; nextSampleAddress = ((accumulator >> 8) & 0xffff)
                          M         ; reset accumulator if nextSampleAddress value will exceed sampleEndAddress
                          M         ; is waveTableIndex > sampleEndAddress?
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 171


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001112 51DF               M         movf    accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, w
001114 5C14               M         subwf   sampleEndAddress, w, ACCESS
001116 51E0               M         movf    accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, w
001118 5815               M         subwfb  sampleEndAddress + 1, w, ACCESS
                          M         ; result is positive so waveTableIndex is within valid range
00111A E2??               M         bc              addressOk
                          M         ; ((accumulator >> 8) & 0xffff) is out of valid sample range so restart sample from beginning
                          M         ; reset accumulator
00111C                    M clrSampleAcc
00111C 6BDE               M         clrf    accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0
00111E 6BDF               M         clrf    accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1
001120 6BE0               M         clrf    accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2
001122 6BE1               M         clrf    accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3
001124                    M addressOk
                          M         
                          M         ; do nextSampleAddress = ((accumulator >> 8) & 0xffff)
001124 C0DF F0B8          M         movff   accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, nextSampleAddresses + (3          * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 0
001128 C0E0 F0B9          M         movff   accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, nextSampleAddresses + (3          * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 1
                          M         
00112C D???               M         bra             macroDone
                          M         
00112E                    M waveIsNotSample
                          M         ;**** start procedure: waveshape is SINE or SQUARE so read Program Memory table  (SINE/SQUARE ON
                            LY) ****
                          M         ; branch to waveform specific table address load
00112E 0E00               M         movlw   SINE
001130 621F               M         cpfseq  waveShape, ACCESS
001132 D???               M         bra             waveIsSquare
                          M 
001134                    M waveIsSine      
                          M         ; 
                          M         ; load address of SINE table read
                          M         ; offset = ((accumulator >> 8) & 0xff)
001134 51DF               M         movf    accumulators + (3          * ACCUMULATORS_ELEMENT_SIZE) + 1, w
001136 2425               M         addwf   sineTableBaseAddress + 0, w
001138 6EF6               M         movwf   TBLPTRL, ACCESS
00113A 5026               M         movf    sineTableBaseAddress + 1, w
00113C B0D8               M         btfsc   STATUS, C, ACCESS
00113E 0F01               M         addlw   1
001140 6EF7               M         movwf   TBLPTRH, ACCESS
001142 5027               M         movf    sineTableBaseAddress + 2, w
001144 B0D8               M         btfsc   STATUS, C, ACCESS
001146 0F01               M         addlw   1
001148 6EF8               M         movwf   TBLPTRU, ACCESS
00114A D???               M         bra             tableAddressLoaded
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 172


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
00114C                    M waveIsSquare
                          M         ; load address of SQUARE table read
                          M         ; offset = ((accumulator >> 8) & 0xff)
00114C 51DF               M         movf    accumulators + (3          * ACCUMULATORS_ELEMENT_SIZE) + 1, w
00114E 2428               M         addwf   squareTableBaseAddress + 0, w
001150 6EF6               M         movwf   TBLPTRL, ACCESS
001152 5029               M         movf    squareTableBaseAddress + 1, w
001154 B0D8               M         btfsc   STATUS, C, ACCESS
001156 0F01               M         addlw   1
001158 6EF7               M         movwf   TBLPTRH, ACCESS
00115A 502A               M         movf    squareTableBaseAddress + 2, w
00115C B0D8               M         btfsc   STATUS, C, ACCESS
00115E 0F01               M         addlw   1
001160 6EF8               M         movwf   TBLPTRU, ACCESS
                          M 
001162                    M tableAddressLoaded
                          M         ; read value from program memory
001162 0008               M         tblrd*
001164 CFF5 F0E5          M         movff   TABLAT, activeOutputValues + (3          * ACTIVE_OUTPUT_VALUES_EL_SIZE) + 0
001168 D???               M         bra             macroDone
                          M         
00116A                    M resetOscillator
                          M         ; set oscillator reset flag
00116A 862B               M         bsf             oscResetFlags, 3,          ACCESS
00116C 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
00116E 6FE5               M         movwf   activeOutputValues + (3          * ACTIVE_OUTPUT_VALUES_EL_SIZE)
001170 6BD0               M         clrf    oscDeltas + (3          * OSC_DELTAS_ELEMENT_SIZE) + 0
001172 6BD1               M         clrf    oscDeltas + (3          * OSC_DELTAS_ELEMENT_SIZE) + 1
001174 6BDE               M         clrf    accumulators + (3          * ACCUMULATORS_ELEMENT_SIZE) + 0
001176 6BDF               M         clrf    accumulators + (3          * ACCUMULATORS_ELEMENT_SIZE) + 1
001178 6BE0               M         clrf    accumulators + (3          * ACCUMULATORS_ELEMENT_SIZE) + 2
00117A 6BE1               M         clrf    accumulators + (3          * ACCUMULATORS_ELEMENT_SIZE) + 3
                          M 
00117C                    M macroDone
                          M 
                      01295         
                      01296         ; keyPressed is handled in OSC_STATE_BLOCK macro so clear flag
                      01297         ; if(samplesLoaded && waveShape == SAMPLE){keyPressed = FALSE;}
                      01298         ; else{keyPressed = FALSE;}
00117C 0E02           01299         movlw   SAMPLE
00117E 181F           01300         xorwf   waveShape, w, ACCESS
                      01301         ; if waveShape != SAMPLE then clear keyPressed flag
001180 E1??           01302         bnz             processSoundState_clearTransFlag
                      01303         ; waveShape is == SAMPLE so only clear keyPressed if samplesLoaded == TRUE
001182 B218           01304         btfsc   eepromFlags, samplesLoaded, ACCESS
001184                01305 processSoundState_clearTransFlag
001184 9A11           01306         bcf             midiFlags, keyPressed, ACCESS
                      01307 
                      01308         ; samplesLoaded is handled in OSC_STATE_BLOCK macro so clear if set
001186 9218           01309         bcf             eepromFlags, samplesLoaded, ACCESS
                      01310 
                      01311         ;**** start procedure: send data to PWM ****
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 173


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001188                01312 processSoundState_mixer
                      01313         ; **** averaging signal mixer ****      
                      01314         ; average all active output values into mixedOutput             
                      01315         ; init mixedOutput
001188 6A2E           01316         clrf    mixedOutputL, ACCESS
00118A 6A2F           01317         clrf    mixedOutputH, ACCESS
                      01318 
                      01319         ; mix OSC0
                      01320         OSC_MIX 0       
  0000                    M         local   mixDone, mixDoPos, mixDoNeg, mixDoDone
                          M                 
                          M         ; check polarity of current activeOutputValue compared to PWM_IDLE_OUTPUT_VALUE
00118C 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
00118E 5DE2               M         subwf   activeOutputValues + 0,          w
001190 E3??               M         bnc             mixDoNeg
001192                    M mixDoPos
                          M         ; WREG = adsrLimiterRegs/2
001192 90D8               M         bcf             STATUS, C, ACCESS
001194 3034               M         rrcf    adsrLimiterRegs + 0,          w, ACCESS
001196 5DE2               M         subwf   activeOutputValues + 0,          w
001198 D???               M         bra             mixDoDone
00119A                    M mixDoNeg
                          M         ; WREG = adsrLimiterRegs/2
00119A 90D8               M         bcf             STATUS, C, ACCESS
00119C 3034               M         rrcf    adsrLimiterRegs + 0,          w, ACCESS
00119E 25E2               M         addwf   activeOutputValues + 0,          w      
0011A0                    M mixDoDone
                          M         ; overflow indicates that last operation toggled bit 7
0011A0 B6D8               M         btfsc   STATUS, OV, ACCESS
0011A2 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
                          M 
0011A4                    M mixDone
                          M         ; add WREG to mixedOutputL/H
0011A4 262E               M         addwf   mixedOutputL, f, ACCESS
0011A6 B0D8               M         btfsc   STATUS, C, ACCESS
0011A8 2A2F               M         incf    mixedOutputH, f, ACCESS
                          M         
                      01321         
                      01322         ; mix OSC1
                      01323         OSC_MIX 1
  0000                    M         local   mixDone, mixDoPos, mixDoNeg, mixDoDone
                          M                 
                          M         ; check polarity of current activeOutputValue compared to PWM_IDLE_OUTPUT_VALUE
0011AA 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
0011AC 5DE3               M         subwf   activeOutputValues + 1,          w
0011AE E3??               M         bnc             mixDoNeg
0011B0                    M mixDoPos
                          M         ; WREG = adsrLimiterRegs/2
0011B0 90D8               M         bcf             STATUS, C, ACCESS
0011B2 3035               M         rrcf    adsrLimiterRegs + 1,          w, ACCESS
0011B4 5DE3               M         subwf   activeOutputValues + 1,          w
0011B6 D???               M         bra             mixDoDone
0011B8                    M mixDoNeg
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 174


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         ; WREG = adsrLimiterRegs/2
0011B8 90D8               M         bcf             STATUS, C, ACCESS
0011BA 3035               M         rrcf    adsrLimiterRegs + 1,          w, ACCESS
0011BC 25E3               M         addwf   activeOutputValues + 1,          w      
0011BE                    M mixDoDone
                          M         ; overflow indicates that last operation toggled bit 7
0011BE B6D8               M         btfsc   STATUS, OV, ACCESS
0011C0 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
                          M 
0011C2                    M mixDone
                          M         ; add WREG to mixedOutputL/H
0011C2 262E               M         addwf   mixedOutputL, f, ACCESS
0011C4 B0D8               M         btfsc   STATUS, C, ACCESS
0011C6 2A2F               M         incf    mixedOutputH, f, ACCESS
                          M         
                      01324         
                      01325         ; mix OSC2
                      01326         OSC_MIX 2
  0000                    M         local   mixDone, mixDoPos, mixDoNeg, mixDoDone
                          M                 
                          M         ; check polarity of current activeOutputValue compared to PWM_IDLE_OUTPUT_VALUE
0011C8 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
0011CA 5DE4               M         subwf   activeOutputValues + 2,          w
0011CC E3??               M         bnc             mixDoNeg
0011CE                    M mixDoPos
                          M         ; WREG = adsrLimiterRegs/2
0011CE 90D8               M         bcf             STATUS, C, ACCESS
0011D0 3036               M         rrcf    adsrLimiterRegs + 2,          w, ACCESS
0011D2 5DE4               M         subwf   activeOutputValues + 2,          w
0011D4 D???               M         bra             mixDoDone
0011D6                    M mixDoNeg
                          M         ; WREG = adsrLimiterRegs/2
0011D6 90D8               M         bcf             STATUS, C, ACCESS
0011D8 3036               M         rrcf    adsrLimiterRegs + 2,          w, ACCESS
0011DA 25E4               M         addwf   activeOutputValues + 2,          w      
0011DC                    M mixDoDone
                          M         ; overflow indicates that last operation toggled bit 7
0011DC B6D8               M         btfsc   STATUS, OV, ACCESS
0011DE 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
                          M 
0011E0                    M mixDone
                          M         ; add WREG to mixedOutputL/H
0011E0 262E               M         addwf   mixedOutputL, f, ACCESS
0011E2 B0D8               M         btfsc   STATUS, C, ACCESS
0011E4 2A2F               M         incf    mixedOutputH, f, ACCESS
                          M         
                      01327         
                      01328         ; mix OSC3
                      01329         OSC_MIX 3
  0000                    M         local   mixDone, mixDoPos, mixDoNeg, mixDoDone
                          M                 
                          M         ; check polarity of current activeOutputValue compared to PWM_IDLE_OUTPUT_VALUE
0011E6 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 175


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0011E8 5DE5               M         subwf   activeOutputValues + 3,          w
0011EA E3??               M         bnc             mixDoNeg
0011EC                    M mixDoPos
                          M         ; WREG = adsrLimiterRegs/2
0011EC 90D8               M         bcf             STATUS, C, ACCESS
0011EE 3037               M         rrcf    adsrLimiterRegs + 3,          w, ACCESS
0011F0 5DE5               M         subwf   activeOutputValues + 3,          w
0011F2 D???               M         bra             mixDoDone
0011F4                    M mixDoNeg
                          M         ; WREG = adsrLimiterRegs/2
0011F4 90D8               M         bcf             STATUS, C, ACCESS
0011F6 3037               M         rrcf    adsrLimiterRegs + 3,          w, ACCESS
0011F8 25E5               M         addwf   activeOutputValues + 3,          w      
0011FA                    M mixDoDone
                          M         ; overflow indicates that last operation toggled bit 7
0011FA B6D8               M         btfsc   STATUS, OV, ACCESS
0011FC 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
                          M 
0011FE                    M mixDone
                          M         ; add WREG to mixedOutputL/H
0011FE 262E               M         addwf   mixedOutputL, f, ACCESS
001200 B0D8               M         btfsc   STATUS, C, ACCESS
001202 2A2F               M         incf    mixedOutputH, f, ACCESS
                          M         
                      01330                 
                      01331         ; do (mixedOutput /= 4) to evenly mix all oscillators
001204 90D8           01332         bcf             STATUS, C, ACCESS
001206 322F           01333         rrcf    mixedOutputH, f, ACCESS
001208 322E           01334         rrcf    mixedOutputL, f, ACCESS
00120A 90D8           01335         bcf             STATUS, C, ACCESS
00120C 322F           01336         rrcf    mixedOutputH, f, ACCESS
00120E 322E           01337         rrcf    mixedOutputL, f, ACCESS
                      01338 
                      01339         ; send final mixed signal to PWM!
001210 C02E FFBE      01340         movff   mixedOutputL, CCPR1L
                      01341 
001214                01342 processSoundState_soundOnDone
                      01343         
001214                01344 processSoundState_exit
                      01345         ; push working regs onto software stack
                      01346         POP_R   PRODH
001214 CFDC FFF4          M         movff   softwareStackPointerPREINC, PRODH       ; ++softwareStackPointerINDF = regName
                      01347         POP_R   PRODL
001218 CFDC FFF3          M         movff   softwareStackPointerPREINC, PRODL       ; ++softwareStackPointerINDF = regName
                      01348         POP_R   TABLAT
00121C CFDC FFF5          M         movff   softwareStackPointerPREINC, TABLAT      ; ++softwareStackPointerINDF = regName
                      01349         POP_R   TBLPTRU
001220 CFDC FFF8          M         movff   softwareStackPointerPREINC, TBLPTRU     ; ++softwareStackPointerINDF = regName
                      01350         POP_R   TBLPTRH
001224 CFDC FFF7          M         movff   softwareStackPointerPREINC, TBLPTRH     ; ++softwareStackPointerINDF = regName
                      01351         POP_R   TBLPTRL
001228 CFDC FFF6          M         movff   softwareStackPointerPREINC, TBLPTRL     ; ++softwareStackPointerINDF = regName
                      01352         POP_R   FSR1H
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 176


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00122C CFDC FFE2          M         movff   softwareStackPointerPREINC, FSR1H       ; ++softwareStackPointerINDF = regName
                      01353         POP_R   FSR1L
001230 CFDC FFE1          M         movff   softwareStackPointerPREINC, FSR1L       ; ++softwareStackPointerINDF = regName
                      01354         POP_R   FSR0H
001234 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      01355         POP_R   FSR0L   
001238 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      01356 
                      01357         ; FSRs all undefined locally in functions
                      01358                 
00123C 0012           01359         return          
                      01360         
                      01361 
                      01362         ; ***********************************************************************
                      01363         ; Function: void processSoundState(void)
                      01364         ; ***********************************************************************
00123E                01365 serviceADSR     
                      01366         ; test prescale counter to determine if it's time to service adsr
                      01367         ; perform (adsrPrescaleCounter - ADSR_PRESCALE)
                      01368         ; if result is positive, then (adsrPrescaleCounter >= ADSR_PRESCALE) == TRUE
                      01369 
                      01370         PUSH_R  r0
00123E C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01371         PUSH_R  r1
001242 C004 FFDD          M         movff   r1,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01372         PUSH_R  r2
001246 C005 FFDD          M         movff   r2,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01373         PUSH_R  FSR0L
00124A CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01374         PUSH_R  FSR0H
00124E CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01375 
                      01376         #define oscNumber r0
                      01377         #define oscNumberMask r1
                      01378         #define tmpValue r2
                      01379                 
                      01380         ; do subtract
001252 0E62           01381         movlw   low(ADSR_PRESCALE)
001254 5C3A           01382         subwf   adsrPrescaleCounter + 0, w, ACCESS
001256 0E02           01383         movlw   high(ADSR_PRESCALE)
001258 583B           01384         subwfb adsrPrescaleCounter + 1, w, ACCESS
                      01385         ; if result is positive then service adsr
00125A A0D8           01386         btfss   STATUS, C, ACCESS       
                      01387         ; result was negative so exit
00125C D???           01388         bra             serviceADSR_exit
                      01389         
                      01390         ; reset adsrPrescaleCounter
00125E 6A3A           01391         clrf    adsrPrescaleCounter + 0, ACCESS
001260 6A3B           01392         clrf    adsrPrescaleCounter + 1, ACCESS
                      01393         
001262 6A03           01394         clrf    oscNumber, ACCESS
001264 0E01           01395         movlw   1
001266 6E04           01396         movwf   oscNumberMask, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 177


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001268                01397 serviceADSRLoop
                      01398         ; ignore advance if oscillator is sustained
001268 5004           01399         movf    oscNumberMask, w, ACCESS
00126A 142C           01400         andwf   sustainFlags, w, ACCESS
00126C E1??           01401         bnz             serviceADSR_oscDone
                      01402         
00126E EE00 F030      01403         lfsr    FSR0, oscStateFlags
001272 5003           01404         movf    oscNumber, w, ACCESS
001274 B6EB           01405         btfsc   PLUSW0, attack, ACCESS
001276 D???           01406         bra             doAttack
001278 B0EB           01407         btfsc   PLUSW0, release, ACCESS
00127A D???           01408         bra             doRelease
00127C D???           01409         bra             serviceADSR_oscDone
                      01410         
00127E                01411 doAttack
                      01412         ; osc is attacking
                      01413 
                      01414         ; test condition ((adsrLimiterRegs -= ADSR_ATTACK_RATE) <=0)
00127E EE00 F034      01415         lfsr    FSR0, adsrLimiterRegs
001282 5003           01416         movf    oscNumber, w, ACCESS
                      01417         ; tmpValue = (*(adsrLimiterRegs + OSC_NUMBER))
001284 CFEB F005      01418         movff   PLUSW0, tmpValue
001288 5038           01419         movf    adsrAttackRate, w, ACCESS
00128A 5C05           01420         subwf   tmpValue, w, ACCESS
00128C E3??           01421         bnc             attackDone
00128E E0??           01422         bz              attackDone
                      01423 
                      01424         ; condition is FALSE so do the subtraction and exit
                      01425         ; (adsrLimiterRegs -= ADSR_ATTACK_RATE)
001290 5003           01426         movf    oscNumber, w, ACCESS
                      01427         ; tmpValue = (*(adsrLimiterRegs + OSC_NUMBER))
001292 CFEB F005      01428         movff   PLUSW0, tmpValue
001296 5038           01429         movf    adsrAttackRate, w, ACCESS
001298 5E05           01430         subwf   tmpValue, f, ACCESS
00129A 5003           01431         movf    oscNumber, w, ACCESS
00129C C005 FFEB      01432         movff   tmpValue, PLUSW0
0012A0 D???           01433         bra             serviceADSR_oscDone
                      01434 
0012A2                01435 attackDone
0012A2 EE00 F030      01436         lfsr    FSR0, oscStateFlags
0012A6 5003           01437         movf    oscNumber, w, ACCESS
                      01438         ; clear attack flag
0012A8 96EB           01439         bcf             PLUSW0, attack, ACCESS
0012AA EE00 F034      01440         lfsr    FSR0, adsrLimiterRegs
                      01441         ; WREG still == oscNumber
0012AE 6AEB           01442         clrf    PLUSW0, ACCESS
0012B0 D???           01443         bra     serviceADSR_oscDone
                      01444 
0012B2                01445 doRelease
                      01446         ; osc is releasing
                      01447 
                      01448         ; test condition: ((adsrLimiterRegs + ADSR_RELEASE_RATE) >= 255)
0012B2 EE00 F034      01449         lfsr    FSR0, adsrLimiterRegs
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 178


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0012B6 5003           01450         movf    oscNumber, w, ACCESS
                      01451         ; tmpValue = (*(adsrLimiterRegs + OSC_NUMBER))
0012B8 CFEB F005      01452         movff   PLUSW0, tmpValue
0012BC 5039           01453         movf    adsrReleaseRate, w, ACCESS
0012BE 2405           01454         addwf   tmpValue, w, ACCESS
                      01455         ; condition is TRUE so skip the addition and leave adsrLimiterRegs at its current value
0012C0 E2??           01456         bc              releaseDone
0012C2 1CE8           01457         comf    WREG, w, ACCESS
                      01458         ; condition is TRUE so skip the addition and leave adsrLimiterRegs at its current value
0012C4 E0??           01459         bz              releaseDone
                      01460 
                      01461         ; condition is FALSE so do the addition and exit
                      01462         ; do (adsrLimiterRegs += ADSR_RELEASE_RATE)     
                      01463         ; FSR0 still == adsrLimiterRegs
0012C6 5003           01464         movf    oscNumber, w, ACCESS
                      01465         ; tmpValue = (*(adsrLimiterRegs + OSC_NUMBER))
0012C8 CFEB F005      01466         movff   PLUSW0, tmpValue
0012CC 5039           01467         movf    adsrReleaseRate, w, ACCESS
0012CE 2605           01468         addwf   tmpValue, f, ACCESS
0012D0 5003           01469         movf    oscNumber, w, ACCESS
0012D2 C005 FFEB      01470         movff   tmpValue, PLUSW0        
0012D6 D???           01471         bra             serviceADSR_oscDone
                      01472         
0012D8                01473 releaseDone
                      01474         ; clear release flag
0012D8 EE00 F030      01475         lfsr    FSR0, oscStateFlags
0012DC 5003           01476         movf    oscNumber, w, ACCESS
0012DE 90EB           01477         bcf             PLUSW0, release, ACCESS
                      01478         ; set limit reg to max
0012E0 EE00 F034      01479         lfsr    FSR0, adsrLimiterRegs
                      01480         ; WREG still == oscNumber
0012E4 68EB           01481         setf    PLUSW0, ACCESS
                      01482         ; clear oscillator's delegatedDelta
0012E6 EE00 F0C2      01483         lfsr    FSR0, delegatedDeltas
0012EA 90D8           01484         bcf             STATUS, C, ACCESS
0012EC 3403           01485         rlcf    oscNumber, w, ACCESS
0012EE 6AEB           01486         clrf    PLUSW0;
0012F0 0F01           01487         addlw   1
0012F2 6AEB           01488         clrf    PLUSW0; 
                      01489 
0012F4                01490 serviceADSR_oscDone
                      01491         ; increment oscNumber mask
0012F4 90D8           01492         bcf             STATUS, C, ACCESS
0012F6 3604           01493         rlcf    oscNumberMask, f, ACCESS
                      01494         ; increment oscNumber and check if done
0012F8 2A03           01495         incf    oscNumber, f, ACCESS
0012FA 5024           01496         movf    polyDepth, w, ACCESS
0012FC 6203           01497         cpfseq oscNumber, ACCESS
                      01498         ; not done so continue
0012FE D???           01499         bra             serviceADSRLoop
                      01500 
001300                01501 serviceADSR_exit
                      01502         #undefine       oscNumber
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 179


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01503         #undefine       oscNumberMask
                      01504         #undefine       tmpValue
                      01505 
                      01506         POP_R   FSR0H
001300 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      01507         POP_R   FSR0L
001304 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      01508         POP_R   r2
001308 CFDC F005          M         movff   softwareStackPointerPREINC, r2          ; ++softwareStackPointerINDF = regName
                      01509         POP_R   r1
00130C CFDC F004          M         movff   softwareStackPointerPREINC, r1          ; ++softwareStackPointerINDF = regName
                      01510         POP_R   r0
001310 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      01511 
001314 0012           01512         return
                      01513 
                      01514         ; ***********************************************************************
                      01515         ; Function: void oscAdsrTriggerAttack(void)
                      01516         ; ***********************************************************************
                      01517         ; This function is called only by theDelegator() for one of the following reasons:
                      01518         ; - An activeNoteDeltas element has just been assigned to an oscillator that satisfies one of th
                            e following conditions:
                      01519         ;   -- The oscillator's delegatedDelta value == 0 and has no match in activeNoteDeltas[] (oscill
                            ator is idle)
                      01520         ;   -- The oscillator's delegatedDelta value does not match any element in activeNoteDeltas (may
                             be releasing)
                      01521         ; - An oscillator's delegatedDelta matches an element in activeNoteDeltas, and the oscillator is
                             releasing
                      01522         ;
001316                01523 oscAdsrTriggerAttack
                      01524 ; oscillator number passed in WREG
                      01525 
                      01526         ; push working regs onto software stack
                      01527         PUSH_R  r0
001316 C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01528         PUSH_R  FSR0L
00131A CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01529         PUSH_R  FSR0H
00131E CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01530         
                      01531         ; r0 = oscillator #
001322 6E03           01532         movwf           r0, ACCESS
                      01533         
                      01534         ; load fsr to first deal with adsrLimiterRegs
001324 EE00 F034      01535         lfsr    FSR0, adsrLimiterRegs
                      01536 
                      01537         ; if adsrAttackRate == 64 then attack is disabled
001328 0E40           01538         movlw           64
00132A 6238           01539         cpfseq  adsrAttackRate, ACCESS
00132C D???           01540         bra                     oscAdsrTriggerAttackActive
                      01541 
                      01542         ; ADSR IS DISABLED
                      01543         ; WREG = oscillator #
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 180


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00132E 5003           01544         movf    r0, w, ACCESS
                      01545         ; clear limiterReg to ensure that waveform amplitude is not attenuated
001330 6AEB           01546         clrf    PLUSW0, ACCESS
                      01547         ; load fsr to modify adsr flags
001332 EE00 F030      01548         lfsr    FSR0, oscStateFlags
                      01549         ; clear attack flag
001336 96EB           01550         bcf     PLUSW0, attack, ACCESS  
                      01551         ; clear attack flag
001338 90EB           01552         bcf     PLUSW0, release, ACCESS 
                      01553 
00133A D???           01554         bra             oscAdsrTriggerAttackExit
                      01555         
                      01556         ; ADSR IS ACTIVE
00133C                01557 oscAdsrTriggerAttackActive
                      01558         ; if release is disabled, set limiterReg to start with full-attenuation of waveform amplitude
                      01559         ; otherwise, leave it alone to reduce reattack popping
00133C 0E40           01560         movlw   64
00133E 1839           01561         xorwf   adsrReleaseRate, w, ACCESS
001340 E1??           01562         bnz             oscAdsrTriggerAttackNoReAttack
                      01563         ; set adsrLimiterReg to 0xff on attack if releaseRate == 64 (releaseTime == 0)
                      01564         ; WREG = oscillator #
001342 5003           01565         movf    r0, w, ACCESS
001344 68EB           01566         setf    PLUSW0, ACCESS
                      01567 
001346                01568 oscAdsrTriggerAttackNoReAttack
                      01569 
                      01570         ; load fsr to modify adsr flags
001346 EE00 F030      01571         lfsr    FSR0, oscStateFlags
                      01572         ; WREG = oscillator #
00134A 5003           01573         movf    r0, w, ACCESS
                      01574         ; set attack flag
00134C 86EB           01575         bsf     PLUSW0, attack, ACCESS
                      01576         ; clear release flag
00134E 90EB           01577         bcf     PLUSW0, release, ACCESS
                      01578                 
001350                01579 oscAdsrTriggerAttackExit
                      01580         ; restore working regs from stack
                      01581         POP_R   FSR0H
001350 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      01582         POP_R   FSR0L
001354 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      01583         POP_R   r0
001358 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      01584         
00135C 0012           01585         return
                      01586         
                      01587 
                      01588         ; ***********************************************************************
                      01589         ; Function: void oscAdsrTriggerRelease(void)
                      01590         ; ***********************************************************************
                      01591         ; This function is called only by theDelegator() for the following reason:
                      01592         ; - An oscillator's delegatedDelta != 0 and does not match any element in activeNoteDeltas
                      01593         ; Note, that theDelegator does not currently check whether the oscillator is already releasing b
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 181


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            efore call
00135E                01594 oscAdsrTriggerRelease
                      01595 ; oscillator number passed in WREG
                      01596 
                      01597         ; push working regs onto software stack
                      01598         PUSH_R  r0
00135E C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01599         PUSH_R  FSR0L
001362 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01600         PUSH_R  FSR0H
001366 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01601         
                      01602         ; r0 = oscillator #
00136A 6E03           01603         movwf           r0, ACCESS
                      01604 
                      01605         ; if adsrReleaseRate == 64 then leave limiterReg where it is and clear delegatedDeltas to signal
                             stop to delegator
00136C 0E40           01606         movlw   64
                      01607         ; if adsrReleaseRate == 64 then release is disabled
00136E 6239           01608         cpfseq  adsrReleaseRate, ACCESS
001370 D???           01609         bra             oscAdsrTriggerReleaseActive
                      01610 
                      01611         ; RELEASE IS DISABLED
                      01612         ; load fsr to modify adsr flag
001372 EE00 F030      01613         lfsr    FSR0, oscStateFlags
                      01614         ; WREG = oscillator #
001376 5003           01615         movf    r0, w, ACCESS
                      01616         ; clear release flag
001378 90EB           01617         bcf     PLUSW0, release, ACCESS
                      01618         ; clear attack flag
00137A 96EB           01619         bcf     PLUSW0, attack, ACCESS
                      01620 
                      01621         ; clear oscillator's delegatedDelta
                      01622         ; load fsr with base address of delegatedDeltas array
00137C EE00 F0C2      01623         lfsr    FSR0, delegatedDeltas
                      01624         ; add oscillator offset to fsr
                      01625         ; delegatedDeltas are two-bytes wide so WREG = r0*2
001380 90D8           01626         bcf     STATUS, C, ACCESS
001382 3403           01627         rlcf    r0, w, ACCESS
                      01628         ; add offset to low byte of FSR
001384 26E9           01629         addwf FSR0L, f, ACCESS
                      01630         ; increment high byte of FSR if CARRY is set
001386 B0D8           01631         btfsc   STATUS, C, ACCESS
001388 2AEA           01632         incf    FSR0H, f, ACCESS
                      01633         ; clear low byte
00138A 6AEE           01634         clrf    POSTINC0, ACCESS
                      01635         ; clear high byte
00138C 6AEF           01636         clrf    INDF0, ACCESS
                      01637 
00138E D???           01638         bra             oscAdsrTriggerReleaseExit
                      01639         
                      01640         ; RELEASE IS ACTIVE
001390                01641 oscAdsrTriggerReleaseActive
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 182


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01642         ; load fsr to modify adsr flag
001390 EE00 F030      01643         lfsr    FSR0, oscStateFlags
                      01644         ; WREG = oscillator #
001394 5003           01645         movf    r0, w, ACCESS
                      01646         ; set release flag
001396 80EB           01647         bsf     PLUSW0, release, ACCESS
                      01648         ; clear attack flag
001398 96EB           01649         bcf     PLUSW0, attack, ACCESS
                      01650                 
00139A                01651 oscAdsrTriggerReleaseExit
                      01652         ; restore working regs from stack
                      01653         POP_R   FSR0H
00139A CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      01654         POP_R   FSR0L
00139E CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      01655         POP_R   r0
0013A2 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      01656 
0013A6 0012           01657         return
                      00325         #include        "../source/userInterface.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      userInterface.asm                                 *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021         
                      00022 ;**********************************************************************
                      00023 ; INCLUDES
                      00024 ;**********************************************************************
                      00025 
                      00026 ;**********************************************************************
                      00027 ; DEFINITIONS
                      00028 ;**********************************************************************
                      00029 
                      00030 ;**********************************************************************
                      00031 ; LOCAL VARIABLES
                      00032 ;**********************************************************************
                      00033 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 183


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00034         CBLOCK
  0000003D            00035                 ledBlinkRate:1
  0000003E            00036                 ledBlinkCounter:1
  0000003F            00037                 ledOnOffFlags:1
                      00038         ENDC
                      00039 
                      00040 
                      00041 ;**********************************************************************
                      00042 ; LOCAL FUNCTIONS
                      00043 ;**********************************************************************
                      00044 
                      00045 ;**********************************************************************
                      00046 ; Function: void initUserInterface(void)
                      00047 ;**********************************************************************
                      00048 
0013A8                00049 initUserInterface:
                      00050 
                      00051                 ; init with steady state LED
0013A8 6A3D           00052                 clrf    ledBlinkRate, ACCESS
0013AA 6A3E           00053                 clrf    ledBlinkCounter, ACCESS
                      00054         
0013AC 0012           00055         return
                      00056         
                      00057 
                      00058 ;**********************************************************************
                      00059 ; Function: void userInterface_incMode(void)
                      00060 ;**********************************************************************
0013AE                00061 userInterface_incMode
                      00062         ; mode is changing so set needDelgator flag
0013AE 8419           00063         bsf             soundGenFlags, needRefresh, ACCESS
                      00064         
                      00065         ; increment modeLevel, reset if > MAX_MODE_LEVEL
0013B0 2A21           00066         incf    modeLevel, f, ACCESS
0013B2 0E03           00067         movlw   MAX_MODE_LEVEL + 1
                      00068         ; skip if modeLevel < MAX_MODE_LEVEL + 1
0013B4 6021           00069         cpfslt  modeLevel, ACCESS
0013B6 6A21           00070         clrf    modeLevel, ACCESS
                      00071         
                      00072         ; if(modeLevel == POLY)
                      00073         ; {
                      00074         ;   polyDepth = MAX_POLY_DEPTH
                      00075         ;   ledBlinkRate = LEVEL_POLY_LED_BLINK_RATE
                      00076         ;   ledBlinkCounter = LEVEL_POLY_LED_BLINK_RATE
                      00077         ;       sustainFlags = 0
                      00078         ; }
0013B8 0E00           00079         movlw   POLY
0013BA 6221           00080         cpfseq  modeLevel, ACCESS
0013BC D???           00081         bra             userInterface_incModeCheckSustain
0013BE 0E04           00082         movlw   MAX_POLY_DEPTH
0013C0 6E24           00083         movwf   polyDepth, ACCESS
                      00084         ; set LED blink rate
0013C2 0E00           00085         movlw   LEVEL_POLY_LED_BLINK_RATE
0013C4 6E3D           00086         movwf   ledBlinkRate
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 184


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0013C6 6E3E           00087         movwf   ledBlinkCounter
                      00088         ; clear sustain flags
                      00089         DISABLE_SUSTAIN
0013C8 6A2C               M         clrf    sustainFlags, ACCESS
0013CA D???           00090         bra             userInterface_incModeDone
                      00091 
Warning[208]: Label truncated at 32 characters. (userInterface_incModeCheckSustain)
0013CC                00092 userInterface_incModeCheckSustain
                      00093         ; if(modeLevel == SUSTAIN)
                      00094         ; {
                      00095         ;   polyDepth = MAX_POLY_DEPTH
                      00096         ;   ledBlinkRate = LEVEL_SUSTAIN_LED_BLINK_RATE
                      00097         ;   ledBlinkCounter = LEVEL_SUSTAIN_LED_BLINK_RATE
                      00098         ;       sustainFlags = (~oscResetFlags) & 0x0f
                      00099         ; }
0013CC 0E01           00100         movlw   SUSTAIN
0013CE 6221           00101         cpfseq  modeLevel, ACCESS
0013D0 D???           00102         bra             userInterface_incModeDoMono
0013D2 0E04           00103         movlw   MAX_POLY_DEPTH
0013D4 6E24           00104         movwf   polyDepth, ACCESS
0013D6 0E02           00105         movlw   LEVEL_SUSTAIN_LED_BLINK_RATE
0013D8 6E3D           00106         movwf   ledBlinkRate
0013DA 6E3E           00107         movwf   ledBlinkCounter
                      00108         ; set sustain lock flags for all active oscillators
                      00109         ENABLE_SUSTAIN
0013DC 1C2B               M         comf    oscResetFlags, w, ACCESS
0013DE 0B0F               M         andlw   0x0f
0013E0 6E2C               M         movwf   sustainFlags, ACCESS
0013E2 D???           00110         bra             userInterface_incModeDone       
                      00111         
0013E4                00112 userInterface_incModeDoMono
                      00113         ; if(modeLevel == MONO)
                      00114         ; {
                      00115         ;   polyDepth = 1
                      00116         ;   ledBlinkRate = LEVEL_MONO_LED_BLINK_RATE
                      00117         ;   ledBlinkCounter = LEVEL_MONO_LED_BLINK_RATE
                      00118         ;       sustainFlags = 0
                      00119         ; }
0013E4 0E01           00120         movlw   1
0013E6 6E24           00121         movwf   polyDepth, ACCESS
                      00122         ; set LED blink rate
0013E8 0E01           00123         movlw   LEVEL_MONO_LED_BLINK_RATE
0013EA 6E3D           00124         movwf   ledBlinkRate
0013EC 6E3E           00125         movwf   ledBlinkCounter
                      00126         ; clear sustain flags
                      00127         DISABLE_SUSTAIN
0013EE 6A2C               M         clrf    sustainFlags, ACCESS
0013F0                00128 userInterface_incModeDone
0013F0 0012           00129         return
                      00130 
                      00131 
                      00132 ;**********************************************************************
                      00133 ; Function: void userInterface_incWaveform(void)
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 185


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00134 ;**********************************************************************
0013F2                00135 userInterface_incWaveform
                      00136         ; waveShape is changing so set needDelgator flag
0013F2 8419           00137         bsf             soundGenFlags, needRefresh, ACCESS
                      00138 
                      00139         ; check if decrement is being request from MIDI Program Change
0013F4 A219           00140         btfss   soundGenFlags, pgDec, ACCESS
0013F6 D???           00141         bra             userInterface_incWaveformInc
                      00142         ; clear Program Change decrement flag
0013F8 9219           00143         bcf             soundGenFlags, pgDec, ACCESS    
0013FA 061F           00144         decf    waveShape, f, ACCESS
                      00145         ; branch if result was positive
0013FC E2??           00146         bc              userInterface_incWaveformDone
                      00147         ; result was negative so set to SAMPLE
0013FE 0E02           00148         movlw   SAMPLE
001400 6E1F           00149         movwf   waveShape, ACCESS
001402 D???           00150         bra             userInterface_incWaveformDone
                      00151 
001404                00152 userInterface_incWaveformInc
                      00153         ;       if(++waveShape > SAMPLE)
                      00154         ;               waveShape = SINE;
001404 2A1F           00155         incf    waveShape, f, ACCESS
001406 0E02           00156         movlw   SAMPLE
001408 641F           00157         cpfsgt  waveShape, ACCESS
00140A D???           00158         bra             userInterface_incWaveformDone
00140C 0E00           00159         movlw   SINE
00140E 6E1F           00160         movwf   waveShape, ACCESS
001410                00161 userInterface_incWaveformDone
001410 0012           00162         return
                      00163 
                      00164 ;**********************************************************************
                      00165 ; Function: void userInterface_checkConfigRequest(void)
                      00166 ;**********************************************************************
001412                00167 userInterface_checkConfigRequest
                      00168         PUSH_R  r0
001412 C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00169         
                      00170         ; read buttons (buttons are active-low so reverse logic)
001416 1C82           00171         comf    PORTC, w, ACCESS
001418 0B07           00172         andlw   0x07
00141A 6E03           00173         movwf   r0
                      00174 
                      00175         ; if waveform (RC2) is pressed then do midiSelectChannel()
00141C 0E04           00176         movlw   1<<RC2
00141E 6203           00177         cpfseq  r0, ACCESS
001420 D???           00178         bra             userInterface_checkConfig_notWF
001422 EC?? F???      00179         call    midiSelectChannel
001426 D???           00180         bra             userInterface_checkConfig_exit
001428                00181 userInterface_checkConfig_notWF
                      00182 
                      00183 ;       ; if record (RC1) is pressed then do ?()
                      00184 ;       movlw   1<<RC1
                      00185 ;       cpfseq  r0, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 186


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00186 ;       bra             userInterface_checkConfig_notREC
                      00187 ;       call    ?
                      00188 ;       bra             userInterface_checkConfig_exit
                      00189 ;userInterface_checkConfig_notREC
                      00190 
                      00191 ;       ; if mode (RC0) is pressed then do ?()
                      00192 ;       movlw   1<<RC2
                      00193 ;       cpfseq  r0, ACCESS
                      00194 ;       bra             userInterface_checkConfig_notMODE
                      00195 ;       call    ?
                      00196 ;       bra             userInterface_checkConfig_exit
                      00197 ;userInterface_checkConfig_notMODE
                      00198 
001428                00199 userInterface_checkConfig_exit
                      00200 
                      00201         POP_R   r0
001428 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
00142C 0012           00202         return
                      00203         
                      00204 
                      00205 
                      00206 
                      00207 
                      00326 
                      00327 ;**********************************************************************
                      00328 
                      00329         ; include CBLOCK defines for arrays here to ensure that smaller variables are within ACCESS memo
                            ry
                      00330         CBLOCK
                      00331                 ; visual marker of allocated memory when viewing file registers in debug
  00000040            00332                 endOfVariables:1
                      00333                 ; from midi.asm
  00000041            00334                 midiRxMessage:          MAX_MIDI_MESSAGE_SIZE
  00000059            00335                 activeNoteTable:        ACTIVE_NOTE_TABLE_SIZE
                      00336                 ; from eeprom.asm
  00000072            00337                 sampleDataBuffer:       SAMPLE_DATA_BUFFER_SIZE
  000000B2            00338                 nextSampleAddresses:MAX_POLY_DEPTH * NEXT_SAMPLE_ADDRESSES_EL_SIZE
                      00339                 ; from soundGen.asm
  000000BA            00340                 activeNoteDeltas:               ACTIVE_NOTE_DELTAS_SIZE
  000000C2            00341                 delegatedDeltas:                DELEGATED_DELTAS_SIZE
  000000CA            00342                 oscDeltas:                              OSC_DELTAS_SIZE
  000000D2            00343                 accumulators:                   ACCUMULATORS_SIZE
  000000E2            00344                 activeOutputValues:             ACTIVE_OUTPUT_VALUES_SIZE
                      00345         ENDC
                      00346 
                      00347         ; set stack base address as last data mem address
                      00348 
                      00349 #ifdef PIC18LF13K50
                      00350         CBLOCK 0x2ff
  000002FF            00351                 softwareStackBaseAddress:1
                      00352         ENDC
                      00353 #endif
                      00354 #ifdef PIC18LF14K22
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 187


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00355         CBLOCK 0x1ff
                      00356                 softwareStackBaseAddress:1
                      00357         ENDC
                      00358 #endif
                      00359                 
                      00360         #include        "../include/noteDeltaTables.inc"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      noteDeltaTables.inc                               *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 ; **** MIDI Note Delta Tables ****
                      00022 ;
                      00023 ; These tables define the "activeNoteDelta" values for all possible
                      00024 ; MIDI notes, 0 - 127 (in that order).  Defining sample values
                      00025 ; separately to save cycles 
                      00026 
00142E                00027 midiNoteDeltaTable
00142E 0022           00028         dw      34
001430 0024           00029         dw      36
001432 0026           00030         dw      38
001434 0029           00031         dw      41
001436 002B           00032         dw      43
001438 002E           00033         dw      46
00143A 0030           00034         dw      48
00143C 0033           00035         dw      51
00143E 0036           00036         dw      54
001440 003A           00037         dw      58
001442 003D           00038         dw      61
001444 0041           00039         dw      65
001446 0045           00040         dw      69
001448 0049           00041         dw      73
00144A 004D           00042         dw      77
00144C 0052           00043         dw      82
00144E 0056           00044         dw      86
001450 005C           00045         dw      92
001452 0061           00046         dw      97
001454 0067           00047         dw      103
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 188


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001456 006D           00048         dw      109
001458 0073           00049         dw      115
00145A 007A           00050         dw      122
00145C 0081           00051         dw      129
00145E 0089           00052         dw      137
001460 0091           00053         dw      145
001462 009A           00054         dw      154
001464 00A3           00055         dw      163
001466 00AD           00056         dw      173
001468 00B7           00057         dw      183
00146A 00C2           00058         dw      194
00146C 00CE           00059         dw      206
00146E 00DA           00060         dw      218
001470 00E7           00061         dw      231
001472 00F4           00062         dw      244
001474 0103           00063         dw      259
001476 0112           00064         dw      274
001478 0123           00065         dw      291
00147A 0134           00066         dw      308
00147C 0146           00067         dw      326
00147E 015A           00068         dw      346
001480 016E           00069         dw      366
001482 0184           00070         dw      388
001484 019B           00071         dw      411
001486 01B3           00072         dw      435
001488 01CD           00073         dw      461
00148A 01E9           00074         dw      489
00148C 0206           00075         dw      518
00148E 0225           00076         dw      549
001490 0245           00077         dw      581
001492 0268           00078         dw      616
001494 028C           00079         dw      652
001496 02B3           00080         dw      691
001498 02DC           00081         dw      732
00149A 0308           00082         dw      776
00149C 0336           00083         dw      822
00149E 0367           00084         dw      871
0014A0 039B           00085         dw      923
0014A2 03D2           00086         dw      978
0014A4 040C           00087         dw      1036
0014A6 0449           00088         dw      1097
0014A8 048B           00089         dw      1163
0014AA 04D0           00090         dw      1232
0014AC 0519           00091         dw      1305
0014AE 0567           00092         dw      1383
0014B0 05B9           00093         dw      1465
0014B2 0610           00094         dw      1552
0014B4 066C           00095         dw      1644
0014B6 06CE           00096         dw      1742
0014B8 0735           00097         dw      1845
0014BA 07A3           00098         dw      1955
0014BC 0817           00099         dw      2071
0014BE 0893           00100         dw      2195
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 189


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0014C0 0915           00101         dw      2325
0014C2 099F           00102         dw      2463
0014C4 0A32           00103         dw      2610
0014C6 0ACD           00104         dw      2765
0014C8 0B72           00105         dw      2930
0014CA 0C20           00106         dw      3104
0014CC 0CD8           00107         dw      3288
0014CE 0D9C           00108         dw      3484
0014D0 0E6B           00109         dw      3691
0014D2 0F46           00110         dw      3910
0014D4 102F           00111         dw      4143
0014D6 1125           00112         dw      4389
0014D8 122A           00113         dw      4650
0014DA 133F           00114         dw      4927
0014DC 1464           00115         dw      5220
0014DE 159A           00116         dw      5530
0014E0 16E3           00117         dw      5859
0014E2 183F           00118         dw      6207
0014E4 19B1           00119         dw      6577
0014E6 1B38           00120         dw      6968
0014E8 1CD6           00121         dw      7382
0014EA 1E8D           00122         dw      7821
0014EC 205E           00123         dw      8286
0014EE 224B           00124         dw      8779
0014F0 2455           00125         dw      9301
0014F2 267E           00126         dw      9854
0014F4 28C8           00127         dw      10440
0014F6 2B34           00128         dw      11060
0014F8 2DC6           00129         dw      11718
0014FA 307F           00130         dw      12415
0014FC 3361           00131         dw      13153
0014FE 366F           00132         dw      13935
001500 39AC           00133         dw      14764
001502 3D1A           00134         dw      15642
001504 40BC           00135         dw      16572
001506 4495           00136         dw      17557
001508 48A9           00137         dw      18601
00150A 4CFC           00138         dw      19708
00150C 518F           00139         dw      20879
00150E 5669           00140         dw      22121
001510 5B8C           00141         dw      23436
001512 60FE           00142         dw      24830
001514 66C2           00143         dw      26306
001516 6CDF           00144         dw      27871
001518 7358           00145         dw      29528
00151A 7A34           00146         dw      31284
00151C 8178           00147         dw      33144
00151E 892B           00148         dw      35115
001520 9153           00149         dw      37203
001522 99F7           00150         dw      39415
001524 A31F           00151         dw      41759
001526 ACD2           00152         dw      44242
001528 B719           00153         dw      46873
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 190


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00152A C1FC           00154         dw      49660
00152C CD85           00155         dw      52613
                      00156 
00152E                00157 sampleMidiNoteDeltaTable
00152E 0008           00158         dw      8
001530 0008           00159         dw      8
001532 0009           00160         dw      9
001534 000A           00161         dw      10
001536 000A           00162         dw      10
001538 000B           00163         dw      11
00153A 000B           00164         dw      11
00153C 000C           00165         dw      12
00153E 000D           00166         dw      13
001540 000D           00167         dw      13
001542 000E           00168         dw      14
001544 000F           00169         dw      15
001546 0010           00170         dw      16
001548 0011           00171         dw      17
00154A 0012           00172         dw      18
00154C 0013           00173         dw      19
00154E 0014           00174         dw      20
001550 0015           00175         dw      21
001552 0017           00176         dw      23
001554 0018           00177         dw      24
001556 0019           00178         dw      25
001558 001B           00179         dw      27
00155A 001D           00180         dw      29
00155C 001E           00181         dw      30
00155E 0020           00182         dw      32
001560 0022           00183         dw      34
001562 0024           00184         dw      36
001564 0026           00185         dw      38
001566 0028           00186         dw      40
001568 002B           00187         dw      43
00156A 002D           00188         dw      45
00156C 0030           00189         dw      48
00156E 0033           00190         dw      51
001570 0036           00191         dw      54
001572 0039           00192         dw      57
001574 003C           00193         dw      60
001576 0040           00194         dw      64
001578 0044           00195         dw      68
00157A 0048           00196         dw      72
00157C 004C           00197         dw      76
00157E 0051           00198         dw      81
001580 0055           00199         dw      85
001582 005B           00200         dw      91
001584 0060           00201         dw      96
001586 0066           00202         dw      102
001588 006C           00203         dw      108
00158A 0072           00204         dw      114
00158C 0079           00205         dw      121
00158E 0080           00206         dw      128
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 191


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001590 0088           00207         dw      136
001592 0090           00208         dw      144
001594 0098           00209         dw      152
001596 00A1           00210         dw      161
001598 00AB           00211         dw      171
00159A 00B5           00212         dw      181
00159C 00C0           00213         dw      192
00159E 00CB           00214         dw      203
0015A0 00D7           00215         dw      215
0015A2 00E4           00216         dw      228
0015A4 00F2           00217         dw      242
0015A6 0100           00218         dw      256
0015A8 010F           00219         dw      271
0015AA 011F           00220         dw      287
0015AC 0130           00221         dw      304
0015AE 0143           00222         dw      323
0015B0 0156           00223         dw      342
0015B2 016A           00224         dw      362
0015B4 0180           00225         dw      384
0015B6 0196           00226         dw      406
0015B8 01AF           00227         dw      431
0015BA 01C8           00228         dw      456
0015BC 01E3           00229         dw      483
0015BE 0200           00230         dw      512
0015C0 021E           00231         dw      542
0015C2 023F           00232         dw      575
0015C4 0261           00233         dw      609
0015C6 0285           00234         dw      645
0015C8 02AB           00235         dw      683
0015CA 02D4           00236         dw      724
0015CC 02FF           00237         dw      767
0015CE 032D           00238         dw      813
0015D0 035D           00239         dw      861
0015D2 0390           00240         dw      912
0015D4 03C7           00241         dw      967
0015D6 0400           00242         dw      1024
0015D8 043D           00243         dw      1085
0015DA 047D           00244         dw      1149
0015DC 04C2           00245         dw      1218
0015DE 050A           00246         dw      1290
0015E0 0557           00247         dw      1367
0015E2 05A8           00248         dw      1448
0015E4 05FE           00249         dw      1534
0015E6 0659           00250         dw      1625
0015E8 06BA           00251         dw      1722
0015EA 0721           00252         dw      1825
0015EC 078D           00253         dw      1933
0015EE 0800           00254         dw      2048
0015F0 087A           00255         dw      2170
0015F2 08FB           00256         dw      2299
0015F4 0983           00257         dw      2435
0015F6 0A14           00258         dw      2580
0015F8 0AAE           00259         dw      2734
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 192


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0015FA 0B50           00260         dw      2896
0015FC 0BFD           00261         dw      3069
0015FE 0CB3           00262         dw      3251
001600 0D74           00263         dw      3444
001602 0E41           00264         dw      3649
001604 0F1A           00265         dw      3866
001606 1000           00266         dw      4096
001608 10F4           00267         dw      4340
00160A 11F6           00268         dw      4598
00160C 1307           00269         dw      4871
00160E 1429           00270         dw      5161
001610 155C           00271         dw      5468
001612 16A1           00272         dw      5793
001614 17F9           00273         dw      6137
001616 1966           00274         dw      6502
001618 1AE9           00275         dw      6889
00161A 1C82           00276         dw      7298
00161C 1E34           00277         dw      7732
00161E 2000           00278         dw      8192
001620 21E7           00279         dw      8679
001622 23EB           00280         dw      9195
001624 260E           00281         dw      9742
001626 2851           00282         dw      10321
001628 2AB7           00283         dw      10935
00162A 2D41           00284         dw      11585
00162C 2FF2           00285         dw      12274
                      00286         
                      00361         #include        "../include/waveTables.inc"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      waveTables.inc                                    *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 ; **** Sine and Square Wave Tables ****
                      00022 
00162E                00023 squareTable
00162E 0000           00024         db 0,0
001630 0000           00025         db 0,0
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 193


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001632 0000           00026         db 0,0
001634 0000           00027         db 0,0
001636 0000           00028         db 0,0
001638 0000           00029         db 0,0
00163A 0000           00030         db 0,0
00163C 0000           00031         db 0,0
00163E 0000           00032         db 0,0
001640 0000           00033         db 0,0
001642 0000           00034         db 0,0
001644 0000           00035         db 0,0
001646 0000           00036         db 0,0
001648 0000           00037         db 0,0
00164A 0000           00038         db 0,0
00164C 0000           00039         db 0,0
00164E 0000           00040         db 0,0
001650 0000           00041         db 0,0
001652 0000           00042         db 0,0
001654 0000           00043         db 0,0
001656 0000           00044         db 0,0
001658 0000           00045         db 0,0
00165A 0000           00046         db 0,0
00165C 0000           00047         db 0,0
00165E 0000           00048         db 0,0
001660 0000           00049         db 0,0
001662 0000           00050         db 0,0
001664 0000           00051         db 0,0
001666 0000           00052         db 0,0
001668 0000           00053         db 0,0
00166A 0000           00054         db 0,0
00166C FFFF           00055         db 255,255
00166E FFFF           00056         db 255,255
001670 FFFF           00057         db 255,255
001672 FFFF           00058         db 255,255
001674 FFFF           00059         db 255,255
001676 FFFF           00060         db 255,255
001678 FFFF           00061         db 255,255
00167A FFFF           00062         db 255,255
00167C FFFF           00063         db 255,255
00167E FFFF           00064         db 255,255
001680 FFFF           00065         db 255,255
001682 FFFF           00066         db 255,255
001684 FFFF           00067         db 255,255
001686 FFFF           00068         db 255,255
001688 FFFF           00069         db 255,255
00168A FFFF           00070         db 255,255
00168C FFFF           00071         db 255,255
00168E FFFF           00072         db 255,255
001690 FFFF           00073         db 255,255
001692 FFFF           00074         db 255,255
001694 FFFF           00075         db 255,255
001696 FFFF           00076         db 255,255
001698 FFFF           00077         db 255,255
00169A FFFF           00078         db 255,255
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 194


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00169C FFFF           00079         db 255,255
00169E FFFF           00080         db 255,255
0016A0 FFFF           00081         db 255,255
0016A2 FFFF           00082         db 255,255
0016A4 FFFF           00083         db 255,255
0016A6 FFFF           00084         db 255,255
0016A8 FFFF           00085         db 255,255
0016AA FFFF           00086         db 255,255
0016AC FFFF           00087         db 255,255
0016AE FFFF           00088         db 255,255
0016B0 FFFF           00089         db 255,255
0016B2 FFFF           00090         db 255,255
0016B4 FFFF           00091         db 255,255
0016B6 FFFF           00092         db 255,255
0016B8 FFFF           00093         db 255,255
0016BA FFFF           00094         db 255,255
0016BC FFFF           00095         db 255,255
0016BE FFFF           00096         db 255,255
0016C0 FFFF           00097         db 255,255
0016C2 FFFF           00098         db 255,255
0016C4 FFFF           00099         db 255,255
0016C6 FFFF           00100         db 255,255
0016C8 FFFF           00101         db 255,255
0016CA FFFF           00102         db 255,255
0016CC FFFF           00103         db 255,255
0016CE FFFF           00104         db 255,255
0016D0 FFFF           00105         db 255,255
0016D2 FFFF           00106         db 255,255
0016D4 FFFF           00107         db 255,255
0016D6 FFFF           00108         db 255,255
0016D8 FFFF           00109         db 255,255
0016DA FFFF           00110         db 255,255
0016DC FFFF           00111         db 255,255
0016DE FFFF           00112         db 255,255
0016E0 FFFF           00113         db 255,255
0016E2 FFFF           00114         db 255,255
0016E4 FFFF           00115         db 255,255
0016E6 FFFF           00116         db 255,255
0016E8 FFFF           00117         db 255,255
0016EA FFFF           00118         db 255,255
0016EC 0000           00119         db 0,0
0016EE 0000           00120         db 0,0
0016F0 0000           00121         db 0,0
0016F2 0000           00122         db 0,0
0016F4 0000           00123         db 0,0
0016F6 0000           00124         db 0,0
0016F8 0000           00125         db 0,0
0016FA 0000           00126         db 0,0
0016FC 0000           00127         db 0,0
0016FE 0000           00128         db 0,0
001700 0000           00129         db 0,0
001702 0000           00130         db 0,0
001704 0000           00131         db 0,0
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 195


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001706 0000           00132         db 0,0
001708 0000           00133         db 0,0
00170A 0000           00134         db 0,0
00170C 0000           00135         db 0,0
00170E 0000           00136         db 0,0
001710 0000           00137         db 0,0
001712 0000           00138         db 0,0
001714 0000           00139         db 0,0
001716 0000           00140         db 0,0
001718 0000           00141         db 0,0
00171A 0000           00142         db 0,0
00171C 0000           00143         db 0,0
00171E 0000           00144         db 0,0
001720 0000           00145         db 0,0
001722 0000           00146         db 0,0
001724 0000           00147         db 0,0
001726 0000           00148         db 0,0
001728 0000           00149         db 0,0
00172A 0000           00150         db 0,0
00172C 0000           00151         db 0,0
                      00152 
00172E                00153 modulationBlendTable
00172E FFFF           00154         dw      0xffff
001730 8080           00155         dw      0x8080
001732 4040           00156         dw      0x4040
001734 2020           00157         dw      0x2020
001736 1010           00158         dw      0x1010
001738 0808           00159         dw      0x0808
00173A 0404           00160         dw      0x0404
00173C 0202           00161         dw      0x0202
00173E FFFF           00162         dw      0xffff
001740 8080           00163         dw      0x8080
001742 4040           00164         dw      0x4040
001744 2020           00165         dw      0x2020
001746 1010           00166         dw      0x1010
001748 0808           00167         dw      0x0808
00174A 0404           00168         dw      0x0404
00174C 0202           00169         dw      0x0202
00174E FFFF           00170         dw      0xffff
001750 8080           00171         dw      0x8080
001752 4040           00172         dw      0x4040
001754 2020           00173         dw      0x2020
001756 1010           00174         dw      0x1010
001758 0808           00175         dw      0x0808
00175A 0404           00176         dw      0x0404
00175C 0202           00177         dw      0x0202
00175E FFFF           00178         dw      0xffff
001760 8080           00179         dw      0x8080
001762 4040           00180         dw      0x4040
001764 2020           00181         dw      0x2020
001766 1010           00182         dw      0x1010
001768 0808           00183         dw      0x0808
00176A 0404           00184         dw      0x0404
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 196


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00176C 0202           00185         dw      0x0202
00176E FFFF           00186         dw      0xffff
001770 8080           00187         dw      0x8080
001772 4040           00188         dw      0x4040
001774 2020           00189         dw      0x2020
001776 1010           00190         dw      0x1010
001778 0808           00191         dw      0x0808
00177A 0404           00192         dw      0x0404
00177C 0202           00193         dw      0x0202
00177E FFFF           00194         dw      0xffff
001780 8080           00195         dw      0x8080
001782 4040           00196         dw      0x4040
001784 2020           00197         dw      0x2020
001786 1010           00198         dw      0x1010
001788 0808           00199         dw      0x0808
00178A 0404           00200         dw      0x0404
00178C 0202           00201         dw      0x0202
00178E FFFF           00202         dw      0xffff
001790 8080           00203         dw      0x8080
001792 4040           00204         dw      0x4040
001794 2020           00205         dw      0x2020
001796 1010           00206         dw      0x1010
001798 0808           00207         dw      0x0808
00179A 0404           00208         dw      0x0404
00179C 0202           00209         dw      0x0202
00179E FFFF           00210         dw      0xffff
0017A0 8080           00211         dw      0x8080
0017A2 4040           00212         dw      0x4040
0017A4 2020           00213         dw      0x2020
0017A6 1010           00214         dw      0x1010
0017A8 0808           00215         dw      0x0808
0017AA 0404           00216         dw      0x0404
0017AC 0202           00217         dw      0x0202
                      00218                 
0017AE                00219 sineTable
0017AE 8380           00220         db 128,131
0017B0 8986           00221         db 134,137
0017B2 8F8C           00222         db 140,143
0017B4 9592           00223         db 146,149
0017B6 9B98           00224         db 152,155
0017B8 A29E           00225         db 158,162
0017BA A7A5           00226         db 165,167
0017BC ADAA           00227         db 170,173
0017BE B3B0           00228         db 176,179
0017C0 B9B6           00229         db 182,185
0017C2 BEBC           00230         db 188,190
0017C4 C4C1           00231         db 193,196
0017C6 C9C6           00232         db 198,201
0017C8 CECB           00233         db 203,206
0017CA D3D0           00234         db 208,211
0017CC D7D5           00235         db 213,215
0017CE DCDA           00236         db 218,220
0017D0 E0DE           00237         db 222,224
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 197


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0017D2 E4E2           00238         db 226,228
0017D4 E8E6           00239         db 230,232
0017D6 EBEA           00240         db 234,235
0017D8 EEED           00241         db 237,238
0017DA F1F0           00242         db 240,241
0017DC F4F3           00243         db 243,244
0017DE F6F5           00244         db 245,246
0017E0 F9F8           00245         db 248,249
0017E2 FAFA           00246         db 250,250
0017E4 FCFB           00247         db 251,252
0017E6 FDFD           00248         db 253,253
0017E8 FEFE           00249         db 254,254
0017EA FFFE           00250         db 254,255
0017EC FFFF           00251         db 255,255
0017EE FFFF           00252         db 255,255
0017F0 FFFF           00253         db 255,255
0017F2 FEFE           00254         db 254,254
0017F4 FDFE           00255         db 254,253
0017F6 FCFD           00256         db 253,252
0017F8 FAFB           00257         db 251,250
0017FA F9FA           00258         db 250,249
0017FC F6F8           00259         db 248,246
0017FE F4F5           00260         db 245,244
001800 F1F3           00261         db 243,241
001802 EEF0           00262         db 240,238
001804 EBED           00263         db 237,235
001806 E8EA           00264         db 234,232
001808 E4E6           00265         db 230,228
00180A E0E2           00266         db 226,224
00180C DCDE           00267         db 222,220
00180E D7DA           00268         db 218,215
001810 D3D5           00269         db 213,211
001812 CED0           00270         db 208,206
001814 C9CB           00271         db 203,201
001816 C4C6           00272         db 198,196
001818 BEC1           00273         db 193,190
00181A B9BC           00274         db 188,185
00181C B3B6           00275         db 182,179
00181E ADB0           00276         db 176,173
001820 A7AA           00277         db 170,167
001822 A2A5           00278         db 165,162
001824 9B9E           00279         db 158,155
001826 9598           00280         db 152,149
001828 8F92           00281         db 146,143
00182A 898C           00282         db 140,137
00182C 8386           00283         db 134,131
00182E 7C80           00284         db 128,124
001830 7679           00285         db 121,118
001832 7073           00286         db 115,112
001834 6A6D           00287         db 109,106
001836 6467           00288         db 103,100
001838 5D61           00289         db 97,93
00183A 585A           00290         db 90,88
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 198


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00183C 5255           00291         db 85,82
00183E 4C4F           00292         db 79,76
001840 4649           00293         db 73,70
001842 4143           00294         db 67,65
001844 3B3E           00295         db 62,59
001846 3639           00296         db 57,54
001848 3134           00297         db 52,49
00184A 2C2F           00298         db 47,44
00184C 282A           00299         db 42,40
00184E 2325           00300         db 37,35
001850 1F21           00301         db 33,31
001852 1B1D           00302         db 29,27
001854 1719           00303         db 25,23
001856 1415           00304         db 21,20
001858 1112           00305         db 18,17
00185A 0E0F           00306         db 15,14
00185C 0B0C           00307         db 12,11
00185E 090A           00308         db 10,9
001860 0607           00309         db 7,6
001862 0505           00310         db 5,5
001864 0304           00311         db 4,3
001866 0202           00312         db 2,2
001868 0101           00313         db 1,1
00186A 0001           00314         db 1,0
00186C 0000           00315         db 0,0
00186E 0000           00316         db 0,0
001870 0000           00317         db 0,0
001872 0101           00318         db 1,1
001874 0201           00319         db 1,2
001876 0302           00320         db 2,3
001878 0504           00321         db 4,5
00187A 0605           00322         db 5,6
00187C 0907           00323         db 7,9
00187E 0B0A           00324         db 10,11
001880 0E0C           00325         db 12,14
001882 110F           00326         db 15,17
001884 1412           00327         db 18,20
001886 1715           00328         db 21,23
001888 1B19           00329         db 25,27
00188A 1F1D           00330         db 29,31
00188C 2321           00331         db 33,35
00188E 2825           00332         db 37,40
001890 2C2A           00333         db 42,44
001892 312F           00334         db 47,49
001894 3634           00335         db 52,54
001896 3B39           00336         db 57,59
001898 413E           00337         db 62,65
00189A 4643           00338         db 67,70
00189C 4C49           00339         db 73,76
00189E 524F           00340         db 79,82
0018A0 5855           00341         db 85,88
0018A2 5D5A           00342         db 90,93
0018A4 6461           00343         db 97,100
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 199


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0018A6 6A67           00344         db 103,106
0018A8 706D           00345         db 109,112
0018AA 7673           00346         db 115,118
0018AC 7C79           00347         db 121,124
                      00348 
                      00349         
                      00362 
                      00363 
                      00364         ORG             USER_CODE_END_ADDRESS
001BFE 0000           00365         nop
                      00366         
                      00367         ORG             BOOTLOADER_START_ADDRESS
                      00368         #include        "../source/mootLoader.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      mootLoader.asm                                    *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 
                      00015 
                      00016 ;**********************************************************************
                      00017 ; INCLUDE FILES
                      00018 ;**********************************************************************
                      00019         
                      00020         #include        "../header/mootloader.h"
                      00001 ;**********************************************************************
                      00002 ;                                                                     *
                      00003 ;    Project:       deMIDulator                                       *
                      00004 ;    Filename:      eeprom.h                                          *
                      00005 ;    Date:                                                            *
                      00006 ;    File Version:                                                    *
                      00007 ;                                                                     *
                      00008 ;    Author:        Derek Enos                                        *
                      00009 ;    Company:                                                         *
                      00010 ;                                                                     * 
                      00011 ;                                                                     *
                      00012 ;**********************************************************************
                      00013 ;                                                                     *
                      00014 ;    Files required:                                                  *
                      00015 ;                                                                     *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;**********************************************************************
                      00019 
                      00020 #ifndef _MOOTLOADERH_
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 200


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00021 #define _MOOTLOADERH_
                      00022 
                      00023 
                      00024 ; ******************* MOOTLOADER TRANSACTION DEFINES ***********************
                      00025 
                      00026 #define ML_BLOCK_ERASE_BYTE_SIZE                        64      ; must be multiple of ML_DATA_PAYLOAD_BY
                            TE_SIZE
                      00027 #define ML_DATA_PACKET_PAYLOAD_BYTE_SIZE        8
                      00028 
                      00029 #define ML_BLOCK_ERASE_IDLE_TIME_MS                     8
                      00030 #define ML_WRITE_IDLE_TIME_MS                           8
                      00031 #define ML_TRANS_SYNC_IDLE_TIME_MS                      32
                      00032 
                      00033 
                      00034 ; ******************* MOOTLOADER COMMAND BYTE DEFINES ***********************
                      00035 
                      00036 #define MIDI_VENDOR_ID                                          0x77
                      00037 #define MIDI_DEVICE_ID                                          0x1D
                      00038 
                      00039 #define ML_COMMAND_WRITE_PROGRAM_MEMORY         0x03
                      00040 #define ML_COMMAND_DATA_PAYLOAD                         0x01
                      00041 #define ML_COMMAND_DATA_PAYLOAD_COMPLETE        0x02
                      00042 #define ML_TRANSMITTER_RESETTING                        0x10
                      00043 #define ML_RECEIVER_RESET                                       0x11
                      00044 
                      00045 
                      00046 ; ******************* MOOTLOADER PACKET DEFINES ***********************
                      00047 
                      00048 #define ML_LARGE_PACKET_BYTE_SIZE               22
                      00049 
                      00050 
                      00051 ; ******************* mlFlags BIT DEFINES ***********************
                      00052 
                      00053 #define mlRxTransSyncFlag                                       0
                      00054 #define mlRxChecksumOk                                          1
                      00055 
                      00056 
                      00057 ;**********************************************************************
                      00058 ; MACROS
                      00059 ;**********************************************************************
                      00060 
                      00061 SEND_SYSEX_INTRO_NO_CHECK       MACRO
                      00062         movlw   0xF0
                      00063         call    mootLoader_sendByte
                      00064         movlw   MIDI_VENDOR_ID
                      00065         call    mootLoader_sendByte
                      00066         movlw   MIDI_DEVICE_ID
                      00067         call    mootLoader_sendByte
                      00068         ENDM
                      00069 
                      00070 SEND_BYTE_START_CHECKSUM        MACRO
                      00071         movwf   mlChecksum, ACCESS
                      00072         call    mootLoader_sendByte
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 201


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00073         ENDM
                      00074 
                      00075 SEND_BYTE_DO_CHECKSUM           MACRO
                      00076         xorwf   mlChecksum, f, ACCESS
                      00077         call    mootLoader_sendByte
                      00078         ENDM
                      00079 
                      00080 SPLIT_BYTE_THEN_SEND_DO_CHECKSUM        MACRO
                      00081         xorwf   mlChecksum, f, ACCESS
                      00082         call    mootLoader_sendAsNybbles
                      00083         ENDM
                      00084 
                      00085 SEND_CHECKSUM_CLEAR_RUN         MACRO
                      00086         movf    mlChecksum, w, ACCESS
                      00087         ; ensure that bit 7 is clear
                      00088         andlw   0x7f
                      00089         clrf    mlRunningChecksum, ACCESS
                      00090         call    mootLoader_sendByte
                      00091         ENDM
                      00092         
                      00093 SEND_CHECKSUM_DO_RUN            MACRO
                      00094         movf    mlChecksum, w, ACCESS
                      00095         ; ensure that bit 7 is clear
                      00096         andlw   0x7f
                      00097         xorwf   mlRunningChecksum, f, ACCESS
                      00098         call    mootLoader_sendByte
                      00099         ENDM
                      00100 
                      00101 SEND_RUNNING_CHECKSUM           MACRO
                      00102         movf    mlRunningChecksum, w, ACCESS
                      00103         ; ensure that bit 7 is clear
                      00104         andlw   0x7f
                      00105         call    mootLoader_sendByte
                      00106         ENDM
                      00107 
                      00108 IDLE_BLOCK_ERASE                        MACRO
                      00109         movlw   ML_BLOCK_ERASE_IDLE_TIME_MS
                      00110         call    mootLoader_wait
                      00111         ENDM
                      00112 
                      00113 IDLE_WRITE_WAIT                         MACRO
                      00114         movlw   ML_WRITE_IDLE_TIME_MS
                      00115         call    mootLoader_wait
                      00116         ENDM
                      00117 
                      00118         
                      00119 #endif
                      00120 
                      00021 
                      00022         
                      00023 ;**********************************************************************
                      00024 ; LOCAL VARIABLES
                      00025 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 202


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00026 
                      00027         CBLOCK 0
                      00028 
                      00029                 ; global
  00000000            00030                 mlButtonState:1
  00000001            00031                 mlChecksum:1
  00000002            00032                 mlRunningChecksum:1
  00000003            00033                 mlStartAddress:4
  00000007            00034                 mlPayloadLength:4
  0000000B            00035                 mlDataPayloadBuffer:ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
  00000013            00036                 mlCount:2
  00000015            00037                 mlFlags:1
                      00038                 ; sendNybble()
  00000016            00039                 mlNybbleSplitTmp:1
                      00040                 ; sendByte()
  00000017            00041                 mlCurrentTxByte:1
                      00042                 ; writeProgramMemory()
  00000018            00043                 mlBlockEraseBytesRemaining:1
                      00044                 ; sendDataPayloadPacket()
  00000019            00045                 mlDatPackIntByteCount:1
                      00046                 ; rxListenForPrelude()
  0000001A            00047                 mlPerfectPreludeCount:1
                      00048                 ; mootLoader_rxReceiveNextPacket()
  0000001B            00049                 mlRxReceivedPacket:ML_LARGE_PACKET_BYTE_SIZE
  00000031            00050                 mlRxReceivedPacketByteCount:1
                      00051                 ; rxReceiveNextByte()
  00000032            00052                 mlRxReceivedByte:1
                      00053                 ; rxReceiveNextSymbol()
  00000033            00054                 mlRxPreviousSymbolBucket:1
  00000034            00055                 mlConsecutiveSymbolCount:1
                      00056                 ; convertPeriodToSymbol()
  00000035            00057                 mlRxSymbolBucket:1
  00000036            00058                 mlPeriodBucketLowLimit:1
  00000037            00059                 mlPeriodBucketHighLimit:1
  00000038            00060                 mlSymbolBucketCount:1
                      00061                 ; measureInputCyclePeriod()
  00000039            00062                 mlRA4CompareReg:1
  0000003A            00063                 mlRxCyclePeriodL:1
  0000003B            00064                 mlRxCyclePeriodH:1
  0000003C            00065                 mlSchmittReadValue:1
  0000003D            00066                 mlTransitionCount:1
                      00067                 ; rxDecodeReceivedSymbol()
  0000003E            00068                 mlDecodedNybble:1
                      00069                 ; debug
  0000003F            00070                 mlEepromAddress:1
  00000040            00071                 mlEepromByteCount:1
                      00072                 
                      00073         ENDC
                      00074 
                      00075 
                      00076 ;**********************************************************************
                      00077 ; LOCAL DEFINES
                      00078 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 203


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00079 
                      00080 ;#define        DEBUG_TOGGLE_SQUARE_ON_SAMPLE
                      00081 ;#define        DEBUG_TOGGLE_SQUARE_ON_EDGE_DETECT
                      00082 ;#define        DEBUG_SQUARE_FOLLOWS_SCHMITT_VALUE
                      00083 ;#define        DEBUG_TOGGLE_SQUARE_ON_MEASURE_BOUNDS
                      00084 ;#define        DEBUG_TOGGLE_SQUARE_ON_NEW_SYMBOL_DETECT
                      00085 
                      00086 
                      00087 ;**********************************************************************
                      00088 ; mootLoader BEGIN
                      00089 ;**********************************************************************
                      00090 
001C00                00091 mootLoader
                      00092         
001C00 D???           00093         rcall   mootLoader_initCore
                      00094         
                      00095         ; use BANK0
001C02 0100           00096         BANKSEL 0
                      00097                 
                      00098         ; turn on all LEDs
                      00099         LED_ALL_ON
                          M         LED_SINE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
001C04 868B               M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
001C06 888B               M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
001C08 8A89               M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
                      00100 
                      00101         ; check if boot action is being requested
                      00102         ; enter mootLoader Trasmitter mode if waveform(RC0) & record(RC1) switches held for 2 second
                      00103         ; enter mootLoader Receiver mode if record(RC1) & mode(RC2) switches held for 2 second
                      00104 
                      00105         ;**** start procedure: check button state ****
                      00106         ; if any buttons (RC0 - RC2) are pressed then wait for button state to remain unchanged for 2 se
                            conds
001C0A 1C82           00107         comf    PORTC, w, ACCESS
001C0C 0B07           00108         andlw   0x07
                      00109         ; no buttons are active so exit
001C0E E0??           00110         bz              mootLoader_exit
                      00111         ; at least one button is active so wait to make sure that state doesn't change for 2 seconds
                      00112         ; mlTmpValue = compliment of initial RC2:0 value
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 204


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C10 6E00           00113         movwf   mlButtonState, ACCESS
001C12 6ACC           00114         clrf    TMR2, ACCESS
001C14 0E24           00115         movlw   0x24
001C16 6E13           00116         movwf   mlCount, ACCESS
001C18 0EF4           00117         movlw   0xf4
001C1A 6E14           00118         movwf   mlCount + 1, ACCESS
001C1C                00119 mootLoader_stateWaitLp
001C1C 1C82           00120         comf    PORTC, w, ACCESS
001C1E 0B07           00121         andlw   0x07
001C20 6200           00122         cpfseq  mlButtonState, ACCESS
                      00123         ; button state has changed before timer expiration so exit mootLoader
001C22 D???           00124         bra             mootLoader_exit
                      00125         ; state has not changed so wait for timer overflow
001C24 929E           00126         bcf             PIR1, TMR2IF, ACCESS    
001C26                00127 mootLoader_stateWaitOvLp
001C26 A29E           00128         btfss   PIR1, TMR2IF, ACCESS
001C28 D???           00129         bra             mootLoader_stateWaitOvLp        
                      00130         ; timer has overflowed so decrement overflow counter
001C2A 0613           00131         decf    mlCount, f, ACCESS
001C2C A0D8           00132         btfss   STATUS, C, ACCESS
001C2E 0614           00133         decf    mlCount + 1, f, ACCESS
001C30 5213           00134         movf    mlCount, f, ACCESS
                      00135         ; count != so continue loop
001C32 E1??           00136         bnz             mootLoader_stateWaitLp
001C34 5214           00137         movf    mlCount + 1, f, ACCESS
                      00138         ; count != so continue loop
001C36 E1??           00139         bnz             mootLoader_stateWaitLp
                      00140 
                      00141         ; button state remained unchanged for 2 seconds. yay
                      00142 
                      00143         ;**** start procedure: check button combo value ****
                      00144         ; remeber, mlButtonState is reversed logic
001C38 0E03           00145         movlw   0<<RC2 ^ 1<<RC1 ^ 1<<RC0
001C3A 6200           00146         cpfseq  mlButtonState, ACCESS
001C3C D???           00147         bra             mootLoader_checkReceive
001C3E D???           00148         bra             mootLoader_transmitter          
001C40                00149 mootLoader_checkReceive
001C40 0E06           00150         movlw   1<<RC2 ^ 1<<RC1 ^ 0<<RC0
001C42 6200           00151         cpfseq  mlButtonState, ACCESS
001C44 D???           00152         bra             mootLoader_exit
001C46 D???           00153         bra             mootLoader_receiver
                      00154 
001C48                00155 mootLoader_exit
001C48 EF?? F???      00156         goto    main_redirect
                      00157                         
                      00158         ; include code for mootLoader functions
                      00159         #include        "mootLoader_init.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      mootLoader_init_v0_2.asm                          *
                      00006 ;    Date:                                                            *
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 205


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 ;**********************************************************************
                      00022 ; INCLUDE FILES
                      00023 ;**********************************************************************
                      00024 
                      00025 ;**********************************************************************
                      00026 ; LOCAL FUNCTIONS
                      00027 ;**********************************************************************
                      00028 
                      00029 ;**********************************************************************
                      00030 ; Function: void mootLoader_initCore()
                      00031 ;**********************************************************************
                      00032 
001C4C                00033 mootLoader_initCore
                      00034 ; making mootLoader_initCore() a single function to save Program Memory space
                      00035 
                      00036 ;**********************************************************************
                      00037 ; Function: void mootLoader_initOsc()
                      00038 ;**********************************************************************
                      00039         ; configure for internal clock at 8Mhz & 4x PLL = 32Mhz
                      00040         ; primary clock determined by FOSC<3:0>
                      00041         ; confirgure internal osc for 8Mhz
001C4C 8CD3           00042         bsf             OSCCON, IRCF2, ACCESS
001C4E 8AD3           00043         bsf             OSCCON, IRCF1, ACCESS
001C50 98D3           00044         bcf             OSCCON, IRCF0, ACCESS
                      00045 
                      00046 #ifdef  PIC18LF13K50
                      00047 
001C52                00048 mootLoader_initOsc_lp1
                      00049         ; wait for internal high freq osc to stabilize
                      00050         ; "pic18lf13k50.inc" lists bit as "IOFS" but datasheet calls it "HFIOFS"
001C52 A4D3           00051         btfss   OSCCON, IOFS, ACCESS
001C54 D???           00052         bra             mootLoader_initOsc_lp1
                      00053 
                      00054         ; enable PLL
001C56 8C9B           00055         bsf             OSCTUNE, SPLLEN, ACCESS
                      00056 #endif
                      00057 
                      00058 #ifdef  PIC18LF14K22
                      00059 mootLoader_initOsc_lp1
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 206


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00060         ; wait for internal high freq osc to stabilize
                      00061         btfss   OSCCON, HFIOFS, ACCESS
                      00062         bra             mootLoader_initOsc_lp1
                      00063 
                      00064         ; enable PLL
                      00065         bsf             OSCTUNE, PLLEN, ACCESS
                      00066 #endif  
                      00067 
                      00068 ;**********************************************************************
                      00069 ; Function: void mootLoader_initIO()
                      00070 ;**********************************************************************
                      00071         ; IO Summary
                      00072         ; 
                      00073         ; (organized by pin #)
                      00074         ; Pin   Port    Assignment
                      00075         ; ---  ----     ----------
                      00076         ; 1             VDD             VDD
                      00077         ; 2             RA5             LED (Sine)
                      00078         ; 3             RA4             Audio In
                      00079         ; 4             RA3             ICSP
                      00080         ; 5             RC5             Audio Out
                      00081         ; 6             RC4             LED (Square)
                      00082         ; 7             RC3             LED (Sample)
                      00083         ; 8             RC6             EEPROM Chip Select
                      00084         ; 9             RC7             EEPROM Slave In
                      00085         ; 10    RB7             [Not Connected]
                      00086         ; 11    RB6             EEPROM Clock
                      00087         ; 12    RB5             MIDI In
                      00088         ; 13    RB4             EEPROM Slave Out
                      00089         ; 14    RC2             Switch (MIDI Record / Playback)
                      00090         ; 15    RC1             Switch (Voice Through / Record)
                      00091         ; 16    RC0             Switch (Waveform)
                      00092         ; 17    VUSB    [Not Connected]
                      00093         ; 18    RA1             ICSP
                      00094         ; 19    RA0             ICSP
                      00095         ; 20    VSS             VSS
                      00096         ;
                      00097         ; [PORT A]
                      00098         ; Pin   Port    Assignment                                                      Direction
                      00099         ; ---  ----             ----------                                                      --------
                            -
                      00100         ; 19    RA0             ICSP                                                            IN
                      00101         ; 18    RA1             ICSP                                                            IN
                      00102         ; 4             RA3             ICSP                                                            
                            IN
                      00103         ; 3             RA4             Audio In                                                        
                            IN
                      00104         ; 2             RA5             LED (Sine)                                                      
                            OUT
                      00105 
001C58 8A89           00106         bsf             LATA, RA5, ACCESS       ; LED is off
001C5A 0EDF           00107         movlw   0xff ^ 1<<RA5
001C5C 6E92           00108         movwf   TRISA, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 207


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00109 
                      00110         ; [PORT B]
                      00111         ; Pin   Port    Assignment                                                      Direction
                      00112         ; ---  ----             ----------                                                      --------
                            -
                      00113         ; 13    RB4             EEPROM Slave Out                                        IN
                      00114         ; 12    RB5             MIDI In                                                         IN
                      00115         ; 11    RB6             EEPROM Clock                                            OUT
                      00116         ; 10    RB7             [Not Connected]                                         IN
                      00117 
001C5E 0EBF           00118         movlw   0xff ^ 1<<RB6   ; EEPROM clock is LOW
001C60 6E8A           00119         movwf   LATB, ACCESS
001C62 0EBF           00120         movlw   0xff ^ 1<<RB6
001C64 6E93           00121         movwf   TRISB, ACCESS
                      00122         
                      00123         ; [PORT C]
                      00124         ; Pin   Port    Assignment                                                      Direction
                      00125         ; ---  ----             ----------                                                      --------
                            -
                      00126         ; 16    RC0             Switch (Waveform)                                       IN
                      00127         ; 15    RC1             Switch (Voice Through / Record)         IN
                      00128         ; 14    RC2             Switch (MIDI Record / Playback)         IN
                      00129         ; 7             RC3             LED (Sample)                                            OUT
                      00130         ; 6             RC4             LED (Square)                                            OUT
                      00131         ; 5             RC5             Audio Out                                                       
                            OUT
                      00132         ; 8             RC6             EEPROM Chip Select                                      OUT
                      00133         ; 9             RC7             EEPROM Slave In                                         OUT
                      00134         
001C66 868B           00135         bsf             LATC, RC3, ACCESS       ; LED is off
001C68 888B           00136         bsf             LATC, RC4, ACCESS       ; LED is off
001C6A 9A8B           00137         bcf             LATC, RC5, ACCESS       ; Audio out is low
001C6C 8C8B           00138         bsf             LATC, RC6, ACCESS       ; Chip select is idle
001C6E 0E07           00139         movlw   0x07
001C70 6E94           00140         movwf   TRISC, ACCESS
                      00141         
                      00142         ; [General IO]
001C72 9EF1           00143         bcf             INTCON2, NOT_RABPU, ACCESS      ; enable PORT A & B pullups per WPU registers
001C74 0E08           00144         movlw   1<<ANS3 ; ANS3 = RA4(Audio In)
001C76 6E7E           00145         movwf   ANSEL, ACCESS   ; enable digital input buffers for all non-analog inputs
001C78 6A7F           00146         clrf    ANSELH, ACCESS  ; enable digital input buffers for all non-analog inputs        
                      00147         
                      00148 ;**********************************************************************
                      00149 ; Function: void mootLoader_initUART()
                      00150 ;**********************************************************************
001C7A 0E0F           00151         movlw   15      ; 31.25K baud rate @ 32Mhz clock
001C7C 6EAF           00152         movwf   SPBRG, ACCESS
                      00153         ; Enable serial port
                      00154         ; Enable reception
001C7E 8EAB           00155         bsf             RCSTA, SPEN, ACCESS
001C80 88AB           00156         bsf             RCSTA, CREN, ACCESS
                      00157         ; Enable transmission
001C82 8AAC           00158         bsf             TXSTA, TXEN, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 208


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00159 
                      00160 ;**********************************************************************
                      00161 ; Function: void mootLoader_initTimer2()
                      00162 ;**********************************************************************
                      00163         ; Prescale 1:1
                      00164         ; Turn on Timer2
001C84 84CA           00165         bsf             T2CON, TMR2ON, ACCESS
                      00166         ; Reset and interrupt on match value
001C86 0EFF           00167         movlw   255
001C88 6ECB           00168         movwf   PR2, ACCESS     
                      00169 
                      00170 ;**********************************************************************
                      00171 ; Function: void mootLoader_initHeap()
                      00172 ;**********************************************************************
                      00173 
001C8A                00174 mootLoader_initHeap
001C8A EE22 F0FF      00175         lfsr    softwareStackPointerFSR, softwareStackBaseAddress
                      00176 
001C8E 0012           00177         return
                      00178         
                      00179 
                      00180         
                      00160         #include        "mootLoader_TX.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      mootLoader_TX_v0_2.asm                            *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 
                      00015 
                      00016 ;**********************************************************************
                      00017 ; INCLUDE FILES
                      00018 ;**********************************************************************
                      00019         
                      00020         #include        "../header/mootloader.h"
                      00121 ;**********************************************************************
                      00122 ;                                                                     *
                      00123 ;    Project:       deMIDulator                                       *
                      00124 ;    Filename:      eeprom.h                                          *
                      00125 ;    Date:                                                            *
                      00126 ;    File Version:                                                    *
                      00127 ;                                                                     *
                      00128 ;    Author:        Derek Enos                                        *
                      00129 ;    Company:                                                         *
                      00130 ;                                                                     * 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 209


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00131 ;                                                                     *
                      00132 ;**********************************************************************
                      00133 ;                                                                     *
                      00134 ;    Files required:                                                  *
                      00135 ;                                                                     *
                      00136 ;                                                                     *
                      00137 ;                                                                     *
                      00138 ;**********************************************************************
                      00139 
                      00140 #ifndef _MOOTLOADERH_
                      00141 #define _MOOTLOADERH_
                      00142 
                      00143 
                      00144 ; ******************* MOOTLOADER TRANSACTION DEFINES ***********************
                      00145 
                      00146 #define ML_BLOCK_ERASE_BYTE_SIZE                        64      ; must be multiple of ML_DATA_PAYLOAD_BY
                            TE_SIZE
                      00147 #define ML_DATA_PACKET_PAYLOAD_BYTE_SIZE        8
                      00148 
                      00149 #define ML_BLOCK_ERASE_IDLE_TIME_MS                     8
                      00150 #define ML_WRITE_IDLE_TIME_MS                           8
                      00151 #define ML_TRANS_SYNC_IDLE_TIME_MS                      32
                      00152 
                      00153 
                      00154 ; ******************* MOOTLOADER COMMAND BYTE DEFINES ***********************
                      00155 
                      00156 #define MIDI_VENDOR_ID                                          0x77
                      00157 #define MIDI_DEVICE_ID                                          0x1D
                      00158 
                      00159 #define ML_COMMAND_WRITE_PROGRAM_MEMORY         0x03
                      00160 #define ML_COMMAND_DATA_PAYLOAD                         0x01
                      00161 #define ML_COMMAND_DATA_PAYLOAD_COMPLETE        0x02
                      00162 #define ML_TRANSMITTER_RESETTING                        0x10
                      00163 #define ML_RECEIVER_RESET                                       0x11
                      00164 
                      00165 
                      00166 ; ******************* MOOTLOADER PACKET DEFINES ***********************
                      00167 
                      00168 #define ML_LARGE_PACKET_BYTE_SIZE               22
                      00169 
                      00170 
                      00171 ; ******************* mlFlags BIT DEFINES ***********************
                      00172 
                      00173 #define mlRxTransSyncFlag                                       0
                      00174 #define mlRxChecksumOk                                          1
                      00175 
                      00176 
                      00177 ;**********************************************************************
                      00178 ; MACROS
                      00179 ;**********************************************************************
                      00180 
                      00181 SEND_SYSEX_INTRO_NO_CHECK       MACRO
                      00182         movlw   0xF0
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 210


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00183         call    mootLoader_sendByte
                      00184         movlw   MIDI_VENDOR_ID
                      00185         call    mootLoader_sendByte
                      00186         movlw   MIDI_DEVICE_ID
                      00187         call    mootLoader_sendByte
                      00188         ENDM
                      00189 
                      00190 SEND_BYTE_START_CHECKSUM        MACRO
                      00191         movwf   mlChecksum, ACCESS
                      00192         call    mootLoader_sendByte
                      00193         ENDM
                      00194 
                      00195 SEND_BYTE_DO_CHECKSUM           MACRO
                      00196         xorwf   mlChecksum, f, ACCESS
                      00197         call    mootLoader_sendByte
                      00198         ENDM
                      00199 
                      00200 SPLIT_BYTE_THEN_SEND_DO_CHECKSUM        MACRO
                      00201         xorwf   mlChecksum, f, ACCESS
                      00202         call    mootLoader_sendAsNybbles
                      00203         ENDM
                      00204 
                      00205 SEND_CHECKSUM_CLEAR_RUN         MACRO
                      00206         movf    mlChecksum, w, ACCESS
                      00207         ; ensure that bit 7 is clear
                      00208         andlw   0x7f
                      00209         clrf    mlRunningChecksum, ACCESS
                      00210         call    mootLoader_sendByte
                      00211         ENDM
                      00212         
                      00213 SEND_CHECKSUM_DO_RUN            MACRO
                      00214         movf    mlChecksum, w, ACCESS
                      00215         ; ensure that bit 7 is clear
                      00216         andlw   0x7f
                      00217         xorwf   mlRunningChecksum, f, ACCESS
                      00218         call    mootLoader_sendByte
                      00219         ENDM
                      00220 
                      00221 SEND_RUNNING_CHECKSUM           MACRO
                      00222         movf    mlRunningChecksum, w, ACCESS
                      00223         ; ensure that bit 7 is clear
                      00224         andlw   0x7f
                      00225         call    mootLoader_sendByte
                      00226         ENDM
                      00227 
                      00228 IDLE_BLOCK_ERASE                        MACRO
                      00229         movlw   ML_BLOCK_ERASE_IDLE_TIME_MS
                      00230         call    mootLoader_wait
                      00231         ENDM
                      00232 
                      00233 IDLE_WRITE_WAIT                         MACRO
                      00234         movlw   ML_WRITE_IDLE_TIME_MS
                      00235         call    mootLoader_wait
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 211


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00236         ENDM
                      00237 
                      00238         
                      00239 #endif
                      00240 
                      00021 
                      00022         
                      00023 ;**********************************************************************
                      00024 ; LOCAL VARIABLES
                      00025 ;**********************************************************************
                      00026 
                      00027 ; all variables defined in mootLoader.asm
                      00028 
                      00029 
                      00030 ;**********************************************************************
                      00031 ; mootLoader Trasmitter Code Begin
                      00032 ;**********************************************************************
                      00033 
001C90                00034 mootLoader_transmitter
                      00035         ; shut off sine LED leaving square and sample LEDs illuminated to communicate current mode to us
                            er
                      00036         LED_SINE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
001C90 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                      00037 
                      00038         ; start program memory broadcast from address USER_CODE_START_ADDRESS
                      00039         ; bootloader is not allowed to touch first 64-byte block to ensure that user will not
                      00040         ; corrupt jump to bootloader on reset
001C92 0E40           00041         movlw   USER_CODE_START_ADDRESS
001C94 6E03           00042         movwf   mlStartAddress + 0, ACCESS
001C96 6A04           00043         clrf    mlStartAddress + 1, ACCESS
001C98 6A05           00044         clrf    mlStartAddress + 2, ACCESS
001C9A 6A06           00045         clrf    mlStartAddress + 3, ACCESS
                      00046 
                      00047         ; requesting full user application code Program Memory so...
                      00048         ; length = (USER_CODE_END_ADDRESS - USER_CODE_START_ADDRESS) aligned to 64-byte boundary
001C9C 0E40           00049         movlw   USER_CODE_START_ADDRESS
                      00050         ; WREG = low(USER_CODE_END_ADDRESS) - USER_CODE_START_ADDRESS
001C9E 08FE           00051         sublw   low(USER_CODE_END_ADDRESS)
001CA0 6E07           00052         movwf   mlPayloadLength + 0, ACCESS
                      00053         
001CA2 0E1B           00054         movlw   high(USER_CODE_END_ADDRESS)
001CA4 6E08           00055         movwf   mlPayloadLength + 1, ACCESS
                      00056         ; if result of low(USER_CODE_END_ADDRESS) - USER_CODE_START_ADDRESS <0 then decrement
001CA6 A0D8           00057         btfss   STATUS, C, ACCESS
001CA8 0608           00058         decf    mlPayloadLength + 1, f, ACCESS
                      00059         
001CAA 0E00           00060         movlw   upper(USER_CODE_END_ADDRESS)
001CAC 6E09           00061         movwf   mlPayloadLength + 2, ACCESS
                      00062         ; if result of (decf    mlPayloadLength + 1, f, ACCESS) <0 then decrement
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 212


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001CAE A0D8           00063         btfss   STATUS, C, ACCESS
001CB0 0609           00064         decf    mlPayloadLength + 2, f, ACCESS
001CB2 6A0A           00065         clrf    mlPayloadLength + 3, ACCESS
                      00066 
                      00067         ; if mlPayloadLength is not 64-byte aligned then align it
001CB4 0E3F           00068         movlw   0x3f
001CB6 1407           00069         andwf   mlPayloadLength + 0, w, ACCESS
                      00070         ; it's aligned to skip alignment
001CB8 E0??           00071         bz              mootLoader_xmitStartWrite
                      00072         ; clear 6 least significant bits
001CBA 0EC0           00073         movlw   0xC0
001CBC 1607           00074         andwf   mlPayloadLength + 0, f, ACCESS
                      00075         ; add 64 to mlPayloadLength
001CBE 0E40           00076         movlw   0x40
001CC0 2607           00077         addwf   mlPayloadLength + 0, f, ACCESS
001CC2 0E00           00078         movlw   0
001CC4 2208           00079         addwfc  mlPayloadLength + 1, f, ACCESS
001CC6 2209           00080         addwfc  mlPayloadLength + 2, f, ACCESS
001CC8 220A           00081         addwfc  mlPayloadLength + 3, f, ACCESS
                      00082 
001CCA                00083 mootLoader_xmitStartWrite
001CCA D???           00084         rcall   mootLoader_xmitWriteProgramMemory
001CCC D???           00085         bra     mootLoader_exit 
                      00086 
                      00087 
                      00088 ;**********************************************************************
                      00089 ; mootLoader Trasmitter: Write Program Memory
                      00090 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitWriteProgramMemory)
001CCE                00091 mootLoader_xmitWriteProgramMemory
                      00092         PUSH_R  FSR0L
001CCE CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00093         PUSH_R  FSR0H
001CD2 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00094 
                      00095         ;****************************************
                      00096         ; send Write Program Memory packet
001CD6 D???           00097         rcall   mootLoader_xmitSendWpmPacket
                      00098         ;****************************************
                      00099 
                      00100         ;****************************************
                      00101         ; send Complete Data Payload
                      00102         ; init table pointer with program memory start address
001CD8 C003 FFF6      00103         movff   mlStartAddress + 0, TBLPTRL
001CDC C004 FFF7      00104         movff   mlStartAddress + 1, TBLPTRH
001CE0 C005 FFF8      00105         movff   mlStartAddress + 2, TBLPTRU
                      00106 
001CE4                00107 mootLoader_xmitWpmBlockErase
                      00108         IDLE_BLOCK_ERASE        
001CE4 0E08               M         movlw   ML_BLOCK_ERASE_IDLE_TIME_MS
001CE6 EC?? F???          M         call    mootLoader_wait
                      00109         ; load erase block size counter
001CEA 0E40           00110         movlw   ML_BLOCK_ERASE_BYTE_SIZE
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 213


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001CEC 6E18           00111         movwf   mlBlockEraseBytesRemaining, ACCESS
                      00112 
001CEE                00113 mootLoader_xmitWpmNextPayload
                      00114         ;****************************************
                      00115         ; send single Data Payload packet
                      00116         ; load mlDataPayloadBuffer with bytes to send
001CEE EE00 F00B      00117         lfsr    FSR0, mlDataPayloadBuffer
                      00118         ; load counter with num of bytes remaining in payload packet
001CF2 0E08           00119         movlw   ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
001CF4 6E13           00120         movwf   mlCount, ACCESS
001CF6                00121 mootLoader_xmitWpmByteLp
                      00122         ; read program memory location and increment
001CF6 0009           00123         tblrd*+
                      00124         ; save value to mlDataPayloadBuffer
001CF8 CFF5 FFEE      00125         movff   TABLAT, POSTINC0
                      00126         ; check if mlDataPayloadBuffer is ready to go
001CFC 0613           00127         decf    mlCount, f, ACCESS
001CFE E1??           00128         bnz             mootLoader_xmitWpmByteLp
                      00129         ; send the packet
001D00 D???           00130         rcall   mootLoader_xmitSendDataPayloadPacket
                      00131         ;****************************************
                      00132 
                      00133         ; do write wait after every packet transfer
                      00134         IDLE_WRITE_WAIT
001D02 0E08               M         movlw   ML_WRITE_IDLE_TIME_MS
001D04 EC?? F???          M         call    mootLoader_wait
                      00135         
                      00136         ; check if entire payload has been transferred
                      00137         ; do (mlPayloadLength -= ML_DATA_PACKET_PAYLOAD_BYTE_SIZE)
001D08 0E08           00138         movlw   ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
001D0A 5E07           00139         subwf   mlPayloadLength + 0, f, ACCESS
001D0C 0E00           00140         movlw   0
001D0E 5A08           00141         subwfb  mlPayloadLength + 1, f, ACCESS  
001D10 5A09           00142         subwfb  mlPayloadLength + 2, f, ACCESS  
001D12 5A0A           00143         subwfb  mlPayloadLength + 3, f, ACCESS
                      00144         ; if mlPayloadLength == 0 then entire payload has been transferred
                      00145         ; if mlPayloadLength != 0 then check if we have to wait for another block erase
001D14 5207           00146         movf    mlPayloadLength + 0, f, ACCESS
001D16 E1??           00147         bnz             mootLoader_xmitWpmCheckBlockErase
001D18 5208           00148         movf    mlPayloadLength + 1, f, ACCESS
001D1A E1??           00149         bnz             mootLoader_xmitWpmCheckBlockErase
001D1C 5209           00150         movf    mlPayloadLength + 2, f, ACCESS
001D1E E1??           00151         bnz             mootLoader_xmitWpmCheckBlockErase
001D20 520A           00152         movf    mlPayloadLength + 3, f, ACCESS
001D22 E1??           00153         bnz             mootLoader_xmitWpmCheckBlockErase
001D24 D???           00154         bra             mootLoader_xmitWpmSendPayloadComplete
                      00155 
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitWpmCheckBlockErase)
001D26                00156 mootLoader_xmitWpmCheckBlockErase
                      00157         ; check if we need to wait for a block erase
                      00158         ; do (mlBlockEraseBytesRemaining - ML_DATA_PACKET_PAYLOAD_BYTE_SIZE)
001D26 0E08           00159         movlw   ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
001D28 5E18           00160         subwf   mlBlockEraseBytesRemaining, f, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 214


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00161         ; if 0 then delay for block erase
001D2A E0??           00162         bz              mootLoader_xmitWpmBlockErase
001D2C D???           00163         bra             mootLoader_xmitWpmNextPayload
                      00164         
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitWpmSendPayloadComplete)
001D2E                00165 mootLoader_xmitWpmSendPayloadComplete
                      00166         ; mlPayloadLength == 0 so send Data Payload Complete packet
                      00167         ;****************************************
                      00168         ; send Data Payload Complete packet
001D2E D???           00169         rcall   mootLoader_xmitSendDataPayloadCompletePacket
                      00170         ;****************************************
                      00171 
                      00172         ; transaction complete
                      00173         POP_R   FSR0H
001D30 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00174         POP_R   FSR0L
001D34 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
001D38 0012           00175         return
                      00176                 
                      00177                         
                      00178 ;**********************************************************************
                      00179 ; mootLoader Trasmitter: send Write Program Memory packet
                      00180 ;**********************************************************************
001D3A                00181 mootLoader_xmitSendWpmPacket
                      00182 
                      00183         ;****************************************
                      00184         ; send SysEx intro (0xF0, vendorID, deviceID)
                      00185         SEND_SYSEX_INTRO_NO_CHECK
001D3A 0EF0               M         movlw   0xF0
001D3C EC?? F???          M         call    mootLoader_sendByte
001D40 0E77               M         movlw   MIDI_VENDOR_ID
001D42 EC?? F???          M         call    mootLoader_sendByte
001D46 0E1D               M         movlw   MIDI_DEVICE_ID
001D48 EC?? F???          M         call    mootLoader_sendByte
                      00186         ;****************************************
                      00187         
                      00188         ;****************************************
                      00189         ; send COMMAND
001D4C 0E03           00190         movlw   ML_COMMAND_WRITE_PROGRAM_MEMORY
                      00191         SEND_BYTE_START_CHECKSUM
001D4E 6E01               M         movwf   mlChecksum, ACCESS
001D50 EC?? F???          M         call    mootLoader_sendByte
                      00192         ;****************************************
                      00193 
                      00194         ;****************************************
                      00195         ; send START ADDRESS
001D54 5003           00196         movf    mlStartAddress + 0, w, ACCESS
                      00197         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001D56 1A01               M         xorwf   mlChecksum, f, ACCESS
001D58 EC?? F???          M         call    mootLoader_sendAsNybbles
001D5C 5004           00198         movf    mlStartAddress + 1, w, ACCESS
                      00199         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001D5E 1A01               M         xorwf   mlChecksum, f, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 215


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001D60 EC?? F???          M         call    mootLoader_sendAsNybbles
001D64 5005           00200         movf    mlStartAddress + 2, w, ACCESS
                      00201         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001D66 1A01               M         xorwf   mlChecksum, f, ACCESS
001D68 EC?? F???          M         call    mootLoader_sendAsNybbles
001D6C 5006           00202         movf    mlStartAddress + 3, w, ACCESS
                      00203         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001D6E 1A01               M         xorwf   mlChecksum, f, ACCESS
001D70 EC?? F???          M         call    mootLoader_sendAsNybbles
                      00204         ;****************************************
                      00205 
                      00206         ;****************************************
                      00207         ; send PAYLOAD LENGTH
001D74 5007           00208         movf    mlPayloadLength + 0, w, ACCESS
                      00209         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001D76 1A01               M         xorwf   mlChecksum, f, ACCESS
001D78 EC?? F???          M         call    mootLoader_sendAsNybbles
001D7C 5008           00210         movf    mlPayloadLength + 1, w, ACCESS
                      00211         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001D7E 1A01               M         xorwf   mlChecksum, f, ACCESS
001D80 EC?? F???          M         call    mootLoader_sendAsNybbles
001D84 5009           00212         movf    mlPayloadLength + 2, w, ACCESS
                      00213         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001D86 1A01               M         xorwf   mlChecksum, f, ACCESS
001D88 EC?? F???          M         call    mootLoader_sendAsNybbles
001D8C 500A           00214         movf    mlPayloadLength + 3, w, ACCESS
                      00215         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001D8E 1A01               M         xorwf   mlChecksum, f, ACCESS
001D90 EC?? F???          M         call    mootLoader_sendAsNybbles
                      00216         ;****************************************
                      00217         
                      00218         ;****************************************
                      00219         ; send CHECKSUM
                      00220         SEND_CHECKSUM_CLEAR_RUN
001D94 5001               M         movf    mlChecksum, w, ACCESS
                          M         ; ensure that bit 7 is clear
001D96 0B7F               M         andlw   0x7f
001D98 6A02               M         clrf    mlRunningChecksum, ACCESS
001D9A EC?? F???          M         call    mootLoader_sendByte
                      00221         ;****************************************
                      00222 
                      00223         ;****************************************
                      00224         ; send End of SysEx
001D9E 0EF7           00225         movlw   0xF7
001DA0 D???           00226         rcall   mootLoader_sendByte
                      00227         ;****************************************
                      00228         
001DA2 0012           00229         return  
                      00230         
                      00231         
                      00232 ;**********************************************************************
                      00233 ; mootLoader Trasmitter: send Data Payload Packet
                      00234 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 216


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[208]: Label truncated at 32 characters. (mootLoader_xmitSendDataPayloadPacket)
001DA4                00235 mootLoader_xmitSendDataPayloadPacket
                      00236 
                      00237         PUSH_R  FSR0L
001DA4 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00238         PUSH_R  FSR0H
001DA8 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
001DAC EE00 F00B      00239         lfsr    FSR0, mlDataPayloadBuffer
                      00240                 
                      00241         ;****************************************
                      00242         ; send SysEx intro (0xF0, vendorID, deviceID)
                      00243         SEND_SYSEX_INTRO_NO_CHECK
001DB0 0EF0               M         movlw   0xF0
001DB2 EC?? F???          M         call    mootLoader_sendByte
001DB6 0E77               M         movlw   MIDI_VENDOR_ID
001DB8 EC?? F???          M         call    mootLoader_sendByte
001DBC 0E1D               M         movlw   MIDI_DEVICE_ID
001DBE EC?? F???          M         call    mootLoader_sendByte
                      00244         ;****************************************
                      00245         
                      00246         ;****************************************
                      00247         ; send COMMAND
001DC2 0E01           00248         movlw   ML_COMMAND_DATA_PAYLOAD
                      00249         SEND_BYTE_START_CHECKSUM
001DC4 6E01               M         movwf   mlChecksum, ACCESS
001DC6 EC?? F???          M         call    mootLoader_sendByte
                      00250         ;****************************************
                      00251 
                      00252         ;****************************************
                      00253         ; send PAYLOAD bytes
001DCA 0E08           00254         movlw   ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
001DCC 6E19           00255         movwf   mlDatPackIntByteCount, ACCESS
001DCE                00256 mootLoader_xmitSdppLp
                      00257         ; read byte
001DCE 50EF           00258         movf    INDF0, w, ACCESS
                      00259         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001DD0 1A01               M         xorwf   mlChecksum, f, ACCESS
001DD2 EC?? F???          M         call    mootLoader_sendAsNybbles
                      00260         ; increment pointer
001DD6 50EE           00261         movf    POSTINC0, w, ACCESS
                      00262         ; check if Data Payload packet is complete
001DD8 0619           00263         decf    mlDatPackIntByteCount, f, ACCESS
001DDA E1??           00264         bnz             mootLoader_xmitSdppLp
                      00265         ;****************************************
                      00266 
                      00267         ;****************************************
                      00268         ; send CHECKSUM
                      00269         SEND_CHECKSUM_DO_RUN
001DDC 5001               M         movf    mlChecksum, w, ACCESS
                          M         ; ensure that bit 7 is clear
001DDE 0B7F               M         andlw   0x7f
001DE0 1A02               M         xorwf   mlRunningChecksum, f, ACCESS
001DE2 EC?? F???          M         call    mootLoader_sendByte
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 217


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00270         ;****************************************
                      00271 
                      00272         ;****************************************
                      00273         ; send End of SysEx
001DE6 0EF7           00274         movlw   0xF7
001DE8 D???           00275         rcall   mootLoader_sendByte
                      00276         ;****************************************
                      00277 
                      00278         POP_R   FSR0H
001DEA CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00279         POP_R   FSR0L
001DEE CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
001DF2 0012           00280         return
                      00281 
                      00282 
                      00283 ;**********************************************************************
                      00284 ; mootLoader Trasmitter: send Data Payload Complete Packet
                      00285 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitSendDataPayloadCompletePacket)
001DF4                00286 mootLoader_xmitSendDataPayloadCompletePacket
                      00287         ;****************************************
                      00288         ; send SysEx intro (0xF0, vendorID, deviceID)
                      00289         SEND_SYSEX_INTRO_NO_CHECK
001DF4 0EF0               M         movlw   0xF0
001DF6 EC?? F???          M         call    mootLoader_sendByte
001DFA 0E77               M         movlw   MIDI_VENDOR_ID
001DFC EC?? F???          M         call    mootLoader_sendByte
001E00 0E1D               M         movlw   MIDI_DEVICE_ID
001E02 EC?? F???          M         call    mootLoader_sendByte
                      00290         ;****************************************
                      00291         
                      00292         ;****************************************
                      00293         ; send COMMAND
001E06 0E02           00294         movlw   ML_COMMAND_DATA_PAYLOAD_COMPLETE
                      00295         SEND_BYTE_START_CHECKSUM
001E08 6E01               M         movwf   mlChecksum, ACCESS
001E0A EC?? F???          M         call    mootLoader_sendByte
                      00296         ;****************************************
                      00297 
001E0E 0E00           00298         movlw   0x00
                      00299         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001E10 1A01               M         xorwf   mlChecksum, f, ACCESS
001E12 EC?? F???          M         call    mootLoader_sendAsNybbles
001E16 0E00           00300         movlw   0x00
                      00301         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001E18 1A01               M         xorwf   mlChecksum, f, ACCESS
001E1A EC?? F???          M         call    mootLoader_sendAsNybbles
001E1E 0E00           00302         movlw   0x00
                      00303         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001E20 1A01               M         xorwf   mlChecksum, f, ACCESS
001E22 EC?? F???          M         call    mootLoader_sendAsNybbles
001E26 0E00           00304         movlw   0x00
                      00305         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 218


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001E28 1A01               M         xorwf   mlChecksum, f, ACCESS
001E2A EC?? F???          M         call    mootLoader_sendAsNybbles
001E2E 0E00           00306         movlw   0x00
                      00307         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001E30 1A01               M         xorwf   mlChecksum, f, ACCESS
001E32 EC?? F???          M         call    mootLoader_sendAsNybbles
001E36 0E00           00308         movlw   0x00
                      00309         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001E38 1A01               M         xorwf   mlChecksum, f, ACCESS
001E3A EC?? F???          M         call    mootLoader_sendAsNybbles
001E3E 0E00           00310         movlw   0x00
                      00311         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001E40 1A01               M         xorwf   mlChecksum, f, ACCESS
001E42 EC?? F???          M         call    mootLoader_sendAsNybbles
001E46 0E00           00312         movlw   0x00
                      00313         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001E48 1A01               M         xorwf   mlChecksum, f, ACCESS
001E4A EC?? F???          M         call    mootLoader_sendAsNybbles
                      00314         SEND_RUNNING_CHECKSUM
001E4E 5002               M         movf    mlRunningChecksum, w, ACCESS
                          M         ; ensure that bit 7 is clear
001E50 0B7F               M         andlw   0x7f
001E52 EC?? F???          M         call    mootLoader_sendByte
                      00315 
                      00316         ;****************************************
                      00317         ; send End of SysEx
001E56 0EF7           00318         movlw   0xF7
001E58 D???           00319         rcall   mootLoader_sendByte
                      00320         ;****************************************       
                      00321         
001E5A 0012           00322         return
                      00323         
                      00324 
                      00325 ;**********************************************************************
                      00326 ; Local Function: void mootLoader_sendAsNybbles(WREG)
                      00327 ;**********************************************************************
001E5C                00328 mootLoader_sendAsNybbles
                      00329         ; save to tmp variable
001E5C 6E16           00330         movwf   mlNybbleSplitTmp, ACCESS
                      00331         ; mask out low nybble and send
001E5E 0B0F           00332         andlw   0x0F
001E60 D???           00333         rcall   mootLoader_sendByte
                      00334         ; swap nybbles, mask out low nybble then send
001E62 3816           00335         swapf   mlNybbleSplitTmp, w, ACCESS
001E64 0B0F           00336         andlw   0x0F
001E66 D???           00337         rcall   mootLoader_sendByte     
001E68 0012           00338         return
                      00339 
                      00340 
                      00341 ;**********************************************************************
                      00342 ; Local Function: void mootLoader_sendByte(WREG)
                      00343 ;**********************************************************************
001E6A                00344 mootLoader_sendByte
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 219


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00345         ; check if TXREG is clear, wait if not
001E6A A89E           00346         btfss   PIR1, TXIF, ACCESS
001E6C D???           00347         bra             mootLoader_sendByte
001E6E 6EAD           00348         movwf   TXREG, ACCESS
001E70 0012           00349         return
                      00350 
                      00351 
                      00352 ;**********************************************************************
                      00353 ; mootLoader Trasmitter: Wait(WREG = WAIT_TIME_MS)
                      00354 ;**********************************************************************
001E72                00355 mootLoader_wait
                      00356         ; exit if delay time request is 0
001E72 52E8           00357         movf    WREG, f, ACCESS
001E74 E0??           00358         bz              mootLoader_waitExit
                      00359         
                      00360         ; TMR2 overflow period (32uS) * 32 = 1.024mS
                      00361         ; so do PRODH:L = WREG * 32
001E76 6EF3           00362         movwf   PRODL, ACCESS
001E78 0E20           00363         movlw   32
001E7A 02F3           00364         mulwf   PRODL, ACCESS
                      00365 
                      00366         ; reset timer
001E7C 6ACC           00367         clrf    TMR2, ACCESS
001E7E                00368 mootLoader_waitLp
                      00369         ; clear interrupt flag and wait for timer overflow
001E7E 929E           00370         bcf             PIR1, TMR2IF, ACCESS    
001E80                00371 mootLoader_waitIntLp
001E80 A29E           00372         btfss   PIR1, TMR2IF, ACCESS
001E82 D???           00373         bra             mootLoader_waitIntLp
                      00374         ; unintelligently decrement PRODH:L counter
001E84 06F3           00375         decf    PRODL, f, ACCESS
                      00376         ; skip if result was positive
001E86 A0D8           00377         btfss   STATUS, C, ACCESS
001E88 06F4           00378         decf    PRODH, f, ACCESS
                      00379         ; test PRODH:L, exit if 0
001E8A 52F3           00380         movf    PRODL, f, ACCESS
001E8C E1??           00381         bnz             mootLoader_waitLp
001E8E 52F4           00382         movf    PRODH, f, ACCESS
001E90 E1??           00383         bnz             mootLoader_waitLp
001E92                00384 mootLoader_waitExit     
001E92 0012           00385         return
                      00386 
                      00387 
                      00161         #include        "mootLoader_RX.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      mootLoader_RX_v0_2.asm                            *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 220


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 
                      00015 
                      00016 ;**********************************************************************
                      00017 ; INCLUDE FILES
                      00018 ;**********************************************************************
                      00019         
                      00020         #include        "../header/mootloader.h"
                      00241 ;**********************************************************************
                      00242 ;                                                                     *
                      00243 ;    Project:       deMIDulator                                       *
                      00244 ;    Filename:      eeprom.h                                          *
                      00245 ;    Date:                                                            *
                      00246 ;    File Version:                                                    *
                      00247 ;                                                                     *
                      00248 ;    Author:        Derek Enos                                        *
                      00249 ;    Company:                                                         *
                      00250 ;                                                                     * 
                      00251 ;                                                                     *
                      00252 ;**********************************************************************
                      00253 ;                                                                     *
                      00254 ;    Files required:                                                  *
                      00255 ;                                                                     *
                      00256 ;                                                                     *
                      00257 ;                                                                     *
                      00258 ;**********************************************************************
                      00259 
                      00260 #ifndef _MOOTLOADERH_
                      00261 #define _MOOTLOADERH_
                      00262 
                      00263 
                      00264 ; ******************* MOOTLOADER TRANSACTION DEFINES ***********************
                      00265 
                      00266 #define ML_BLOCK_ERASE_BYTE_SIZE                        64      ; must be multiple of ML_DATA_PAYLOAD_BY
                            TE_SIZE
                      00267 #define ML_DATA_PACKET_PAYLOAD_BYTE_SIZE        8
                      00268 
                      00269 #define ML_BLOCK_ERASE_IDLE_TIME_MS                     8
                      00270 #define ML_WRITE_IDLE_TIME_MS                           8
                      00271 #define ML_TRANS_SYNC_IDLE_TIME_MS                      32
                      00272 
                      00273 
                      00274 ; ******************* MOOTLOADER COMMAND BYTE DEFINES ***********************
                      00275 
                      00276 #define MIDI_VENDOR_ID                                          0x77
                      00277 #define MIDI_DEVICE_ID                                          0x1D
                      00278 
                      00279 #define ML_COMMAND_WRITE_PROGRAM_MEMORY         0x03
                      00280 #define ML_COMMAND_DATA_PAYLOAD                         0x01
                      00281 #define ML_COMMAND_DATA_PAYLOAD_COMPLETE        0x02
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 221


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00282 #define ML_TRANSMITTER_RESETTING                        0x10
                      00283 #define ML_RECEIVER_RESET                                       0x11
                      00284 
                      00285 
                      00286 ; ******************* MOOTLOADER PACKET DEFINES ***********************
                      00287 
                      00288 #define ML_LARGE_PACKET_BYTE_SIZE               22
                      00289 
                      00290 
                      00291 ; ******************* mlFlags BIT DEFINES ***********************
                      00292 
                      00293 #define mlRxTransSyncFlag                                       0
                      00294 #define mlRxChecksumOk                                          1
                      00295 
                      00296 
                      00297 ;**********************************************************************
                      00298 ; MACROS
                      00299 ;**********************************************************************
                      00300 
                      00301 SEND_SYSEX_INTRO_NO_CHECK       MACRO
                      00302         movlw   0xF0
                      00303         call    mootLoader_sendByte
                      00304         movlw   MIDI_VENDOR_ID
                      00305         call    mootLoader_sendByte
                      00306         movlw   MIDI_DEVICE_ID
                      00307         call    mootLoader_sendByte
                      00308         ENDM
                      00309 
                      00310 SEND_BYTE_START_CHECKSUM        MACRO
                      00311         movwf   mlChecksum, ACCESS
                      00312         call    mootLoader_sendByte
                      00313         ENDM
                      00314 
                      00315 SEND_BYTE_DO_CHECKSUM           MACRO
                      00316         xorwf   mlChecksum, f, ACCESS
                      00317         call    mootLoader_sendByte
                      00318         ENDM
                      00319 
                      00320 SPLIT_BYTE_THEN_SEND_DO_CHECKSUM        MACRO
                      00321         xorwf   mlChecksum, f, ACCESS
                      00322         call    mootLoader_sendAsNybbles
                      00323         ENDM
                      00324 
                      00325 SEND_CHECKSUM_CLEAR_RUN         MACRO
                      00326         movf    mlChecksum, w, ACCESS
                      00327         ; ensure that bit 7 is clear
                      00328         andlw   0x7f
                      00329         clrf    mlRunningChecksum, ACCESS
                      00330         call    mootLoader_sendByte
                      00331         ENDM
                      00332         
                      00333 SEND_CHECKSUM_DO_RUN            MACRO
                      00334         movf    mlChecksum, w, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 222


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00335         ; ensure that bit 7 is clear
                      00336         andlw   0x7f
                      00337         xorwf   mlRunningChecksum, f, ACCESS
                      00338         call    mootLoader_sendByte
                      00339         ENDM
                      00340 
                      00341 SEND_RUNNING_CHECKSUM           MACRO
                      00342         movf    mlRunningChecksum, w, ACCESS
                      00343         ; ensure that bit 7 is clear
                      00344         andlw   0x7f
                      00345         call    mootLoader_sendByte
                      00346         ENDM
                      00347 
                      00348 IDLE_BLOCK_ERASE                        MACRO
                      00349         movlw   ML_BLOCK_ERASE_IDLE_TIME_MS
                      00350         call    mootLoader_wait
                      00351         ENDM
                      00352 
                      00353 IDLE_WRITE_WAIT                         MACRO
                      00354         movlw   ML_WRITE_IDLE_TIME_MS
                      00355         call    mootLoader_wait
                      00356         ENDM
                      00357 
                      00358         
                      00359 #endif
                      00360 
                      00021 
                      00022         
                      00023 ;**********************************************************************
                      00024 ; LOCAL VARIABLES
                      00025 ;**********************************************************************
                      00026 
                      00027 ; all variables defined in mootLoader_v0_2.asm
                      00028 
                      00029 
                      00030 ;**********************************************************************
                      00031 ; mootLoader Receiver Code Begin
                      00032 ;**********************************************************************
001E94                00033 mootLoader_receiver
                      00034         ; communicate mode to user
                      00035         ; shut off sample LED leaving sine and square LEDs illuminated to communicate current mode to us
                            er
                      00036         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
001E94 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
                      00037 
Warning[208]: Label truncated at 32 characters. (mootLoader_receiverListenForTrans)
001E96                00038 mootLoader_receiverListenForTrans
001E96 D???           00039         rcall   mootLoader_rxReceiveNextPacket
                      00040         ; jump to command handler
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 223


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001E98 0E03           00041         movlw   ML_COMMAND_WRITE_PROGRAM_MEMORY
001E9A 181E           00042         xorwf   mlRxReceivedPacket + 3, w, ACCESS
001E9C E0??           00043         bz              mootLoader_rxWriteProgramMemoryHandler
001E9E 0E11           00044         movlw   ML_RECEIVER_RESET
001EA0 181E           00045         xorwf   mlRxReceivedPacket + 3, w, ACCESS
001EA2 D???           00046         bra     mootLoader_rxReceiverResetHandler
                      00047         ; unhandled command so listen for next trans sync
001EA4 D???           00048         bra             mootLoader_receiverListenForTrans
                      00049                 
001EA6 D???           00050         bra     mootLoader_exit
                      00051 
                      00052 
                      00053 ;**********************************************************************
                      00054 ; Local Function: void mootLoader_rxWriteProgramMemoryHandler()
                      00055 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_rxWriteProgramMemoryHandler)
001EA8                00056 mootLoader_rxWriteProgramMemoryHandler
                      00057         ; save write start address
001EA8 C01F F003      00058         movff   mlRxReceivedPacket + 4, mlStartAddress + 0
001EAC C021 F004      00059         movff   mlRxReceivedPacket + 6, mlStartAddress + 1
001EB0 C023 F005      00060         movff   mlRxReceivedPacket + 8, mlStartAddress + 2
001EB4 C025 F006      00061         movff   mlRxReceivedPacket + 10, mlStartAddress + 3
                      00062         ; save payload length
001EB8 C027 F007      00063         movff   mlRxReceivedPacket + 12, mlPayloadLength + 0
001EBC C029 F008      00064         movff   mlRxReceivedPacket + 14, mlPayloadLength + 1
001EC0 C02B F009      00065         movff   mlRxReceivedPacket + 16, mlPayloadLength + 2
001EC4 C02D F00A      00066         movff   mlRxReceivedPacket + 18, mlPayloadLength + 3
                      00067         ; test checksum, exit if bad
001EC8 D???           00068         rcall   mootloader_rxTestSinglePacketChecksum
001ECA A215           00069         btfss   mlFlags, mlRxChecksumOk, ACCESS
001ECC D???           00070         bra             mootLoader_signalErrorA
                      00071         
                      00072         ; load table pointer with start address
001ECE C003 FFF6      00073         movff   mlStartAddress + 0, TBLPTRL
001ED2 C004 FFF7      00074         movff   mlStartAddress + 1, TBLPTRH
001ED6 C005 FFF8      00075         movff   mlStartAddress + 2, TBLPTRU
                      00076 
001EDA                00077 mootLoader_rxWpmhBlockErase
                      00078         ; point to Flash Program Memory
001EDA 8EA6           00079         bsf             EECON1, EEPGD, ACCESS
                      00080         ; access Flash Program Memory
001EDC 9CA6           00081         bcf             EECON1, CFGS, ACCESS
                      00082         ; enable write to memory
001EDE 84A6           00083         bsf             EECON1, WREN, ACCESS
                      00084         ; enable erase operation
001EE0 88A6           00085         bsf             EECON1, FREE, ACCESS
                      00086         ; do require sequence
001EE2 0E55           00087         movlw   0x55
001EE4 6EA7           00088         movwf   EECON2, ACCESS
001EE6 0EAA           00089         movlw   0xAA
001EE8 6EA7           00090         movwf   EECON2, ACCESS
                      00091         ; start write, CPU will stall
001EEA 82A6           00092         bsf             EECON1, WR, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 224


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00093         ; dummy read decrement to reset TBLPTR. Don't know why this is necessary but sure enough...
                      00094         ; without it all my writes were off by one address. Is included in datasheet example code
001EEC 000A           00095         tblrd*-
                      00096                 
                      00097         ; get next packet
001EEE                00098 mootLoader_rxWpmhGetNextPacket
001EEE D???           00099         rcall   mootLoader_rxReceiveNextPacket
                      00100         
                      00101         ; toggle all LEDs to indicate activity
                      00102         LED_ALL_TOGGLE
                          M         LED_SINE_TOGGLE
001EF0 768B               M         btg             LATC, RC3, ACCESS       ; SINE LED
                          M         LED_SQUARE_TOGGLE
001EF2 788B               M         btg             LATC, RC4, ACCESS       ; SQUARE LED
                          M         LED_SAMPLE_TOGGLE
001EF4 7A89               M         btg             LATA, RA5, ACCESS       ; SAMPLE LED
                      00103         
                      00104         ; if data payload complete then reset device
001EF6 0E02           00105         movlw   ML_COMMAND_DATA_PAYLOAD_COMPLETE
001EF8 181E           00106         xorwf   mlRxReceivedPacket + 3, w, ACCESS
001EFA E0??           00107         bz              mootLoader_rxReceiverResetHandler
                      00108         ; if data payload then confirm checksum and then write data
001EFC 0E01           00109         movlw   ML_COMMAND_DATA_PAYLOAD
001EFE 181E           00110         xorwf   mlRxReceivedPacket + 3, w, ACCESS
                      00111         ; if not data payload then exit with error
001F00 E1??           00112         bnz             mootLoader_signalErrorB
                      00113         ; is data payload so test checksum
001F02 D???           00114         rcall   mootloader_rxTestSinglePacketChecksum
001F04 A215           00115         btfss   mlFlags, mlRxChecksumOk, ACCESS
                      00116         ; checksum bad so exit with error
001F06 D???           00117         bra             mootLoader_signalErrorC
                      00118         ; everything is ok so write the payload
                      00119         
                      00120         ; write payload to holding registers
001F08 C01F FFF5      00121         movff   mlRxReceivedPacket + 4, TABLAT
001F0C 000F           00122         tblwt+*
001F0E C021 FFF5      00123         movff   mlRxReceivedPacket + 6, TABLAT
001F12 000F           00124         tblwt+*
001F14 C023 FFF5      00125         movff   mlRxReceivedPacket + 8, TABLAT
001F18 000F           00126         tblwt+*
001F1A C025 FFF5      00127         movff   mlRxReceivedPacket + 10, TABLAT
001F1E 000F           00128         tblwt+*
001F20 C027 FFF5      00129         movff   mlRxReceivedPacket + 12, TABLAT
001F24 000F           00130         tblwt+*
001F26 C029 FFF5      00131         movff   mlRxReceivedPacket + 14, TABLAT
001F2A 000F           00132         tblwt+*
001F2C C02B FFF5      00133         movff   mlRxReceivedPacket + 16, TABLAT
001F30 000F           00134         tblwt+*
001F32 C02D FFF5      00135         movff   mlRxReceivedPacket + 18, TABLAT
001F36 000F           00136         tblwt+*
                      00137                 
                      00138         ; write holding register to flash memory
                      00139         ; point to Flash Program Memory
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 225


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001F38 8EA6           00140         bsf             EECON1, EEPGD, ACCESS
                      00141         ; access Flash Program Memory
001F3A 9CA6           00142         bcf             EECON1, CFGS, ACCESS
                      00143         ; enable write to memory
001F3C 84A6           00144         bsf             EECON1, WREN, ACCESS
                      00145         ; do require sequence
001F3E 0E55           00146         movlw   0x55
001F40 6EA7           00147         movwf   EECON2, ACCESS
001F42 0EAA           00148         movlw   0xAA
001F44 6EA7           00149         movwf   EECON2, ACCESS
                      00150         ; start write, CPU will stall
001F46 82A6           00151         bsf             EECON1, WR, ACCESS      
                      00152         
                      00153 ; DEBUG
                      00154 ;       movlw   0
                      00155 ;       call    mootloader_rxWriteRxPacketToEE
                      00156 ;       bra             mootLoader_rxWpmhExit
                      00157 
                      00158         ; do block erase on every 64-byte boundary
                      00159         ; if(!(TBLPTRL & 0x3f)){doBlockErase();}
001F48 0E3F           00160         movlw   0x3f
001F4A 14F6           00161         andwf   TBLPTRL, w, ACCESS
001F4C E0??           00162         bz              mootLoader_rxWpmhBlockErase
001F4E D???           00163         bra             mootLoader_rxWpmhGetNextPacket
                      00164         
001F50                00165 mootLoader_rxWpmhExit
001F50 D???           00166         bra     mootLoader_exit
                      00167 
                      00168 
                      00169 ;**********************************************************************
                      00170 ; Local Function: void mootLoader_signalErrorA()
                      00171 ;**********************************************************************
001F52                00172 mootLoader_signalErrorA
001F52                00173 mootLoader_signalErrorB
001F52                00174 mootLoader_signalErrorC
                      00175         LED_SQUARE_TOGGLE_OTHERS_OFF
                          M         LED_SINE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
001F52 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_TOGGLE
001F54 788B               M         btg             LATC, RC4, ACCESS       ; SQUARE LED
                          M         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
001F56 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
001F58 6A13           00176         clrf    mlCount, ACCESS
001F5A 0E10           00177         movlw   0x10
001F5C 6E14           00178         movwf   mlCount + 1, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 226


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001F5E                00179 mootLoader_signalErrorALp1
                      00180         ; clear interrupt flag
001F5E 929E           00181         bcf             PIR1, TMR2IF, ACCESS    
001F60                00182 mootLoader_signalErrorALp2
                      00183         ; wait for timer2 overflow
001F60 A29E           00184         btfss   PIR1, TMR2IF, ACCESS
001F62 D???           00185         bra             mootLoader_signalErrorALp2
001F64 0613           00186         decf    mlCount, f, ACCESS
001F66 B4D8           00187         btfsc   STATUS, Z, ACCESS
001F68 2E14           00188         decfsz  mlCount + 1
001F6A D???           00189         bra             mootLoader_signalErrorALp1
                      00190         ; loop forever
001F6C D???           00191         bra             mootLoader_signalErrorA
                      00192         
                      00193 
                      00194 ;**********************************************************************
                      00195 ; Local Function: void mootLoader_rxReceiverResetHandler()
                      00196 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_rxReceiverResetHandler)
001F6E                00197 mootLoader_rxReceiverResetHandler
                      00198         ; received bytes are forwarded to UART output for chaining devices so
                      00199         ; make sure that you don't reset until last byte is transmitted 
001F6E A89E           00200         btfss   PIR1, TXIF, ACCESS
001F70 D???           00201         bra             mootLoader_rxReceiverResetHandler
001F72 00FF           00202         reset
                      00203 
                      00204 
                      00205 ;**********************************************************************
                      00206 ; Local Function: void mootloader_rxTestSinglePacketChecksum()
                      00207 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootloader_rxTestSinglePacketChecksum)
001F74                00208 mootloader_rxTestSinglePacketChecksum
                      00209         ; pre-clear checksumOk flag
001F74 9215           00210         bcf             mlFlags, mlRxChecksumOk, ACCESS
                      00211         ; calculate checksum for single packet
001F76 501E           00212         movf    mlRxReceivedPacket + 3, w, ACCESS
001F78 181F           00213         xorwf   mlRxReceivedPacket + 4, w, ACCESS
001F7A 1821           00214         xorwf   mlRxReceivedPacket + 6, w, ACCESS
001F7C 1823           00215         xorwf   mlRxReceivedPacket + 8, w, ACCESS
001F7E 1825           00216         xorwf   mlRxReceivedPacket + 10, w, ACCESS
001F80 1827           00217         xorwf   mlRxReceivedPacket + 12, w, ACCESS
001F82 1829           00218         xorwf   mlRxReceivedPacket + 14, w, ACCESS
001F84 182B           00219         xorwf   mlRxReceivedPacket + 16, w, ACCESS
001F86 182D           00220         xorwf   mlRxReceivedPacket + 18, w, ACCESS
                      00221         ; xor mlRxReceivedPacket[8:0] with checksum in mlRxReceivedPacket[9]
001F88 0B7F           00222         andlw   0x7F
001F8A 182F           00223         xorwf   mlRxReceivedPacket + 20, w, ACCESS
                      00224         ; if result is 0 then checksum if NOT ok so skip
001F8C B4D8           00225         btfsc   STATUS, Z, ACCESS
001F8E 8215           00226         bsf             mlFlags, mlRxChecksumOk, ACCESS
001F90 0012           00227         return
                      00228 
                      00229 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 227


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00230 ;**********************************************************************
                      00231 ; Local Function: void mootLoader_rxReceiveNextPacket()
                      00232 ;**********************************************************************
001F92                00233 mootLoader_rxReceiveNextPacket
                      00234         PUSH_R  FSR0L
001F92 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00235         PUSH_R  FSR0H   
001F96 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
001F9A EE00 F01B      00236         lfsr    FSR0, mlRxReceivedPacket
                      00237 
001F9E 6A31           00238         clrf    mlRxReceivedPacketByteCount, ACCESS
                      00239         
                      00240         ; get next SysEx packet
                      00241 
                      00242         ; mootloader only responds to SysEx so wait for start value of 0xF0
Warning[208]: Label truncated at 32 characters. (mootLoader_rxReceiveNextPacketWaitF0)
001FA0                00243 mootLoader_rxReceiveNextPacketWaitF0
001FA0 D???           00244         rcall   mootLoader_rxReceiveNextByte
001FA2 0EF0           00245         movlw   0xF0
001FA4 6232           00246         cpfseq  mlRxReceivedByte, ACCESS
001FA6 D???           00247         bra             mootLoader_rxReceiveNextPacketWaitF0
                      00248         ; received 0xF0 so continue
001FA8 C032 FFEE      00249         movff   mlRxReceivedByte, POSTINC0
                      00250         
                      00251         ; continue receiving balance of ML_LARGE_PACKET_BYTE_SIZE number of bytes
                      00252         ; init count
001FAC 0E15           00253         movlw   ML_LARGE_PACKET_BYTE_SIZE - 1
001FAE 6E31           00254         movwf   mlRxReceivedPacketByteCount, ACCESS
001FB0                00255 mootLoader_rxRnpPayloadLp
001FB0 D???           00256         rcall   mootLoader_rxReceiveNextByte
001FB2 C032 FFEE      00257         movff   mlRxReceivedByte, POSTINC0
001FB6 2E31           00258         decfsz  mlRxReceivedPacketByteCount, f, ACCESS
001FB8 D???           00259         bra             mootLoader_rxRnpPayloadLp
                      00260 
                      00261         ; make each data payload nybble index equal to reconstituted byte value
                      00262         ; point to start of data payload
001FBA EE00 F01F      00263         lfsr    FSR0, mlRxReceivedPacket + 4
                      00264         ; load count to de-nybble 8 bytes
001FBE 0E08           00265         movlw   8
001FC0 6E31           00266         movwf   mlRxReceivedPacketByteCount, ACCESS
Warning[208]: Label truncated at 32 characters. (mootLoader_rxRnpPayloadDe_nybbleLp)
001FC2                00267 mootLoader_rxRnpPayloadDe_nybbleLp
                      00268         ; swap and read high nybble into WREG
001FC2 0E01           00269         movlw   1
001FC4 38EB           00270         swapf   PLUSW0, w, ACCESS
                      00271         ; or high nybble and low nybble, save in WREG
001FC6 10EF           00272         iorwf   INDF0, w, ACCESS
                      00273         ; save complete value in low nybble location and postinc to high nybble
001FC8 6EEE           00274         movwf   POSTINC0, ACCESS
                      00275         ; save complete value in high nybble location and postinc to next low nybble
001FCA 6EEE           00276         movwf   POSTINC0, ACCESS
001FCC 2E31           00277         decfsz  mlRxReceivedPacketByteCount, f, ACCESS
001FCE D???           00278         bra             mootLoader_rxRnpPayloadDe_nybbleLp      
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 228


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00279         
                      00280         POP_R   FSR0H   
001FD0 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00281         POP_R   FSR0L
001FD4 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
001FD8 0012           00282         return
                      00283         
                      00284 
                      00285 ;**********************************************************************
                      00286 ; Local Function: void mootloader_rxReceiveNextByte()
                      00287 ;**********************************************************************
001FDA                00288 mootLoader_rxReceiveNextByte
                      00289         ; skip if receive flag is set
001FDA AA9E           00290         btfss   PIR1, RCIF, ACCESS
001FDC D???           00291         bra             mootLoader_rxReceiveNextByte
                      00292         
Warning[208]: Label truncated at 32 characters. (mootLoader_rxReceiveNextByteReadFIFO)
001FDE                00293 mootLoader_rxReceiveNextByteReadFIFO
                      00294         ; skip if framing error occurred for top unread char in rx FIFO
001FDE A4AB           00295         btfss   RCSTA, FERR, ACCESS
                      00296         ; no framing error so read the character
001FE0 D???           00297         bra             mootLoader_rxReceiveNextByteGO
                      00298         ; framing error occurred
                      00299         ; read incorrectly framed character out of FIFO
001FE2 50AE           00300         movf    RCREG, w, ACCESS
                      00301         ; skip if rx FIFO is empty
001FE4 BA9E           00302         btfsc   PIR1, RCIF, ACCESS
                      00303         ; FIFO is not empty so try next character
001FE6 D???           00304         bra             mootLoader_rxReceiveNextByteReadFIFO
                      00305         ; all characters in FIFO were incorrectly framed, no data to process
                      00306         ; attempt to remedy: reset UART receiver by toggling Continous Receive Enable bit
001FE8 98AB           00307         bcf             RCSTA, CREN, ACCESS
001FEA 88AB           00308         bsf             RCSTA, CREN, ACCESS
                      00309         ; need to receive a good data so try again
001FEC D???           00310         bra     mootLoader_rxReceiveNextByte
001FEE                00311 mootLoader_rxReceiveNextByteGO
                      00312         ; read the byte
001FEE CFAE F032      00313         movff   RCREG, mlRxReceivedByte
                      00314 
                      00315         ; echo received byte to UART output
001FF2 C032 FFAD      00316         movff   mlRxReceivedByte, TXREG
                      00317 
001FF6 0012           00318         return
                      00319 
                      00320         
001FF8 D???           00162         bra     mootLoader_exit
                      00163         
                      00369 
                      00370         ORG 0xF00000
                      00371         ; define compile-time EEPROM DATA
                      00372         ; on-board EEPROM memory map - highPriorityISR_INT0() in ISRs.asm writes these values, various i
                            nit routine read them at power-up
                      00373         ; Address:0x00 - sampleEndAddress[0:7]
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 229


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00374         ; Address:0x01 - sampleEndAddress[8:15]
                      00375         ; Address:0x02 - midiChannel
                      00376         ; Address:0x03 - adsrAttackRate
                      00377         ; Address:0x04 - adsrReleaseRate
F00000 FFFF 4006 0040 00378         DE      0xff, 0xff, DEFAULT_MIDI_CHANNEL, ADSR_ATTACK_RATE, ADSR_RELEASE_RATE
                      00379 
                      00380         END
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 230


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
ABDEN                             00000000
ABDOVF                            00000007
ACCESS                            00000000
ACCUMULATORS_ELEMENT_SIZE         4
ACCUMULATORS_SIZE                 MAX_POLY_DEPTH * ACCUMULATORS_ELEMENT_SIZE
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
ACTIVE_NOTE_DELTAS_ELEMENT_SIZE   2
ACTIVE_NOTE_DELTAS_SIZE           MAX_POLY_DEPTH * ACTIVE_NOTE_DELTAS_ELEMENT_SIZE
ACTIVE_NOTE_TABLE_SIZE            25
ACTIVE_OUTPUT_VALUES_EL_SIZE      1
ACTIVE_OUTPUT_VALUES_SIZE         MAX_POLY_DEPTH * ACTIVE_OUTPUT_VALUES_EL_SIZE
ACTVIE                            00000002
ACTVIF                            00000002
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCON2                            00000FC0
ADCS0                             00000000
ADCS1                             00000001
ADCS2                             00000002
ADDEN                             00000003
ADDR0                             00000000
ADDR1                             00000001
ADDR2                             00000002
ADDR3                             00000003
ADDR4                             00000004
ADDR5                             00000005
ADDR6                             00000006
ADEN                              00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADON                              00000000
ADRES                             00000FC3
ADRESH                            00000FC4
ADRESL                            00000FC3
ADSR_ATTACK_RATE                  64
ADSR_PRESCALE                     610
ADSR_RELEASE_RATE                 64
AFTERTOUCH_COMPLETE               DATA_BYTE1
ALL_NOTES_OFF                     123
ALL_SOUND_OFF                     120
AN10                              00000004
AN11                              00000005
AN3                               00000004
AN4                               00000000
AN5                               00000001
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 231


SYMBOL TABLE
  LABEL                             VALUE 

AN6                               00000002
AN7                               00000003
AN8                               00000006
AN9                               00000007
ANS10                             00000002
ANS11                             00000003
ANS3                              00000003
ANS4                              00000004
ANS5                              00000005
ANS6                              00000006
ANS7                              00000007
ANS8                              00000000
ANS9                              00000001
ANSEL                             00000F7E
ANSELH                            00000F7F
ASSERT_SS                         
BALANCE_LSB                       40
BALANCE_MSB                       8
BANKED                            00000001
BANK_SELECT_LSB                   32
BANK_SELECT_MSB                   0
BAUDCON                           00000FB8
BAUDCTL                           00000FB8
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BF                                00000000
BOOTLOADER_START_ADDRESS          0x1C00
BOR                               00000000
BP0                               2
BP1                               3
BREATH_CONTROLLER_LSB             34
BREATH_CONTROLLER_MSB             2
BRG16                             00000003
BRGH                              00000002
BSR                               00000FE0
BTOEE                             00000004
BTOEF                             00000004
BTSEE                             00000007
BTSEF                             00000007
C                                 00000000
C12IN1M                           00000001
C12IN2M                           00000002
C12IN3M                           00000003
C12INP                            00000000
C12OUT                            00000004
C1CH0                             00000000
C1CH1                             00000001
C1HYS                             00000003
C1IE                              00000006
C1IF                              00000006
C1IP                              00000006
C1OE                              00000005
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 232


SYMBOL TABLE
  LABEL                             VALUE 

C1ON                              00000007
C1OUT                             00000006
C1POL                             00000004
C1R                               00000002
C1RSEL                            00000005
C1SP                              00000003
C1SYNC                            00000001
C2CH0                             00000000
C2CH1                             00000001
C2HYS                             00000002
C2IE                              00000005
C2IF                              00000005
C2IP                              00000005
C2OE                              00000005
C2ON                              00000007
C2OUT                             00000006
C2POL                             00000004
C2R                               00000002
C2RSEL                            00000004
C2SP                              00000003
C2SYNC                            00000000
CCP1                              00000005
CCP1CON                           00000FBD
CCP1IE                            00000002
CCP1IF                            00000002
CCP1IP                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCPR1                             00000FBE
CCPR1H                            00000FBF
CCPR1L                            00000FBE
CFGS                              00000006
CHANNEL                           0x00
CHANNEL_PRESSURE                  0xD0
CHANNEL_PRESSURE_MESSAGE_LENGTH   2
CHANNEL_VOLUME_LSB                39
CHANNEL_VOLUME_MSB                7
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CK                                00000007
CKE                               00000006
CKP                               00000004
CKTXP                             00000004
CLEAR_ACCUMULATORS                
CLKIN                             00000005
CLKOUT                            00000004
CM1CON0                           00000F6D
CM2CON0                           00000F6B
CM2CON1                           00000F6C
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 233


SYMBOL TABLE
  LABEL                             VALUE 

CONFIG_INC                        
CONTROL_CHANGE                    0xB0
CONTROL_CHANGE_COMPLETE           DATA_BYTE1
CONTROL_CHANGE_MESSAGE_LENGTH     3
CRC16EE                           00000002
CRC16EF                           00000002
CRC5EE                            00000001
CRC5EF                            00000001
CREN                              00000004
CSRC                              00000007
CVREF                             00000002
D                                 00000005
D1EN                              00000007
D1LPS                             00000006
D1NSS                             00000000
D1PSS0                            00000002
D1PSS1                            00000003
DAC1OE                            00000005
DAC1R0                            00000000
DAC1R1                            00000001
DAC1R2                            00000002
DAC1R3                            00000003
DAC1R4                            00000004
DATA_BYTE0                        0x01
DATA_BYTE1                        0x02
DATA_DECREMENT                    97
DATA_ENTRY_LSB                    38
DATA_ENTRY_MSB                    6
DATA_INCREMENT                    96
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DDRA                              TRISA
DDRB                              TRISB
DDRC                              TRISC
DDRD                              TRISD
DDRE                              TRISE
DEASSERT_SS                       
DEFAULT_MIDI_CHANNEL              6
DELEGATED_DELTAS_ELEMENT_SIZE     2
DELEGATED_DELTAS_SIZE             MAX_POLY_DEPTH * DELEGATED_DELTAS_ELEMENT_SIZE
DEVICE_ID                         0x1D
DFN8EE                            00000003
DFN8EF                            00000003
DIR                               00000002
DISABLE_SUSTAIN                   
DONE                              00000001
DTRXP                             00000005
D_A                               00000005
D_NOT_A                           00000005
ECCP1AS                           00000FB6
ECCPAS0                           00000004
ECCPAS1                           00000005
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 234


SYMBOL TABLE
  LABEL                             VALUE 

ECCPAS2                           00000006
ECCPASE                           00000007
EEADR                             00000FA9
EEADR0                            00000000
EEADR1                            00000001
EEADR2                            00000002
EEADR3                            00000003
EEADR4                            00000004
EEADR5                            00000005
EEADR6                            00000006
EEADR7                            00000007
EECON1                            00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEIE                              00000004
EEIF                              00000004
EEIP                              00000004
EEPGD                             00000007
EEPROM_SIZE_BITS                  128000
EE_DISABLE_INTS                   
EE_RDSR                           B'00000101'
EE_READ                           B'00000011'
EE_RESTORE_INTS                   
EE_WRDI                           B'00000100'
EE_WREN                           B'00000110'
EE_WRITE                          B'00000010'
EE_WRSR                           B'00000001'
EFFECTS_1_DEPTH_DEFAULT_REVERB_S  91
EFFECTS_2_DEPTH_DEFAULT_TREMOLO_  92
EFFECTS_3_DEPTH_DEFAULT_CHORUS_S  93
EFFECTS_4_DEPTH_DEFAULT_CELESTE_  94
EFFECTS_5_DEPTH_DEFAULT_PHASER_D  95
EFFECT_CONTROL_1_LSB              44
EFFECT_CONTROL_1_MSB              12
EFFECT_CONTROL_2_LSB              45
EFFECT_CONTROL_2_MSB              13
ENABLE_SUSTAIN                    
ENDP0                             00000003
ENDP1                             00000004
ENDP2                             00000005
ENDP3                             00000006
EOX                               0xF7
EPCONDIS                          00000003
EPHSHK                            00000004
EPINEN                            00000001
EPOUTEN                           00000002
EPSTALL                           00000000
EXPRESSION_LSB                    43
EXPRESSION_MSB                    11
FAST                              00000001
FERR                              00000002
FOOT_CONTROLLER_LSB               36
FOOT_CONTROLLER_MSB               4
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 235


SYMBOL TABLE
  LABEL                             VALUE 

FREE                              00000004
FRM0                              00000000
FRM1                              00000001
FRM10                             00000002
FRM2                              00000002
FRM3                              00000003
FRM4                              00000004
FRM5                              00000005
FRM6                              00000006
FRM7                              00000007
FRM8                              00000000
FRM9                              00000001
FSEN                              00000002
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
FSR1H                             00000FE2
FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
FVR1EN                            00000007
FVR1S0                            00000004
FVR1S1                            00000005
FVR1ST                            00000006
GCEN                              00000007
GENERAL_INFORMATION               0x06
GENERAL_PURPOSE_CONTROLLER_1_LSB  48
GENERAL_PURPOSE_CONTROLLER_1_MSB  16
GENERAL_PURPOSE_CONTROLLER_2_LSB  49
GENERAL_PURPOSE_CONTROLLER_2_MSB  17
GENERAL_PURPOSE_CONTROLLER_3_LSB  50
GENERAL_PURPOSE_CONTROLLER_3_MSB  18
GENERAL_PURPOSE_CONTROLLER_4_LSB  51
GENERAL_PURPOSE_CONTROLLER_4_MSB  19
GENERAL_PURPOSE_CONTROLLER_5      80
GENERAL_PURPOSE_CONTROLLER_6      81
GENERAL_PURPOSE_CONTROLLER_7      82
GENERAL_PURPOSE_CONTROLLER_8      83
GIE                               00000007
GIEH                              00000007
GIEL                              00000006
GIE_GIEH                          00000007
GO                                00000001
GO_DONE                           00000001
GO_NOT_DONE                       00000001
HFIOFL                            00000001
HOLD_2                            69
IDENTITY_REPLY                    0x02
IDENTITY_REQUEST                  0x01
IDLEIE                            00000004
IDLEIF                            00000004
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 236


SYMBOL TABLE
  LABEL                             VALUE 

IDLEN                             00000007
IDLE_BLOCK_ERASE                  
IDLE_WRITE_WAIT                   
INC_PRESCALE_COUNTERS             
INDF0                             00000FEF
INDF1                             00000FE7
INDF2                             00000FDF
INT0                              00000000
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1                              00000001
INT1E                             00000003
INT1F                             00000000
INT1IE                            00000003
INT1IF                            00000000
INT1IP                            00000006
INT1P                             00000006
INT2                              00000002
INT2E                             00000004
INT2F                             00000001
INT2IE                            00000004
INT2IF                            00000001
INT2IP                            00000007
INT2P                             00000007
INTCON                            00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
INTSRC                            00000007
IOCA                              00000F79
IOCA0                             00000000
IOCA1                             00000001
IOCA3                             00000003
IOCA4                             00000004
IOCA5                             00000005
IOCB                              00000F7A
IOCB4                             00000004
IOCB5                             00000005
IOCB6                             00000006
IOCB7                             00000007
IOFS                              00000002
IPEN                              00000007
IPR1                              00000F9F
IPR2                              00000FA2
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
KEY_PRESSURE                      0xA0
KEY_PRESSURE_MESSAGE_LENGTH       3
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 237


SYMBOL TABLE
  LABEL                             VALUE 

LATA                              00000F89
LATA4                             00000004
LATA5                             00000005
LATB                              00000F8A
LATB4                             00000004
LATB5                             00000005
LATB6                             00000006
LATB7                             00000007
LATC                              00000F8B
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LATC6                             00000006
LATC7                             00000007
LED_ALL_OFF                       
LED_ALL_ON                        
LED_ALL_TOGGLE                    
LED_BLINK_RATE_VOICE_RECORD       6
LED_BLINK_RATE_VOICE_THROUGH      20
LED_ONLY_SAMPLE_ON                
LED_ONLY_SINE_ON                  
LED_ONLY_SQUARE_ON                
LED_POLARITY_REVERSED             
LED_SAMPLE_OFF                    
LED_SAMPLE_ON                     
LED_SAMPLE_TOGGLE                 
LED_SAMPLE_TOGGLE_OTHERS_OFF      
LED_SINE_OFF                      
LED_SINE_ON                       
LED_SINE_TOGGLE                   
LED_SINE_TOGGLE_OTHERS_OFF        
LED_SQUARE_OFF                    
LED_SQUARE_ON                     
LED_SQUARE_TOGGLE                 
LED_SQUARE_TOGGLE_OTHERS_OFF      
LEGATO_FOOTSWITCH                 68
LEVEL_MONO_LED_BLINK_RATE         1
LEVEL_POLY_LED_BLINK_RATE         0
LEVEL_SUSTAIN_LED_BLINK_RATE      2
LFIOFS                            00000000
LOCAL_CONTROL_ONOFF               122
MAX_MIDI_MESSAGE_SIZE             24
MAX_MODE_LEVEL                    MONO
MAX_POLY_DEPTH                    4
MC1OUT                            00000007
MC2OUT                            00000006
MESSAGE_COMPLETE                  0xFF
MIDI_DEVICE_ID                    0x1D
MIDI_VENDOR_ID                    0x77
ML_BLOCK_ERASE_BYTE_SIZE          64
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 238


SYMBOL TABLE
  LABEL                             VALUE 

ML_BLOCK_ERASE_IDLE_TIME_MS       8
ML_COMMAND_DATA_PAYLOAD           0x01
ML_COMMAND_DATA_PAYLOAD_COMPLETE  0x02
ML_COMMAND_WRITE_PROGRAM_MEMORY   0x03
ML_DATA_PACKET_PAYLOAD_BYTE_SIZE  8
ML_LARGE_PACKET_BYTE_SIZE         22
ML_RECEIVER_RESET                 0x11
ML_TRANSMITTER_RESETTING          0x10
ML_TRANS_SYNC_IDLE_TIME_MS        32
ML_WRITE_IDLE_TIME_MS             8
MODULATION_WHEEL_LSB              33
MODULATION_WHEEL_MSB              1
MONO                              2
MSK0                              00000000
MSK1                              00000001
MSK2                              00000002
MSK3                              00000003
MSK4                              00000004
MSK5                              00000005
MSK6                              00000006
MSK7                              00000007
N                                 00000004
NEXT_SAMPLE_ADDRESSES_EL_SIZE     2
NON_REAL_TIME                     0x7E
NON_REG_PARAMETER_NUMBER_LSB      98
NON_REG_PARAMETER_NUMBER_MSB      99
NOTE_COMPLETE                     DATA_BYTE1
NOTE_OFF                          0x80
NOTE_OFF_MESSAGE_LENGTH           3
NOTE_ON                           0x90
NOTE_ON_MESSAGE_LENGTH            3
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_DONE                          00000001
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RABPU                         00000007
NOT_RDY                           0
NOT_RI                            00000004
NOT_SS                            00000006
NOT_T1SYNC                        00000002
NOT_T3SYNC                        00000002
NOT_TO                            00000003
NOT_W                             00000002
NOT_WRITE                         00000002
NVCFG0                            00000000
NVCFG1                            00000001
OERR                              00000001
OMNI_MODE_OFF                     124
OMNI_MODE_ON                      125
OSC1                              00000005
OSC2                              00000004
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 239


SYMBOL TABLE
  LABEL                             VALUE 

OSCCON                            00000FD3
OSCCON2                           00000FD2
OSCFIE                            00000007
OSCFIF                            00000007
OSCFIP                            00000007
OSCTUNE                           00000F9B
OSC_ADVANCE_ADSR                  
OSC_DELTAS_ELEMENT_SIZE           2
OSC_DELTAS_SIZE                   MAX_POLY_DEPTH * OSC_DELTAS_ELEMENT_SIZE
OSC_MIX                           
OSC_READ_ADSR_FLAG                
OSC_STATE_BLOCK                   
OSC_TRANSITION_OUTPUT_THRESHOLD   0x04
OSTS                              00000003
OV                                00000003
P                                 00000004
P1A                               00000005
P1B                               00000004
P1C                               00000003
P1D                               00000002
P1M0                              00000006
P1M1                              00000007
PAN_LSB                           42
PAN_MSB                           10
PC                                00000FF9
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PD                                00000002
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PEIE_GIEL                         00000006
PEN                               00000002
PGM                               00000003
PIC18LF13K50                      
PIDEE                             00000000
PIDEF                             00000000
PIE1                              00000F9D
PIE2                              00000FA0
PIR1                              00000F9E
PIR2                              00000FA1
PITCH_WHEEL                       0xE0
PITCH_WHEEL_COMPLETE              DATA_BYTE1
PITCH_WHEEL_MESSAGE_LENGTH        3
PKTDIS                            00000004
PLAYBACK                          2
PLUSW0                            00000FEB
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 240


SYMBOL TABLE
  LABEL                             VALUE 

PLUSW1                            00000FE3
PLUSW2                            00000FDB
POLY                              0
POLY_MODE_OFF                     126
POLY_MODE_ON                      127
POP_R                             
POR                               00000001
PORTA                             00000F80
PORTAMENTO_CONTROL                84
PORTAMENTO_ONOFF                  65
PORTAMENTO_TIME                   5
PORTAMENTO_TIME_LSB               37
PORTB                             00000F81
PORTC                             00000F82
POSTDEC0                          00000FED
POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PPB0                              00000000
PPB1                              00000001
PPBI                              00000001
PPBRST                            00000006
PR2                               00000FCB
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PRI_SD                            00000002
PROD                              00000FF3
PRODH                             00000FF4
PRODL                             00000FF3
PROGRAM_CHANGE                    0xC0
PROGRAM_CHANGE_COMPLETE           DATA_BYTE0
PROGRAM_CHANGE_MESSAGE_LENGTH     2
PRSEN                             00000007
PSA                               00000003
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
PSTRCON                           00000FB9
PUSH_R                            
PVCFG0                            00000002
PVCFG1                            00000003
PWM1CON                           00000FB7
PWM_IDLE_OUTPUT_VALUE             0x80
R                                 00000002
RA0                               00000000
RA1                               00000001
RA3                               00000003
RA4                               00000004
RA5                               00000005
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 241


SYMBOL TABLE
  LABEL                             VALUE 

RABIE                             00000003
RABIF                             00000000
RABIP                             00000000
RABPU                             00000007
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCON                              00000FD0
RCREG                             00000FAE
RCSTA                             00000FAB
RD                                00000000
RD16                              00000007
RECORD                            1
RECORD_BUTTON_RELEASE_WAIT_TIME   26
REFCON0                           00000FBA
REFCON1                           00000FBB
REFCON2                           00000FBC
REGISTERED_PARAMETER_NUMBERMSB    101
REGISTERED_PARAMETER_NUMBER_LSB   100
RESET_ALL_CONTROLLERS             121
RESUME                            00000002
REVERSE_SAMPLE_IF_MOD_OVER_63     
RI                                00000004
RSEN                              00000001
RX                                00000005
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SAMPLE                            2
SAMPLE_DATA_BUFFER_SIZE           64
SAMPLE_DC_OFFSET                  (PWM_IDLE_OUTPUT_VALUE - 74)
SAMPLE_PRESCALE                   6
SBOREN                            00000006
SCK                               00000006
SCKP                              00000004
SCL                               00000006
SCS0                              00000000
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 242


SYMBOL TABLE
  LABEL                             VALUE 

SCS1                              00000001
SDA                               00000004
SDI                               00000004
SDO                               00000007
SE0                               00000005
SEN                               00000000
SENDB                             00000003
SEND_BYTE_DO_CHECKSUM             
SEND_BYTE_START_CHECKSUM          
SEND_CHECKSUM_CLEAR_RUN           
SEND_CHECKSUM_DO_RUN              
SEND_RUNNING_CHECKSUM             
SEND_SYSEX_INTRO_NO_CHECK         
SINE                              0
SLRA                              00000000
SLRB                              00000001
SLRC                              00000002
SLRCON                            00000F76
SMP                               00000007
SOFIE                             00000006
SOFIF                             00000006
SOFTWARESTACK_H                   
SOFT_PEDAL                        67
SOSTENUTO                         66
SOUND_CONTROLLER_10_GM2_DEFAULT_  79
SOUND_CONTROLLER_1_DEFAULT_SOUND  70
SOUND_CONTROLLER_2_DEFAULT_TIMBR  71
SOUND_CONTROLLER_3_DEFAULT_RELEA  72
SOUND_CONTROLLER_4_DEFAULT_ATTAC  73
SOUND_CONTROLLER_5_DEFAULT_BRIGH  74
SOUND_CONTROLLER_6_GM2_DEFAULT_D  75
SOUND_CONTROLLER_7_GM2_DEFAULT_V  76
SOUND_CONTROLLER_8_GM2_DEFAULT_V  77
SOUND_CONTROLLER_9_GM2_DEFAULT_V  78
SP0                               00000000
SP1                               00000001
SP2                               00000002
SP3                               00000003
SP4                               00000004
SPBRG                             00000FAF
SPBRGH                            00000FB0
SPEN                              00000007
SPLIT_BYTE_THEN_SEND_DO_CHECKSUM  
SPLLEN                            00000006
SQUARE                            1
SRCLK0                            00000004
SRCLK1                            00000005
SRCLK2                            00000006
SRCON0                            00000F68
SRCON1                            00000F69
SREN                              00000005
SRLEN                             00000007
SRNQEN                            00000002
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 243


SYMBOL TABLE
  LABEL                             VALUE 

SRPR                              00000000
SRPS                              00000001
SRQ                               00000004
SRQEN                             00000003
SRRC1E                            00000000
SRRC2E                            00000001
SRRCKE                            00000002
SRRPE                             00000003
SRSC1E                            00000004
SRSC2E                            00000005
SRSCKE                            00000006
SRSPE                             00000007
SS                                00000006
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON1                           00000FC6
SSPCON2                           00000FC5
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPMSK                            00000F6F
SSPOV                             00000006
SSPSTAT                           00000FC7
STALLIE                           00000005
STALLIF                           00000005
STATUS                            00000FD8
STKFUL                            00000007
STKOVF                            00000007
STKPTR                            00000FFC
STKUNF                            00000006
STRA                              00000000
STRB                              00000001
STRC                              00000002
STRD                              00000003
STRSYNC                           00000004
SUSPND                            00000001
SUSTAIN                           1
SUSTAIN_PEDAL                     64
SWDTE                             00000000
SWDTEN                            00000000
SYNC                              00000004
SYSEX                             0xF0
T08BIT                            00000006
T0CKI                             00000005
T0CON                             00000FD5
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 244


SYMBOL TABLE
  LABEL                             VALUE 

T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
T0SE                              00000004
T13CKI                            00000006
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000FCD
T1OSCEN                           00000003
T1OSCI                            00000006
T1OSCO                            00000007
T1RUN                             00000006
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FCA
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T3CCP1                            00000003
T3CKPS0                           00000004
T3CKPS1                           00000005
T3CON                             00000FB1
T3SYNC                            00000002
TABLAT                            00000FF5
TBLPTR                            00000FF6
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
TERMINAL_PACKET_COMMAND_VALUE     0x1E
THROUGH_HOLE_PCB                  
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
TMR0ON                            00000007
TMR1CS                            00000001
TMR1H                             00000FCF
TMR1IE                            00000000
TMR1IF                            00000000
TMR1IP                            00000000
TMR1L                             00000FCE
TMR1ON                            00000000
TMR2                              00000FCC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2ON                            00000002
TMR3CS                            00000001
TMR3H                             00000FB3
TMR3IE                            00000001
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 245


SYMBOL TABLE
  LABEL                             VALUE 

TMR3IF                            00000001
TMR3IP                            00000001
TMR3L                             00000FB2
TMR3ON                            00000000
TO                                00000003
TOS                               00000FFD
TOSH                              00000FFE
TOSL                              00000FFD
TOSU                              00000FFF
TRISA                             00000F92
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000F93
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000F94
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRMT                              00000001
TRNIE                             00000003
TRNIF                             00000003
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TUN5                              00000005
TX                                00000007
TX9                               00000006
TX9D                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXIP                              00000004
TXREG                             00000FAD
TXSTA                             00000FAC
UA                                00000001
UADDR                             00000F5C
UCFG                              00000F61
UCON                              00000F64
UEIE                              00000F5B
UEIR                              00000F5F
UEP0                              00000F53
UEP1                              00000F54
UEP2                              00000F55
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 246


SYMBOL TABLE
  LABEL                             VALUE 

UEP3                              00000F56
UEP4                              00000F57
UEP5                              00000F58
UEP6                              00000F59
UEP7                              00000F5A
UERRIE                            00000001
UERRIF                            00000001
UFRMH                             00000F5E
UFRML                             00000F5D
UIE                               00000F60
UIR                               00000F62
UNDEFINED_003                     3
UNDEFINED_014                     14
UNDEFINED_015                     15
UNDEFINED_020                     20
UNDEFINED_021                     21
UNDEFINED_022                     22
UNDEFINED_023                     23
UNDEFINED_024                     24
UNDEFINED_025                     25
UNDEFINED_026                     26
UNDEFINED_027                     27
UNDEFINED_028                     28
UNDEFINED_029                     29
UNDEFINED_030                     30
UNDEFINED_031                     31
UNDEFINED_035                     35
UNDEFINED_041                     41
UNDEFINED_046                     46
UNDEFINED_047                     47
UNDEFINED_052                     52
UNDEFINED_053                     53
UNDEFINED_054                     54
UNDEFINED_055                     55
UNDEFINED_056                     56
UNDEFINED_057                     57
UNDEFINED_058                     58
UNDEFINED_059                     59
UNDEFINED_060                     60
UNDEFINED_061                     61
UNDEFINED_062                     62
UNDEFINED_063                     63
UNDEFINED_102                     102
UNDEFINED_103                     103
UNDEFINED_104                     104
UNDEFINED_105                     105
UNDEFINED_106                     106
UNDEFINED_107                     107
UNDEFINED_108                     108
UNDEFINED_109                     109
UNDEFINED_110                     110
UNDEFINED_111                     111
UNDEFINED_112                     112
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 247


SYMBOL TABLE
  LABEL                             VALUE 

UNDEFINED_113                     113
UNDEFINED_114                     114
UNDEFINED_115                     115
UNDEFINED_116                     116
UNDEFINED_117                     117
UNDEFINED_118                     118
UNDEFINED_119                     119
UNDEFINED_85                      85
UNDEFINED_86                      86
UNDEFINED_87                      87
UNDEFINED_88                      88
UNDEFINED_89                      89
UNDEFINED_90                      90
UNDEFINED_MSB                     9
UPUEN                             00000004
URSTIE                            00000000
URSTIF                            00000000
USBEN                             00000003
USBIE                             00000002
USBIF                             00000002
USBIP                             00000002
USER_CODE_END_ADDRESS             BOOTLOADER_START_ADDRESS - 2
USER_CODE_START_ADDRESS           0x0040
USTAT                             00000F63
UTEYE                             00000007
VENDOR_ID                         0x77
VOICE_THROUGH                     0
VREFCON0                          00000FBA
VREFCON1                          00000FBB
VREFCON2                          00000FBC
VREFM                             00000001
VREFP                             00000000
W                                 00000000
WAVE_PRESCALE                     2
WCOL                              00000007
WDTCON                            00000FD1
WEL                               1
WPEN                              7
WPUA                              00000F77
WPUA3                             00000003
WPUA4                             00000004
WPUA5                             00000005
WPUB                              00000F78
WPUB4                             00000004
WPUB5                             00000005
WPUB6                             00000006
WPUB7                             00000007
WR                                00000001
WREG                              00000FE8
WREN                              00000002
WRERR                             00000003
WRITE_INTERNAL_EEPROM             
WRITE_INTERNAL_EEPROM_FROM_REGS   
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 248


SYMBOL TABLE
  LABEL                             VALUE 

WUE                               00000001
Z                                 00000002
_BBSIZ_OFF_4L                     000000F7
_BBSIZ_ON_4L                      000000FF
_BOREN_NOSLP_2L                   000000FD
_BOREN_OFF_2L                     000000F9
_BOREN_ON_2L                      000000FB
_BOREN_SBORDIS_2L                 000000FF
_BORV_19_2L                       000000FF
_BORV_22_2L                       000000F7
_BORV_27_2L                       000000EF
_BORV_30_2L                       000000E7
_CONFIG1H                         00300001
_CONFIG1L                         00300000
_CONFIG2H                         00300003
_CONFIG2L                         00300002
_CONFIG3H                         00300005
_CONFIG4L                         00300006
_CONFIG5H                         00300009
_CONFIG5L                         00300008
_CONFIG6H                         0030000B
_CONFIG6L                         0030000A
_CONFIG7H                         0030000D
_CONFIG7L                         0030000C
_CP0_OFF_5L                       000000FF
_CP0_ON_5L                        000000FE
_CP1_OFF_5L                       000000FF
_CP1_ON_5L                        000000FD
_CPB_OFF_5H                       000000FF
_CPB_ON_5H                        000000BF
_CPD_OFF_5H                       000000FF
_CPD_ON_5H                        0000007F
_CPUDIV_CLKDIV2_1L                000000EF
_CPUDIV_CLKDIV3_1L                000000F7
_CPUDIV_CLKDIV4_1L                000000FF
_CPUDIV_NOCLKDIV_1L               000000E7
_DEBUG_OFF_4L                     000000FF
_DEBUG_ON_4L                      0000007F
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
_EBTR0_OFF_7L                     000000FF
_EBTR0_ON_7L                      000000FE
_EBTR1_OFF_7L                     000000FF
_EBTR1_ON_7L                      000000FD
_EBTRB_OFF_7H                     000000FF
_EBTRB_ON_7H                      000000BF
_EEPROMH_                         
_FCMEN_OFF_1H                     000000BF
_FCMEN_ON_1H                      000000FF
_FOSC_ECCLKOUTH_1H                000000F4
_FOSC_ECCLKOUTL_1H                000000FC
_FOSC_ECCLKOUTM_1H                000000FA
_FOSC_ECH_1H                      000000F5
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 249


SYMBOL TABLE
  LABEL                             VALUE 

_FOSC_ECL_1H                      000000FD
_FOSC_ECM_1H                      000000FB
_FOSC_ERCCLKOUT_1H                000000F3
_FOSC_ERC_1H                      000000F7
_FOSC_HS_1H                       000000F2
_FOSC_IRCCLKOUT_1H                000000F9
_FOSC_IRC_1H                      000000F8
_FOSC_LP_1H                       000000F0
_FOSC_XT_1H                       000000F1
_HFOFST_OFF_3H                    000000F7
_HFOFST_ON_3H                     000000FF
_IDLOC0                           00200000
_IDLOC1                           00200001
_IDLOC2                           00200002
_IDLOC3                           00200003
_IDLOC4                           00200004
_IDLOC5                           00200005
_IDLOC6                           00200006
_IDLOC7                           00200007
_IESO_OFF_1H                      0000007F
_IESO_ON_1H                       000000FF
_LVP_OFF_4L                       000000FB
_LVP_ON_4L                        000000FF
_MCLRE_OFF_3H                     0000007F
_MCLRE_ON_3H                      000000FF
_MIDIH_                           
_MOOTLOADERH_                     
_PCLKEN_OFF_1H                    000000DF
_PCLKEN_ON_1H                     000000FF
_PLLEN_OFF_1H                     000000EF
_PLLEN_ON_1H                      000000FF
_PWRTEN_OFF_2L                    000000FF
_PWRTEN_ON_2L                     000000FE
_SOUNDGENH_                       
_STVREN_OFF_4L                    000000FE
_STVREN_ON_4L                     000000FF
_USBDIV_OFF_1L                    000000DF
_USBDIV_ON_1L                     000000FF
_USERINTERFACEH_                  
_WDTEN_OFF_2H                     000000FE
_WDTEN_ON_2H                      000000FF
_WDTPS_1024_2H                    000000F5
_WDTPS_128_2H                     000000EF
_WDTPS_16384_2H                   000000FD
_WDTPS_16_2H                      000000E9
_WDTPS_1_2H                       000000E1
_WDTPS_2048_2H                    000000F7
_WDTPS_256_2H                     000000F1
_WDTPS_2_2H                       000000E3
_WDTPS_32768_2H                   000000FF
_WDTPS_32_2H                      000000EB
_WDTPS_4096_2H                    000000F9
_WDTPS_4_2H                       000000E5
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 250


SYMBOL TABLE
  LABEL                             VALUE 

_WDTPS_512_2H                     000000F3
_WDTPS_64_2H                      000000ED
_WDTPS_8192_2H                    000000FB
_WDTPS_8_2H                       000000E7
_WRT0_OFF_6L                      000000FF
_WRT0_ON_6L                       000000FE
_WRT1_OFF_6L                      000000FF
_WRT1_ON_6L                       000000FD
_WRTB_OFF_6H                      000000FF
_WRTB_ON_6H                       000000BF
_WRTC_OFF_6H                      000000FF
_WRTC_ON_6H                       000000DF
_WRTD_OFF_6H                      000000FF
_WRTD_ON_6H                       0000007F
_XINST_OFF_4L                     000000BF
_XINST_ON_4L                      000000FF
__18LF13K50                       00000001
accumulators                      000000D2
activeNoteDeltas                  000000BA
activeNoteTable                   00000059
activeNoteTableAdd                0000098E
activeNoteTableAdd_exit           000009C0
activeNoteTableAdd_lp1            000009AC
activeNoteTableModified           3
activeNoteTableRemove             000009DA
activeNoteTableRemove_bubbleCont  00000A3A
activeNoteTableRemove_bubbleLoop  00000A1C
activeNoteTableRemove_lp1         000009FA
activeNoteTableRemove_lp1Jmp1     00000A0A
activeNoteTableRemove_lp1Wipe     00000A06
activeNoteTableRemove_sortDone    00000A44
activeNoteTableRemove_sortLoop    00000A14
activeOutputValues                000000E2
adsrAttackRate                    00000038
adsrLimiterRegs                   00000034
adsrPrescaleCounter               0000003A
adsrReleaseRate                   00000039
attack                            3
attackDone                        000012A2
bsrTmp                            00000002
controllerNumber                  noteNumberByte
controllerValue                   velocityByte
count                             sample
decay                             2
delegatedDeltas                   000000C2
delegatorBusy                     0
doAttack                          0000127E
doRelease                         000012B2
dummy_endOfVariables              000001EA
eepromFlags                       00000018
eepromInternalRead                000008AA
eepromReadSingleByte              00000806
eepromReadSingleByte_lp1          00000818
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 251


SYMBOL TABLE
  LABEL                             VALUE 

eepromReadStatusReg               000007D0
eepromReadStatusReg_doLp1         000007D2
eepromWrite64                     00000844
eepromWrite64_sendBuffer          0000087A
eepromWriteEnable                 000007C0
eepromWriteEnable_lp              000007C2
eepromWriteStatusReg              000007E6
eepromWriteStatusReg_doLp1        000007EE
eepromXferSingleByte              00000770
eepromXferSingleByte_exit         00000792
eepromXferSingleByte_lp           0000078C
endOfVariables                    00000040
getActiveNoteDeltas               00000A7E
getActiveNoteDeltasAgain          00000AAA
getActiveNoteDeltas_exit          00000B22
getActiveNoteDeltas_loadSampleDe  00000AD4
getActiveNoteDeltas_loop          00000AAE
getActiveNoteDeltas_next          00000B1A
getActiveNoteDeltas_readTableAnd  00000B04
getActiveNoteDeltas_zeroDelta     00000AF4
highPriorityISR                   0000004C
highPriorityISRTimer2_prescaleNo  0000006A
highPriorityISRTimer2_prescaleOK  00000072
highPriorityISRTimer2_skipStep    00000092
highPriorityISR_INT0Done          0000010A
highPriorityISR_INT0_incMode      00000106
highPriorityISR_Timer2Done        000000A8
highPriorityISR_redirect          00000044
initADC                           00000378
initCCP                           0000036A
initCore                          000002E2
initExternalEEPROM                00000798
initHeap                          000003CE
initIO                            00000322
initInternalEEPROM                000008A4
initInterrupts                    00000384
initMIDI                          00000446
initMIDI_lp                       00000474
initOsc                           00000314
initOsc_lp1                       0000031A
initRAM                           000003AE
initRAM_bank0                     000003AE
initRAM_bank0Lp                   000003B2
initRAM_bank1                     000003BA
initRAM_bank2                     000003BA
initRAM_bank2Lp                   000003C0
initSPI                           00000372
initSoundGen                      000008B6
initSoundGen_lp1                  00000940
initSoundGen_lp2                  0000094E
initSoundGen_lp3                  0000095C
initSoundGen_lp4                  0000096C
initSoundGen_lp5                  0000097A
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 252


SYMBOL TABLE
  LABEL                             VALUE 

initTimer0                        00000352
initTimer1                        00000360
initTimer2                        00000362
initUART                          00000346
initUserInterface                 000013A8
intState                          2
keyPressed                        5
ledBlinkCounter                   0000003E
ledBlinkRate                      0000003D
ledOnOffFlags                     0000003F
lowPriorityISR                    00000114
lowPriorityISR_INT1Done           00000144
lowPriorityISR_INT2Done           00000156
lowPriorityISR_TMR0AllOn          00000170
lowPriorityISR_TMR0Done           000001D8
lowPriorityISR_TMR0NotAllOn       00000178
lowPriorityISR_TMR0SaBlink        000001C8
lowPriorityISR_TMR0SiBlink        0000018A
lowPriorityISR_TMR0SqBlink        000001AC
lowPriorityISR_TMR0TrySa          000001BC
lowPriorityISR_TMR0TrySq          0000019A
lowPriorityISR_redirect           00000048
main                              000001E8
mainCheckPlayback                 0000021E
mainCheckSampleWaveshape          0000022C
mainEepromReady                   00000248
mainLoop                          0000020C
mainLoop_noRefresh                000002DA
mainNotSample                     000002D0
mainSampleMono                    000002CE
main_redirect                     00000040
midiChannel                       00000010
midiChannelSelect_exit            00000440
midiChannelSelect_notMOD          00000428
midiChannelSelect_waitForPress    000003F2
midiChannelSelect_waitReleaseMOD  00000400
midiChannelSelect_waitReleaseREC  0000042E
midiFlags                         00000011
midiLastProgramValue              0000000F
midiMessageMapper                 000005A2
midiMessageMapper_doPanic         0000065C
midiMessageMapper_exit            00000756
midiMessageMapper_notAttack       00000702
midiMessageMapper_notControlChan  00000716
midiMessageMapper_notControllerR  0000066C
midiMessageMapper_notMod          000006EE
midiMessageMapper_notNoteOff      00000612
midiMessageMapper_notNoteOn       00000604
midiMessageMapper_notNoteOnWithZ  000005F6
midiMessageMapper_notPG           00000738
midiMessageMapper_notPanic        00000664
midiMessageMapper_notPitchWheel   0000064A
midiMessageMapper_notPolyOff      0000069C
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 253


SYMBOL TABLE
  LABEL                             VALUE 

midiMessageMapper_notPolyOn       000006AC
midiMessageMapper_notRelease      00000716
midiMessageMapper_notSustain      0000068C
midiMessageMapper_notSysEx        00000756
midiMessageMapper_pgCompare       0000072A
midiMessageMapper_pgDone          00000734
midiMessageMapper_pitchPos        00000644
midiMessageMapper_skipChannelChe  000005DC
midiMessageMapper_sustainOff      00000682
midiNoteDeltaTable                0000142E
midiRxMessage                     00000041
midiRxMessage_length              0000000E
midiSelectChannel                 000003D4
midiSelectChannel_refreshLEDs     000003D8
midiState_lastLength              0000000C
midiState_lastStatus              0000000B
midiState_messageNeedsMapping     1
midiThruModeEnabled               2
mixedOutputH                      0000002F
mixedOutputL                      0000002E
mlBlockEraseBytesRemaining        00000018
mlButtonState                     00000000
mlChecksum                        00000001
mlConsecutiveSymbolCount          00000034
mlCount                           00000013
mlCurrentTxByte                   00000017
mlDatPackIntByteCount             00000019
mlDataPayloadBuffer               0000000B
mlDecodedNybble                   0000003E
mlEepromAddress                   0000003F
mlEepromByteCount                 00000040
mlFlags                           00000015
mlNybbleSplitTmp                  00000016
mlPayloadLength                   00000007
mlPerfectPreludeCount             0000001A
mlPeriodBucketHighLimit           00000037
mlPeriodBucketLowLimit            00000036
mlRA4CompareReg                   00000039
mlRunningChecksum                 00000002
mlRxChecksumOk                    1
mlRxCyclePeriodH                  0000003B
mlRxCyclePeriodL                  0000003A
mlRxPreviousSymbolBucket          00000033
mlRxReceivedByte                  00000032
mlRxReceivedPacket                0000001B
mlRxReceivedPacketByteCount       00000031
mlRxSymbolBucket                  00000035
mlRxTransSyncFlag                 0
mlSchmittReadValue                0000003C
mlStartAddress                    00000003
mlSymbolBucketCount               00000038
mlTransitionCount                 0000003D
modeLevel                         00000021
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 254


SYMBOL TABLE
  LABEL                             VALUE 

modulation                        0000001E
modulationBlendTable              0000172E
mootLoader                        00001C00
mootLoader_checkReceive           00001C40
mootLoader_exit                   00001C48
mootLoader_initCore               00001C4C
mootLoader_initHeap               00001C8A
mootLoader_initOsc_lp1            00001C52
mootLoader_receiver               00001E94
mootLoader_receiverListenForTran  00001E96
mootLoader_rxReceiveNextByte      00001FDA
mootLoader_rxReceiveNextByteGO    00001FEE
mootLoader_rxReceiveNextByteRead  00001FDE
mootLoader_rxReceiveNextPacket    00001F92
mootLoader_rxReceiveNextPacketWa  00001FA0
mootLoader_rxReceiverResetHandle  00001F6E
mootLoader_rxRnpPayloadDe_nybble  00001FC2
mootLoader_rxRnpPayloadLp         00001FB0
mootLoader_rxWpmhBlockErase       00001EDA
mootLoader_rxWpmhExit             00001F50
mootLoader_rxWpmhGetNextPacket    00001EEE
mootLoader_rxWriteProgramMemoryH  00001EA8
mootLoader_sendAsNybbles          00001E5C
mootLoader_sendByte               00001E6A
mootLoader_signalErrorA           00001F52
mootLoader_signalErrorALp1        00001F5E
mootLoader_signalErrorALp2        00001F60
mootLoader_signalErrorB           00001F52
mootLoader_signalErrorC           00001F52
mootLoader_stateWaitLp            00001C1C
mootLoader_stateWaitOvLp          00001C26
mootLoader_transmitter            00001C90
mootLoader_wait                   00001E72
mootLoader_waitExit               00001E92
mootLoader_waitIntLp              00001E80
mootLoader_waitLp                 00001E7E
mootLoader_xmitSdppLp             00001DCE
mootLoader_xmitSendDataPayloadCo  00001DF4
mootLoader_xmitSendDataPayloadPa  00001DA4
mootLoader_xmitSendWpmPacket      00001D3A
mootLoader_xmitStartWrite         00001CCA
mootLoader_xmitWpmBlockErase      00001CE4
mootLoader_xmitWpmByteLp          00001CF6
mootLoader_xmitWpmCheckBlockEras  00001D26
mootLoader_xmitWpmNextPayload     00001CEE
mootLoader_xmitWpmSendPayloadCom  00001D2E
mootLoader_xmitWriteProgramMemor  00001CCE
mootloader_rxTestSinglePacketChe  00001F74
needRefresh                       2
nextSampleAddress                 00000016
nextSampleAddresses               000000B2
osc0                              0
osc1                              1
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 255


SYMBOL TABLE
  LABEL                             VALUE 

osc2                              2
osc3                              3
oscAdsrTriggerAttack              00001316
oscAdsrTriggerAttackActive        0000133C
oscAdsrTriggerAttackExit          00001350
oscAdsrTriggerAttackNoReAttack    00001346
oscAdsrTriggerRelease             0000135E
oscAdsrTriggerReleaseActive       00001390
oscAdsrTriggerReleaseExit         0000139A
oscDeltas                         000000CA
oscResetFlags                     0000002B
oscStateFlags                     00000030
pgDec                             1
pitchWheel                        0000001A
polyDepth                         00000024
processRxAsMIDI                   00000488
processRxAsMIDI_Exit              00000590
processRxAsMIDI_RxHandlingDone    0000058A
processRxAsMIDI_checkEOX          00000562
processRxAsMIDI_checkRxFIFO       0000058A
processRxAsMIDI_getLength         000004CC
processRxAsMIDI_getLengthDone     00000518
processRxAsMIDI_lengthIs2         000004E2
processRxAsMIDI_lengthIs3         00000508
processRxAsMIDI_lengthIsNot2      000004E8
processRxAsMIDI_lengthIsNot3      0000050E
processRxAsMIDI_messageComplete   00000568
processRxAsMIDI_noErrors          000004C0
processRxAsMIDI_notStatusContinu  0000054C
processRxAsMIDI_notStatusOrIsEOX  00000536
processRxAsMIDI_readFIFO          0000049C
processRxAsMIDI_readGO            000004AE
processRxAsMIDI_resetUartState    00000530
processRxAsMIDI_rxInProgress      00000542
processRxAsMIDI_tryRunningStatus  00000572
processSoundState                 00000CEC
processSoundState_ADCWait         00000D28
processSoundState_Playback        00000E3E
processSoundState_SoundOn         00000E4C
processSoundState_StartADC        00000D26
processSoundState_cancelVoiceThr  00000D72
processSoundState_clearTransFlag  00001184
processSoundState_exit            00001214
processSoundState_mixer           00001188
processSoundState_recordGo        00000D7E
processSoundState_recordGoForRea  00000D88
processSoundState_sampAmpExit     00000D54
processSoundState_sampAmpNeg      00000D48
processSoundState_soundOnDone     00001214
processSoundState_stopRecording   00000DB2
programValue                      noteNumberByte
r0                                00000003
r1                                00000004
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 256


SYMBOL TABLE
  LABEL                             VALUE 

r2                                00000005
r3                                00000006
r4                                00000007
r5                                00000008
r6                                00000009
r7                                0000000A
ready                             3
recordOrPlayback                  00000020
recordWaitCountdown               0000003C
refreshActiveNoteState            00000A60
refreshActiveNoteState_active     00000A6A
refreshActiveNoteState_exit       00000A78
refreshActiveNoteState_soundIsOf  00000A74
release                           0
releaseDone                       000012D8
sample                            0000002D
sampleChunkCount                  00000013
sampleChunkReady                  0
sampleDataBuffer                  00000072
sampleDataBufferIndex             00000012
sampleEndAddress                  00000014
sampleMidiNoteDeltaTable          0000152E
samplePrescaleCounter             00000022
samplesLoaded                     1
serviceADSR                       0000123E
serviceADSRLoop                   00001268
serviceADSR_exit                  00001300
serviceADSR_oscDone               000012F4
sineTable                         000017AE
sineTableBaseAddress              00000025
softwareStackBaseAddress          000002FF
softwareStackPointerFSR           FSR2
softwareStackPointerINDF          INDF2
softwareStackPointerPLUSW         PLUSW2
softwareStackPointerPOSTDEC       POSTDEC2
softwareStackPointerPOSTINC       POSTINC2
softwareStackPointerPREINC        PREINC2
soundGenFlags                     00000019
soundOn                           6
squareTable                       0000162E
squareTableBaseAddress            00000028
statusTmp                         00000001
sustain                           1
sustainFlags                      0000002C
theDelegatOr                      00000B4E
theDelegatOr_andNotZero           00000C32
theDelegatOr_delInLp              00000C3A
theDelegatOr_delInLpAssignOsc     00000C54
theDelegatOr_delInLpForceAssign   00000C4E
theDelegatOr_delInLpInit          00000C34
theDelegatOr_delInLpNext          00000C84
theDelegatOr_delOutLp             00000C1E
theDelegatOr_delOutLpNext         00000C98
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:20:32         PAGE 257


SYMBOL TABLE
  LABEL                             VALUE 

theDelegatOr_done                 00000CBC
theDelegatOr_undelAndLoopDone     00000C08
theDelegatOr_undelDdNonZero       00000BA4
theDelegatOr_undelInLp            00000BAA
theDelegatOr_undelNextAnd         00000BFC
theDelegatOr_undelNextDD          00000C0C
theDelegatOr_undelOutLp           00000B94
theDelgatOr_doMono                00000CA6
turnSoundOff                      4
turnSoundOn                       3
uartState_currentRxIndex          0000000D
uartState_rxInProgress            0
userInterface_checkConfigRequest  00001412
userInterface_checkConfig_exit    00001428
userInterface_checkConfig_notWF   00001428
userInterface_incMode             000013AE
userInterface_incModeCheckSustai  000013CC
userInterface_incModeDoMono       000013E4
userInterface_incModeDone         000013F0
userInterface_incWaveform         000013F2
userInterface_incWaveformDone     00001410
userInterface_incWaveformInc      00001404
wTmp                              00000000
wavePrescaleCounter               00000023
waveShape                         0000001F

Errors   :     0
Warnings :    25 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

