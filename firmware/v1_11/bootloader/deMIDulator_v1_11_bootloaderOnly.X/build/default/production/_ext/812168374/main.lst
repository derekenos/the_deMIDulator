MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      main.asm                                          *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 ; Software Stack uses FSR2 so hands off!
                      00022 
                      00023 ;**********************************************************************
                      00024 ; ENVIRONMENTAL DEFINES
                      00025 ;**********************************************************************
                      00026 
                      00027         ; define processor
                      00028         ; ..13K50 is default shipping processor, ..14k22 used for development
                      00029         #define PIC18LF13K50
                      00030 ;       #define PIC18LF14K22
                      00031 
                      00032 #ifdef  PIC18LF13K50
                      00033         list            p=18lf13k50                     ; list directive to define processor
                      00034 #endif
                      00035 #ifdef  PIC18LF14K22
                      00036         list            p=18lf14k22                     ; list directive to define processor
                      00037 #endif
                      00038         
                      00039         list            r=dec                                           ; set default radix to decimal
                      00040 
                      00041         #define USER_CODE_START_ADDRESS         0x0040  ; address must be aligned to 64-byte boundary
                      00042 
                      00043 #ifdef PIC18LF13K50
                      00044         ; (Program Memory Size - Boot Block Size)
                      00045         ;       4kW (8192 bytes) - 512W (1024 bytes)
                      00046         ; 0x2000 - 0x0400 = 0x1C00
                      00047         #define BOOTLOADER_START_ADDRESS        0x1C00
                      00048 #endif
                      00049 
                      00050 #ifdef PIC18LF14K22
                      00051         ; (Program Memory Size - Boot Block Size)
                      00052         ;       8kW (16384 bytes) - 1kW (2048 bytes)
                      00053         ; 0x4000 - 0x0800 = 0x3800
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00054         #define BOOTLOADER_START_ADDRESS        0x3800
                      00055 #endif
                      00056 
                      00057         #define USER_CODE_END_ADDRESS                   BOOTLOADER_START_ADDRESS - 2
                      00058 
                      00059 ;**********************************************************************
                      00060 ; CONDITIONAL ASSEMBLY DEFINES
                      00061 ;**********************************************************************
                      00062 
                      00063 ; THROUGH_HOLE_PCB option swaps Sine/Square switch and LED assignments
                      00064         #define THROUGH_HOLE_PCB
                      00065 
                      00066 ; LED_POLARITY_REVERSED option reverses logic polarity for LEDs
                      00067         #define LED_POLARITY_REVERSED
                      00068         
                      00069 ; LED_STEADY_STATE_DISABLED option saves 4mA per LED but introduces high frequency noise during playback
                      00070 ;       #define LED_STEADY_STATE_DISABLED
                      00071 
                      00072 ;       MIDI_DEBUG_TRIGGER_ENABLED option enables debug code in midiMessageMapper()
                      00073 ; MIDI_DEBUG_CC_NAME defines which on/off (127/0) controller number to use
                      00074 ;       #define MIDI_DEBUG_TRIGGER_ENABLED
                      00075 ;       #define MIDI_DEBUG_CC_NAME                                      GENERAL_PURPOSE_CONTROLLER_7
                      00076         
                      00077 ;**********************************************************************
                      00078 ; INCLUDE FILES
                      00079 ;**********************************************************************
                      00080 
                      00081 #ifdef  PIC18LF13K50
                      00082         ; processor specific variable definitions
                      00083         #include        <p18lf13k50.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC18LF13K50 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2011 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      01517         LIST
                      00084         ; configuration bit options copied from p18lf13k50.inc
                      00085         #include        "../include/config_PIC18LF13K50.inc"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      config.inc                                        *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef CONFIG_INC
                      00022 #define CONFIG_INC
                      00023 
                      00024 ;==========================================================================
                      00025 ;
                      00026 ;   IMPORTANT: For the PIC18 devices, the __CONFIG directive has been
                      00027 ;              superseded by the CONFIG directive.  The following settings
                      00028 ;              are available for this device.
                      00029 ;
                      00030 ;   CPU System Clock Selection bit:
                      00031 ;     CPUDIV = NOCLKDIV    No CPU System Clock divide
                      00032 ;     CPUDIV = CLKDIV2     CPU System Clock divided by 2
                      00033 ;     CPUDIV = CLKDIV3     CPU System Clock divided by 3
                      00034 ;     CPUDIV = CLKDIV4     CPU System Clock divided by 4
                      00035         CONFIG CPUDIV = NOCLKDIV
                      00036 
                      00037 ;
                      00038 ;   USB Clock Selection bit:
                      00039 ;     USBDIV = OFF         USB Clock comes directly from the OSC1/OSC2 oscillator block; no divide
                      00040 ;     USBDIV = ON          USB clock comes from the OSC1/OSC2 divided by 2
                      00041         CONFIG USBDIV = OFF
                      00042 
                      00043 ;
                      00044 ;   Oscillator Selection bits:
                      00045 ;     FOSC = LP            LP oscillator
                      00046 ;     FOSC = XT            XT oscillator
                      00047 ;     FOSC = HS            HS oscillator
                      00048 ;     FOSC = ERCCLKOUT     External RC oscillator, CLKOUT function on OSC2
                      00049 ;     FOSC = ECCLKOUTH     EC, CLKOUT function on OSC2 (high)
                      00050 ;     FOSC = ECH           EC (high)
                      00051 ;     FOSC = ERC           External RC oscillator
                      00052 ;     FOSC = IRC           Internal RC oscillator
                      00053 ;     FOSC = IRCCLKOUT     Internal RC oscillator, CLKOUT function on OSC2
                      00054 ;     FOSC = ECCLKOUTM     EC, CLKOUT function on OSC2 (medium)
                      00055 ;     FOSC = ECM           EC (medium)
                      00056 ;     FOSC = ECCLKOUTL     EC, CLKOUT function on OSC2 (low)
                      00057 ;     FOSC = ECL           EC (low)
                      00058         CONFIG FOSC = IRC
                      00059 
                      00060 ;
                      00061 ;   4 X PLL Enable bit:
                      00062 ;     PLLEN = OFF          PLL is under software control
                      00063 ;     PLLEN = ON           Oscillator multiplied by 4
                      00064         CONFIG PLLEN = OFF
                      00065 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00066 ;
                      00067 ;   Primary Clock Enable Bit:
                      00068 ;     PCLKEN = OFF         Primary clock is under software control
                      00069 ;     PCLKEN = ON          Primary clock enabled
                      00070         CONFIG PCLKEN = ON
                      00071 
                      00072 ;
                      00073 ;   Fail-Safe Clock Monitor Enable bit:
                      00074 ;     FCMEN = OFF          Fail-Safe Clock Monitor disabled
                      00075 ;     FCMEN = ON           Fail-Safe Clock Monitor enabled
                      00076         CONFIG FCMEN = OFF
                      00077 
                      00078 ;
                      00079 ;   Internal/External Oscillator Switchover bit:
                      00080 ;     IESO = OFF           Oscillator Switchover mode disabled
                      00081 ;     IESO = ON            Oscillator Switchover mode enabled
                      00082         CONFIG IESO = ON
                      00083 
                      00084 ;
                      00085 ;   Power-up Timer Enable bit:
                      00086 ;     PWRTEN = ON          PWRT enabled
                      00087 ;     PWRTEN = OFF         PWRT disabled
                      00088         CONFIG PWRTEN = ON
                      00089 
                      00090 ;
                      00091 ;   Brown-out Reset Enable bits:
                      00092 ;     BOREN = OFF          Brown-out Reset disabled in hardware and software
                      00093 ;     BOREN = ON           Brown-out Reset enabled and controlled by software (SBOREN is enabled)
                      00094 ;     BOREN = NOSLP        Brown-out Reset enabled in hardware only and disabled in Sleep mode (SBOREN i
                            s disabled)
                      00095 ;     BOREN = SBORDIS      Brown-out Reset enabled in hardware only (SBOREN is disabled)
                      00096         CONFIG BOREN = ON
                      00097 
                      00098 ;
                      00099 ;   Brown Out Voltage:
                      00100 ;     BORV = 30            VBOR set to 3.0 V nominal
                      00101 ;     BORV = 27            VBOR set to 2.7 V nominal
                      00102 ;     BORV = 22            VBOR set to 2.2 V nominal
                      00103 ;     BORV = 19            VBOR set to 1.9 V nominal
                      00104         CONFIG BORV = 19
                      00105 
                      00106 ;
                      00107 ;   Watchdog Timer Enable bit:
                      00108 ;     WDTEN = OFF          WDT is controlled by SWDTEN bit of the WDTCON register
                      00109 ;     WDTEN = ON           WDT is always enabled. SWDTEN bit has no effect.
                      00110         CONFIG WDTEN = OFF
                      00111 
                      00112 ;
                      00113 ;   Watchdog Timer Postscale Select bits:
                      00114 ;     WDTPS = 1            1:1
                      00115 ;     WDTPS = 2            1:2
                      00116 ;     WDTPS = 4            1:4
                      00117 ;     WDTPS = 8            1:8
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00118 ;     WDTPS = 16           1:16
                      00119 ;     WDTPS = 32           1:32
                      00120 ;     WDTPS = 64           1:64
                      00121 ;     WDTPS = 128          1:128
                      00122 ;     WDTPS = 256          1:256
                      00123 ;     WDTPS = 512          1:512
                      00124 ;     WDTPS = 1024         1:1024
                      00125 ;     WDTPS = 2048         1:2048
                      00126 ;     WDTPS = 4096         1:4096
                      00127 ;     WDTPS = 8192         1:8192
                      00128 ;     WDTPS = 16384        1:16384
                      00129 ;     WDTPS = 32768        1:32768
                      00130         CONFIG WDTPS = 1
                      00131 
                      00132 ;
                      00133 ;   MCLR Pin Enable bit:
                      00134 ;     MCLRE = OFF          RA3 input pin enabled; MCLR disabled
                      00135 ;     MCLRE = ON           MCLR pin enabled, RA3 input pin disabled
                      00136         CONFIG MCLRE = OFF
                      00137 
                      00138 ;
                      00139 ;   HFINTOSC Fast Start-up bit:
                      00140 ;     HFOFST = OFF         The system clock is held off until the HFINTOSC is stable.
                      00141 ;     HFOFST = ON          HFINTOSC starts clocking the CPU without waiting for the oscillator to stabli
                            ze.
                      00142         CONFIG HFOFST = OFF
                      00143 
                      00144 ;
                      00145 ;   Stack Full/Underflow Reset Enable bit:
                      00146 ;     STVREN = OFF         Stack full/underflow will not cause Reset
                      00147 ;     STVREN = ON          Stack full/underflow will cause Reset
                      00148         CONFIG STVREN = ON
                      00149 
                      00150 ;
                      00151 ;   Single-Supply ICSP Enable bit:
                      00152 ;     LVP = OFF            Single-Supply ICSP disabled
                      00153 ;     LVP = ON             Single-Supply ICSP enabled
                      00154         CONFIG LVP = OFF
                      00155 
                      00156 ;
                      00157 ;   Boot Block Size Select Bit:
                      00158 ;     BBSIZ = OFF          512W boot block size
                      00159 ;     BBSIZ = ON           1kW boot block size
                      00160         CONFIG BBSIZ = OFF
                      00161 
                      00162 ;
                      00163 ;   Extended Instruction Set Enable bit:
                      00164 ;     XINST = OFF          Instruction set extension and Indexed Addressing mode disabled (Legacy mode)
                      00165 ;     XINST = ON           Instruction set extension and Indexed Addressing mode enabled
                      00166         CONFIG XINST = OFF
                      00167 
                      00168 ;
                      00169 ;   Code Protection bit:
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00170 ;     CP0 = ON             Block 0 code-protected
                      00171 ;     CP0 = OFF            Block 0 not code-protected
                      00172         CONFIG CP0 = OFF
                      00173 
                      00174 ;
                      00175 ;   Code Protection bit:
                      00176 ;     CP1 = ON             Block 1 code-protected
                      00177 ;     CP1 = OFF            Block 1 not code-protected
                      00178         CONFIG CP1 = OFF
                      00179         
                      00180 ;
                      00181 ;   Boot Block Code Protection bit:
                      00182 ;     CPB = ON             Boot block code-protected
                      00183 ;     CPB = OFF            Boot block not code-protected
                      00184         CONFIG CPB = OFF
                      00185 
                      00186 ;
                      00187 ;   Data EEPROM Code Protection bit:
                      00188 ;     CPD = ON             Data EEPROM code-protected
                      00189 ;     CPD = OFF            Data EEPROM not code-protected
                      00190         CONFIG CPD = OFF
                      00191 
                      00192 ;
                      00193 ;   Write Protection bit:
                      00194 ;     WRT0 = ON            Block 0 write-protected
                      00195 ;     WRT0 = OFF           Block 0 not write-protected
                      00196         CONFIG WRT0 = OFF
                      00197         
                      00198 ;
                      00199 ;   Write Protection bit:
                      00200 ;     WRT1 = ON            Block 1 write-protected
                      00201 ;     WRT1 = OFF           Block 1 not write-protected
                      00202         CONFIG WRT1 = OFF
                      00203 
                      00204 ;
                      00205 ;   Boot Block Write Protection bit:
                      00206 ;     WRTB = ON            Boot block write-protected
                      00207 ;     WRTB = OFF           Boot block not write-protected
                      00208         CONFIG WRTB = OFF
                      00209 
                      00210 ;
                      00211 ;   Configuration Register Write Protection bit:
                      00212 ;     WRTC = ON            Configuration registers write-protected
                      00213 ;     WRTC = OFF           Configuration registers not write-protected
                      00214         CONFIG WRTC = OFF
                      00215 
                      00216 ;
                      00217 ;   Data EEPROM Write Protection bit:
                      00218 ;     WRTD = ON            Data EEPROM write-protected
                      00219 ;     WRTD = OFF           Data EEPROM not write-protected
                      00220         CONFIG WRTD = OFF
                      00221 
                      00222 ;
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00223 ;   Table Read Protection bit:
                      00224 ;     EBTR0 = ON           Block 0 protected from table reads executed in other blocks
                      00225 ;     EBTR0 = OFF          Block 0 not protected from table reads executed in other blocks
                      00226         CONFIG EBTR0 = OFF
                      00227 
                      00228 ;
                      00229 ;   Table Read Protection bit:
                      00230 ;     EBTR1 = ON           Block 1 protected from table reads executed in other blocks
                      00231 ;     EBTR1 = OFF          Block 1 not protected from table reads executed in other blocks
                      00232         CONFIG EBTR1 = OFF
                      00233 
                      00234 ;
                      00235 ;   Boot Block Table Read Protection bit:
                      00236 ;     EBTRB = ON           Boot block protected from table reads executed in other blocks
                      00237 ;     EBTRB = OFF          Boot block not protected from table reads executed in other blocks
                      00238         CONFIG EBTRB = OFF
                      00239 
                      00240 ;
                      00241 ;==========================================================================
                      00242 
                      00243 #endif
                      00086 #endif
                      00087 
                      00088 #ifdef  PIC18LF14K22
                      00089         ; processor specific variable definitions
                      00090         #include        <p18lf14k22.inc>
                      00091         ; configuration bit options copied from p18lf13k50.inc
                      00092         #include        "../include/config_PIC18LF14K22.inc"
                      00093 #endif
                      00094 
                      00095         #include        "../header/midi.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      midi.h                                            *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef _MIDIH_
                      00022 #define _MIDIH_
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00023 
                      00024 
                      00025 ; ******************* MIDI SYSEX DEFINES ***********************
                      00026 #define         VENDOR_ID       0x77
                      00027 #define         DEVICE_ID       0x1D
                      00028 #define         TERMINAL_PACKET_COMMAND_VALUE   0x1E
                      00029 
                      00030 ; ******************* MIDI BUFFER SIZES ***********************
                      00031 
                      00032 #define         MAX_MIDI_MESSAGE_SIZE   24
                      00033 #define         ACTIVE_NOTE_TABLE_SIZE  25
                      00034 
                      00035 
                      00036 ; ******************* STATUS BYTE DEFINITONS ***********************
                      00037 
                      00038 ; Note that lower nybble (channel) should be masked out for comparison
                      00039 ;------------------------
                      00040 #define         NOTE_OFF                                0x80
                      00041 #define         NOTE_ON                                 0x90
                      00042 #define         KEY_PRESSURE                    0xA0
                      00043 #define         CONTROL_CHANGE                  0xB0
                      00044 #define         PROGRAM_CHANGE                  0xC0
                      00045 #define         CHANNEL_PRESSURE                0xD0
                      00046 #define         PITCH_WHEEL                             0xE0
                      00047 
                      00048 ; Sysex Status Byte Definitions
                      00049 #define         SYSEX                                   0xF0
                      00050 #define         EOX                                             0xF7
                      00051 
                      00052 #define         NOTE_OFF_MESSAGE_LENGTH                         3
                      00053 #define         NOTE_ON_MESSAGE_LENGTH                          3
                      00054 #define         KEY_PRESSURE_MESSAGE_LENGTH                     3
                      00055 #define         CONTROL_CHANGE_MESSAGE_LENGTH           3
                      00056 #define         PROGRAM_CHANGE_MESSAGE_LENGTH           2
                      00057 #define         CHANNEL_PRESSURE_MESSAGE_LENGTH         2
                      00058 #define         PITCH_WHEEL_MESSAGE_LENGTH                      3
                      00059 
                      00060 ; SysEx Sub Types
                      00061 ;----------------------------
                      00062 #define         NON_REAL_TIME                                           0x7E
                      00063 #define         GENERAL_INFORMATION                                     0x06
                      00064 #define         IDENTITY_REQUEST                                        0x01
                      00065 #define         IDENTITY_REPLY                                          0x02
                      00066 
                      00067 ; Control Change Data Types
                      00068 ;----------------------------
                      00069 #define         BANK_SELECT_MSB                                         0
                      00070 #define         MODULATION_WHEEL_MSB                            1
                      00071 #define         BREATH_CONTROLLER_MSB                           2
                      00072 #define         UNDEFINED_003                                           3
                      00073 #define         FOOT_CONTROLLER_MSB                                     4
                      00074 #define         PORTAMENTO_TIME                                         5
                      00075 #define         DATA_ENTRY_MSB                                          6
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00076 #define         CHANNEL_VOLUME_MSB                                      7
                      00077 #define         BALANCE_MSB                                                     8
                      00078 #define         UNDEFINED_MSB                                           9
                      00079 #define         PAN_MSB                                                         10
                      00080 #define         EXPRESSION_MSB                                          11
                      00081 #define         EFFECT_CONTROL_1_MSB                            12
                      00082 #define         EFFECT_CONTROL_2_MSB                            13
                      00083 #define         UNDEFINED_014                                           14
                      00084 #define         UNDEFINED_015                                           15
                      00085 #define         GENERAL_PURPOSE_CONTROLLER_1_MSB        16
                      00086 #define         GENERAL_PURPOSE_CONTROLLER_2_MSB        17
                      00087 #define         GENERAL_PURPOSE_CONTROLLER_3_MSB        18
                      00088 #define         GENERAL_PURPOSE_CONTROLLER_4_MSB        19
                      00089 #define         UNDEFINED_020                                           20
                      00090 #define         UNDEFINED_021                                           21
                      00091 #define         UNDEFINED_022                                           22
                      00092 #define         UNDEFINED_023                                           23
                      00093 #define         UNDEFINED_024                                           24
                      00094 #define         UNDEFINED_025                                           25
                      00095 #define         UNDEFINED_026                                           26
                      00096 #define         UNDEFINED_027                                           27
                      00097 #define         UNDEFINED_028                                           28
                      00098 #define         UNDEFINED_029                                           29
                      00099 #define         UNDEFINED_030                                           30
                      00100 #define         UNDEFINED_031                                           31
                      00101 #define         BANK_SELECT_LSB                                         32
                      00102 #define         MODULATION_WHEEL_LSB                            33
                      00103 #define         BREATH_CONTROLLER_LSB                           34
                      00104 #define         UNDEFINED_035                                           35
                      00105 #define         FOOT_CONTROLLER_LSB                                     36
                      00106 #define         PORTAMENTO_TIME_LSB                                     37
                      00107 #define         DATA_ENTRY_LSB                                          38
                      00108 #define         CHANNEL_VOLUME_LSB                                      39
                      00109 #define         BALANCE_LSB                                                     40
                      00110 #define         UNDEFINED_041                                           41
                      00111 #define         PAN_LSB                                                         42
                      00112 #define         EXPRESSION_LSB                                          43
                      00113 #define         EFFECT_CONTROL_1_LSB                            44
                      00114 #define         EFFECT_CONTROL_2_LSB                            45
                      00115 #define         UNDEFINED_046                                           46
                      00116 #define         UNDEFINED_047                                           47
                      00117 #define         GENERAL_PURPOSE_CONTROLLER_1_LSB        48
                      00118 #define         GENERAL_PURPOSE_CONTROLLER_2_LSB        49
                      00119 #define         GENERAL_PURPOSE_CONTROLLER_3_LSB        50
                      00120 #define         GENERAL_PURPOSE_CONTROLLER_4_LSB        51
                      00121 #define         UNDEFINED_052                                           52
                      00122 #define         UNDEFINED_053                                           53
                      00123 #define         UNDEFINED_054                                           54
                      00124 #define         UNDEFINED_055                                           55
                      00125 #define         UNDEFINED_056                                           56
                      00126 #define         UNDEFINED_057                                           57
                      00127 #define         UNDEFINED_058                                           58
                      00128 #define         UNDEFINED_059                                           59
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00129 #define         UNDEFINED_060                                           60
                      00130 #define         UNDEFINED_061                                           61
                      00131 #define         UNDEFINED_062                                           62
                      00132 #define         UNDEFINED_063                                           63
                      00133 #define         SUSTAIN_PEDAL                                           64
                      00134 #define         PORTAMENTO_ONOFF                                        65
                      00135 #define         SOSTENUTO                                                       66
                      00136 #define         SOFT_PEDAL                                                      67
                      00137 #define         LEGATO_FOOTSWITCH                                       68
                      00138 #define         HOLD_2                                                          69
                      00139 #define         SOUND_CONTROLLER_1_DEFAULT_SOUND_VARIATION                              70
                      00140 #define         SOUND_CONTROLLER_2_DEFAULT_TIMBRE_HARMONIC_QUALITY              71
                      00141 #define         SOUND_CONTROLLER_3_DEFAULT_RELEASE_TIME                                 72
                      00142 #define         SOUND_CONTROLLER_4_DEFAULT_ATTACK_TIME                                  73
                      00143 #define         SOUND_CONTROLLER_5_DEFAULT_BRIGHTNESS                                   74
                      00144 #define         SOUND_CONTROLLER_6_GM2_DEFAULT_DECAY_TIME                               75
                      00145 #define         SOUND_CONTROLLER_7_GM2_DEFAULT_VIBRATO_RATE                             76
                      00146 #define         SOUND_CONTROLLER_8_GM2_DEFAULT_VIBRATO_DEPTH                    77
                      00147 #define         SOUND_CONTROLLER_9_GM2_DEFAULT_VIBRATO_DELAY                    78
                      00148 #define         SOUND_CONTROLLER_10_GM2_DEFAULT_UNDEFINED                               79
                      00149 #define         GENERAL_PURPOSE_CONTROLLER_5                                                    80
                      00150 #define         GENERAL_PURPOSE_CONTROLLER_6                                                    81
                      00151 #define         GENERAL_PURPOSE_CONTROLLER_7                                                    82
                      00152 #define         GENERAL_PURPOSE_CONTROLLER_8                                                    83
                      00153 #define         PORTAMENTO_CONTROL                                                                      
                                    84
                      00154 #define         UNDEFINED_85                                                                    85
                      00155 #define         UNDEFINED_86                                                                    86
                      00156 #define         UNDEFINED_87                                                                    87
                      00157 #define         UNDEFINED_88                                                                    88
                      00158 #define         UNDEFINED_89                                                                    89
                      00159 #define         UNDEFINED_90                                                                    90
                      00160 #define         EFFECTS_1_DEPTH_DEFAULT_REVERB_SEND                             91
                      00161 #define         EFFECTS_2_DEPTH_DEFAULT_TREMOLO_DEPTH                   92
                      00162 #define         EFFECTS_3_DEPTH_DEFAULT_CHORUS_SEND                             93
                      00163 #define         EFFECTS_4_DEPTH_DEFAULT_CELESTE_[DETUNE]_DEPTH  94
                      00164 #define         EFFECTS_5_DEPTH_DEFAULT_PHASER_DEPTH                    95
                      00165 #define         DATA_INCREMENT                                                                  96
                      00166 #define         DATA_DECREMENT                                                                  97
                      00167 #define         NON_REG_PARAMETER_NUMBER_LSB                            98
                      00168 #define         NON_REG_PARAMETER_NUMBER_MSB                            99
                      00169 #define         REGISTERED_PARAMETER_NUMBER_LSB                                 100
                      00170 #define         REGISTERED_PARAMETER_NUMBERMSB                                  101
                      00171 #define         UNDEFINED_102                                           102
                      00172 #define         UNDEFINED_103                                           103
                      00173 #define         UNDEFINED_104                                           104
                      00174 #define         UNDEFINED_105                                           105
                      00175 #define         UNDEFINED_106                                           106
                      00176 #define         UNDEFINED_107                                           107
                      00177 #define         UNDEFINED_108                                           108
                      00178 #define         UNDEFINED_109                                           109
                      00179 #define         UNDEFINED_110                                           110
                      00180 #define         UNDEFINED_111                                           111
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00181 #define         UNDEFINED_112                                           112
                      00182 #define         UNDEFINED_113                                           113
                      00183 #define         UNDEFINED_114                                           114
                      00184 #define         UNDEFINED_115                                           115
                      00185 #define         UNDEFINED_116                                           116
                      00186 #define         UNDEFINED_117                                           117
                      00187 #define         UNDEFINED_118                                           118
                      00188 #define         UNDEFINED_119                                           119
                      00189 #define         ALL_SOUND_OFF                                           120
                      00190 #define         RESET_ALL_CONTROLLERS                           121
                      00191 #define         LOCAL_CONTROL_ONOFF                                     122
                      00192 #define         ALL_NOTES_OFF                                           123
                      00193 #define         OMNI_MODE_OFF                                           124
                      00194 #define         OMNI_MODE_ON                                            125
                      00195 #define         POLY_MODE_OFF                                           126
                      00196 #define         POLY_MODE_ON                                            127
                      00197 
                      00198 
                      00199 ; ******************* MIDI MESSAGE STATES ***********************
                      00200 
                      00201 #define CHANNEL                                         0x00
                      00202 #define DATA_BYTE0                                      0x01
                      00203 #define DATA_BYTE1                                      0x02
                      00204 #define MESSAGE_COMPLETE                        0xFF
                      00205 
                      00206 #define NOTE_COMPLETE                           DATA_BYTE1
                      00207 #define AFTERTOUCH_COMPLETE                     DATA_BYTE1
                      00208 #define CONTROL_CHANGE_COMPLETE         DATA_BYTE1
                      00209 #define PROGRAM_CHANGE_COMPLETE         DATA_BYTE0
                      00210 #define PITCH_WHEEL_COMPLETE            DATA_BYTE1
                      00211 
                      00212 
                      00213 ; ******************* FLAG VARIABLE DEFINITIONS ***********************
                      00214 
                      00215 ; midiFlags (bits 3:7 free for use by other modules)
                      00216 #define uartState_rxInProgress                  0
                      00217 #define midiState_messageNeedsMapping   1
                      00218 #define midiThruModeEnabled                             2
                      00219 
                      00220 
                      00221 #endif
                      00096         #include        "../header/eeprom.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      eeprom.h                                          *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef _EEPROMH_
                      00022 #define _EEPROMH_
                      00023 
                      00024 ; ******************* FLAG VARIABLE DEFINITIONS ***********************
                      00025 
                      00026 ; eepromFlags
                      00027 #define sampleChunkReady        0
                      00028 #define samplesLoaded                   1
                      00029 #define intState                                        2
                      00030 #define ready                                           3
                      00031 
                      00032 ; CAT25128 Status reg flags
                      00033 #define NOT_RDY 0
                      00034 #define WEL                     1
                      00035 #define BP0                     2
                      00036 #define BP1                     3
                      00037 #define WPEN            7
                      00038 
                      00039 ; ******************* COMMAND DEFINES ***********************
                      00040 #define EE_WREN         B'00000110'     ; Enable Write Operations
                      00041 #define EE_WRDI         B'00000100'     ; Disable Write Operations
                      00042 #define EE_RDSR         B'00000101'     ; Read Status Register
                      00043 #define EE_WRSR         B'00000001'     ; Write Status Register
                      00044 #define EE_READ         B'00000011'     ; Read Data from Memory
                      00045 #define EE_WRITE        B'00000010'     ; Write Data to Memory
                      00046 
                      00047 ; ******************* GENERAL DEFINES ***********************
                      00048 #define SAMPLE_DATA_BUFFER_SIZE 64
                      00049 #define EEPROM_SIZE_BITS 128000
                      00050 #define NEXT_SAMPLE_ADDRESSES_EL_SIZE   2
                      00051 
                      00052 ;**********************************************************************
                      00053 ; MACROS
                      00054 ;**********************************************************************
                      00055 
                      00056 
                      00057 ;**********************************************************************
                      00058 ASSERT_SS       MACRO
                      00059         bcf             LATC, RC6, ACCESS       ; Chip select is active
                      00060         ENDM
                      00061 
                      00062 ;**********************************************************************
                      00063 DEASSERT_SS     MACRO
                      00064         bsf             LATC, RC6, ACCESS       ; Chip select is idle
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00065         ENDM
                      00066 
                      00067 ;**********************************************************************
                      00068 EE_DISABLE_INTS MACRO
                      00069         bcf             eepromFlags, intState, ACCESS
                      00070         btfsc   INTCON, GIE, ACCESS
                      00071         bsf             eepromFlags, intState, ACCESS
                      00072         bcf             INTCON, GIE, ACCESS
                      00073         ENDM
                      00074 
                      00075 ;**********************************************************************
                      00076 EE_RESTORE_INTS MACRO
                      00077         btfsc   eepromFlags, intState, ACCESS
                      00078         bsf             INTCON, GIE, ACCESS
                      00079         ENDM
                      00080 
                      00081 ;**********************************************************************
                      00082 WRITE_INTERNAL_EEPROM   MACRO   literal_address, register_value
                      00083         local   writeIntEE_loop
                      00084         
                      00085         ; load address
                      00086         movlw   literal_address
                      00087         movwf   EEADR, ACCESS
                      00088         ; load value
                      00089         movff   register_value, EEDATA
                      00090         ; configure eeprom
                      00091         ; point to EEPROM DATA memory
                      00092         bcf             EECON1, EEPGD, ACCESS
                      00093         ; Access EEPROM/Program
                      00094         bcf             EECON1, CFGS, ACCESS    
                      00095         ; Enable writes
                      00096         bsf             EECON1, WREN, ACCESS
                      00097 
                      00098         ; don't have to disable interrupts because I'm only calling this
                      00099         ; from within the high-priority ISR
                      00100 
                      00101         ; required write enable sequence
                      00102         movlw   0x55
                      00103         movwf   EECON2, ACCESS
                      00104         movlw   0xAA
                      00105         movwf   EECON2, ACCESS
                      00106 
                      00107         ; set WR bit to begin write
                      00108         bsf             EECON1, WR, ACCESS
                      00109 writeIntEE_loop
                      00110         ; wait for write to complete
                      00111         btfsc   EECON1, WR, ACCESS
                      00112         bra             writeIntEE_loop
                      00113         ; disable writes
                      00114         bcf             EECON1, WREN, ACCESS
                      00115 
                      00116         ; point to Program memory
                      00117         bsf             EECON1, EEPGD, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00118 
                      00119         ENDM
                      00120 
                      00121 ;**********************************************************************
                      00122 WRITE_INTERNAL_EEPROM_FROM_REGS MACRO   address, data
                      00123         local   writeIntEE_loop
                      00124         
                      00125         ; load address
                      00126         movff   address, EEADR
                      00127         ; load value
                      00128         movff   data, EEDATA
                      00129         ; configure eeprom
                      00130         ; point to EEPROM DATA memory
                      00131         bcf             EECON1, EEPGD, ACCESS
                      00132         ; Access EEPROM/Program
                      00133         bcf             EECON1, CFGS, ACCESS    
                      00134         ; Enable writes
                      00135         bsf             EECON1, WREN, ACCESS
                      00136 
                      00137         ; don't have to disable interrupts because I'm only calling this
                      00138         ; from within the high-priority ISR
                      00139 
                      00140         ; required write enable sequence
                      00141         movlw   0x55
                      00142         movwf   EECON2, ACCESS
                      00143         movlw   0xAA
                      00144         movwf   EECON2, ACCESS
                      00145 
                      00146         ; set WR bit to begin write
                      00147         bsf             EECON1, WR, ACCESS
                      00148 writeIntEE_loop
                      00149         ; wait for write to complete
                      00150         btfsc   EECON1, WR, ACCESS
                      00151         bra             writeIntEE_loop
                      00152         ; disable writes
                      00153         bcf             EECON1, WREN, ACCESS
                      00154 
                      00155         ; point to Program memory
                      00156         bsf             EECON1, EEPGD, ACCESS
                      00157 
                      00158         ENDM
                      00159 
                      00160 ;;**********************************************************************
                      00161 ;;SPI_TX_LITERAL_RX_IN_WREG     MACRO   value
                      00162 ;       local   waitLoop
                      00163 ;
                      00164 ;; routine as recommended in Microchip PIC18F2458/2553/4458/4553 errata
                      00165 ;
                      00166 ;       ; clear interrupt flag
                      00167 ;       bcf             PIR1, SSPIF, ACCESS
                      00168 ;
                      00169 ;       ; perform read, even if the data in SSPBUF is not important 
                      00170 ;       movf    SSPBUF, w, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00171 ;
                      00172 ;       ; SSPBUF = value
                      00173 ;       movlw   value
                      00174 ;       movwf   SSPBUF, ACCESS
                      00175 ;
                      00176 ;       ; wait fro transfer to complete
                      00177 ;waitLoop
                      00178 ;       btfss   PIR1, SSPIF, ACCESS
                      00179 ;       bra             waitLoop
                      00180 ;
                      00181 ;       ; the data received should be valid
                      00182 ;       movf    SSPBUF, w, ACCESS
                      00183 ;
                      00184 ;       ENDM
                      00185                                                 
                      00186 ;;**********************************************************************
                      00187 ;SPI_TX_WREG_RX_IN_WREG MACRO
                      00188 ;       local   waitLoop
                      00189 ;
                      00190 ;       ; save WREG to software stack
                      00191 ;       PUSH_R  WREG
                      00192 ;       
                      00193 ;; routine as recommended in Microchip PIC18F2458/2553/4458/4553 errata
                      00194 ;       ; clear interrupt flag
                      00195 ;       bcf             PIR1, SSPIF, ACCESS
                      00196 ;
                      00197 ;       ; perform read, even if the data in SSPBUF is not important 
                      00198 ;       movf    SSPBUF, w, ACCESS
                      00199 ;
                      00200 ;       ; SSPBUF = restored WREG from software stack
                      00201 ;       POP_R   WREG
                      00202 ;       movwf   SSPBUF, ACCESS
                      00203 ;
                      00204 ;       ; wait for transfer to complete
                      00205 ;waitLoop
                      00206 ;       btfss   PIR1, SSPIF, ACCESS
                      00207 ;       bra             waitLoop
                      00208 ;
                      00209 ;       ; the data received should be valid
                      00210 ;       movf    SSPBUF, w, ACCESS
                      00211 ;
                      00212 ;       ENDM
                      00213 
                      00214 #endif
                      00097         #include        "../header/softwareStack.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      softwareStack.h                                   *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef SOFTWARESTACK_H
                      00022 #define SOFTWARESTACK_H
                      00023 
                      00024         #define softwareStackPointerFSR         FSR2
                      00025         #define softwareStackPointerINDF        INDF2
                      00026         #define softwareStackPointerPOSTINC     POSTINC2
                      00027         #define softwareStackPointerPOSTDEC     POSTDEC2
                      00028         #define softwareStackPointerPREINC      PREINC2 
                      00029         #define softwareStackPointerPLUSW       PLUSW2  
                      00030 
                      00031 ; **** MACRO: PUSH_R    regName
                      00032 PUSH_R  MACRO   regName
                      00033         movff   regName, softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00034                 ENDM
                      00035                 
                      00036 ; **** MACRO: POP_R     regName
                      00037 POP_R   MACRO   regName
                      00038         movff   softwareStackPointerPREINC, regName     ; ++softwareStackPointerINDF = regName
                      00039                 ENDM
                      00040 
                      00041 #endif
                      00098         #include        "../header/soundGen.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      soundGen.h                                        *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00020 
                      00021 #ifndef _SOUNDGENH_
                      00022 #define _SOUNDGENH_
                      00023 
                      00024 ;**********************************************************************
                      00025 ; GENERAL
                      00026 ;**********************************************************************
                      00027 
                      00028 ; Current code structure requires that MAX_POLY_DEPTH be set to 4!
                      00029 #define MAX_POLY_DEPTH                                  4       
                      00030 
                      00031 #define ACTIVE_NOTE_DELTAS_ELEMENT_SIZE 2
                      00032 #define ACTIVE_NOTE_DELTAS_SIZE                 MAX_POLY_DEPTH * ACTIVE_NOTE_DELTAS_ELEMENT_SIZE
                      00033 
                      00034 #define DELEGATED_DELTAS_ELEMENT_SIZE   2
                      00035 #define DELEGATED_DELTAS_SIZE                   MAX_POLY_DEPTH * DELEGATED_DELTAS_ELEMENT_SIZE
                      00036 
                      00037 #define OSC_DELTAS_ELEMENT_SIZE                 2
                      00038 #define OSC_DELTAS_SIZE                                 MAX_POLY_DEPTH * OSC_DELTAS_ELEMENT_SIZE
                      00039 
                      00040 #define ACCUMULATORS_ELEMENT_SIZE               4
                      00041 #define ACCUMULATORS_SIZE                               MAX_POLY_DEPTH * ACCUMULATORS_ELEMENT_SIZE
                      00042 
                      00043 #define ACTIVE_OUTPUT_VALUES_EL_SIZE    1
                      00044 #define ACTIVE_OUTPUT_VALUES_SIZE               MAX_POLY_DEPTH * ACTIVE_OUTPUT_VALUES_EL_SIZE
                      00045 
                      00046 #define LED_BLINK_RATE_VOICE_THROUGH    20
                      00047 #define LED_BLINK_RATE_VOICE_RECORD             6
                      00048 
                      00049 ; set soundGen timebase prescales for wave and sample modes
                      00050 ; Timer2 interrupt period is currently 32uS
                      00051 ; set sample timebase period to 192uS (5208 Hz)
                      00052 #define SAMPLE_PRESCALE 6
                      00053 ; wave sine/square timebase period to 64uS (15.625 kHz)
                      00054 #define WAVE_PRESCALE   2
                      00055 
                      00056 #define MAX_MODE_LEVEL  MONO
                      00057 
                      00058 ; set power-up Attack and Release parameters
                      00059 ; adsrAttackRate and adsrReleaseRate variables have a range of 0 - 64
                      00060 ; rate of 0 == MIDI Attack/Release Time of 127
                      00061 ; rate of 64 == MIDI Attack/Release Time of 0
                      00062 #define ADSR_ATTACK_RATE        63
                      00063 #define ADSR_RELEASE_RATE       16
                      00064 
                      00065 ; set adsr prescale target to increment adsrLimiterRegs value every 19.52mS
                      00066 ; 19.52mS gives a max individual attack/release time of 4.99712 Seconds
                      00067 ; the "increment" value is set by adsrAttackRate and adsrReleaseRate
                      00068 #define ADSR_PRESCALE 610
                      00069 
                      00070 ; changing from 0x00 reference to 0x80 to improve Attack/Release waveform quality
                      00071 #define PWM_IDLE_OUTPUT_VALUE 0x80
                      00072 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00073 ; In SINE mode, this values sets the range (+/- PWM_IDLE_OUTPUT_VALUE) of activeOutputValue within which
                             an oscillator will be
                      00074 ; ungated for changes to its delegatedDelta value.  Only allowing changes when activeOutputValue is appr
                            oximately == PWM_IDLE_OUTPUT_VALUE
                      00075 ; greatly reduces popping caused by Sine wave cycle clipping
                      00076 #define OSC_TRANSITION_OUTPUT_THRESHOLD 0x04
                      00077 
                      00078 ; Audio input DC Bias measurement, 253 ADC sample average:
                      00079 ;   (VDD == 3.2V / 256 = 0.0125V per ADC increment)
                      00080 ;   on-board mic selected, MIC connceted      = 0x47 (@ VDD = 3.2V, 0x47 correlates to 0.8875V)
                      00081 ;   external mic selected, input floating     = 0x38 (@ VDD = 3.2V, 0x38 correlates to 0.7000V)
                      00082 ;   line-in selected, input floating          = 0x53 (@ VDD = 3.2V, 0x53 correlates to 1.0375V)
                      00083 ; Should have balanced these offsets in the hardware. oh well.
                      00084 ; Sine and Square outputs idle at 0x80, so compensate for difference in Sample bias to mitigate popping
                      00085 ; average of above measurement is 0x46, 0x80 - 0x46 = 0x3A
                      00086 ;#define SAMPLE_DC_OFFSET (PWM_IDLE_OUTPUT_VALUE - 0x46)
                      00087 ; DEBUG - sample dc offset will change with component tolerances.  need to set manually for each PCB
                      00088 ; measured 0.930V RMS, 0.930 / 0.0125 = 74.4
                      00089 #define SAMPLE_DC_OFFSET (PWM_IDLE_OUTPUT_VALUE - 74)
                      00090 
                      00091 ; define the time to wait from record button release to start of sample recording
                      00092 ; this is an attempt to eliminate the record button's physical noise from the sample
                      00093 ;   Calculation Method:
                      00094 ;     timer2 int period == 32uS
                      00095 ;     samplePrescaleCounter == 6
                      00096 ;     32uS * 6 = 192uS
                      00097 ;     RECORD_BUTTON_RELEASE_WAIT_TIME = waitTimeInMs / 0.192
                      00098 ;                 maxTime = 192uS * 256 = 49.152mS
                      00099 ;
                      00100 ; load for delay of 5mS. (5 / 0.192 = 26.0417)
                      00101 #define RECORD_BUTTON_RELEASE_WAIT_TIME 26
                      00102 
                      00103 ;**********************************************************************
                      00104 ; ENUM TYPE DEFINITIONS
                      00105 ;**********************************************************************
                      00106 
                      00107 ; waveShape
                      00108 #define SINE 0
                      00109 #define SQUARE 1
                      00110 #define SAMPLE 2
                      00111 
                      00112 ; recordOrPlayback
                      00113 #define VOICE_THROUGH 0
                      00114 #define RECORD 1
                      00115 #define PLAYBACK 2
                      00116 
                      00117 ; modeLevels
                      00118 #define POLY 0
                      00119 #define SUSTAIN 1
                      00120 #define MONO 2
                      00121 
                      00122 
                      00123 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00124 ; FLAG VARIABLE DEFINITIONS
                      00125 ;**********************************************************************
                      00126 
                      00127 ; midiFlags
                      00128 #define turnSoundOn 3
                      00129 #define turnSoundOff 4
                      00130 #define keyPressed 5
                      00131 #define soundOn 6
                      00132 
                      00133 ; soundGenFlags
                      00134 #define delegatorBusy 0
                      00135 #define pgDec 1
                      00136 #define needRefresh 2
                      00137 #define activeNoteTableModified 3
                      00138 
                      00139 ; oscResetFlags
                      00140 #define osc0    0
                      00141 #define osc1    1
                      00142 #define osc2    2
                      00143 #define osc3    3
                      00144 
                      00145 ; oscStateFlags
                      00146 #define release 0
                      00147 #define sustain 1
                      00148 #define decay 2
                      00149 #define attack 3
                      00150 
                      00151 
                      00152 ;**********************************************************************
                      00153 ; MACROS
                      00154 ;**********************************************************************
                      00155 
                      00156 ;**********************************************************************
                      00157 CLEAR_ACCUMULATORS      MACRO
                      00158         local   loop
                      00159 
                      00160         ; init local variables
                      00161         PUSH_R  r0
                      00162         PUSH_R  FSR0L
                      00163         PUSH_R  FSR0H
                      00164         
                      00165         ; load fsr
                      00166         lfsr    FSR0, accumulators
                      00167 
                      00168         ; init count
                      00169         movf    polyDepth, w, ACCESS
                      00170         movwf   r0, ACCESS
                      00171 loop    
                      00172         ; each accumulator is 4 bytes wide
                      00173         clrf    POSTINC0, ACCESS        
                      00174         clrf    POSTINC0, ACCESS        
                      00175         clrf    POSTINC0, ACCESS        
                      00176         clrf    POSTINC0, ACCESS        
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00177         ; decrement count, skip if done
                      00178         decfsz  r0, f, ACCESS
                      00179         bra             loop
                      00180 
                      00181         ; restore variables
                      00182         POP_R   FSR0H
                      00183         POP_R   FSR0L
                      00184         POP_R   r0
                      00185         
                      00186         ENDM
                      00187         
                      00188 
                      00189 ;**********************************************************************
                      00190 ENABLE_SUSTAIN  MACRO
                      00191         comf    oscResetFlags, w, ACCESS
                      00192         andlw   0x0f
                      00193         movwf   sustainFlags, ACCESS
                      00194         ENDM
                      00195         
                      00196 ;**********************************************************************
                      00197 DISABLE_SUSTAIN MACRO
                      00198         clrf    sustainFlags, ACCESS
                      00199         ENDM
                      00200 
                      00201 ;**********************************************************************
                      00202 REVERSE_SAMPLE_IF_MOD_OVER_63   MACRO
                      00203         local exitMacro
                      00204         ; if modulation > 63 then reverse sample
                      00205         movlw   63
                      00206         cpfsgt  modulation, ACCESS
                      00207         bra             exitMacro
                      00208         ; modulation > 63 so do nextSampleAddress = (sampleEndAddress - nextSampleAddress)
                      00209         movf    nextSampleAddress, w, ACCESS
                      00210         subwf   sampleEndAddress, w, ACCESS
                      00211         movwf   nextSampleAddress, ACCESS
                      00212         movf    nextSampleAddress + 1, w, ACCESS
                      00213         subwfb  sampleEndAddress + 1, w, ACCESS
                      00214         movwf   nextSampleAddress + 1, ACCESS
                      00215 exitMacro
                      00216         ENDM
                      00217 
                      00218 ;**********************************************************************
                      00219 OSC_READ_ADSR_FLAG      MACRO   FLAG
                      00220 ; oscillator number passed in WREG
                      00221 ; boolean value is returned in WREG and ZERO flag is set accordingly
                      00222 
                      00223         ; push working regs onto software stack
                      00224         PUSH_R  FSR0L
                      00225         PUSH_R  FSR0H
                      00226         
                      00227         ; load fsr
                      00228         lfsr    FSR0, oscStateFlags
                      00229         ; read the register into WREG
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00230         movf    PLUSW0, w, ACCESS
                      00231         andlw   1<<FLAG
                      00232         
                      00233         ; restore working regs from stack
                      00234         POP_R   FSR0H
                      00235         POP_R   FSR0L   
                      00236         
                      00237         ENDM
                      00238 
                      00239 ;**********************************************************************
                      00240 OSC_ADVANCE_ADSR        MACRO   OSC_NUMBER
                      00241         local   macroDone, doAttack, attackDone, doRelease, releaseDone
                      00242 
                      00243         ; ignore advance if oscillator is sustained
                      00244         btfsc   sustainFlags, OSC_NUMBER, ACCESS
                      00245         bra             macroDone
                      00246         
                      00247         btfsc   oscStateFlags + OSC_NUMBER, attack, ACCESS
                      00248         bra             doAttack
                      00249         btfsc   oscStateFlags + OSC_NUMBER, release, ACCESS
                      00250         bra             doRelease
                      00251         bra             macroDone
                      00252         
                      00253 doAttack
                      00254         ; osc is attacking
                      00255 
                      00256         ; test condition ((adsrLimiterRegs -= ADSR_ATTACK_RATE) <=0)
                      00257         movf    adsrAttackRate, w, ACCESS
                      00258         subwf   adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00259         bnc             attackDone
                      00260         bz              attackDone
                      00261 
                      00262         ; condition is FALSE so do the subtraction and exit
                      00263         ; (adsrLimiterRegs -= ADSR_ATTACK_RATE)
                      00264         movf    adsrAttackRate, w, ACCESS
                      00265         subwf   adsrLimiterRegs + OSC_NUMBER, f, ACCESS
                      00266         bra             macroDone
                      00267 
                      00268 attackDone
                      00269         ; clear attack flag
                      00270         bcf             oscStateFlags + OSC_NUMBER, attack, ACCESS
                      00271         clrf    adsrLimiterRegs + OSC_NUMBER, ACCESS
                      00272         bra     macroDone
                      00273 
                      00274 doRelease
                      00275         ; osc is releasing
                      00276 
                      00277         ; test condition: ((adsrLimiterRegs + ADSR_ATTACK_RATE) >= 255)
                      00278         movf    adsrReleaseRate, w, ACCESS
                      00279         addwf   adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00280         ; condition is TRUE so skip the addition and leave adsrLimiterRegs at its current value
                      00281         bc              releaseDone
                      00282         comf    WREG, w, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00283         ; condition is TRUE so skip the addition and leave adsrLimiterRegs at its current value
                      00284         bz              releaseDone
                      00285 
                      00286         ; condition is FALSE so do the addition and exit
                      00287         ; do (adsrLimiterRegs += ADSR_ATTACK_RATE)      
                      00288         movf    adsrReleaseRate, w, ACCESS
                      00289         addwf   adsrLimiterRegs + OSC_NUMBER, f, ACCESS
                      00290         bra             macroDone
                      00291         
                      00292 releaseDone
                      00293         ; clear release flag
                      00294         bcf             oscStateFlags + OSC_NUMBER, release, ACCESS
                      00295         ; set limit reg to max
                      00296         setf    adsrLimiterRegs + OSC_NUMBER, ACCESS
                      00297         ; clear oscillator's delegatedDelta
                      00298         clrf    delegatedDeltas + OSC_NUMBER * 2;
                      00299         clrf    delegatedDeltas + (OSC_NUMBER * 2) + 1; 
                      00300         bra     macroDone
                      00301         
                      00302 macroDone
                      00303         ENDM
                      00304         
                      00305 ;**********************************************************************
                      00306 OSC_MIX MACRO   OSC_NUMBER
                      00307         local   mixDone, mixDoPos, mixDoNeg, mixDoDone
                      00308                 
                      00309         ; check polarity of current activeOutputValue compared to PWM_IDLE_OUTPUT_VALUE
                      00310         movlw   PWM_IDLE_OUTPUT_VALUE
                      00311         subwf   activeOutputValues + OSC_NUMBER, w
                      00312         bnc             mixDoNeg
                      00313 mixDoPos
                      00314         ; WREG = adsrLimiterRegs/2
                      00315         bcf             STATUS, C, ACCESS
                      00316         rrcf    adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00317         subwf   activeOutputValues + OSC_NUMBER, w
                      00318         bra             mixDoDone
                      00319 mixDoNeg
                      00320         ; WREG = adsrLimiterRegs/2
                      00321         bcf             STATUS, C, ACCESS
                      00322         rrcf    adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00323         addwf   activeOutputValues + OSC_NUMBER, w      
                      00324 mixDoDone
                      00325         ; overflow indicates that last operation toggled bit 7
                      00326         btfsc   STATUS, OV, ACCESS
                      00327         movlw   PWM_IDLE_OUTPUT_VALUE
                      00328 
                      00329 mixDone
                      00330         ; add WREG to mixedOutputL/H
                      00331         addwf   mixedOutputL, f, ACCESS
                      00332         btfsc   STATUS, C, ACCESS
                      00333         incf    mixedOutputH, f, ACCESS
                      00334         
                      00335         ENDM
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00336 
                      00337 ;**********************************************************************
                      00338 OSC_STATE_BLOCK MACRO   OSC_NUMBER
                      00339         local   checkDelegating, oscCheckActive, zeroAcc, oscActive, waveIsSample, noTransition, oscChec
                            kNotSine
                      00340         local   clrSampleAcc, addressOk, waveIsNotSample, waveIsSine, waveIsSquare, tableAddressLoaded, 
                            resetOscillator, macroDone
                      00341                 
                      00342         ; if oscillator is locked for sustain then leave it alone
                      00343         btfsc   sustainFlags, OSC_NUMBER, ACCESS
                      00344         bra             oscActive
                      00345                         
                      00346 checkDelegating
                      00347         ; don't update if delegator is busy because delegatedDelta value is volatile
                      00348         btfsc   soundGenFlags, delegatorBusy, ACCESS
                      00349         ; delegator is busy so just keep spinning
                      00350         bra             oscCheckActive
                      00351         
                      00352         ; THRESHOLD METHOD WORKS WELL
                      00353         movlw   SINE
                      00354         cpfseq waveShape, ACCESS
                      00355         bra             oscCheckNotSine
                      00356         ; calculate absolute offset between PWM_IDLE_OUTPUT_VALUE and current activeOutputValue
                      00357         movlw   PWM_IDLE_OUTPUT_VALUE
                      00358         subwf   activeOutputValues + OSC_NUMBER, w
                      00359         ; invert if negative
                      00360         btfss   STATUS, C, ACCESS
                      00361         negf    WREG, ACCESS
                      00362         ; check if offset is below threshold value
                      00363         ; do (WREG = OSC_OUTPUT_GATE_THRESHOLD - WREG)
                      00364         sublw   OSC_TRANSITION_OUTPUT_THRESHOLD
                      00365         ; if result is positive then activeOutputValue offset from IDLE is <= THRESHOLD so allow changes
                      00366         bnc             oscCheckActive
                      00367 
                      00368 oscCheckNotSine
                      00369 
                      00370         ; delegator is idle and oscillator is enabled so copy delegated delta as internal
                      00371         movff   delegatedDeltas + (OSC_NUMBER * DELEGATED_DELTAS_ELEMENT_SIZE) + 0, oscDeltas + (OSC_NUM
                            BER * OSC_DELTAS_ELEMENT_SIZE) + 0
                      00372         movff   delegatedDeltas + (OSC_NUMBER * DELEGATED_DELTAS_ELEMENT_SIZE) + 1, oscDeltas + (OSC_NUM
                            BER * OSC_DELTAS_ELEMENT_SIZE) + 1
                      00373 
                      00374 oscCheckActive
                      00375         ; if oscDeltas[OSC_NUMBER] == 0x00 then oscillator is not really active so reset
                      00376         ; this check is required in event that (activeOutput == 0 && delegatorBusy == TRUE && oscDelta =
                            = 0)
                      00377         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, f
                      00378         bnz             oscActive
                      00379         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, f
                      00380         bz              resetOscillator
                      00381         
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00382 oscActive
                      00383         ; if oscillator is starting from reset state then begin with 0x0000 accumulator
                      00384         btfsc   oscResetFlags, OSC_NUMBER, ACCESS
                      00385         bra             zeroAcc
                      00386 
                      00387         ;**** start procedure: step Accumulator (SINE/SQUARE/SAMPLE) ****
                      00388         ; accumulator += activeNoteDelta
                      00389         ; accumulators are 4 bytes wide, activeNoteDeltas are 2 bytes wide
                      00390         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, w
                      00391         addwf   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
                      00392         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, w  
                      00393         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
                      00394         movlw   0
                      00395         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
                      00396         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                      00397         
                      00398 zeroAcc
                      00399         ; we're done with oscResetFlags flag so ensure that it's clear
                      00400         bcf             oscResetFlags, OSC_NUMBER, ACCESS
                      00401         
                      00402         ;**** start procedure: handle Pitch Wheel (SINE/SQUARE/SAMPLE) ****
                      00403         ; accumulator += pitchWheel
                      00404         movf    pitchWheel                                                                              
                                                                            + 0, w, ACCESS
                      00405         addwf   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
                      00406         movf    pitchWheel                                                                              
                                                                            + 1, w, ACCESS
                      00407         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
                      00408         movf    pitchWheel                                                                              
                                                                            + 2, w, ACCESS
                      00409         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
                      00410         movf    pitchWheel                                                                              
                                                                            + 3, w, ACCESS
                      00411         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                      00412         
                      00413         ;**** start procedure: if SAMPLE waveshape then load next read address  (SAMPLE ONLY) ****
                      00414         ; branch to waveform specific table address load
                      00415         movlw   SAMPLE
                      00416         cpfseq  waveShape, ACCESS
                      00417         bra             waveIsNotSample
                      00418 waveIsSample
                      00419 
                      00420         ; if samplesLoaded flag is set then load next EEPROM read address
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00421         ; checking this here as opposed to before accumulator update will, in the event of the mainline 
                            not…
                      00422         ; being able to load the samples in time, cause audio chopping rather than detuning
                      00423         btfss   eepromFlags, samplesLoaded, ACCESS
                      00424         bra             macroDone
                      00425         
                      00426         ; check for note transition
                      00427         ; keyPressed flag is set every time a MIDI Note On message is received
                      00428         ; when a sample is playing back in POLY or SUSTAIN modes, we want the sample to restart from the
                             beginning...
                      00429         ; whenever a Note On message is received.
                      00430         btfss   midiFlags, keyPressed, ACCESS
                      00431         bra             noTransition
                      00432         ; is modeLevel == POLY
                      00433         movlw   POLY
                      00434         xorwf   modeLevel, w, ACCESS
                      00435         ; mode is POLY so reset accumulator to restart sample from beginning
                      00436         bz              clrSampleAcc
                      00437 
                      00438 noTransition    
                      00439         ; nextSampleAddress = ((accumulator >> 8) & 0xffff)
                      00440         ; reset accumulator if nextSampleAddress value will exceed sampleEndAddress
                      00441         ; is waveTableIndex > sampleEndAddress?
                      00442         movf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, w
                      00443         subwf   sampleEndAddress, w, ACCESS
                      00444         movf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, w
                      00445         subwfb  sampleEndAddress + 1, w, ACCESS
                      00446         ; result is positive so waveTableIndex is within valid range
                      00447         bc              addressOk
                      00448         ; ((accumulator >> 8) & 0xffff) is out of valid sample range so restart sample from beginning
                      00449         ; reset accumulator
                      00450 clrSampleAcc
                      00451         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0
                      00452         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1
                      00453         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2
                      00454         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3
                      00455 addressOk
                      00456         
                      00457         ; do nextSampleAddress = ((accumulator >> 8) & 0xffff)
                      00458         movff   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, nextSampleAddresses + (OSC_NUMBER * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 0
                      00459         movff   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, nextSampleAddresses + (OSC_NUMBER * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 1
                      00460         
                      00461         bra             macroDone
                      00462         
                      00463 waveIsNotSample
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00464         ;**** start procedure: waveshape is SINE or SQUARE so read Program Memory table  (SINE/SQUARE ON
                            LY) ****
                      00465         ; branch to waveform specific table address load
                      00466         movlw   SINE
                      00467         cpfseq  waveShape, ACCESS
                      00468         bra             waveIsSquare
                      00469 
                      00470 waveIsSine      
                      00471         ; 
                      00472         ; load address of SINE table read
                      00473         ; offset = ((accumulator >> 8) & 0xff)
                      00474         movf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1, w
                      00475         addwf   sineTableBaseAddress + 0, w
                      00476         movwf   TBLPTRL, ACCESS
                      00477         movf    sineTableBaseAddress + 1, w
                      00478         btfsc   STATUS, C, ACCESS
                      00479         addlw   1
                      00480         movwf   TBLPTRH, ACCESS
                      00481         movf    sineTableBaseAddress + 2, w
                      00482         btfsc   STATUS, C, ACCESS
                      00483         addlw   1
                      00484         movwf   TBLPTRU, ACCESS
                      00485         bra             tableAddressLoaded
                      00486 
                      00487 waveIsSquare
                      00488         ; load address of SQUARE table read
                      00489         ; offset = ((accumulator >> 8) & 0xff)
                      00490         movf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1, w
                      00491         addwf   squareTableBaseAddress + 0, w
                      00492         movwf   TBLPTRL, ACCESS
                      00493         movf    squareTableBaseAddress + 1, w
                      00494         btfsc   STATUS, C, ACCESS
                      00495         addlw   1
                      00496         movwf   TBLPTRH, ACCESS
                      00497         movf    squareTableBaseAddress + 2, w
                      00498         btfsc   STATUS, C, ACCESS
                      00499         addlw   1
                      00500         movwf   TBLPTRU, ACCESS
                      00501 
                      00502 tableAddressLoaded
                      00503         ; read value from program memory
                      00504         tblrd*
                      00505         movff   TABLAT, activeOutputValues + (OSC_NUMBER * ACTIVE_OUTPUT_VALUES_EL_SIZE) + 0
                      00506         bra             macroDone
                      00507         
                      00508 resetOscillator
                      00509         ; set oscillator reset flag
                      00510         bsf             oscResetFlags, OSC_NUMBER, ACCESS
                      00511         movlw   PWM_IDLE_OUTPUT_VALUE
                      00512         movwf   activeOutputValues + (OSC_NUMBER * ACTIVE_OUTPUT_VALUES_EL_SIZE)
                      00513         clrf    oscDeltas + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE) + 0
                      00514         clrf    oscDeltas + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE) + 1
                      00515         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 0
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00516         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1
                      00517         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 2
                      00518         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 3
                      00519 
                      00520 macroDone
                      00521 
                      00522         ENDM
                      00523         
                      00524         
                      00525 #endif
                      00526 
                      00527 
                      00099         #include        "../header/userInterface.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      userinterface.h                                   *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef _USERINTERFACEH_
                      00022 #define _USERINTERFACEH_
                      00023 
                      00024 #define LEVEL_POLY_LED_BLINK_RATE               0
                      00025 #define LEVEL_SUSTAIN_LED_BLINK_RATE    2
                      00026 #define LEVEL_MONO_LED_BLINK_RATE               1
                      00027 
                      00028 ;**********************************************************************
                      00029 ; MACROS
                      00030 ;**********************************************************************
                      00031                                                         
                      00032 #ifndef THROUGH_HOLE_PCB
                      00033 
                      00034 #ifdef  LED_STEADY_STATE_DISABLED
                      00035 
                      00036 LED_SINE_ON     MACRO
                      00037 #ifndef LED_POLARITY_REVERSED
                      00038         bcf             ledOnOffFlags, RA5, ACCESS      ; LED is on
                      00039 #else
                      00040         bsf             ledOnOffFlags, RA5, ACCESS      ; LED is on
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00041 #endif
                      00042         ENDM
                      00043 
                      00044 LED_SQUARE_ON   MACRO
                      00045 #ifndef LED_POLARITY_REVERSED
                      00046         bcf             ledOnOffFlags, RC4, ACCESS      ; LED is on
                      00047 #else
                      00048         bsf             ledOnOffFlags, RC4, ACCESS      ; LED is on
                      00049 #endif
                      00050         ENDM
                      00051 
                      00052 LED_SAMPLE_ON   MACRO
                      00053 #ifndef LED_POLARITY_REVERSED
                      00054         bcf             ledOnOffFlags, RC3, ACCESS      ; LED is on
                      00055 #else
                      00056         bsf             ledOnOffFlags, RC3, ACCESS      ; LED is on
                      00057 #endif
                      00058         ENDM
                      00059 
                      00060 LED_SINE_OFF    MACRO
                      00061 #ifndef LED_POLARITY_REVERSED
                      00062         bsf             ledOnOffFlags, RA5, ACCESS      ; LED is off
                      00063 #else
                      00064         bcf             ledOnOffFlags, RA5, ACCESS      ; LED is off
                      00065 #endif
                      00066         ENDM
                      00067 
                      00068 LED_SQUARE_OFF  MACRO
                      00069 #ifndef LED_POLARITY_REVERSED
                      00070         bsf             ledOnOffFlags, RC4, ACCESS      ; LED is off
                      00071 #else
                      00072         bcf             ledOnOffFlags, RC4, ACCESS      ; LED is off
                      00073 #endif
                      00074         ENDM
                      00075 
                      00076 LED_SAMPLE_OFF  MACRO
                      00077 #ifndef LED_POLARITY_REVERSED
                      00078         bsf             ledOnOffFlags, RC3, ACCESS      ; LED is off
                      00079 #else
                      00080         bcf             ledOnOffFlags, RC3, ACCESS      ; LED is off
                      00081 #endif
                      00082         ENDM
                      00083 
                      00084 LED_SINE_TOGGLE MACRO
                      00085         btg             ledOnOffFlags, RA5, ACCESS      ; LED is toggled
                      00086         ENDM
                      00087 
                      00088 LED_SQUARE_TOGGLE       MACRO
                      00089         btg             ledOnOffFlags, RC4, ACCESS      ; LED is toggled
                      00090         ENDM
                      00091 
                      00092 LED_SAMPLE_TOGGLE       MACRO
                      00093         btg             ledOnOffFlags, RC3, ACCESS      ; LED is toggled
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00094         ENDM
                      00095 
                      00096 #else   ; #ifdef LED_STEADY_STATE_DISABLED
                      00097 
                      00098 LED_SINE_ON     MACRO
                      00099 #ifndef LED_POLARITY_REVERSED
                      00100         bcf             LATA, RA5, ACCESS       ; LED is on
                      00101 #else
                      00102         bsf             LATA, RA5, ACCESS       ; LED is on
                      00103 #endif
                      00104         ENDM
                      00105 
                      00106 LED_SQUARE_ON   MACRO
                      00107 #ifndef LED_POLARITY_REVERSED
                      00108         bcf             LATC, RC4, ACCESS       ; LED is on
                      00109 #else
                      00110         bsf             LATC, RC4, ACCESS       ; LED is on
                      00111 #endif
                      00112         ENDM
                      00113 
                      00114 LED_SAMPLE_ON   MACRO
                      00115 #ifndef LED_POLARITY_REVERSED
                      00116         bcf             LATC, RC3, ACCESS       ; LED is on
                      00117 #else
                      00118         bsf             LATC, RC3, ACCESS       ; LED is on
                      00119 #endif
                      00120         ENDM
                      00121 
                      00122 LED_SINE_OFF    MACRO
                      00123 #ifndef LED_POLARITY_REVERSED
                      00124         bsf             LATA, RA5, ACCESS       ; LED is off
                      00125 #else
                      00126         bcf             LATA, RA5, ACCESS       ; LED is off
                      00127 #endif
                      00128         ENDM
                      00129 
                      00130 LED_SQUARE_OFF  MACRO
                      00131 #ifndef LED_POLARITY_REVERSED
                      00132         bsf             LATC, RC4, ACCESS       ; LED is off
                      00133 #else
                      00134         bcf             LATC, RC4, ACCESS       ; LED is off
                      00135 #endif
                      00136         ENDM
                      00137 
                      00138 LED_SAMPLE_OFF  MACRO
                      00139 #ifndef LED_POLARITY_REVERSED
                      00140         bsf             LATC, RC3, ACCESS       ; LED is off
                      00141 #else
                      00142         bcf             LATC, RC3, ACCESS       ; LED is off
                      00143 #endif
                      00144         ENDM
                      00145 
                      00146 LED_SINE_TOGGLE MACRO
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00147         btg             LATA, RA5, ACCESS       ; LED is toggled
                      00148         ENDM
                      00149 
                      00150 LED_SQUARE_TOGGLE       MACRO
                      00151         btg             LATC, RC4, ACCESS       ; LED is toggled
                      00152         ENDM
                      00153 
                      00154 LED_SAMPLE_TOGGLE       MACRO
                      00155         btg             LATC, RC3, ACCESS       ; LED is toggled
                      00156         ENDM
                      00157 
                      00158 #endif  ; #ifdef LED_STEADY_STATE_DISABLED
                      00159 
                      00160 #else   ; #ifndef THROUGH_HOLE_PCB
                      00161 
                      00162 #ifdef  LED_STEADY_STATE_DISABLED
                      00163 
                      00164 LED_SINE_ON     MACRO
                      00165 #ifndef LED_POLARITY_REVERSED
                      00166         bcf             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00167 #else
                      00168         bsf             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00169 #endif
                      00170         ENDM
                      00171 
                      00172 LED_SQUARE_ON   MACRO
                      00173 #ifndef LED_POLARITY_REVERSED
                      00174         bcf             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00175 #else
                      00176         bsf             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00177 #endif
                      00178         ENDM
                      00179 
                      00180 LED_SAMPLE_ON   MACRO
                      00181 #ifndef LED_POLARITY_REVERSED
                      00182         bcf             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00183 #else
                      00184         bsf             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00185 #endif
                      00186         ENDM
                      00187 
                      00188 LED_SINE_OFF    MACRO
                      00189 #ifndef LED_POLARITY_REVERSED
                      00190         bsf             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00191 #else
                      00192         bcf             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00193 #endif
                      00194         ENDM
                      00195 
                      00196 LED_SQUARE_OFF  MACRO
                      00197 #ifndef LED_POLARITY_REVERSED
                      00198         bsf             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00199 #else
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00200         bcf             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00201 #endif
                      00202         ENDM
                      00203 
                      00204 LED_SAMPLE_OFF  MACRO
                      00205 #ifndef LED_POLARITY_REVERSED
                      00206         bsf             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00207 #else
                      00208         bcf             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00209 #endif
                      00210         ENDM
                      00211 
                      00212 LED_SINE_TOGGLE MACRO
                      00213         btg             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00214         ENDM
                      00215 
                      00216 LED_SQUARE_TOGGLE       MACRO
                      00217         btg             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00218         ENDM
                      00219 
                      00220 LED_SAMPLE_TOGGLE       MACRO
                      00221         btg             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00222         ENDM
                      00223         
                      00224 #else   ; #ifdef LED_STEADY_STATE_DISABLED
                      00225 
                      00226 LED_SINE_ON     MACRO
                      00227 #ifndef LED_POLARITY_REVERSED
                      00228         bcf             LATC, RC3, ACCESS       ; SINE LED
                      00229 #else
                      00230         bsf             LATC, RC3, ACCESS       ; SINE LED
                      00231 #endif
                      00232         ENDM
                      00233 
                      00234 LED_SQUARE_ON   MACRO
                      00235 #ifndef LED_POLARITY_REVERSED
                      00236         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                      00237 #else
                      00238         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                      00239 #endif
                      00240         ENDM
                      00241 
                      00242 LED_SAMPLE_ON   MACRO
                      00243 #ifndef LED_POLARITY_REVERSED
                      00244         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                      00245 #else
                      00246         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                      00247 #endif
                      00248         ENDM
                      00249 
                      00250 LED_SINE_OFF    MACRO
                      00251 #ifndef LED_POLARITY_REVERSED
                      00252         bsf             LATC, RC3, ACCESS       ; SINE LED
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00253 #else
                      00254         bcf             LATC, RC3, ACCESS       ; SINE LED
                      00255 #endif
                      00256         ENDM
                      00257 
                      00258 LED_SQUARE_OFF  MACRO
                      00259 #ifndef LED_POLARITY_REVERSED
                      00260         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                      00261 #else
                      00262         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                      00263 #endif
                      00264         ENDM
                      00265 
                      00266 LED_SAMPLE_OFF  MACRO
                      00267 #ifndef LED_POLARITY_REVERSED
                      00268         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                      00269 #else
                      00270         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                      00271 #endif
                      00272         ENDM
                      00273 
                      00274 LED_SINE_TOGGLE MACRO
                      00275         btg             LATC, RC3, ACCESS       ; SINE LED
                      00276         ENDM
                      00277 
                      00278 LED_SQUARE_TOGGLE       MACRO
                      00279         btg             LATC, RC4, ACCESS       ; SQUARE LED
                      00280         ENDM
                      00281 
                      00282 LED_SAMPLE_TOGGLE       MACRO
                      00283         btg             LATA, RA5, ACCESS       ; SAMPLE LED
                      00284         ENDM
                      00285 
                      00286 #endif  ; #ifdef LED_STEADY_STATE_DISABLED
                      00287 
                      00288 #endif  ; #ifndef THROUGH_HOLE_PCB
                      00289 
                      00290 LED_SINE_TOGGLE_OTHERS_OFF      MACRO
                      00291         LED_SINE_TOGGLE
                      00292         LED_SQUARE_OFF
                      00293         LED_SAMPLE_OFF
                      00294         ENDM
                      00295 
                      00296 LED_SQUARE_TOGGLE_OTHERS_OFF    MACRO
                      00297         LED_SINE_OFF
                      00298         LED_SQUARE_TOGGLE
                      00299         LED_SAMPLE_OFF
                      00300         ENDM
                      00301 
                      00302 LED_SAMPLE_TOGGLE_OTHERS_OFF    MACRO
                      00303         LED_SINE_OFF
                      00304         LED_SQUARE_OFF
                      00305         LED_SAMPLE_TOGGLE
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00306         ENDM
                      00307 
                      00308 LED_ALL_TOGGLE  MACRO
                      00309         LED_SINE_TOGGLE
                      00310         LED_SQUARE_TOGGLE
                      00311         LED_SAMPLE_TOGGLE
                      00312         ENDM
                      00313 
                      00314 LED_ALL_ON      MACRO
                      00315         LED_SINE_ON
                      00316         LED_SQUARE_ON
                      00317         LED_SAMPLE_ON
                      00318         ENDM
                      00319 
                      00320 LED_ALL_OFF     MACRO
                      00321         LED_SINE_OFF
                      00322         LED_SQUARE_OFF
                      00323         LED_SAMPLE_OFF
                      00324         ENDM
                      00325 
                      00326 LED_ONLY_SINE_ON        MACRO
                      00327         LED_SINE_ON
                      00328         LED_SQUARE_OFF
                      00329         LED_SAMPLE_OFF
                      00330         ENDM
                      00331 
                      00332 LED_ONLY_SQUARE_ON      MACRO
                      00333         LED_SINE_OFF
                      00334         LED_SQUARE_ON
                      00335         LED_SAMPLE_OFF
                      00336         ENDM
                      00337 
                      00338 LED_ONLY_SAMPLE_ON      MACRO
                      00339         LED_SINE_OFF
                      00340         LED_SQUARE_OFF
                      00341         LED_SAMPLE_ON
                      00342         ENDM
                      00343 
                      00344 #endif  ; #ifndef _USERINTERFACEH_
                      00345 
                      00100 
                      00101         
                      00102 ;**********************************************************************
                      00103 ; GLOBAL VARIABLES
                      00104 ;**********************************************************************
                      00105 
                      00106         ; declare isr tmp and working register variables
                      00107         ; align to RAM address 0x0000
                      00108         CBLOCK 0
  00000000            00109                 wTmp:1
  00000001            00110                 statusTmp:1
  00000002            00111                 bsrTmp:1
  00000003            00112                 r0:1
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000004            00113                 r1:1
  00000005            00114                 r2:1
  00000006            00115                 r3:1
  00000007            00116                 r4:1
  00000008            00117                 r5:1
  00000009            00118                 r6:1
  0000000A            00119                 r7:1
                      00120         ENDC
                      00121         
                      00122 
                      00123 ;**********************************************************************
                      00124 ; CODE BEGIN / RESET VECTOR
                      00125 ;**********************************************************************
                      00126 
                      00127         ORG             0x0000                                                  ; processor reset vector
000000 6AFA           00128         clrf    PCLATH                                                  ; ensure page bits are cleared
000002 EF?? F???      00129         goto    mootLoader                                              ; jump to bootloader
                      00130 ;**********************************************************************
                      00131 ; INTERRUPT VECTORS
                      00132 ;**********************************************************************
                      00133 
                      00134         ORG     0x0008                                          ; high-priority interrupt vector
000008 EF?? F???      00135         goto    highPriorityISR_redirect
                      00136 
                      00137         ORG     0x0018                                          ; low-priority interrupt vector
000018 EF?? F???      00138         goto    lowPriorityISR_redirect
                      00139 
                      00140 
                      00141 ;**********************************************************************
                      00142 ; USER-DEFINED MAIN() AND ISR() REDIRECTS
                      00143 ;**********************************************************************
                      00144 ; To prevent the user from rendering the bootloader unusable in the event
                      00145 ; of a failed Program Memory write, the first >=64 bytes of Program Memory
                      00146 ; will not be writable (set via USER_CODE_START_ADDRESS define) via the
                      00147 ; bootloader so must contain no user code.
                      00148 ; The first 64 bytes will contain only:
                      00149 ;
                      00150 ; 0x0000: clrf  PCLATH                                          ; set bank-select bits to Bank0
                      00151 ; 0x0001: goto  mootLoader                                      ; jump to bootloader on reset
                      00152 ; 0x0008: goto  highPriorityISR_redirect        ; jump to high priority ISR redirect in user space
                      00153 ; 0x0018: goto  lowPriorityISR_redirect         ; jump to low priority ISR redirect in user space
                      00154 ;
                      00155 ; since these will not be modifiable without a hardware programmer, these
                      00156 ; redirects will point to the following static addresses:
                      00157 ;
                      00158 ; 0x0040: goto main                             ; jump to main()
                      00159 ; 0x0044: goto highPriorityISR  ; jump to highPriorityISR()
                      00160 ; 0x0048: goto lowPriorityISR   ; jump to lowPriorityISR()
                      00161 ;
                      00162 ; When writing new firmware, the user is responsible for maintaing these 
                      00163 ; jump instructions at these addresses.  Note that the "goto" instruction
                      00164 ; requires 2 words of Program Memory space.
                      00165 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00166         ORG             USER_CODE_START_ADDRESS
000040                00167 main_redirect
000040 EF?? F???      00168         goto    main
000044                00169 highPriorityISR_redirect
000044 EF?? F???      00170         goto    highPriorityISR
000048                00171 lowPriorityISR_redirect
000048 EF?? F???      00172         goto    lowPriorityISR
                      00173 
                      00174 ;**********************************************************************
                      00175 ; INTERRUPT SERVICE ROUTINE CODE BEGIN
                      00176 ;**********************************************************************
00004C                00177 highPriorityISR
00004C                00178 lowPriorityISR
                      00179         
                      00180 ;**********************************************************************
                      00181 ; MAINLINE CODE BEGIN
                      00182 ;**********************************************************************
                      00183 
00004C                00184 main
00004C EF?? F???      00185         goto    main
                      00186 
                      00187         ; set stack base address as last data mem address
                      00188 
                      00189 #ifdef PIC18LF13K50
                      00190         CBLOCK 0x2ff
  000002FF            00191                 softwareStackBaseAddress:1
                      00192         ENDC
                      00193 #endif
                      00194 #ifdef PIC18LF14K22
                      00195         CBLOCK 0x1ff
                      00196                 softwareStackBaseAddress:1
                      00197         ENDC
                      00198 #endif
                      00199                 
                      00200 
                      00201         ORG             USER_CODE_END_ADDRESS
001BFE 0000           00202         nop
                      00203         
                      00204         ORG             BOOTLOADER_START_ADDRESS
                      00205         #include        "../source/mootLoader.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      mootLoader.asm                                    *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00014 
                      00015 
                      00016 ;**********************************************************************
                      00017 ; INCLUDE FILES
                      00018 ;**********************************************************************
                      00019         
                      00020         #include        "../header/mootloader.h"
                      00001 ;**********************************************************************
                      00002 ;                                                                     *
                      00003 ;    Project:       deMIDulator                                       *
                      00004 ;    Filename:      eeprom.h                                          *
                      00005 ;    Date:                                                            *
                      00006 ;    File Version:                                                    *
                      00007 ;                                                                     *
                      00008 ;    Author:        Derek Enos                                        *
                      00009 ;    Company:                                                         *
                      00010 ;                                                                     * 
                      00011 ;                                                                     *
                      00012 ;**********************************************************************
                      00013 ;                                                                     *
                      00014 ;    Files required:                                                  *
                      00015 ;                                                                     *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;**********************************************************************
                      00019 
                      00020 #ifndef _MOOTLOADERH_
                      00021 #define _MOOTLOADERH_
                      00022 
                      00023 
                      00024 ; ******************* MOOTLOADER TRANSACTION DEFINES ***********************
                      00025 
                      00026 #define ML_BLOCK_ERASE_BYTE_SIZE                        64      ; must be multiple of ML_DATA_PAYLOAD_BY
                            TE_SIZE
                      00027 #define ML_DATA_PACKET_PAYLOAD_BYTE_SIZE        8
                      00028 
                      00029 #define ML_BLOCK_ERASE_IDLE_TIME_MS                     8
                      00030 #define ML_WRITE_IDLE_TIME_MS                           8
                      00031 #define ML_TRANS_SYNC_IDLE_TIME_MS                      32
                      00032 
                      00033 
                      00034 ; ******************* MOOTLOADER COMMAND BYTE DEFINES ***********************
                      00035 
                      00036 #define MIDI_VENDOR_ID                                          0x77
                      00037 #define MIDI_DEVICE_ID                                          0x1D
                      00038 
                      00039 #define ML_COMMAND_WRITE_PROGRAM_MEMORY         0x03
                      00040 #define ML_COMMAND_DATA_PAYLOAD                         0x01
                      00041 #define ML_COMMAND_DATA_PAYLOAD_COMPLETE        0x02
                      00042 #define ML_TRANSMITTER_RESETTING                        0x10
                      00043 #define ML_RECEIVER_RESET                                       0x11
                      00044 
                      00045 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00046 ; ******************* MOOTLOADER PACKET DEFINES ***********************
                      00047 
                      00048 #define ML_LARGE_PACKET_BYTE_SIZE               22
                      00049 
                      00050 
                      00051 ; ******************* mlFlags BIT DEFINES ***********************
                      00052 
                      00053 #define mlRxTransSyncFlag                                       0
                      00054 #define mlRxChecksumOk                                          1
                      00055 
                      00056 
                      00057 ;**********************************************************************
                      00058 ; MACROS
                      00059 ;**********************************************************************
                      00060 
                      00061 SEND_SYSEX_INTRO_NO_CHECK       MACRO
                      00062         movlw   0xF0
                      00063         call    mootLoader_sendByte
                      00064         movlw   MIDI_VENDOR_ID
                      00065         call    mootLoader_sendByte
                      00066         movlw   MIDI_DEVICE_ID
                      00067         call    mootLoader_sendByte
                      00068         ENDM
                      00069 
                      00070 SEND_BYTE_START_CHECKSUM        MACRO
                      00071         movwf   mlChecksum, ACCESS
                      00072         call    mootLoader_sendByte
                      00073         ENDM
                      00074 
                      00075 SEND_BYTE_DO_CHECKSUM           MACRO
                      00076         xorwf   mlChecksum, f, ACCESS
                      00077         call    mootLoader_sendByte
                      00078         ENDM
                      00079 
                      00080 SPLIT_BYTE_THEN_SEND_DO_CHECKSUM        MACRO
                      00081         xorwf   mlChecksum, f, ACCESS
                      00082         call    mootLoader_sendAsNybbles
                      00083         ENDM
                      00084 
                      00085 SEND_CHECKSUM_CLEAR_RUN         MACRO
                      00086         movf    mlChecksum, w, ACCESS
                      00087         ; ensure that bit 7 is clear
                      00088         andlw   0x7f
                      00089         clrf    mlRunningChecksum, ACCESS
                      00090         call    mootLoader_sendByte
                      00091         ENDM
                      00092         
                      00093 SEND_CHECKSUM_DO_RUN            MACRO
                      00094         movf    mlChecksum, w, ACCESS
                      00095         ; ensure that bit 7 is clear
                      00096         andlw   0x7f
                      00097         xorwf   mlRunningChecksum, f, ACCESS
                      00098         call    mootLoader_sendByte
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00099         ENDM
                      00100 
                      00101 SEND_RUNNING_CHECKSUM           MACRO
                      00102         movf    mlRunningChecksum, w, ACCESS
                      00103         ; ensure that bit 7 is clear
                      00104         andlw   0x7f
                      00105         call    mootLoader_sendByte
                      00106         ENDM
                      00107 
                      00108 IDLE_BLOCK_ERASE                        MACRO
                      00109         movlw   ML_BLOCK_ERASE_IDLE_TIME_MS
                      00110         call    mootLoader_wait
                      00111         ENDM
                      00112 
                      00113 IDLE_WRITE_WAIT                         MACRO
                      00114         movlw   ML_WRITE_IDLE_TIME_MS
                      00115         call    mootLoader_wait
                      00116         ENDM
                      00117 
                      00118         
                      00119 #endif
                      00120 
                      00021 
                      00022         
                      00023 ;**********************************************************************
                      00024 ; LOCAL VARIABLES
                      00025 ;**********************************************************************
                      00026 
                      00027         CBLOCK 0
                      00028 
                      00029                 ; global
  00000000            00030                 mlButtonState:1
  00000001            00031                 mlChecksum:1
  00000002            00032                 mlRunningChecksum:1
  00000003            00033                 mlStartAddress:4
  00000007            00034                 mlPayloadLength:4
  0000000B            00035                 mlDataPayloadBuffer:ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
  00000013            00036                 mlCount:2
  00000015            00037                 mlFlags:1
                      00038                 ; sendNybble()
  00000016            00039                 mlNybbleSplitTmp:1
                      00040                 ; sendByte()
  00000017            00041                 mlCurrentTxByte:1
                      00042                 ; writeProgramMemory()
  00000018            00043                 mlBlockEraseBytesRemaining:1
                      00044                 ; sendDataPayloadPacket()
  00000019            00045                 mlDatPackIntByteCount:1
                      00046                 ; rxListenForPrelude()
  0000001A            00047                 mlPerfectPreludeCount:1
                      00048                 ; mootLoader_rxReceiveNextPacket()
  0000001B            00049                 mlRxReceivedPacket:ML_LARGE_PACKET_BYTE_SIZE
  00000031            00050                 mlRxReceivedPacketByteCount:1
                      00051                 ; rxReceiveNextByte()
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000032            00052                 mlRxReceivedByte:1
                      00053                 ; rxReceiveNextSymbol()
  00000033            00054                 mlRxPreviousSymbolBucket:1
  00000034            00055                 mlConsecutiveSymbolCount:1
                      00056                 ; convertPeriodToSymbol()
  00000035            00057                 mlRxSymbolBucket:1
  00000036            00058                 mlPeriodBucketLowLimit:1
  00000037            00059                 mlPeriodBucketHighLimit:1
  00000038            00060                 mlSymbolBucketCount:1
                      00061                 ; measureInputCyclePeriod()
  00000039            00062                 mlRA4CompareReg:1
  0000003A            00063                 mlRxCyclePeriodL:1
  0000003B            00064                 mlRxCyclePeriodH:1
  0000003C            00065                 mlSchmittReadValue:1
  0000003D            00066                 mlTransitionCount:1
                      00067                 ; rxDecodeReceivedSymbol()
  0000003E            00068                 mlDecodedNybble:1
                      00069                 ; debug
  0000003F            00070                 mlEepromAddress:1
  00000040            00071                 mlEepromByteCount:1
                      00072                 
                      00073         ENDC
                      00074 
                      00075 
                      00076 ;**********************************************************************
                      00077 ; LOCAL DEFINES
                      00078 ;**********************************************************************
                      00079 
                      00080 ;#define        DEBUG_TOGGLE_SQUARE_ON_SAMPLE
                      00081 ;#define        DEBUG_TOGGLE_SQUARE_ON_EDGE_DETECT
                      00082 ;#define        DEBUG_SQUARE_FOLLOWS_SCHMITT_VALUE
                      00083 ;#define        DEBUG_TOGGLE_SQUARE_ON_MEASURE_BOUNDS
                      00084 ;#define        DEBUG_TOGGLE_SQUARE_ON_NEW_SYMBOL_DETECT
                      00085 
                      00086 
                      00087 ;**********************************************************************
                      00088 ; mootLoader BEGIN
                      00089 ;**********************************************************************
                      00090 
001C00                00091 mootLoader
                      00092         
001C00 D???           00093         rcall   mootLoader_initCore
                      00094         
                      00095         ; use BANK0
001C02 0100           00096         BANKSEL 0
                      00097                 
                      00098         ; turn on all LEDs
                      00099         LED_ALL_ON
                          M         LED_SINE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
001C04 868B               M         bsf             LATC, RC3, ACCESS       ; SINE LED
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M #endif
                          M         LED_SQUARE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
001C06 888B               M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
001C08 8A89               M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
                      00100 
                      00101         ; check if boot action is being requested
                      00102         ; enter mootLoader Trasmitter mode if waveform(RC0) & record(RC1) switches held for 2 second
                      00103         ; enter mootLoader Receiver mode if record(RC1) & mode(RC2) switches held for 2 second
                      00104 
                      00105         ;**** start procedure: check button state ****
                      00106         ; if any buttons (RC0 - RC2) are pressed then wait for button state to remain unchanged for 2 se
                            conds
001C0A 1C82           00107         comf    PORTC, w, ACCESS
001C0C 0B07           00108         andlw   0x07
                      00109         ; no buttons are active so exit
001C0E E0??           00110         bz              mootLoader_exit
                      00111         ; at least one button is active so wait to make sure that state doesn't change for 2 seconds
                      00112         ; mlTmpValue = compliment of initial RC2:0 value
001C10 6E00           00113         movwf   mlButtonState, ACCESS
001C12 6ACC           00114         clrf    TMR2, ACCESS
001C14 0E24           00115         movlw   0x24
001C16 6E13           00116         movwf   mlCount, ACCESS
001C18 0EF4           00117         movlw   0xf4
001C1A 6E14           00118         movwf   mlCount + 1, ACCESS
001C1C                00119 mootLoader_stateWaitLp
001C1C 1C82           00120         comf    PORTC, w, ACCESS
001C1E 0B07           00121         andlw   0x07
001C20 6200           00122         cpfseq  mlButtonState, ACCESS
                      00123         ; button state has changed before timer expiration so exit mootLoader
001C22 D???           00124         bra             mootLoader_exit
                      00125         ; state has not changed so wait for timer overflow
001C24 929E           00126         bcf             PIR1, TMR2IF, ACCESS    
001C26                00127 mootLoader_stateWaitOvLp
001C26 A29E           00128         btfss   PIR1, TMR2IF, ACCESS
001C28 D???           00129         bra             mootLoader_stateWaitOvLp        
                      00130         ; timer has overflowed so decrement overflow counter
001C2A 0613           00131         decf    mlCount, f, ACCESS
001C2C A0D8           00132         btfss   STATUS, C, ACCESS
001C2E 0614           00133         decf    mlCount + 1, f, ACCESS
001C30 5213           00134         movf    mlCount, f, ACCESS
                      00135         ; count != so continue loop
001C32 E1??           00136         bnz             mootLoader_stateWaitLp
001C34 5214           00137         movf    mlCount + 1, f, ACCESS
                      00138         ; count != so continue loop
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C36 E1??           00139         bnz             mootLoader_stateWaitLp
                      00140 
                      00141         ; button state remained unchanged for 2 seconds. yay
                      00142 
                      00143         ;**** start procedure: check button combo value ****
                      00144         ; remeber, mlButtonState is reversed logic
001C38 0E03           00145         movlw   0<<RC2 ^ 1<<RC1 ^ 1<<RC0
001C3A 6200           00146         cpfseq  mlButtonState, ACCESS
001C3C D???           00147         bra             mootLoader_checkReceive
001C3E D???           00148         bra             mootLoader_transmitter          
001C40                00149 mootLoader_checkReceive
001C40 0E06           00150         movlw   1<<RC2 ^ 1<<RC1 ^ 0<<RC0
001C42 6200           00151         cpfseq  mlButtonState, ACCESS
001C44 D???           00152         bra             mootLoader_exit
001C46 D???           00153         bra             mootLoader_receiver
                      00154 
001C48                00155 mootLoader_exit
001C48 EF?? F???      00156         goto    main_redirect
                      00157                         
                      00158         ; include code for mootLoader functions
                      00159         #include        "mootLoader_init.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      mootLoader_init_v0_2.asm                          *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 ;**********************************************************************
                      00022 ; INCLUDE FILES
                      00023 ;**********************************************************************
                      00024 
                      00025 ;**********************************************************************
                      00026 ; LOCAL FUNCTIONS
                      00027 ;**********************************************************************
                      00028 
                      00029 ;**********************************************************************
                      00030 ; Function: void mootLoader_initCore()
                      00031 ;**********************************************************************
                      00032 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C4C                00033 mootLoader_initCore
                      00034 ; making mootLoader_initCore() a single function to save Program Memory space
                      00035 
                      00036 ;**********************************************************************
                      00037 ; Function: void mootLoader_initOsc()
                      00038 ;**********************************************************************
                      00039         ; configure for internal clock at 8Mhz & 4x PLL = 32Mhz
                      00040         ; primary clock determined by FOSC<3:0>
                      00041         ; confirgure internal osc for 8Mhz
001C4C 8CD3           00042         bsf             OSCCON, IRCF2, ACCESS
001C4E 8AD3           00043         bsf             OSCCON, IRCF1, ACCESS
001C50 98D3           00044         bcf             OSCCON, IRCF0, ACCESS
                      00045 
                      00046 #ifdef  PIC18LF13K50
                      00047 
001C52                00048 mootLoader_initOsc_lp1
                      00049         ; wait for internal high freq osc to stabilize
                      00050         ; "pic18lf13k50.inc" lists bit as "IOFS" but datasheet calls it "HFIOFS"
001C52 A4D3           00051         btfss   OSCCON, IOFS, ACCESS
001C54 D???           00052         bra             mootLoader_initOsc_lp1
                      00053 
                      00054         ; enable PLL
001C56 8C9B           00055         bsf             OSCTUNE, SPLLEN, ACCESS
                      00056 #endif
                      00057 
                      00058 #ifdef  PIC18LF14K22
                      00059 mootLoader_initOsc_lp1
                      00060         ; wait for internal high freq osc to stabilize
                      00061         btfss   OSCCON, HFIOFS, ACCESS
                      00062         bra             mootLoader_initOsc_lp1
                      00063 
                      00064         ; enable PLL
                      00065         bsf             OSCTUNE, PLLEN, ACCESS
                      00066 #endif  
                      00067 
                      00068 ;**********************************************************************
                      00069 ; Function: void mootLoader_initIO()
                      00070 ;**********************************************************************
                      00071         ; IO Summary
                      00072         ; 
                      00073         ; (organized by pin #)
                      00074         ; Pin   Port    Assignment
                      00075         ; ---  ----     ----------
                      00076         ; 1             VDD             VDD
                      00077         ; 2             RA5             LED (Sine)
                      00078         ; 3             RA4             Audio In
                      00079         ; 4             RA3             ICSP
                      00080         ; 5             RC5             Audio Out
                      00081         ; 6             RC4             LED (Square)
                      00082         ; 7             RC3             LED (Sample)
                      00083         ; 8             RC6             EEPROM Chip Select
                      00084         ; 9             RC7             EEPROM Slave In
                      00085         ; 10    RB7             [Not Connected]
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00086         ; 11    RB6             EEPROM Clock
                      00087         ; 12    RB5             MIDI In
                      00088         ; 13    RB4             EEPROM Slave Out
                      00089         ; 14    RC2             Switch (MIDI Record / Playback)
                      00090         ; 15    RC1             Switch (Voice Through / Record)
                      00091         ; 16    RC0             Switch (Waveform)
                      00092         ; 17    VUSB    [Not Connected]
                      00093         ; 18    RA1             ICSP
                      00094         ; 19    RA0             ICSP
                      00095         ; 20    VSS             VSS
                      00096         ;
                      00097         ; [PORT A]
                      00098         ; Pin   Port    Assignment                                                      Direction
                      00099         ; ---  ----             ----------                                                      --------
                            -
                      00100         ; 19    RA0             ICSP                                                            IN
                      00101         ; 18    RA1             ICSP                                                            IN
                      00102         ; 4             RA3             ICSP                                                            
                            IN
                      00103         ; 3             RA4             Audio In                                                        
                            IN
                      00104         ; 2             RA5             LED (Sine)                                                      
                            OUT
                      00105 
001C58 8A89           00106         bsf             LATA, RA5, ACCESS       ; LED is off
001C5A 0EDF           00107         movlw   0xff ^ 1<<RA5
001C5C 6E92           00108         movwf   TRISA, ACCESS
                      00109 
                      00110         ; [PORT B]
                      00111         ; Pin   Port    Assignment                                                      Direction
                      00112         ; ---  ----             ----------                                                      --------
                            -
                      00113         ; 13    RB4             EEPROM Slave Out                                        IN
                      00114         ; 12    RB5             MIDI In                                                         IN
                      00115         ; 11    RB6             EEPROM Clock                                            OUT
                      00116         ; 10    RB7             [Not Connected]                                         IN
                      00117 
001C5E 0EBF           00118         movlw   0xff ^ 1<<RB6   ; EEPROM clock is LOW
001C60 6E8A           00119         movwf   LATB, ACCESS
001C62 0EBF           00120         movlw   0xff ^ 1<<RB6
001C64 6E93           00121         movwf   TRISB, ACCESS
                      00122         
                      00123         ; [PORT C]
                      00124         ; Pin   Port    Assignment                                                      Direction
                      00125         ; ---  ----             ----------                                                      --------
                            -
                      00126         ; 16    RC0             Switch (Waveform)                                       IN
                      00127         ; 15    RC1             Switch (Voice Through / Record)         IN
                      00128         ; 14    RC2             Switch (MIDI Record / Playback)         IN
                      00129         ; 7             RC3             LED (Sample)                                            OUT
                      00130         ; 6             RC4             LED (Square)                                            OUT
                      00131         ; 5             RC5             Audio Out                                                       
                            OUT
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00132         ; 8             RC6             EEPROM Chip Select                                      OUT
                      00133         ; 9             RC7             EEPROM Slave In                                         OUT
                      00134         
001C66 868B           00135         bsf             LATC, RC3, ACCESS       ; LED is off
001C68 888B           00136         bsf             LATC, RC4, ACCESS       ; LED is off
001C6A 9A8B           00137         bcf             LATC, RC5, ACCESS       ; Audio out is low
001C6C 8C8B           00138         bsf             LATC, RC6, ACCESS       ; Chip select is idle
001C6E 0E07           00139         movlw   0x07
001C70 6E94           00140         movwf   TRISC, ACCESS
                      00141         
                      00142         ; [General IO]
001C72 9EF1           00143         bcf             INTCON2, NOT_RABPU, ACCESS      ; enable PORT A & B pullups per WPU registers
001C74 0E08           00144         movlw   1<<ANS3 ; ANS3 = RA4(Audio In)
001C76 6E7E           00145         movwf   ANSEL, ACCESS   ; enable digital input buffers for all non-analog inputs
001C78 6A7F           00146         clrf    ANSELH, ACCESS  ; enable digital input buffers for all non-analog inputs        
                      00147         
                      00148 ;**********************************************************************
                      00149 ; Function: void mootLoader_initUART()
                      00150 ;**********************************************************************
001C7A 0E0F           00151         movlw   15      ; 31.25K baud rate @ 32Mhz clock
001C7C 6EAF           00152         movwf   SPBRG, ACCESS
                      00153         ; Enable serial port
                      00154         ; Enable reception
001C7E 8EAB           00155         bsf             RCSTA, SPEN, ACCESS
001C80 88AB           00156         bsf             RCSTA, CREN, ACCESS
                      00157         ; Enable transmission
001C82 8AAC           00158         bsf             TXSTA, TXEN, ACCESS
                      00159 
                      00160 ;**********************************************************************
                      00161 ; Function: void mootLoader_initTimer2()
                      00162 ;**********************************************************************
                      00163         ; Prescale 1:1
                      00164         ; Turn on Timer2
001C84 84CA           00165         bsf             T2CON, TMR2ON, ACCESS
                      00166         ; Reset and interrupt on match value
001C86 0EFF           00167         movlw   255
001C88 6ECB           00168         movwf   PR2, ACCESS     
                      00169 
                      00170 ;**********************************************************************
                      00171 ; Function: void mootLoader_initHeap()
                      00172 ;**********************************************************************
                      00173 
001C8A                00174 mootLoader_initHeap
001C8A EE22 F0FF      00175         lfsr    softwareStackPointerFSR, softwareStackBaseAddress
                      00176 
001C8E 0012           00177         return
                      00178         
                      00179 
                      00180         
                      00160         #include        "mootLoader_TX.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      mootLoader_TX_v0_2.asm                            *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 
                      00015 
                      00016 ;**********************************************************************
                      00017 ; INCLUDE FILES
                      00018 ;**********************************************************************
                      00019         
                      00020         #include        "../header/mootloader.h"
                      00121 ;**********************************************************************
                      00122 ;                                                                     *
                      00123 ;    Project:       deMIDulator                                       *
                      00124 ;    Filename:      eeprom.h                                          *
                      00125 ;    Date:                                                            *
                      00126 ;    File Version:                                                    *
                      00127 ;                                                                     *
                      00128 ;    Author:        Derek Enos                                        *
                      00129 ;    Company:                                                         *
                      00130 ;                                                                     * 
                      00131 ;                                                                     *
                      00132 ;**********************************************************************
                      00133 ;                                                                     *
                      00134 ;    Files required:                                                  *
                      00135 ;                                                                     *
                      00136 ;                                                                     *
                      00137 ;                                                                     *
                      00138 ;**********************************************************************
                      00139 
                      00140 #ifndef _MOOTLOADERH_
                      00141 #define _MOOTLOADERH_
                      00142 
                      00143 
                      00144 ; ******************* MOOTLOADER TRANSACTION DEFINES ***********************
                      00145 
                      00146 #define ML_BLOCK_ERASE_BYTE_SIZE                        64      ; must be multiple of ML_DATA_PAYLOAD_BY
                            TE_SIZE
                      00147 #define ML_DATA_PACKET_PAYLOAD_BYTE_SIZE        8
                      00148 
                      00149 #define ML_BLOCK_ERASE_IDLE_TIME_MS                     8
                      00150 #define ML_WRITE_IDLE_TIME_MS                           8
                      00151 #define ML_TRANS_SYNC_IDLE_TIME_MS                      32
                      00152 
                      00153 
                      00154 ; ******************* MOOTLOADER COMMAND BYTE DEFINES ***********************
                      00155 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00156 #define MIDI_VENDOR_ID                                          0x77
                      00157 #define MIDI_DEVICE_ID                                          0x1D
                      00158 
                      00159 #define ML_COMMAND_WRITE_PROGRAM_MEMORY         0x03
                      00160 #define ML_COMMAND_DATA_PAYLOAD                         0x01
                      00161 #define ML_COMMAND_DATA_PAYLOAD_COMPLETE        0x02
                      00162 #define ML_TRANSMITTER_RESETTING                        0x10
                      00163 #define ML_RECEIVER_RESET                                       0x11
                      00164 
                      00165 
                      00166 ; ******************* MOOTLOADER PACKET DEFINES ***********************
                      00167 
                      00168 #define ML_LARGE_PACKET_BYTE_SIZE               22
                      00169 
                      00170 
                      00171 ; ******************* mlFlags BIT DEFINES ***********************
                      00172 
                      00173 #define mlRxTransSyncFlag                                       0
                      00174 #define mlRxChecksumOk                                          1
                      00175 
                      00176 
                      00177 ;**********************************************************************
                      00178 ; MACROS
                      00179 ;**********************************************************************
                      00180 
                      00181 SEND_SYSEX_INTRO_NO_CHECK       MACRO
                      00182         movlw   0xF0
                      00183         call    mootLoader_sendByte
                      00184         movlw   MIDI_VENDOR_ID
                      00185         call    mootLoader_sendByte
                      00186         movlw   MIDI_DEVICE_ID
                      00187         call    mootLoader_sendByte
                      00188         ENDM
                      00189 
                      00190 SEND_BYTE_START_CHECKSUM        MACRO
                      00191         movwf   mlChecksum, ACCESS
                      00192         call    mootLoader_sendByte
                      00193         ENDM
                      00194 
                      00195 SEND_BYTE_DO_CHECKSUM           MACRO
                      00196         xorwf   mlChecksum, f, ACCESS
                      00197         call    mootLoader_sendByte
                      00198         ENDM
                      00199 
                      00200 SPLIT_BYTE_THEN_SEND_DO_CHECKSUM        MACRO
                      00201         xorwf   mlChecksum, f, ACCESS
                      00202         call    mootLoader_sendAsNybbles
                      00203         ENDM
                      00204 
                      00205 SEND_CHECKSUM_CLEAR_RUN         MACRO
                      00206         movf    mlChecksum, w, ACCESS
                      00207         ; ensure that bit 7 is clear
                      00208         andlw   0x7f
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00209         clrf    mlRunningChecksum, ACCESS
                      00210         call    mootLoader_sendByte
                      00211         ENDM
                      00212         
                      00213 SEND_CHECKSUM_DO_RUN            MACRO
                      00214         movf    mlChecksum, w, ACCESS
                      00215         ; ensure that bit 7 is clear
                      00216         andlw   0x7f
                      00217         xorwf   mlRunningChecksum, f, ACCESS
                      00218         call    mootLoader_sendByte
                      00219         ENDM
                      00220 
                      00221 SEND_RUNNING_CHECKSUM           MACRO
                      00222         movf    mlRunningChecksum, w, ACCESS
                      00223         ; ensure that bit 7 is clear
                      00224         andlw   0x7f
                      00225         call    mootLoader_sendByte
                      00226         ENDM
                      00227 
                      00228 IDLE_BLOCK_ERASE                        MACRO
                      00229         movlw   ML_BLOCK_ERASE_IDLE_TIME_MS
                      00230         call    mootLoader_wait
                      00231         ENDM
                      00232 
                      00233 IDLE_WRITE_WAIT                         MACRO
                      00234         movlw   ML_WRITE_IDLE_TIME_MS
                      00235         call    mootLoader_wait
                      00236         ENDM
                      00237 
                      00238         
                      00239 #endif
                      00240 
                      00021 
                      00022         
                      00023 ;**********************************************************************
                      00024 ; LOCAL VARIABLES
                      00025 ;**********************************************************************
                      00026 
                      00027 ; all variables defined in mootLoader.asm
                      00028 
                      00029 
                      00030 ;**********************************************************************
                      00031 ; mootLoader Trasmitter Code Begin
                      00032 ;**********************************************************************
                      00033 
001C90                00034 mootLoader_transmitter
                      00035         ; shut off sine LED leaving square and sample LEDs illuminated to communicate current mode to us
                            er
                      00036         LED_SINE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
001C90 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M #endif
                      00037 
                      00038         ; start program memory broadcast from address USER_CODE_START_ADDRESS
                      00039         ; bootloader is not allowed to touch first 64-byte block to ensure that user will not
                      00040         ; corrupt jump to bootloader on reset
001C92 0E40           00041         movlw   USER_CODE_START_ADDRESS
001C94 6E03           00042         movwf   mlStartAddress + 0, ACCESS
001C96 6A04           00043         clrf    mlStartAddress + 1, ACCESS
001C98 6A05           00044         clrf    mlStartAddress + 2, ACCESS
001C9A 6A06           00045         clrf    mlStartAddress + 3, ACCESS
                      00046 
                      00047         ; requesting full user application code Program Memory so...
                      00048         ; length = (USER_CODE_END_ADDRESS - USER_CODE_START_ADDRESS) aligned to 64-byte boundary
001C9C 0E40           00049         movlw   USER_CODE_START_ADDRESS
                      00050         ; WREG = low(USER_CODE_END_ADDRESS) - USER_CODE_START_ADDRESS
001C9E 08FE           00051         sublw   low(USER_CODE_END_ADDRESS)
001CA0 6E07           00052         movwf   mlPayloadLength + 0, ACCESS
                      00053         
001CA2 0E1B           00054         movlw   high(USER_CODE_END_ADDRESS)
001CA4 6E08           00055         movwf   mlPayloadLength + 1, ACCESS
                      00056         ; if result of low(USER_CODE_END_ADDRESS) - USER_CODE_START_ADDRESS <0 then decrement
001CA6 A0D8           00057         btfss   STATUS, C, ACCESS
001CA8 0608           00058         decf    mlPayloadLength + 1, f, ACCESS
                      00059         
001CAA 0E00           00060         movlw   upper(USER_CODE_END_ADDRESS)
001CAC 6E09           00061         movwf   mlPayloadLength + 2, ACCESS
                      00062         ; if result of (decf    mlPayloadLength + 1, f, ACCESS) <0 then decrement
001CAE A0D8           00063         btfss   STATUS, C, ACCESS
001CB0 0609           00064         decf    mlPayloadLength + 2, f, ACCESS
001CB2 6A0A           00065         clrf    mlPayloadLength + 3, ACCESS
                      00066 
                      00067         ; if mlPayloadLength is not 64-byte aligned then align it
001CB4 0E3F           00068         movlw   0x3f
001CB6 1407           00069         andwf   mlPayloadLength + 0, w, ACCESS
                      00070         ; it's aligned to skip alignment
001CB8 E0??           00071         bz              mootLoader_xmitStartWrite
                      00072         ; clear 6 least significant bits
001CBA 0EC0           00073         movlw   0xC0
001CBC 1607           00074         andwf   mlPayloadLength + 0, f, ACCESS
                      00075         ; add 64 to mlPayloadLength
001CBE 0E40           00076         movlw   0x40
001CC0 2607           00077         addwf   mlPayloadLength + 0, f, ACCESS
001CC2 0E00           00078         movlw   0
001CC4 2208           00079         addwfc  mlPayloadLength + 1, f, ACCESS
001CC6 2209           00080         addwfc  mlPayloadLength + 2, f, ACCESS
001CC8 220A           00081         addwfc  mlPayloadLength + 3, f, ACCESS
                      00082 
001CCA                00083 mootLoader_xmitStartWrite
001CCA D???           00084         rcall   mootLoader_xmitWriteProgramMemory
001CCC D???           00085         bra     mootLoader_exit 
                      00086 
                      00087 
                      00088 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00089 ; mootLoader Trasmitter: Write Program Memory
                      00090 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitWriteProgramMemory)
001CCE                00091 mootLoader_xmitWriteProgramMemory
                      00092         PUSH_R  FSR0L
001CCE CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00093         PUSH_R  FSR0H
001CD2 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00094 
                      00095         ;****************************************
                      00096         ; send Write Program Memory packet
001CD6 D???           00097         rcall   mootLoader_xmitSendWpmPacket
                      00098         ;****************************************
                      00099 
                      00100         ;****************************************
                      00101         ; send Complete Data Payload
                      00102         ; init table pointer with program memory start address
001CD8 C003 FFF6      00103         movff   mlStartAddress + 0, TBLPTRL
001CDC C004 FFF7      00104         movff   mlStartAddress + 1, TBLPTRH
001CE0 C005 FFF8      00105         movff   mlStartAddress + 2, TBLPTRU
                      00106 
001CE4                00107 mootLoader_xmitWpmBlockErase
                      00108         IDLE_BLOCK_ERASE        
001CE4 0E08               M         movlw   ML_BLOCK_ERASE_IDLE_TIME_MS
001CE6 EC?? F???          M         call    mootLoader_wait
                      00109         ; load erase block size counter
001CEA 0E40           00110         movlw   ML_BLOCK_ERASE_BYTE_SIZE
001CEC 6E18           00111         movwf   mlBlockEraseBytesRemaining, ACCESS
                      00112 
001CEE                00113 mootLoader_xmitWpmNextPayload
                      00114         ;****************************************
                      00115         ; send single Data Payload packet
                      00116         ; load mlDataPayloadBuffer with bytes to send
001CEE EE00 F00B      00117         lfsr    FSR0, mlDataPayloadBuffer
                      00118         ; load counter with num of bytes remaining in payload packet
001CF2 0E08           00119         movlw   ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
001CF4 6E13           00120         movwf   mlCount, ACCESS
001CF6                00121 mootLoader_xmitWpmByteLp
                      00122         ; read program memory location and increment
001CF6 0009           00123         tblrd*+
                      00124         ; save value to mlDataPayloadBuffer
001CF8 CFF5 FFEE      00125         movff   TABLAT, POSTINC0
                      00126         ; check if mlDataPayloadBuffer is ready to go
001CFC 0613           00127         decf    mlCount, f, ACCESS
001CFE E1??           00128         bnz             mootLoader_xmitWpmByteLp
                      00129         ; send the packet
001D00 D???           00130         rcall   mootLoader_xmitSendDataPayloadPacket
                      00131         ;****************************************
                      00132 
                      00133         ; do write wait after every packet transfer
                      00134         IDLE_WRITE_WAIT
001D02 0E08               M         movlw   ML_WRITE_IDLE_TIME_MS
001D04 EC?? F???          M         call    mootLoader_wait
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00135         
                      00136         ; check if entire payload has been transferred
                      00137         ; do (mlPayloadLength -= ML_DATA_PACKET_PAYLOAD_BYTE_SIZE)
001D08 0E08           00138         movlw   ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
001D0A 5E07           00139         subwf   mlPayloadLength + 0, f, ACCESS
001D0C 0E00           00140         movlw   0
001D0E 5A08           00141         subwfb  mlPayloadLength + 1, f, ACCESS  
001D10 5A09           00142         subwfb  mlPayloadLength + 2, f, ACCESS  
001D12 5A0A           00143         subwfb  mlPayloadLength + 3, f, ACCESS
                      00144         ; if mlPayloadLength == 0 then entire payload has been transferred
                      00145         ; if mlPayloadLength != 0 then check if we have to wait for another block erase
001D14 5207           00146         movf    mlPayloadLength + 0, f, ACCESS
001D16 E1??           00147         bnz             mootLoader_xmitWpmCheckBlockErase
001D18 5208           00148         movf    mlPayloadLength + 1, f, ACCESS
001D1A E1??           00149         bnz             mootLoader_xmitWpmCheckBlockErase
001D1C 5209           00150         movf    mlPayloadLength + 2, f, ACCESS
001D1E E1??           00151         bnz             mootLoader_xmitWpmCheckBlockErase
001D20 520A           00152         movf    mlPayloadLength + 3, f, ACCESS
001D22 E1??           00153         bnz             mootLoader_xmitWpmCheckBlockErase
001D24 D???           00154         bra             mootLoader_xmitWpmSendPayloadComplete
                      00155 
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitWpmCheckBlockErase)
001D26                00156 mootLoader_xmitWpmCheckBlockErase
                      00157         ; check if we need to wait for a block erase
                      00158         ; do (mlBlockEraseBytesRemaining - ML_DATA_PACKET_PAYLOAD_BYTE_SIZE)
001D26 0E08           00159         movlw   ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
001D28 5E18           00160         subwf   mlBlockEraseBytesRemaining, f, ACCESS
                      00161         ; if 0 then delay for block erase
001D2A E0??           00162         bz              mootLoader_xmitWpmBlockErase
001D2C D???           00163         bra             mootLoader_xmitWpmNextPayload
                      00164         
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitWpmSendPayloadComplete)
001D2E                00165 mootLoader_xmitWpmSendPayloadComplete
                      00166         ; mlPayloadLength == 0 so send Data Payload Complete packet
                      00167         ;****************************************
                      00168         ; send Data Payload Complete packet
001D2E D???           00169         rcall   mootLoader_xmitSendDataPayloadCompletePacket
                      00170         ;****************************************
                      00171 
                      00172         ; transaction complete
                      00173         POP_R   FSR0H
001D30 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00174         POP_R   FSR0L
001D34 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
001D38 0012           00175         return
                      00176                 
                      00177                         
                      00178 ;**********************************************************************
                      00179 ; mootLoader Trasmitter: send Write Program Memory packet
                      00180 ;**********************************************************************
001D3A                00181 mootLoader_xmitSendWpmPacket
                      00182 
                      00183         ;****************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00184         ; send SysEx intro (0xF0, vendorID, deviceID)
                      00185         SEND_SYSEX_INTRO_NO_CHECK
001D3A 0EF0               M         movlw   0xF0
001D3C EC?? F???          M         call    mootLoader_sendByte
001D40 0E77               M         movlw   MIDI_VENDOR_ID
001D42 EC?? F???          M         call    mootLoader_sendByte
001D46 0E1D               M         movlw   MIDI_DEVICE_ID
001D48 EC?? F???          M         call    mootLoader_sendByte
                      00186         ;****************************************
                      00187         
                      00188         ;****************************************
                      00189         ; send COMMAND
001D4C 0E03           00190         movlw   ML_COMMAND_WRITE_PROGRAM_MEMORY
                      00191         SEND_BYTE_START_CHECKSUM
001D4E 6E01               M         movwf   mlChecksum, ACCESS
001D50 EC?? F???          M         call    mootLoader_sendByte
                      00192         ;****************************************
                      00193 
                      00194         ;****************************************
                      00195         ; send START ADDRESS
001D54 5003           00196         movf    mlStartAddress + 0, w, ACCESS
                      00197         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001D56 1A01               M         xorwf   mlChecksum, f, ACCESS
001D58 EC?? F???          M         call    mootLoader_sendAsNybbles
001D5C 5004           00198         movf    mlStartAddress + 1, w, ACCESS
                      00199         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001D5E 1A01               M         xorwf   mlChecksum, f, ACCESS
001D60 EC?? F???          M         call    mootLoader_sendAsNybbles
001D64 5005           00200         movf    mlStartAddress + 2, w, ACCESS
                      00201         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001D66 1A01               M         xorwf   mlChecksum, f, ACCESS
001D68 EC?? F???          M         call    mootLoader_sendAsNybbles
001D6C 5006           00202         movf    mlStartAddress + 3, w, ACCESS
                      00203         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001D6E 1A01               M         xorwf   mlChecksum, f, ACCESS
001D70 EC?? F???          M         call    mootLoader_sendAsNybbles
                      00204         ;****************************************
                      00205 
                      00206         ;****************************************
                      00207         ; send PAYLOAD LENGTH
001D74 5007           00208         movf    mlPayloadLength + 0, w, ACCESS
                      00209         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001D76 1A01               M         xorwf   mlChecksum, f, ACCESS
001D78 EC?? F???          M         call    mootLoader_sendAsNybbles
001D7C 5008           00210         movf    mlPayloadLength + 1, w, ACCESS
                      00211         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001D7E 1A01               M         xorwf   mlChecksum, f, ACCESS
001D80 EC?? F???          M         call    mootLoader_sendAsNybbles
001D84 5009           00212         movf    mlPayloadLength + 2, w, ACCESS
                      00213         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001D86 1A01               M         xorwf   mlChecksum, f, ACCESS
001D88 EC?? F???          M         call    mootLoader_sendAsNybbles
001D8C 500A           00214         movf    mlPayloadLength + 3, w, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00215         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001D8E 1A01               M         xorwf   mlChecksum, f, ACCESS
001D90 EC?? F???          M         call    mootLoader_sendAsNybbles
                      00216         ;****************************************
                      00217         
                      00218         ;****************************************
                      00219         ; send CHECKSUM
                      00220         SEND_CHECKSUM_CLEAR_RUN
001D94 5001               M         movf    mlChecksum, w, ACCESS
                          M         ; ensure that bit 7 is clear
001D96 0B7F               M         andlw   0x7f
001D98 6A02               M         clrf    mlRunningChecksum, ACCESS
001D9A EC?? F???          M         call    mootLoader_sendByte
                      00221         ;****************************************
                      00222 
                      00223         ;****************************************
                      00224         ; send End of SysEx
001D9E 0EF7           00225         movlw   0xF7
001DA0 D???           00226         rcall   mootLoader_sendByte
                      00227         ;****************************************
                      00228         
001DA2 0012           00229         return  
                      00230         
                      00231         
                      00232 ;**********************************************************************
                      00233 ; mootLoader Trasmitter: send Data Payload Packet
                      00234 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitSendDataPayloadPacket)
001DA4                00235 mootLoader_xmitSendDataPayloadPacket
                      00236 
                      00237         PUSH_R  FSR0L
001DA4 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00238         PUSH_R  FSR0H
001DA8 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
001DAC EE00 F00B      00239         lfsr    FSR0, mlDataPayloadBuffer
                      00240                 
                      00241         ;****************************************
                      00242         ; send SysEx intro (0xF0, vendorID, deviceID)
                      00243         SEND_SYSEX_INTRO_NO_CHECK
001DB0 0EF0               M         movlw   0xF0
001DB2 EC?? F???          M         call    mootLoader_sendByte
001DB6 0E77               M         movlw   MIDI_VENDOR_ID
001DB8 EC?? F???          M         call    mootLoader_sendByte
001DBC 0E1D               M         movlw   MIDI_DEVICE_ID
001DBE EC?? F???          M         call    mootLoader_sendByte
                      00244         ;****************************************
                      00245         
                      00246         ;****************************************
                      00247         ; send COMMAND
001DC2 0E01           00248         movlw   ML_COMMAND_DATA_PAYLOAD
                      00249         SEND_BYTE_START_CHECKSUM
001DC4 6E01               M         movwf   mlChecksum, ACCESS
001DC6 EC?? F???          M         call    mootLoader_sendByte
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00250         ;****************************************
                      00251 
                      00252         ;****************************************
                      00253         ; send PAYLOAD bytes
001DCA 0E08           00254         movlw   ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
001DCC 6E19           00255         movwf   mlDatPackIntByteCount, ACCESS
001DCE                00256 mootLoader_xmitSdppLp
                      00257         ; read byte
001DCE 50EF           00258         movf    INDF0, w, ACCESS
                      00259         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001DD0 1A01               M         xorwf   mlChecksum, f, ACCESS
001DD2 EC?? F???          M         call    mootLoader_sendAsNybbles
                      00260         ; increment pointer
001DD6 50EE           00261         movf    POSTINC0, w, ACCESS
                      00262         ; check if Data Payload packet is complete
001DD8 0619           00263         decf    mlDatPackIntByteCount, f, ACCESS
001DDA E1??           00264         bnz             mootLoader_xmitSdppLp
                      00265         ;****************************************
                      00266 
                      00267         ;****************************************
                      00268         ; send CHECKSUM
                      00269         SEND_CHECKSUM_DO_RUN
001DDC 5001               M         movf    mlChecksum, w, ACCESS
                          M         ; ensure that bit 7 is clear
001DDE 0B7F               M         andlw   0x7f
001DE0 1A02               M         xorwf   mlRunningChecksum, f, ACCESS
001DE2 EC?? F???          M         call    mootLoader_sendByte
                      00270         ;****************************************
                      00271 
                      00272         ;****************************************
                      00273         ; send End of SysEx
001DE6 0EF7           00274         movlw   0xF7
001DE8 D???           00275         rcall   mootLoader_sendByte
                      00276         ;****************************************
                      00277 
                      00278         POP_R   FSR0H
001DEA CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00279         POP_R   FSR0L
001DEE CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
001DF2 0012           00280         return
                      00281 
                      00282 
                      00283 ;**********************************************************************
                      00284 ; mootLoader Trasmitter: send Data Payload Complete Packet
                      00285 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitSendDataPayloadCompletePacket)
001DF4                00286 mootLoader_xmitSendDataPayloadCompletePacket
                      00287         ;****************************************
                      00288         ; send SysEx intro (0xF0, vendorID, deviceID)
                      00289         SEND_SYSEX_INTRO_NO_CHECK
001DF4 0EF0               M         movlw   0xF0
001DF6 EC?? F???          M         call    mootLoader_sendByte
001DFA 0E77               M         movlw   MIDI_VENDOR_ID
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001DFC EC?? F???          M         call    mootLoader_sendByte
001E00 0E1D               M         movlw   MIDI_DEVICE_ID
001E02 EC?? F???          M         call    mootLoader_sendByte
                      00290         ;****************************************
                      00291         
                      00292         ;****************************************
                      00293         ; send COMMAND
001E06 0E02           00294         movlw   ML_COMMAND_DATA_PAYLOAD_COMPLETE
                      00295         SEND_BYTE_START_CHECKSUM
001E08 6E01               M         movwf   mlChecksum, ACCESS
001E0A EC?? F???          M         call    mootLoader_sendByte
                      00296         ;****************************************
                      00297 
001E0E 0E00           00298         movlw   0x00
                      00299         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001E10 1A01               M         xorwf   mlChecksum, f, ACCESS
001E12 EC?? F???          M         call    mootLoader_sendAsNybbles
001E16 0E00           00300         movlw   0x00
                      00301         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001E18 1A01               M         xorwf   mlChecksum, f, ACCESS
001E1A EC?? F???          M         call    mootLoader_sendAsNybbles
001E1E 0E00           00302         movlw   0x00
                      00303         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001E20 1A01               M         xorwf   mlChecksum, f, ACCESS
001E22 EC?? F???          M         call    mootLoader_sendAsNybbles
001E26 0E00           00304         movlw   0x00
                      00305         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001E28 1A01               M         xorwf   mlChecksum, f, ACCESS
001E2A EC?? F???          M         call    mootLoader_sendAsNybbles
001E2E 0E00           00306         movlw   0x00
                      00307         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001E30 1A01               M         xorwf   mlChecksum, f, ACCESS
001E32 EC?? F???          M         call    mootLoader_sendAsNybbles
001E36 0E00           00308         movlw   0x00
                      00309         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001E38 1A01               M         xorwf   mlChecksum, f, ACCESS
001E3A EC?? F???          M         call    mootLoader_sendAsNybbles
001E3E 0E00           00310         movlw   0x00
                      00311         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001E40 1A01               M         xorwf   mlChecksum, f, ACCESS
001E42 EC?? F???          M         call    mootLoader_sendAsNybbles
001E46 0E00           00312         movlw   0x00
                      00313         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001E48 1A01               M         xorwf   mlChecksum, f, ACCESS
001E4A EC?? F???          M         call    mootLoader_sendAsNybbles
                      00314         SEND_RUNNING_CHECKSUM
001E4E 5002               M         movf    mlRunningChecksum, w, ACCESS
                          M         ; ensure that bit 7 is clear
001E50 0B7F               M         andlw   0x7f
001E52 EC?? F???          M         call    mootLoader_sendByte
                      00315 
                      00316         ;****************************************
                      00317         ; send End of SysEx
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001E56 0EF7           00318         movlw   0xF7
001E58 D???           00319         rcall   mootLoader_sendByte
                      00320         ;****************************************       
                      00321         
001E5A 0012           00322         return
                      00323         
                      00324 
                      00325 ;**********************************************************************
                      00326 ; Local Function: void mootLoader_sendAsNybbles(WREG)
                      00327 ;**********************************************************************
001E5C                00328 mootLoader_sendAsNybbles
                      00329         ; save to tmp variable
001E5C 6E16           00330         movwf   mlNybbleSplitTmp, ACCESS
                      00331         ; mask out low nybble and send
001E5E 0B0F           00332         andlw   0x0F
001E60 D???           00333         rcall   mootLoader_sendByte
                      00334         ; swap nybbles, mask out low nybble then send
001E62 3816           00335         swapf   mlNybbleSplitTmp, w, ACCESS
001E64 0B0F           00336         andlw   0x0F
001E66 D???           00337         rcall   mootLoader_sendByte     
001E68 0012           00338         return
                      00339 
                      00340 
                      00341 ;**********************************************************************
                      00342 ; Local Function: void mootLoader_sendByte(WREG)
                      00343 ;**********************************************************************
001E6A                00344 mootLoader_sendByte
                      00345         ; check if TXREG is clear, wait if not
001E6A A89E           00346         btfss   PIR1, TXIF, ACCESS
001E6C D???           00347         bra             mootLoader_sendByte
001E6E 6EAD           00348         movwf   TXREG, ACCESS
001E70 0012           00349         return
                      00350 
                      00351 
                      00352 ;**********************************************************************
                      00353 ; mootLoader Trasmitter: Wait(WREG = WAIT_TIME_MS)
                      00354 ;**********************************************************************
001E72                00355 mootLoader_wait
                      00356         ; exit if delay time request is 0
001E72 52E8           00357         movf    WREG, f, ACCESS
001E74 E0??           00358         bz              mootLoader_waitExit
                      00359         
                      00360         ; TMR2 overflow period (32uS) * 32 = 1.024mS
                      00361         ; so do PRODH:L = WREG * 32
001E76 6EF3           00362         movwf   PRODL, ACCESS
001E78 0E20           00363         movlw   32
001E7A 02F3           00364         mulwf   PRODL, ACCESS
                      00365 
                      00366         ; reset timer
001E7C 6ACC           00367         clrf    TMR2, ACCESS
001E7E                00368 mootLoader_waitLp
                      00369         ; clear interrupt flag and wait for timer overflow
001E7E 929E           00370         bcf             PIR1, TMR2IF, ACCESS    
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001E80                00371 mootLoader_waitIntLp
001E80 A29E           00372         btfss   PIR1, TMR2IF, ACCESS
001E82 D???           00373         bra             mootLoader_waitIntLp
                      00374         ; unintelligently decrement PRODH:L counter
001E84 06F3           00375         decf    PRODL, f, ACCESS
                      00376         ; skip if result was positive
001E86 A0D8           00377         btfss   STATUS, C, ACCESS
001E88 06F4           00378         decf    PRODH, f, ACCESS
                      00379         ; test PRODH:L, exit if 0
001E8A 52F3           00380         movf    PRODL, f, ACCESS
001E8C E1??           00381         bnz             mootLoader_waitLp
001E8E 52F4           00382         movf    PRODH, f, ACCESS
001E90 E1??           00383         bnz             mootLoader_waitLp
001E92                00384 mootLoader_waitExit     
001E92 0012           00385         return
                      00386 
                      00387 
                      00161         #include        "mootLoader_RX.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      mootLoader_RX_v0_2.asm                            *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 
                      00015 
                      00016 ;**********************************************************************
                      00017 ; INCLUDE FILES
                      00018 ;**********************************************************************
                      00019         
                      00020         #include        "../header/mootloader.h"
                      00241 ;**********************************************************************
                      00242 ;                                                                     *
                      00243 ;    Project:       deMIDulator                                       *
                      00244 ;    Filename:      eeprom.h                                          *
                      00245 ;    Date:                                                            *
                      00246 ;    File Version:                                                    *
                      00247 ;                                                                     *
                      00248 ;    Author:        Derek Enos                                        *
                      00249 ;    Company:                                                         *
                      00250 ;                                                                     * 
                      00251 ;                                                                     *
                      00252 ;**********************************************************************
                      00253 ;                                                                     *
                      00254 ;    Files required:                                                  *
                      00255 ;                                                                     *
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00256 ;                                                                     *
                      00257 ;                                                                     *
                      00258 ;**********************************************************************
                      00259 
                      00260 #ifndef _MOOTLOADERH_
                      00261 #define _MOOTLOADERH_
                      00262 
                      00263 
                      00264 ; ******************* MOOTLOADER TRANSACTION DEFINES ***********************
                      00265 
                      00266 #define ML_BLOCK_ERASE_BYTE_SIZE                        64      ; must be multiple of ML_DATA_PAYLOAD_BY
                            TE_SIZE
                      00267 #define ML_DATA_PACKET_PAYLOAD_BYTE_SIZE        8
                      00268 
                      00269 #define ML_BLOCK_ERASE_IDLE_TIME_MS                     8
                      00270 #define ML_WRITE_IDLE_TIME_MS                           8
                      00271 #define ML_TRANS_SYNC_IDLE_TIME_MS                      32
                      00272 
                      00273 
                      00274 ; ******************* MOOTLOADER COMMAND BYTE DEFINES ***********************
                      00275 
                      00276 #define MIDI_VENDOR_ID                                          0x77
                      00277 #define MIDI_DEVICE_ID                                          0x1D
                      00278 
                      00279 #define ML_COMMAND_WRITE_PROGRAM_MEMORY         0x03
                      00280 #define ML_COMMAND_DATA_PAYLOAD                         0x01
                      00281 #define ML_COMMAND_DATA_PAYLOAD_COMPLETE        0x02
                      00282 #define ML_TRANSMITTER_RESETTING                        0x10
                      00283 #define ML_RECEIVER_RESET                                       0x11
                      00284 
                      00285 
                      00286 ; ******************* MOOTLOADER PACKET DEFINES ***********************
                      00287 
                      00288 #define ML_LARGE_PACKET_BYTE_SIZE               22
                      00289 
                      00290 
                      00291 ; ******************* mlFlags BIT DEFINES ***********************
                      00292 
                      00293 #define mlRxTransSyncFlag                                       0
                      00294 #define mlRxChecksumOk                                          1
                      00295 
                      00296 
                      00297 ;**********************************************************************
                      00298 ; MACROS
                      00299 ;**********************************************************************
                      00300 
                      00301 SEND_SYSEX_INTRO_NO_CHECK       MACRO
                      00302         movlw   0xF0
                      00303         call    mootLoader_sendByte
                      00304         movlw   MIDI_VENDOR_ID
                      00305         call    mootLoader_sendByte
                      00306         movlw   MIDI_DEVICE_ID
                      00307         call    mootLoader_sendByte
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00308         ENDM
                      00309 
                      00310 SEND_BYTE_START_CHECKSUM        MACRO
                      00311         movwf   mlChecksum, ACCESS
                      00312         call    mootLoader_sendByte
                      00313         ENDM
                      00314 
                      00315 SEND_BYTE_DO_CHECKSUM           MACRO
                      00316         xorwf   mlChecksum, f, ACCESS
                      00317         call    mootLoader_sendByte
                      00318         ENDM
                      00319 
                      00320 SPLIT_BYTE_THEN_SEND_DO_CHECKSUM        MACRO
                      00321         xorwf   mlChecksum, f, ACCESS
                      00322         call    mootLoader_sendAsNybbles
                      00323         ENDM
                      00324 
                      00325 SEND_CHECKSUM_CLEAR_RUN         MACRO
                      00326         movf    mlChecksum, w, ACCESS
                      00327         ; ensure that bit 7 is clear
                      00328         andlw   0x7f
                      00329         clrf    mlRunningChecksum, ACCESS
                      00330         call    mootLoader_sendByte
                      00331         ENDM
                      00332         
                      00333 SEND_CHECKSUM_DO_RUN            MACRO
                      00334         movf    mlChecksum, w, ACCESS
                      00335         ; ensure that bit 7 is clear
                      00336         andlw   0x7f
                      00337         xorwf   mlRunningChecksum, f, ACCESS
                      00338         call    mootLoader_sendByte
                      00339         ENDM
                      00340 
                      00341 SEND_RUNNING_CHECKSUM           MACRO
                      00342         movf    mlRunningChecksum, w, ACCESS
                      00343         ; ensure that bit 7 is clear
                      00344         andlw   0x7f
                      00345         call    mootLoader_sendByte
                      00346         ENDM
                      00347 
                      00348 IDLE_BLOCK_ERASE                        MACRO
                      00349         movlw   ML_BLOCK_ERASE_IDLE_TIME_MS
                      00350         call    mootLoader_wait
                      00351         ENDM
                      00352 
                      00353 IDLE_WRITE_WAIT                         MACRO
                      00354         movlw   ML_WRITE_IDLE_TIME_MS
                      00355         call    mootLoader_wait
                      00356         ENDM
                      00357 
                      00358         
                      00359 #endif
                      00360 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00021 
                      00022         
                      00023 ;**********************************************************************
                      00024 ; LOCAL VARIABLES
                      00025 ;**********************************************************************
                      00026 
                      00027 ; all variables defined in mootLoader_v0_2.asm
                      00028 
                      00029 
                      00030 ;**********************************************************************
                      00031 ; mootLoader Receiver Code Begin
                      00032 ;**********************************************************************
001E94                00033 mootLoader_receiver
                      00034         ; communicate mode to user
                      00035         ; shut off sample LED leaving sine and square LEDs illuminated to communicate current mode to us
                            er
                      00036         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
001E94 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
                      00037 
Warning[208]: Label truncated at 32 characters. (mootLoader_receiverListenForTrans)
001E96                00038 mootLoader_receiverListenForTrans
001E96 D???           00039         rcall   mootLoader_rxReceiveNextPacket
                      00040         ; jump to command handler
001E98 0E03           00041         movlw   ML_COMMAND_WRITE_PROGRAM_MEMORY
001E9A 181E           00042         xorwf   mlRxReceivedPacket + 3, w, ACCESS
001E9C E0??           00043         bz              mootLoader_rxWriteProgramMemoryHandler
001E9E 0E11           00044         movlw   ML_RECEIVER_RESET
001EA0 181E           00045         xorwf   mlRxReceivedPacket + 3, w, ACCESS
001EA2 D???           00046         bra     mootLoader_rxReceiverResetHandler
                      00047         ; unhandled command so listen for next trans sync
001EA4 D???           00048         bra             mootLoader_receiverListenForTrans
                      00049                 
001EA6 D???           00050         bra     mootLoader_exit
                      00051 
                      00052 
                      00053 ;**********************************************************************
                      00054 ; Local Function: void mootLoader_rxWriteProgramMemoryHandler()
                      00055 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_rxWriteProgramMemoryHandler)
001EA8                00056 mootLoader_rxWriteProgramMemoryHandler
                      00057         ; save write start address
001EA8 C01F F003      00058         movff   mlRxReceivedPacket + 4, mlStartAddress + 0
001EAC C021 F004      00059         movff   mlRxReceivedPacket + 6, mlStartAddress + 1
001EB0 C023 F005      00060         movff   mlRxReceivedPacket + 8, mlStartAddress + 2
001EB4 C025 F006      00061         movff   mlRxReceivedPacket + 10, mlStartAddress + 3
                      00062         ; save payload length
001EB8 C027 F007      00063         movff   mlRxReceivedPacket + 12, mlPayloadLength + 0
001EBC C029 F008      00064         movff   mlRxReceivedPacket + 14, mlPayloadLength + 1
001EC0 C02B F009      00065         movff   mlRxReceivedPacket + 16, mlPayloadLength + 2
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001EC4 C02D F00A      00066         movff   mlRxReceivedPacket + 18, mlPayloadLength + 3
                      00067         ; test checksum, exit if bad
001EC8 D???           00068         rcall   mootloader_rxTestSinglePacketChecksum
001ECA A215           00069         btfss   mlFlags, mlRxChecksumOk, ACCESS
001ECC D???           00070         bra             mootLoader_signalErrorA
                      00071         
                      00072         ; load table pointer with start address
001ECE C003 FFF6      00073         movff   mlStartAddress + 0, TBLPTRL
001ED2 C004 FFF7      00074         movff   mlStartAddress + 1, TBLPTRH
001ED6 C005 FFF8      00075         movff   mlStartAddress + 2, TBLPTRU
                      00076 
001EDA                00077 mootLoader_rxWpmhBlockErase
                      00078         ; point to Flash Program Memory
001EDA 8EA6           00079         bsf             EECON1, EEPGD, ACCESS
                      00080         ; access Flash Program Memory
001EDC 9CA6           00081         bcf             EECON1, CFGS, ACCESS
                      00082         ; enable write to memory
001EDE 84A6           00083         bsf             EECON1, WREN, ACCESS
                      00084         ; enable erase operation
001EE0 88A6           00085         bsf             EECON1, FREE, ACCESS
                      00086         ; do require sequence
001EE2 0E55           00087         movlw   0x55
001EE4 6EA7           00088         movwf   EECON2, ACCESS
001EE6 0EAA           00089         movlw   0xAA
001EE8 6EA7           00090         movwf   EECON2, ACCESS
                      00091         ; start write, CPU will stall
001EEA 82A6           00092         bsf             EECON1, WR, ACCESS
                      00093         ; dummy read decrement to reset TBLPTR. Don't know why this is necessary but sure enough...
                      00094         ; without it all my writes were off by one address. Is included in datasheet example code
001EEC 000A           00095         tblrd*-
                      00096                 
                      00097         ; get next packet
001EEE                00098 mootLoader_rxWpmhGetNextPacket
001EEE D???           00099         rcall   mootLoader_rxReceiveNextPacket
                      00100         
                      00101         ; toggle all LEDs to indicate activity
                      00102         LED_ALL_TOGGLE
                          M         LED_SINE_TOGGLE
001EF0 768B               M         btg             LATC, RC3, ACCESS       ; SINE LED
                          M         LED_SQUARE_TOGGLE
001EF2 788B               M         btg             LATC, RC4, ACCESS       ; SQUARE LED
                          M         LED_SAMPLE_TOGGLE
001EF4 7A89               M         btg             LATA, RA5, ACCESS       ; SAMPLE LED
                      00103         
                      00104         ; if data payload complete then reset device
001EF6 0E02           00105         movlw   ML_COMMAND_DATA_PAYLOAD_COMPLETE
001EF8 181E           00106         xorwf   mlRxReceivedPacket + 3, w, ACCESS
001EFA E0??           00107         bz              mootLoader_rxReceiverResetHandler
                      00108         ; if data payload then confirm checksum and then write data
001EFC 0E01           00109         movlw   ML_COMMAND_DATA_PAYLOAD
001EFE 181E           00110         xorwf   mlRxReceivedPacket + 3, w, ACCESS
                      00111         ; if not data payload then exit with error
001F00 E1??           00112         bnz             mootLoader_signalErrorB
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00113         ; is data payload so test checksum
001F02 D???           00114         rcall   mootloader_rxTestSinglePacketChecksum
001F04 A215           00115         btfss   mlFlags, mlRxChecksumOk, ACCESS
                      00116         ; checksum bad so exit with error
001F06 D???           00117         bra             mootLoader_signalErrorC
                      00118         ; everything is ok so write the payload
                      00119         
                      00120         ; write payload to holding registers
001F08 C01F FFF5      00121         movff   mlRxReceivedPacket + 4, TABLAT
001F0C 000F           00122         tblwt+*
001F0E C021 FFF5      00123         movff   mlRxReceivedPacket + 6, TABLAT
001F12 000F           00124         tblwt+*
001F14 C023 FFF5      00125         movff   mlRxReceivedPacket + 8, TABLAT
001F18 000F           00126         tblwt+*
001F1A C025 FFF5      00127         movff   mlRxReceivedPacket + 10, TABLAT
001F1E 000F           00128         tblwt+*
001F20 C027 FFF5      00129         movff   mlRxReceivedPacket + 12, TABLAT
001F24 000F           00130         tblwt+*
001F26 C029 FFF5      00131         movff   mlRxReceivedPacket + 14, TABLAT
001F2A 000F           00132         tblwt+*
001F2C C02B FFF5      00133         movff   mlRxReceivedPacket + 16, TABLAT
001F30 000F           00134         tblwt+*
001F32 C02D FFF5      00135         movff   mlRxReceivedPacket + 18, TABLAT
001F36 000F           00136         tblwt+*
                      00137                 
                      00138         ; write holding register to flash memory
                      00139         ; point to Flash Program Memory
001F38 8EA6           00140         bsf             EECON1, EEPGD, ACCESS
                      00141         ; access Flash Program Memory
001F3A 9CA6           00142         bcf             EECON1, CFGS, ACCESS
                      00143         ; enable write to memory
001F3C 84A6           00144         bsf             EECON1, WREN, ACCESS
                      00145         ; do require sequence
001F3E 0E55           00146         movlw   0x55
001F40 6EA7           00147         movwf   EECON2, ACCESS
001F42 0EAA           00148         movlw   0xAA
001F44 6EA7           00149         movwf   EECON2, ACCESS
                      00150         ; start write, CPU will stall
001F46 82A6           00151         bsf             EECON1, WR, ACCESS      
                      00152         
                      00153 ; DEBUG
                      00154 ;       movlw   0
                      00155 ;       call    mootloader_rxWriteRxPacketToEE
                      00156 ;       bra             mootLoader_rxWpmhExit
                      00157 
                      00158         ; do block erase on every 64-byte boundary
                      00159         ; if(!(TBLPTRL & 0x3f)){doBlockErase();}
001F48 0E3F           00160         movlw   0x3f
001F4A 14F6           00161         andwf   TBLPTRL, w, ACCESS
001F4C E0??           00162         bz              mootLoader_rxWpmhBlockErase
001F4E D???           00163         bra             mootLoader_rxWpmhGetNextPacket
                      00164         
001F50                00165 mootLoader_rxWpmhExit
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001F50 D???           00166         bra     mootLoader_exit
                      00167 
                      00168 
                      00169 ;**********************************************************************
                      00170 ; Local Function: void mootLoader_signalErrorA()
                      00171 ;**********************************************************************
001F52                00172 mootLoader_signalErrorA
001F52                00173 mootLoader_signalErrorB
001F52                00174 mootLoader_signalErrorC
                      00175         LED_SQUARE_TOGGLE_OTHERS_OFF
                          M         LED_SINE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
001F52 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_TOGGLE
001F54 788B               M         btg             LATC, RC4, ACCESS       ; SQUARE LED
                          M         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
001F56 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
001F58 6A13           00176         clrf    mlCount, ACCESS
001F5A 0E10           00177         movlw   0x10
001F5C 6E14           00178         movwf   mlCount + 1, ACCESS
001F5E                00179 mootLoader_signalErrorALp1
                      00180         ; clear interrupt flag
001F5E 929E           00181         bcf             PIR1, TMR2IF, ACCESS    
001F60                00182 mootLoader_signalErrorALp2
                      00183         ; wait for timer2 overflow
001F60 A29E           00184         btfss   PIR1, TMR2IF, ACCESS
001F62 D???           00185         bra             mootLoader_signalErrorALp2
001F64 0613           00186         decf    mlCount, f, ACCESS
001F66 B4D8           00187         btfsc   STATUS, Z, ACCESS
001F68 2E14           00188         decfsz  mlCount + 1
001F6A D???           00189         bra             mootLoader_signalErrorALp1
                      00190         ; loop forever
001F6C D???           00191         bra             mootLoader_signalErrorA
                      00192         
                      00193 
                      00194 ;**********************************************************************
                      00195 ; Local Function: void mootLoader_rxReceiverResetHandler()
                      00196 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_rxReceiverResetHandler)
001F6E                00197 mootLoader_rxReceiverResetHandler
                      00198         ; received bytes are forwarded to UART output for chaining devices so
                      00199         ; make sure that you don't reset until last byte is transmitted 
001F6E A89E           00200         btfss   PIR1, TXIF, ACCESS
001F70 D???           00201         bra             mootLoader_rxReceiverResetHandler
001F72 00FF           00202         reset
                      00203 
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00204 
                      00205 ;**********************************************************************
                      00206 ; Local Function: void mootloader_rxTestSinglePacketChecksum()
                      00207 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootloader_rxTestSinglePacketChecksum)
001F74                00208 mootloader_rxTestSinglePacketChecksum
                      00209         ; pre-clear checksumOk flag
001F74 9215           00210         bcf             mlFlags, mlRxChecksumOk, ACCESS
                      00211         ; calculate checksum for single packet
001F76 501E           00212         movf    mlRxReceivedPacket + 3, w, ACCESS
001F78 181F           00213         xorwf   mlRxReceivedPacket + 4, w, ACCESS
001F7A 1821           00214         xorwf   mlRxReceivedPacket + 6, w, ACCESS
001F7C 1823           00215         xorwf   mlRxReceivedPacket + 8, w, ACCESS
001F7E 1825           00216         xorwf   mlRxReceivedPacket + 10, w, ACCESS
001F80 1827           00217         xorwf   mlRxReceivedPacket + 12, w, ACCESS
001F82 1829           00218         xorwf   mlRxReceivedPacket + 14, w, ACCESS
001F84 182B           00219         xorwf   mlRxReceivedPacket + 16, w, ACCESS
001F86 182D           00220         xorwf   mlRxReceivedPacket + 18, w, ACCESS
                      00221         ; xor mlRxReceivedPacket[8:0] with checksum in mlRxReceivedPacket[9]
001F88 0B7F           00222         andlw   0x7F
001F8A 182F           00223         xorwf   mlRxReceivedPacket + 20, w, ACCESS
                      00224         ; if result is 0 then checksum if NOT ok so skip
001F8C B4D8           00225         btfsc   STATUS, Z, ACCESS
001F8E 8215           00226         bsf             mlFlags, mlRxChecksumOk, ACCESS
001F90 0012           00227         return
                      00228 
                      00229 
                      00230 ;**********************************************************************
                      00231 ; Local Function: void mootLoader_rxReceiveNextPacket()
                      00232 ;**********************************************************************
001F92                00233 mootLoader_rxReceiveNextPacket
                      00234         PUSH_R  FSR0L
001F92 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00235         PUSH_R  FSR0H   
001F96 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
001F9A EE00 F01B      00236         lfsr    FSR0, mlRxReceivedPacket
                      00237 
001F9E 6A31           00238         clrf    mlRxReceivedPacketByteCount, ACCESS
                      00239         
                      00240         ; get next SysEx packet
                      00241 
                      00242         ; mootloader only responds to SysEx so wait for start value of 0xF0
Warning[208]: Label truncated at 32 characters. (mootLoader_rxReceiveNextPacketWaitF0)
001FA0                00243 mootLoader_rxReceiveNextPacketWaitF0
001FA0 D???           00244         rcall   mootLoader_rxReceiveNextByte
001FA2 0EF0           00245         movlw   0xF0
001FA4 6232           00246         cpfseq  mlRxReceivedByte, ACCESS
001FA6 D???           00247         bra             mootLoader_rxReceiveNextPacketWaitF0
                      00248         ; received 0xF0 so continue
001FA8 C032 FFEE      00249         movff   mlRxReceivedByte, POSTINC0
                      00250         
                      00251         ; continue receiving balance of ML_LARGE_PACKET_BYTE_SIZE number of bytes
                      00252         ; init count
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001FAC 0E15           00253         movlw   ML_LARGE_PACKET_BYTE_SIZE - 1
001FAE 6E31           00254         movwf   mlRxReceivedPacketByteCount, ACCESS
001FB0                00255 mootLoader_rxRnpPayloadLp
001FB0 D???           00256         rcall   mootLoader_rxReceiveNextByte
001FB2 C032 FFEE      00257         movff   mlRxReceivedByte, POSTINC0
001FB6 2E31           00258         decfsz  mlRxReceivedPacketByteCount, f, ACCESS
001FB8 D???           00259         bra             mootLoader_rxRnpPayloadLp
                      00260 
                      00261         ; make each data payload nybble index equal to reconstituted byte value
                      00262         ; point to start of data payload
001FBA EE00 F01F      00263         lfsr    FSR0, mlRxReceivedPacket + 4
                      00264         ; load count to de-nybble 8 bytes
001FBE 0E08           00265         movlw   8
001FC0 6E31           00266         movwf   mlRxReceivedPacketByteCount, ACCESS
Warning[208]: Label truncated at 32 characters. (mootLoader_rxRnpPayloadDe_nybbleLp)
001FC2                00267 mootLoader_rxRnpPayloadDe_nybbleLp
                      00268         ; swap and read high nybble into WREG
001FC2 0E01           00269         movlw   1
001FC4 38EB           00270         swapf   PLUSW0, w, ACCESS
                      00271         ; or high nybble and low nybble, save in WREG
001FC6 10EF           00272         iorwf   INDF0, w, ACCESS
                      00273         ; save complete value in low nybble location and postinc to high nybble
001FC8 6EEE           00274         movwf   POSTINC0, ACCESS
                      00275         ; save complete value in high nybble location and postinc to next low nybble
001FCA 6EEE           00276         movwf   POSTINC0, ACCESS
001FCC 2E31           00277         decfsz  mlRxReceivedPacketByteCount, f, ACCESS
001FCE D???           00278         bra             mootLoader_rxRnpPayloadDe_nybbleLp      
                      00279         
                      00280         POP_R   FSR0H   
001FD0 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00281         POP_R   FSR0L
001FD4 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
001FD8 0012           00282         return
                      00283         
                      00284 
                      00285 ;**********************************************************************
                      00286 ; Local Function: void mootloader_rxReceiveNextByte()
                      00287 ;**********************************************************************
001FDA                00288 mootLoader_rxReceiveNextByte
                      00289         ; skip if receive flag is set
001FDA AA9E           00290         btfss   PIR1, RCIF, ACCESS
001FDC D???           00291         bra             mootLoader_rxReceiveNextByte
                      00292         
Warning[208]: Label truncated at 32 characters. (mootLoader_rxReceiveNextByteReadFIFO)
001FDE                00293 mootLoader_rxReceiveNextByteReadFIFO
                      00294         ; skip if framing error occurred for top unread char in rx FIFO
001FDE A4AB           00295         btfss   RCSTA, FERR, ACCESS
                      00296         ; no framing error so read the character
001FE0 D???           00297         bra             mootLoader_rxReceiveNextByteGO
                      00298         ; framing error occurred
                      00299         ; read incorrectly framed character out of FIFO
001FE2 50AE           00300         movf    RCREG, w, ACCESS
                      00301         ; skip if rx FIFO is empty
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001FE4 BA9E           00302         btfsc   PIR1, RCIF, ACCESS
                      00303         ; FIFO is not empty so try next character
001FE6 D???           00304         bra             mootLoader_rxReceiveNextByteReadFIFO
                      00305         ; all characters in FIFO were incorrectly framed, no data to process
                      00306         ; attempt to remedy: reset UART receiver by toggling Continous Receive Enable bit
001FE8 98AB           00307         bcf             RCSTA, CREN, ACCESS
001FEA 88AB           00308         bsf             RCSTA, CREN, ACCESS
                      00309         ; need to receive a good data so try again
001FEC D???           00310         bra     mootLoader_rxReceiveNextByte
001FEE                00311 mootLoader_rxReceiveNextByteGO
                      00312         ; read the byte
001FEE CFAE F032      00313         movff   RCREG, mlRxReceivedByte
                      00314 
                      00315         ; echo received byte to UART output
001FF2 C032 FFAD      00316         movff   mlRxReceivedByte, TXREG
                      00317 
001FF6 0012           00318         return
                      00319 
                      00320         
001FF8 D???           00162         bra     mootLoader_exit
                      00163         
                      00206 
                      00207         END
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 66


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
ABDEN                             00000000
ABDOVF                            00000007
ACCESS                            00000000
ACCUMULATORS_ELEMENT_SIZE         4
ACCUMULATORS_SIZE                 MAX_POLY_DEPTH * ACCUMULATORS_ELEMENT_SIZE
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
ACTIVE_NOTE_DELTAS_ELEMENT_SIZE   2
ACTIVE_NOTE_DELTAS_SIZE           MAX_POLY_DEPTH * ACTIVE_NOTE_DELTAS_ELEMENT_SIZE
ACTIVE_NOTE_TABLE_SIZE            25
ACTIVE_OUTPUT_VALUES_EL_SIZE      1
ACTIVE_OUTPUT_VALUES_SIZE         MAX_POLY_DEPTH * ACTIVE_OUTPUT_VALUES_EL_SIZE
ACTVIE                            00000002
ACTVIF                            00000002
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCON2                            00000FC0
ADCS0                             00000000
ADCS1                             00000001
ADCS2                             00000002
ADDEN                             00000003
ADDR0                             00000000
ADDR1                             00000001
ADDR2                             00000002
ADDR3                             00000003
ADDR4                             00000004
ADDR5                             00000005
ADDR6                             00000006
ADEN                              00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADON                              00000000
ADRES                             00000FC3
ADRESH                            00000FC4
ADRESL                            00000FC3
ADSR_ATTACK_RATE                  63
ADSR_PRESCALE                     610
ADSR_RELEASE_RATE                 16
AFTERTOUCH_COMPLETE               DATA_BYTE1
ALL_NOTES_OFF                     123
ALL_SOUND_OFF                     120
AN10                              00000004
AN11                              00000005
AN3                               00000004
AN4                               00000000
AN5                               00000001
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 67


SYMBOL TABLE
  LABEL                             VALUE 

AN6                               00000002
AN7                               00000003
AN8                               00000006
AN9                               00000007
ANS10                             00000002
ANS11                             00000003
ANS3                              00000003
ANS4                              00000004
ANS5                              00000005
ANS6                              00000006
ANS7                              00000007
ANS8                              00000000
ANS9                              00000001
ANSEL                             00000F7E
ANSELH                            00000F7F
ASSERT_SS                         
BALANCE_LSB                       40
BALANCE_MSB                       8
BANKED                            00000001
BANK_SELECT_LSB                   32
BANK_SELECT_MSB                   0
BAUDCON                           00000FB8
BAUDCTL                           00000FB8
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BF                                00000000
BOOTLOADER_START_ADDRESS          0x1C00
BOR                               00000000
BP0                               2
BP1                               3
BREATH_CONTROLLER_LSB             34
BREATH_CONTROLLER_MSB             2
BRG16                             00000003
BRGH                              00000002
BSR                               00000FE0
BTOEE                             00000004
BTOEF                             00000004
BTSEE                             00000007
BTSEF                             00000007
C                                 00000000
C12IN1M                           00000001
C12IN2M                           00000002
C12IN3M                           00000003
C12INP                            00000000
C12OUT                            00000004
C1CH0                             00000000
C1CH1                             00000001
C1HYS                             00000003
C1IE                              00000006
C1IF                              00000006
C1IP                              00000006
C1OE                              00000005
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 68


SYMBOL TABLE
  LABEL                             VALUE 

C1ON                              00000007
C1OUT                             00000006
C1POL                             00000004
C1R                               00000002
C1RSEL                            00000005
C1SP                              00000003
C1SYNC                            00000001
C2CH0                             00000000
C2CH1                             00000001
C2HYS                             00000002
C2IE                              00000005
C2IF                              00000005
C2IP                              00000005
C2OE                              00000005
C2ON                              00000007
C2OUT                             00000006
C2POL                             00000004
C2R                               00000002
C2RSEL                            00000004
C2SP                              00000003
C2SYNC                            00000000
CCP1                              00000005
CCP1CON                           00000FBD
CCP1IE                            00000002
CCP1IF                            00000002
CCP1IP                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCPR1                             00000FBE
CCPR1H                            00000FBF
CCPR1L                            00000FBE
CFGS                              00000006
CHANNEL                           0x00
CHANNEL_PRESSURE                  0xD0
CHANNEL_PRESSURE_MESSAGE_LENGTH   2
CHANNEL_VOLUME_LSB                39
CHANNEL_VOLUME_MSB                7
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CK                                00000007
CKE                               00000006
CKP                               00000004
CKTXP                             00000004
CLEAR_ACCUMULATORS                
CLKIN                             00000005
CLKOUT                            00000004
CM1CON0                           00000F6D
CM2CON0                           00000F6B
CM2CON1                           00000F6C
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 69


SYMBOL TABLE
  LABEL                             VALUE 

CONFIG_INC                        
CONTROL_CHANGE                    0xB0
CONTROL_CHANGE_COMPLETE           DATA_BYTE1
CONTROL_CHANGE_MESSAGE_LENGTH     3
CRC16EE                           00000002
CRC16EF                           00000002
CRC5EE                            00000001
CRC5EF                            00000001
CREN                              00000004
CSRC                              00000007
CVREF                             00000002
D                                 00000005
D1EN                              00000007
D1LPS                             00000006
D1NSS                             00000000
D1PSS0                            00000002
D1PSS1                            00000003
DAC1OE                            00000005
DAC1R0                            00000000
DAC1R1                            00000001
DAC1R2                            00000002
DAC1R3                            00000003
DAC1R4                            00000004
DATA_BYTE0                        0x01
DATA_BYTE1                        0x02
DATA_DECREMENT                    97
DATA_ENTRY_LSB                    38
DATA_ENTRY_MSB                    6
DATA_INCREMENT                    96
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DDRA                              TRISA
DDRB                              TRISB
DDRC                              TRISC
DDRD                              TRISD
DDRE                              TRISE
DEASSERT_SS                       
DELEGATED_DELTAS_ELEMENT_SIZE     2
DELEGATED_DELTAS_SIZE             MAX_POLY_DEPTH * DELEGATED_DELTAS_ELEMENT_SIZE
DEVICE_ID                         0x1D
DFN8EE                            00000003
DFN8EF                            00000003
DIR                               00000002
DISABLE_SUSTAIN                   
DONE                              00000001
DTRXP                             00000005
D_A                               00000005
D_NOT_A                           00000005
ECCP1AS                           00000FB6
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 70


SYMBOL TABLE
  LABEL                             VALUE 

ECCPASE                           00000007
EEADR                             00000FA9
EEADR0                            00000000
EEADR1                            00000001
EEADR2                            00000002
EEADR3                            00000003
EEADR4                            00000004
EEADR5                            00000005
EEADR6                            00000006
EEADR7                            00000007
EECON1                            00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEIE                              00000004
EEIF                              00000004
EEIP                              00000004
EEPGD                             00000007
EEPROM_SIZE_BITS                  128000
EE_DISABLE_INTS                   
EE_RDSR                           B'00000101'
EE_READ                           B'00000011'
EE_RESTORE_INTS                   
EE_WRDI                           B'00000100'
EE_WREN                           B'00000110'
EE_WRITE                          B'00000010'
EE_WRSR                           B'00000001'
EFFECTS_1_DEPTH_DEFAULT_REVERB_S  91
EFFECTS_2_DEPTH_DEFAULT_TREMOLO_  92
EFFECTS_3_DEPTH_DEFAULT_CHORUS_S  93
EFFECTS_4_DEPTH_DEFAULT_CELESTE_  94
EFFECTS_5_DEPTH_DEFAULT_PHASER_D  95
EFFECT_CONTROL_1_LSB              44
EFFECT_CONTROL_1_MSB              12
EFFECT_CONTROL_2_LSB              45
EFFECT_CONTROL_2_MSB              13
ENABLE_SUSTAIN                    
ENDP0                             00000003
ENDP1                             00000004
ENDP2                             00000005
ENDP3                             00000006
EOX                               0xF7
EPCONDIS                          00000003
EPHSHK                            00000004
EPINEN                            00000001
EPOUTEN                           00000002
EPSTALL                           00000000
EXPRESSION_LSB                    43
EXPRESSION_MSB                    11
FAST                              00000001
FERR                              00000002
FOOT_CONTROLLER_LSB               36
FOOT_CONTROLLER_MSB               4
FREE                              00000004
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 71


SYMBOL TABLE
  LABEL                             VALUE 

FRM0                              00000000
FRM1                              00000001
FRM10                             00000002
FRM2                              00000002
FRM3                              00000003
FRM4                              00000004
FRM5                              00000005
FRM6                              00000006
FRM7                              00000007
FRM8                              00000000
FRM9                              00000001
FSEN                              00000002
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
FSR1H                             00000FE2
FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
FVR1EN                            00000007
FVR1S0                            00000004
FVR1S1                            00000005
FVR1ST                            00000006
GCEN                              00000007
GENERAL_INFORMATION               0x06
GENERAL_PURPOSE_CONTROLLER_1_LSB  48
GENERAL_PURPOSE_CONTROLLER_1_MSB  16
GENERAL_PURPOSE_CONTROLLER_2_LSB  49
GENERAL_PURPOSE_CONTROLLER_2_MSB  17
GENERAL_PURPOSE_CONTROLLER_3_LSB  50
GENERAL_PURPOSE_CONTROLLER_3_MSB  18
GENERAL_PURPOSE_CONTROLLER_4_LSB  51
GENERAL_PURPOSE_CONTROLLER_4_MSB  19
GENERAL_PURPOSE_CONTROLLER_5      80
GENERAL_PURPOSE_CONTROLLER_6      81
GENERAL_PURPOSE_CONTROLLER_7      82
GENERAL_PURPOSE_CONTROLLER_8      83
GIE                               00000007
GIEH                              00000007
GIEL                              00000006
GIE_GIEH                          00000007
GO                                00000001
GO_DONE                           00000001
GO_NOT_DONE                       00000001
HFIOFL                            00000001
HOLD_2                            69
IDENTITY_REPLY                    0x02
IDENTITY_REQUEST                  0x01
IDLEIE                            00000004
IDLEIF                            00000004
IDLEN                             00000007
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 72


SYMBOL TABLE
  LABEL                             VALUE 

IDLE_BLOCK_ERASE                  
IDLE_WRITE_WAIT                   
INDF0                             00000FEF
INDF1                             00000FE7
INDF2                             00000FDF
INT0                              00000000
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1                              00000001
INT1E                             00000003
INT1F                             00000000
INT1IE                            00000003
INT1IF                            00000000
INT1IP                            00000006
INT1P                             00000006
INT2                              00000002
INT2E                             00000004
INT2F                             00000001
INT2IE                            00000004
INT2IF                            00000001
INT2IP                            00000007
INT2P                             00000007
INTCON                            00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
INTSRC                            00000007
IOCA                              00000F79
IOCA0                             00000000
IOCA1                             00000001
IOCA3                             00000003
IOCA4                             00000004
IOCA5                             00000005
IOCB                              00000F7A
IOCB4                             00000004
IOCB5                             00000005
IOCB6                             00000006
IOCB7                             00000007
IOFS                              00000002
IPEN                              00000007
IPR1                              00000F9F
IPR2                              00000FA2
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
KEY_PRESSURE                      0xA0
KEY_PRESSURE_MESSAGE_LENGTH       3
LATA                              00000F89
LATA4                             00000004
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 73


SYMBOL TABLE
  LABEL                             VALUE 

LATA5                             00000005
LATB                              00000F8A
LATB4                             00000004
LATB5                             00000005
LATB6                             00000006
LATB7                             00000007
LATC                              00000F8B
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LATC6                             00000006
LATC7                             00000007
LED_ALL_OFF                       
LED_ALL_ON                        
LED_ALL_TOGGLE                    
LED_BLINK_RATE_VOICE_RECORD       6
LED_BLINK_RATE_VOICE_THROUGH      20
LED_ONLY_SAMPLE_ON                
LED_ONLY_SINE_ON                  
LED_ONLY_SQUARE_ON                
LED_POLARITY_REVERSED             
LED_SAMPLE_OFF                    
LED_SAMPLE_ON                     
LED_SAMPLE_TOGGLE                 
LED_SAMPLE_TOGGLE_OTHERS_OFF      
LED_SINE_OFF                      
LED_SINE_ON                       
LED_SINE_TOGGLE                   
LED_SINE_TOGGLE_OTHERS_OFF        
LED_SQUARE_OFF                    
LED_SQUARE_ON                     
LED_SQUARE_TOGGLE                 
LED_SQUARE_TOGGLE_OTHERS_OFF      
LEGATO_FOOTSWITCH                 68
LEVEL_MONO_LED_BLINK_RATE         1
LEVEL_POLY_LED_BLINK_RATE         0
LEVEL_SUSTAIN_LED_BLINK_RATE      2
LFIOFS                            00000000
LOCAL_CONTROL_ONOFF               122
MAX_MIDI_MESSAGE_SIZE             24
MAX_MODE_LEVEL                    MONO
MAX_POLY_DEPTH                    4
MC1OUT                            00000007
MC2OUT                            00000006
MESSAGE_COMPLETE                  0xFF
MIDI_DEVICE_ID                    0x1D
MIDI_VENDOR_ID                    0x77
ML_BLOCK_ERASE_BYTE_SIZE          64
ML_BLOCK_ERASE_IDLE_TIME_MS       8
ML_COMMAND_DATA_PAYLOAD           0x01
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 74


SYMBOL TABLE
  LABEL                             VALUE 

ML_COMMAND_DATA_PAYLOAD_COMPLETE  0x02
ML_COMMAND_WRITE_PROGRAM_MEMORY   0x03
ML_DATA_PACKET_PAYLOAD_BYTE_SIZE  8
ML_LARGE_PACKET_BYTE_SIZE         22
ML_RECEIVER_RESET                 0x11
ML_TRANSMITTER_RESETTING          0x10
ML_TRANS_SYNC_IDLE_TIME_MS        32
ML_WRITE_IDLE_TIME_MS             8
MODULATION_WHEEL_LSB              33
MODULATION_WHEEL_MSB              1
MONO                              2
MSK0                              00000000
MSK1                              00000001
MSK2                              00000002
MSK3                              00000003
MSK4                              00000004
MSK5                              00000005
MSK6                              00000006
MSK7                              00000007
N                                 00000004
NEXT_SAMPLE_ADDRESSES_EL_SIZE     2
NON_REAL_TIME                     0x7E
NON_REG_PARAMETER_NUMBER_LSB      98
NON_REG_PARAMETER_NUMBER_MSB      99
NOTE_COMPLETE                     DATA_BYTE1
NOTE_OFF                          0x80
NOTE_OFF_MESSAGE_LENGTH           3
NOTE_ON                           0x90
NOTE_ON_MESSAGE_LENGTH            3
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_DONE                          00000001
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RABPU                         00000007
NOT_RDY                           0
NOT_RI                            00000004
NOT_SS                            00000006
NOT_T1SYNC                        00000002
NOT_T3SYNC                        00000002
NOT_TO                            00000003
NOT_W                             00000002
NOT_WRITE                         00000002
NVCFG0                            00000000
NVCFG1                            00000001
OERR                              00000001
OMNI_MODE_OFF                     124
OMNI_MODE_ON                      125
OSC1                              00000005
OSC2                              00000004
OSCCON                            00000FD3
OSCCON2                           00000FD2
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 75


SYMBOL TABLE
  LABEL                             VALUE 

OSCFIE                            00000007
OSCFIF                            00000007
OSCFIP                            00000007
OSCTUNE                           00000F9B
OSC_ADVANCE_ADSR                  
OSC_DELTAS_ELEMENT_SIZE           2
OSC_DELTAS_SIZE                   MAX_POLY_DEPTH * OSC_DELTAS_ELEMENT_SIZE
OSC_MIX                           
OSC_READ_ADSR_FLAG                
OSC_STATE_BLOCK                   
OSC_TRANSITION_OUTPUT_THRESHOLD   0x04
OSTS                              00000003
OV                                00000003
P                                 00000004
P1A                               00000005
P1B                               00000004
P1C                               00000003
P1D                               00000002
P1M0                              00000006
P1M1                              00000007
PAN_LSB                           42
PAN_MSB                           10
PC                                00000FF9
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PD                                00000002
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PEIE_GIEL                         00000006
PEN                               00000002
PGM                               00000003
PIC18LF13K50                      
PIDEE                             00000000
PIDEF                             00000000
PIE1                              00000F9D
PIE2                              00000FA0
PIR1                              00000F9E
PIR2                              00000FA1
PITCH_WHEEL                       0xE0
PITCH_WHEEL_COMPLETE              DATA_BYTE1
PITCH_WHEEL_MESSAGE_LENGTH        3
PKTDIS                            00000004
PLAYBACK                          2
PLUSW0                            00000FEB
PLUSW1                            00000FE3
PLUSW2                            00000FDB
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 76


SYMBOL TABLE
  LABEL                             VALUE 

POLY                              0
POLY_MODE_OFF                     126
POLY_MODE_ON                      127
POP_R                             
POR                               00000001
PORTA                             00000F80
PORTAMENTO_CONTROL                84
PORTAMENTO_ONOFF                  65
PORTAMENTO_TIME                   5
PORTAMENTO_TIME_LSB               37
PORTB                             00000F81
PORTC                             00000F82
POSTDEC0                          00000FED
POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PPB0                              00000000
PPB1                              00000001
PPBI                              00000001
PPBRST                            00000006
PR2                               00000FCB
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PRI_SD                            00000002
PROD                              00000FF3
PRODH                             00000FF4
PRODL                             00000FF3
PROGRAM_CHANGE                    0xC0
PROGRAM_CHANGE_COMPLETE           DATA_BYTE0
PROGRAM_CHANGE_MESSAGE_LENGTH     2
PRSEN                             00000007
PSA                               00000003
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
PSTRCON                           00000FB9
PUSH_R                            
PVCFG0                            00000002
PVCFG1                            00000003
PWM1CON                           00000FB7
PWM_IDLE_OUTPUT_VALUE             0x80
R                                 00000002
RA0                               00000000
RA1                               00000001
RA3                               00000003
RA4                               00000004
RA5                               00000005
RABIE                             00000003
RABIF                             00000000
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 77


SYMBOL TABLE
  LABEL                             VALUE 

RABIP                             00000000
RABPU                             00000007
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCON                              00000FD0
RCREG                             00000FAE
RCSTA                             00000FAB
RD                                00000000
RD16                              00000007
RECORD                            1
RECORD_BUTTON_RELEASE_WAIT_TIME   26
REFCON0                           00000FBA
REFCON1                           00000FBB
REFCON2                           00000FBC
REGISTERED_PARAMETER_NUMBERMSB    101
REGISTERED_PARAMETER_NUMBER_LSB   100
RESET_ALL_CONTROLLERS             121
RESUME                            00000002
REVERSE_SAMPLE_IF_MOD_OVER_63     
RI                                00000004
RSEN                              00000001
RX                                00000005
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SAMPLE                            2
SAMPLE_DATA_BUFFER_SIZE           64
SAMPLE_DC_OFFSET                  (PWM_IDLE_OUTPUT_VALUE - 74)
SAMPLE_PRESCALE                   6
SBOREN                            00000006
SCK                               00000006
SCKP                              00000004
SCL                               00000006
SCS0                              00000000
SCS1                              00000001
SDA                               00000004
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 78


SYMBOL TABLE
  LABEL                             VALUE 

SDI                               00000004
SDO                               00000007
SE0                               00000005
SEN                               00000000
SENDB                             00000003
SEND_BYTE_DO_CHECKSUM             
SEND_BYTE_START_CHECKSUM          
SEND_CHECKSUM_CLEAR_RUN           
SEND_CHECKSUM_DO_RUN              
SEND_RUNNING_CHECKSUM             
SEND_SYSEX_INTRO_NO_CHECK         
SINE                              0
SLRA                              00000000
SLRB                              00000001
SLRC                              00000002
SLRCON                            00000F76
SMP                               00000007
SOFIE                             00000006
SOFIF                             00000006
SOFTWARESTACK_H                   
SOFT_PEDAL                        67
SOSTENUTO                         66
SOUND_CONTROLLER_10_GM2_DEFAULT_  79
SOUND_CONTROLLER_1_DEFAULT_SOUND  70
SOUND_CONTROLLER_2_DEFAULT_TIMBR  71
SOUND_CONTROLLER_3_DEFAULT_RELEA  72
SOUND_CONTROLLER_4_DEFAULT_ATTAC  73
SOUND_CONTROLLER_5_DEFAULT_BRIGH  74
SOUND_CONTROLLER_6_GM2_DEFAULT_D  75
SOUND_CONTROLLER_7_GM2_DEFAULT_V  76
SOUND_CONTROLLER_8_GM2_DEFAULT_V  77
SOUND_CONTROLLER_9_GM2_DEFAULT_V  78
SP0                               00000000
SP1                               00000001
SP2                               00000002
SP3                               00000003
SP4                               00000004
SPBRG                             00000FAF
SPBRGH                            00000FB0
SPEN                              00000007
SPLIT_BYTE_THEN_SEND_DO_CHECKSUM  
SPLLEN                            00000006
SQUARE                            1
SRCLK0                            00000004
SRCLK1                            00000005
SRCLK2                            00000006
SRCON0                            00000F68
SRCON1                            00000F69
SREN                              00000005
SRLEN                             00000007
SRNQEN                            00000002
SRPR                              00000000
SRPS                              00000001
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 79


SYMBOL TABLE
  LABEL                             VALUE 

SRQ                               00000004
SRQEN                             00000003
SRRC1E                            00000000
SRRC2E                            00000001
SRRCKE                            00000002
SRRPE                             00000003
SRSC1E                            00000004
SRSC2E                            00000005
SRSCKE                            00000006
SRSPE                             00000007
SS                                00000006
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON1                           00000FC6
SSPCON2                           00000FC5
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPMSK                            00000F6F
SSPOV                             00000006
SSPSTAT                           00000FC7
STALLIE                           00000005
STALLIF                           00000005
STATUS                            00000FD8
STKFUL                            00000007
STKOVF                            00000007
STKPTR                            00000FFC
STKUNF                            00000006
STRA                              00000000
STRB                              00000001
STRC                              00000002
STRD                              00000003
STRSYNC                           00000004
SUSPND                            00000001
SUSTAIN                           1
SUSTAIN_PEDAL                     64
SWDTE                             00000000
SWDTEN                            00000000
SYNC                              00000004
SYSEX                             0xF0
T08BIT                            00000006
T0CKI                             00000005
T0CON                             00000FD5
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0PS0                             00000000
T0PS1                             00000001
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 80


SYMBOL TABLE
  LABEL                             VALUE 

T0PS2                             00000002
T0SE                              00000004
T13CKI                            00000006
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000FCD
T1OSCEN                           00000003
T1OSCI                            00000006
T1OSCO                            00000007
T1RUN                             00000006
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FCA
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T3CCP1                            00000003
T3CKPS0                           00000004
T3CKPS1                           00000005
T3CON                             00000FB1
T3SYNC                            00000002
TABLAT                            00000FF5
TBLPTR                            00000FF6
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
TERMINAL_PACKET_COMMAND_VALUE     0x1E
THROUGH_HOLE_PCB                  
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
TMR0ON                            00000007
TMR1CS                            00000001
TMR1H                             00000FCF
TMR1IE                            00000000
TMR1IF                            00000000
TMR1IP                            00000000
TMR1L                             00000FCE
TMR1ON                            00000000
TMR2                              00000FCC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2ON                            00000002
TMR3CS                            00000001
TMR3H                             00000FB3
TMR3IE                            00000001
TMR3IF                            00000001
TMR3IP                            00000001
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 81


SYMBOL TABLE
  LABEL                             VALUE 

TMR3L                             00000FB2
TMR3ON                            00000000
TO                                00000003
TOS                               00000FFD
TOSH                              00000FFE
TOSL                              00000FFD
TOSU                              00000FFF
TRISA                             00000F92
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000F93
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000F94
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRMT                              00000001
TRNIE                             00000003
TRNIF                             00000003
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TUN5                              00000005
TX                                00000007
TX9                               00000006
TX9D                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXIP                              00000004
TXREG                             00000FAD
TXSTA                             00000FAC
UA                                00000001
UADDR                             00000F5C
UCFG                              00000F61
UCON                              00000F64
UEIE                              00000F5B
UEIR                              00000F5F
UEP0                              00000F53
UEP1                              00000F54
UEP2                              00000F55
UEP3                              00000F56
UEP4                              00000F57
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 82


SYMBOL TABLE
  LABEL                             VALUE 

UEP5                              00000F58
UEP6                              00000F59
UEP7                              00000F5A
UERRIE                            00000001
UERRIF                            00000001
UFRMH                             00000F5E
UFRML                             00000F5D
UIE                               00000F60
UIR                               00000F62
UNDEFINED_003                     3
UNDEFINED_014                     14
UNDEFINED_015                     15
UNDEFINED_020                     20
UNDEFINED_021                     21
UNDEFINED_022                     22
UNDEFINED_023                     23
UNDEFINED_024                     24
UNDEFINED_025                     25
UNDEFINED_026                     26
UNDEFINED_027                     27
UNDEFINED_028                     28
UNDEFINED_029                     29
UNDEFINED_030                     30
UNDEFINED_031                     31
UNDEFINED_035                     35
UNDEFINED_041                     41
UNDEFINED_046                     46
UNDEFINED_047                     47
UNDEFINED_052                     52
UNDEFINED_053                     53
UNDEFINED_054                     54
UNDEFINED_055                     55
UNDEFINED_056                     56
UNDEFINED_057                     57
UNDEFINED_058                     58
UNDEFINED_059                     59
UNDEFINED_060                     60
UNDEFINED_061                     61
UNDEFINED_062                     62
UNDEFINED_063                     63
UNDEFINED_102                     102
UNDEFINED_103                     103
UNDEFINED_104                     104
UNDEFINED_105                     105
UNDEFINED_106                     106
UNDEFINED_107                     107
UNDEFINED_108                     108
UNDEFINED_109                     109
UNDEFINED_110                     110
UNDEFINED_111                     111
UNDEFINED_112                     112
UNDEFINED_113                     113
UNDEFINED_114                     114
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 83


SYMBOL TABLE
  LABEL                             VALUE 

UNDEFINED_115                     115
UNDEFINED_116                     116
UNDEFINED_117                     117
UNDEFINED_118                     118
UNDEFINED_119                     119
UNDEFINED_85                      85
UNDEFINED_86                      86
UNDEFINED_87                      87
UNDEFINED_88                      88
UNDEFINED_89                      89
UNDEFINED_90                      90
UNDEFINED_MSB                     9
UPUEN                             00000004
URSTIE                            00000000
URSTIF                            00000000
USBEN                             00000003
USBIE                             00000002
USBIF                             00000002
USBIP                             00000002
USER_CODE_END_ADDRESS             BOOTLOADER_START_ADDRESS - 2
USER_CODE_START_ADDRESS           0x0040
USTAT                             00000F63
UTEYE                             00000007
VENDOR_ID                         0x77
VOICE_THROUGH                     0
VREFCON0                          00000FBA
VREFCON1                          00000FBB
VREFCON2                          00000FBC
VREFM                             00000001
VREFP                             00000000
W                                 00000000
WAVE_PRESCALE                     2
WCOL                              00000007
WDTCON                            00000FD1
WEL                               1
WPEN                              7
WPUA                              00000F77
WPUA3                             00000003
WPUA4                             00000004
WPUA5                             00000005
WPUB                              00000F78
WPUB4                             00000004
WPUB5                             00000005
WPUB6                             00000006
WPUB7                             00000007
WR                                00000001
WREG                              00000FE8
WREN                              00000002
WRERR                             00000003
WRITE_INTERNAL_EEPROM             
WRITE_INTERNAL_EEPROM_FROM_REGS   
WUE                               00000001
Z                                 00000002
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 84


SYMBOL TABLE
  LABEL                             VALUE 

_BBSIZ_OFF_4L                     000000F7
_BBSIZ_ON_4L                      000000FF
_BOREN_NOSLP_2L                   000000FD
_BOREN_OFF_2L                     000000F9
_BOREN_ON_2L                      000000FB
_BOREN_SBORDIS_2L                 000000FF
_BORV_19_2L                       000000FF
_BORV_22_2L                       000000F7
_BORV_27_2L                       000000EF
_BORV_30_2L                       000000E7
_CONFIG1H                         00300001
_CONFIG1L                         00300000
_CONFIG2H                         00300003
_CONFIG2L                         00300002
_CONFIG3H                         00300005
_CONFIG4L                         00300006
_CONFIG5H                         00300009
_CONFIG5L                         00300008
_CONFIG6H                         0030000B
_CONFIG6L                         0030000A
_CONFIG7H                         0030000D
_CONFIG7L                         0030000C
_CP0_OFF_5L                       000000FF
_CP0_ON_5L                        000000FE
_CP1_OFF_5L                       000000FF
_CP1_ON_5L                        000000FD
_CPB_OFF_5H                       000000FF
_CPB_ON_5H                        000000BF
_CPD_OFF_5H                       000000FF
_CPD_ON_5H                        0000007F
_CPUDIV_CLKDIV2_1L                000000EF
_CPUDIV_CLKDIV3_1L                000000F7
_CPUDIV_CLKDIV4_1L                000000FF
_CPUDIV_NOCLKDIV_1L               000000E7
_DEBUG_OFF_4L                     000000FF
_DEBUG_ON_4L                      0000007F
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
_EBTR0_OFF_7L                     000000FF
_EBTR0_ON_7L                      000000FE
_EBTR1_OFF_7L                     000000FF
_EBTR1_ON_7L                      000000FD
_EBTRB_OFF_7H                     000000FF
_EBTRB_ON_7H                      000000BF
_EEPROMH_                         
_FCMEN_OFF_1H                     000000BF
_FCMEN_ON_1H                      000000FF
_FOSC_ECCLKOUTH_1H                000000F4
_FOSC_ECCLKOUTL_1H                000000FC
_FOSC_ECCLKOUTM_1H                000000FA
_FOSC_ECH_1H                      000000F5
_FOSC_ECL_1H                      000000FD
_FOSC_ECM_1H                      000000FB
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 85


SYMBOL TABLE
  LABEL                             VALUE 

_FOSC_ERCCLKOUT_1H                000000F3
_FOSC_ERC_1H                      000000F7
_FOSC_HS_1H                       000000F2
_FOSC_IRCCLKOUT_1H                000000F9
_FOSC_IRC_1H                      000000F8
_FOSC_LP_1H                       000000F0
_FOSC_XT_1H                       000000F1
_HFOFST_OFF_3H                    000000F7
_HFOFST_ON_3H                     000000FF
_IDLOC0                           00200000
_IDLOC1                           00200001
_IDLOC2                           00200002
_IDLOC3                           00200003
_IDLOC4                           00200004
_IDLOC5                           00200005
_IDLOC6                           00200006
_IDLOC7                           00200007
_IESO_OFF_1H                      0000007F
_IESO_ON_1H                       000000FF
_LVP_OFF_4L                       000000FB
_LVP_ON_4L                        000000FF
_MCLRE_OFF_3H                     0000007F
_MCLRE_ON_3H                      000000FF
_MIDIH_                           
_MOOTLOADERH_                     
_PCLKEN_OFF_1H                    000000DF
_PCLKEN_ON_1H                     000000FF
_PLLEN_OFF_1H                     000000EF
_PLLEN_ON_1H                      000000FF
_PWRTEN_OFF_2L                    000000FF
_PWRTEN_ON_2L                     000000FE
_SOUNDGENH_                       
_STVREN_OFF_4L                    000000FE
_STVREN_ON_4L                     000000FF
_USBDIV_OFF_1L                    000000DF
_USBDIV_ON_1L                     000000FF
_USERINTERFACEH_                  
_WDTEN_OFF_2H                     000000FE
_WDTEN_ON_2H                      000000FF
_WDTPS_1024_2H                    000000F5
_WDTPS_128_2H                     000000EF
_WDTPS_16384_2H                   000000FD
_WDTPS_16_2H                      000000E9
_WDTPS_1_2H                       000000E1
_WDTPS_2048_2H                    000000F7
_WDTPS_256_2H                     000000F1
_WDTPS_2_2H                       000000E3
_WDTPS_32768_2H                   000000FF
_WDTPS_32_2H                      000000EB
_WDTPS_4096_2H                    000000F9
_WDTPS_4_2H                       000000E5
_WDTPS_512_2H                     000000F3
_WDTPS_64_2H                      000000ED
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 86


SYMBOL TABLE
  LABEL                             VALUE 

_WDTPS_8192_2H                    000000FB
_WDTPS_8_2H                       000000E7
_WRT0_OFF_6L                      000000FF
_WRT0_ON_6L                       000000FE
_WRT1_OFF_6L                      000000FF
_WRT1_ON_6L                       000000FD
_WRTB_OFF_6H                      000000FF
_WRTB_ON_6H                       000000BF
_WRTC_OFF_6H                      000000FF
_WRTC_ON_6H                       000000DF
_WRTD_OFF_6H                      000000FF
_WRTD_ON_6H                       0000007F
_XINST_OFF_4L                     000000BF
_XINST_ON_4L                      000000FF
__18LF13K50                       00000001
activeNoteTableModified           3
attack                            3
bsrTmp                            00000002
decay                             2
delegatorBusy                     0
highPriorityISR                   0000004C
highPriorityISR_redirect          00000044
intState                          2
keyPressed                        5
lowPriorityISR                    0000004C
lowPriorityISR_redirect           00000048
main                              0000004C
main_redirect                     00000040
midiState_messageNeedsMapping     1
midiThruModeEnabled               2
mlBlockEraseBytesRemaining        00000018
mlButtonState                     00000000
mlChecksum                        00000001
mlConsecutiveSymbolCount          00000034
mlCount                           00000013
mlCurrentTxByte                   00000017
mlDatPackIntByteCount             00000019
mlDataPayloadBuffer               0000000B
mlDecodedNybble                   0000003E
mlEepromAddress                   0000003F
mlEepromByteCount                 00000040
mlFlags                           00000015
mlNybbleSplitTmp                  00000016
mlPayloadLength                   00000007
mlPerfectPreludeCount             0000001A
mlPeriodBucketHighLimit           00000037
mlPeriodBucketLowLimit            00000036
mlRA4CompareReg                   00000039
mlRunningChecksum                 00000002
mlRxChecksumOk                    1
mlRxCyclePeriodH                  0000003B
mlRxCyclePeriodL                  0000003A
mlRxPreviousSymbolBucket          00000033
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 87


SYMBOL TABLE
  LABEL                             VALUE 

mlRxReceivedByte                  00000032
mlRxReceivedPacket                0000001B
mlRxReceivedPacketByteCount       00000031
mlRxSymbolBucket                  00000035
mlRxTransSyncFlag                 0
mlSchmittReadValue                0000003C
mlStartAddress                    00000003
mlSymbolBucketCount               00000038
mlTransitionCount                 0000003D
mootLoader                        00001C00
mootLoader_checkReceive           00001C40
mootLoader_exit                   00001C48
mootLoader_initCore               00001C4C
mootLoader_initHeap               00001C8A
mootLoader_initOsc_lp1            00001C52
mootLoader_receiver               00001E94
mootLoader_receiverListenForTran  00001E96
mootLoader_rxReceiveNextByte      00001FDA
mootLoader_rxReceiveNextByteGO    00001FEE
mootLoader_rxReceiveNextByteRead  00001FDE
mootLoader_rxReceiveNextPacket    00001F92
mootLoader_rxReceiveNextPacketWa  00001FA0
mootLoader_rxReceiverResetHandle  00001F6E
mootLoader_rxRnpPayloadDe_nybble  00001FC2
mootLoader_rxRnpPayloadLp         00001FB0
mootLoader_rxWpmhBlockErase       00001EDA
mootLoader_rxWpmhExit             00001F50
mootLoader_rxWpmhGetNextPacket    00001EEE
mootLoader_rxWriteProgramMemoryH  00001EA8
mootLoader_sendAsNybbles          00001E5C
mootLoader_sendByte               00001E6A
mootLoader_signalErrorA           00001F52
mootLoader_signalErrorALp1        00001F5E
mootLoader_signalErrorALp2        00001F60
mootLoader_signalErrorB           00001F52
mootLoader_signalErrorC           00001F52
mootLoader_stateWaitLp            00001C1C
mootLoader_stateWaitOvLp          00001C26
mootLoader_transmitter            00001C90
mootLoader_wait                   00001E72
mootLoader_waitExit               00001E92
mootLoader_waitIntLp              00001E80
mootLoader_waitLp                 00001E7E
mootLoader_xmitSdppLp             00001DCE
mootLoader_xmitSendDataPayloadCo  00001DF4
mootLoader_xmitSendDataPayloadPa  00001DA4
mootLoader_xmitSendWpmPacket      00001D3A
mootLoader_xmitStartWrite         00001CCA
mootLoader_xmitWpmBlockErase      00001CE4
mootLoader_xmitWpmByteLp          00001CF6
mootLoader_xmitWpmCheckBlockEras  00001D26
mootLoader_xmitWpmNextPayload     00001CEE
mootLoader_xmitWpmSendPayloadCom  00001D2E
MPASM  5.42                ../SOURCE/MAIN.ASM   10-5-2011  20:43:04         PAGE 88


SYMBOL TABLE
  LABEL                             VALUE 

mootLoader_xmitWriteProgramMemor  00001CCE
mootloader_rxTestSinglePacketChe  00001F74
needRefresh                       2
osc0                              0
osc1                              1
osc2                              2
osc3                              3
pgDec                             1
r0                                00000003
r1                                00000004
r2                                00000005
r3                                00000006
r4                                00000007
r5                                00000008
r6                                00000009
r7                                0000000A
ready                             3
release                           0
sampleChunkReady                  0
samplesLoaded                     1
softwareStackBaseAddress          000002FF
softwareStackPointerFSR           FSR2
softwareStackPointerINDF          INDF2
softwareStackPointerPLUSW         PLUSW2
softwareStackPointerPOSTDEC       POSTDEC2
softwareStackPointerPOSTINC       POSTINC2
softwareStackPointerPREINC        PREINC2
soundOn                           6
statusTmp                         00000001
sustain                           1
turnSoundOff                      4
turnSoundOn                       3
uartState_rxInProgress            0
wTmp                              00000000

Errors   :     0
Warnings :    12 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

