MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      main.asm                                          *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 ; Software Stack uses FSR2 so hands off!
                      00022 
                      00023 ;**********************************************************************
                      00024 ; ENVIRONMENTAL DEFINES
                      00025 ;**********************************************************************
                      00026 
                      00027         ; define processor
                      00028         ; ..13K50 is default shipping processor, ..14k22 used for development
                      00029 ;       #define PIC18LF13K50
                      00030         #define PIC18LF14K22
                      00031 
                      00032 #ifdef  PIC18LF13K50
                      00033         list            p=18lf13k50                     ; list directive to define processor
                      00034 #endif
                      00035 #ifdef  PIC18LF14K22
Warning[215]: Processor superseded by command line.  Verify processor symbol.
                      00036         list            p=18lf14k22                     ; list directive to define processor
                      00037 #endif
                      00038         
Warning[216]: Radix superseded by command line.
                      00039         list            r=dec                                           ; set default radix to decimal
                      00040 
                      00041         #define USER_CODE_START_ADDRESS         0x0040  ; address must be aligned to 64-byte boundary
                      00042 
                      00043 ;**********************************************************************
                      00044 ; CONDITIONAL ASSEMBLY DEFINES
                      00045 ;**********************************************************************
                      00046 
                      00047 ; THROUGH_HOLE_PCB option swaps Sine/Square switch and LED assignments
                      00048         #define THROUGH_HOLE_PCB
                      00049 
                      00050 ; LED_POLARITY_REVERSED option reverses logic polarity for LEDs
                      00051         #define LED_POLARITY_REVERSED
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00052         
                      00053 ; LED_STEADY_STATE_DISABLED option saves 4mA per LED but introduces high frequency noise during playback
                      00054 ;       #define LED_STEADY_STATE_DISABLED
                      00055 
                      00056 ;       MIDI_DEBUG_TRIGGER_ENABLED option enables debug code in midiMessageMapper()
                      00057 ; MIDI_DEBUG_CC_NAME defines which on/off (127/0) controller number to use
                      00058 ;       #define MIDI_DEBUG_TRIGGER_ENABLED
                      00059 ;       #define MIDI_DEBUG_CC_NAME                                      GENERAL_PURPOSE_CONTROLLER_7
                      00060         
                      00061 ;**********************************************************************
                      00062 ; INCLUDE FILES
                      00063 ;**********************************************************************
                      00064 
                      00065 #ifdef  PIC18LF13K50
                      00066         ; processor specific variable definitions
                      00067         #include        <p18lf13k50.inc>
                      00068         ; configuration bit options copied from p18lf13k50.inc
                      00069         #include        "../include/config_PIC18LF13K50.inc"
                      00070 #endif
                      00071 
                      00072 #ifdef  PIC18LF14K22
                      00073         ; processor specific variable definitions
                      00074         #include        <p18lf14k22.inc>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC18LF14K22 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2011 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
Error[101]  : ERROR: (Processor-header file mismatch.  Verify selected processor.)
                      01378         LIST
                      00075         ; configuration bit options copied from p18lf13k50.inc
                      00076         #include        "../include/config_PIC18LF14K22.inc"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      config_PIC18LF14K22.inc                           *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef CONFIG_INC
                      00022 #define CONFIG_INC
                      00023 
                      00024 ;==========================================================================
                      00025 ;
                      00026 ;   IMPORTANT: For the PIC18 devices, the __CONFIG directive has been
                      00027 ;              superseded by the CONFIG directive.  The following settings
                      00028 ;              are available for this device.
                      00029 ;
                      00030 ;   Oscillator Selection bits:
                      00031 ;     FOSC = LP            LP oscillator
                      00032 ;     FOSC = XT            XT oscillator
                      00033 ;     FOSC = HS            HS oscillator
                      00034 ;     FOSC = ERCCLKOUT     External RC oscillator, CLKOUT function on OSC2
                      00035 ;     FOSC = ECCLKOUTH     EC, CLKOUT function on OSC2 (high)
                      00036 ;     FOSC = ECH           EC (high)
                      00037 ;     FOSC = ERC           External RC oscillator
                      00038 ;     FOSC = IRC           Internal RC oscillator
                      00039 ;     FOSC = IRCCLKOUT     Internal RC oscillator, CLKOUT function on OSC2
                      00040 ;     FOSC = ECCLKOUTM     EC, CLKOUT function on OSC2 (medium)
                      00041 ;     FOSC = ECM           EC (medium)
                      00042 ;     FOSC = ECCLKOUTL     EC, CLKOUT function on OSC2 (low)
                      00043 ;     FOSC = ECL           EC (low)
                      00044         CONFIG FOSC = IRC
                      00045 
                      00046 ;
                      00047 ;   4 X PLL Enable bit:
                      00048 ;     PLLEN = OFF          PLL is under software control
                      00049 ;     PLLEN = ON           Oscillator multiplied by 4
                      00050         CONFIG PLLEN = OFF
                      00051 
                      00052 ;
                      00053 ;   Primary Clock Enable bit:
                      00054 ;     PCLKEN = OFF         Primary clock is under software control
                      00055 ;     PCLKEN = ON          Primary clock enabled
                      00056         CONFIG PCLKEN = ON
                      00057 
                      00058 ;
                      00059 ;   Fail-Safe Clock Monitor Enable:
                      00060 ;     FCMEN = OFF          Fail-Safe Clock Monitor disabled
                      00061 ;     FCMEN = ON           Fail-Safe Clock Monitor enabled
                      00062         CONFIG FCMEN = OFF
                      00063 
                      00064 ;
                      00065 ;   Internal/External Oscillator Switchover bit:
                      00066 ;     IESO = OFF           Oscillator Switchover mode disabled
                      00067 ;     IESO = ON            Oscillator Switchover mode enabled
                      00068         CONFIG IESO = ON
                      00069 
                      00070 ;
                      00071 ;   Power-up Timer Enable bit:
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00072 ;     PWRTEN = ON          PWRT enabled
                      00073 ;     PWRTEN = OFF         PWRT disabled
                      00074         CONFIG PWRTEN = ON
                      00075 
                      00076 ;
                      00077 ;   Brown-out Reset Enable bits:
                      00078 ;     BOREN = OFF          Brown-out Reset disabled in hardware and software
                      00079 ;     BOREN = ON           Brown-out Reset enabled and controlled by software (SBOREN is enabled)
                      00080 ;     BOREN = NOSLP        Brown-out Reset enabled in hardware only and disabled in Sleep mode (SBOREN i
                            s disabled)
                      00081 ;     BOREN = SBORDIS      Brown-out Reset enabled in hardware only (SBOREN is disabled)
                      00082         CONFIG BOREN = ON
                      00083 
                      00084 ;
                      00085 ;   Brown Out Reset Voltage bits:
                      00086 ;     BORV = 30            VBOR set to 3.0 V nominal
                      00087 ;     BORV = 27            VBOR set to 2.7 V nominal
                      00088 ;     BORV = 22            VBOR set to 2.2 V nominal
                      00089 ;     BORV = 19            VBOR set to 1.9 V nominal
                      00090         CONFIG BORV = 19
                      00091 
                      00092 ;
                      00093 ;   Watchdog Timer Enable bit:
                      00094 ;     WDTEN = OFF          WDT is controlled by SWDTEN bit of the WDTCON register
                      00095 ;     WDTEN = ON           WDT is always enabled. SWDTEN bit has no effect.
                      00096         CONFIG WDTEN = OFF
                      00097 
                      00098 ;
                      00099 ;   Watchdog Timer Postscale Select bits:
                      00100 ;     WDTPS = 1            1:1
                      00101 ;     WDTPS = 2            1:2
                      00102 ;     WDTPS = 4            1:4
                      00103 ;     WDTPS = 8            1:8
                      00104 ;     WDTPS = 16           1:16
                      00105 ;     WDTPS = 32           1:32
                      00106 ;     WDTPS = 64           1:64
                      00107 ;     WDTPS = 128          1:128
                      00108 ;     WDTPS = 256          1:256
                      00109 ;     WDTPS = 512          1:512
                      00110 ;     WDTPS = 1024         1:1024
                      00111 ;     WDTPS = 2048         1:2048
                      00112 ;     WDTPS = 4096         1:4096
                      00113 ;     WDTPS = 8192         1:8192
                      00114 ;     WDTPS = 16384        1:16384
                      00115 ;     WDTPS = 32768        1:32768
                      00116         CONFIG WDTPS = 1
                      00117 
                      00118 ;
                      00119 ;   MCLR Pin Enable bit:
                      00120 ;     MCLRE = OFF          RA3 input pin enabled; MCLR disabled
                      00121 ;     MCLRE = ON           MCLR pin enabled, RA3 input pin disabled
                      00122         CONFIG MCLRE = OFF
                      00123 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00124 ;
                      00125 ;   HFINTOSC Fast Start-up bit:
                      00126 ;     HFOFST = OFF         The system clock is held off until the HFINTOSC is stable.
                      00127 ;     HFOFST = ON          HFINTOSC starts clocking the CPU without waiting for the oscillator to stabli
                            ze.
                      00128         CONFIG HFOFST = OFF
                      00129 
                      00130 ;
                      00131 ;   Stack Full/Underflow Reset Enable bit:
                      00132 ;     STVREN = OFF         Stack full/underflow will not cause Reset
                      00133 ;     STVREN = ON          Stack full/underflow will cause Reset
                      00134         CONFIG STVREN = ON
                      00135 
                      00136 ;
                      00137 ;   Single-Supply ICSP Enable bit:
                      00138 ;     LVP = OFF            Single-Supply ICSP disabled
                      00139 ;     LVP = ON             Single-Supply ICSP enabled
                      00140         CONFIG LVP = OFF
                      00141 
                      00142 ;
                      00143 ;   Boot Block Size Select bit:
                      00144 ;     BBSIZ = OFF          1kW boot block size
                      00145 ;     BBSIZ = ON           2kW boot block size
                      00146 ; PIC18LF13K50 sets this option to 'ON' for required 1kW block size 
                      00147         CONFIG BBSIZ = OFF
                      00148 
                      00149 ;
                      00150 ;   Extended Instruction Set Enable bit:
                      00151 ;     XINST = OFF          Instruction set extension and Indexed Addressing mode disabled (Legacy mode)
                      00152 ;     XINST = ON           Instruction set extension and Indexed Addressing mode enabled
                      00153         CONFIG XINST = OFF
                      00154 
                      00155 ;
                      00156 ;   Background Debugger Enable bit:
                      00157 ;     DEBUG = ON           Background debugger enabled, RA0 and RA1 are dedicated to In-Circuit Debug
                      00158 ;     DEBUG = OFF          Background debugger disabled, RA0 and RA1 configured as general purpose I/O p
                            ins
                      00159         CONFIG DEBUG = ON
                      00160         
                      00161 ;
                      00162 ;   Code Protection bit:
                      00163 ;     CP0 = ON             Block 0 code-protected
                      00164 ;     CP0 = OFF            Block 0 not code-protected
                      00165         CONFIG CP0 = OFF
                      00166 
                      00167 ;
                      00168 ;   Code Protection bit:
                      00169 ;     CP1 = ON             Block 1 code-protected
                      00170 ;     CP1 = OFF            Block 1 not code-protected
                      00171         CONFIG CP1 = OFF
                      00172         
                      00173 ;
                      00174 ;   Boot Block Code Protection bit:
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00175 ;     CPB = ON             Boot block code-protected
                      00176 ;     CPB = OFF            Boot block not code-protected
                      00177         CONFIG CPB = OFF
                      00178 
                      00179 ;
                      00180 ;   Data EEPROM Code Protection bit:
                      00181 ;     CPD = ON             Data EEPROM code-protected
                      00182 ;     CPD = OFF            Data EEPROM not code-protected
                      00183         CONFIG CPD = OFF
                      00184 
                      00185 ;
                      00186 ;   Write Protection bit:
                      00187 ;     WRT0 = ON            Block 0 write-protected
                      00188 ;     WRT0 = OFF           Block 0 not write-protected
                      00189         CONFIG WRT0 = OFF
                      00190         
                      00191 ;
                      00192 ;   Write Protection bit:
                      00193 ;     WRT1 = ON            Block 1 write-protected
                      00194 ;     WRT1 = OFF           Block 1 not write-protected
                      00195         CONFIG WRT1 = OFF
                      00196 
                      00197 ;
                      00198 ;   Boot Block Write Protection bit:
                      00199 ;     WRTB = ON            Boot block write-protected
                      00200 ;     WRTB = OFF           Boot block not write-protected
                      00201         CONFIG WRTB = OFF
                      00202 
                      00203 ;
                      00204 ;   Configuration Register Write Protection bit:
                      00205 ;     WRTC = ON            Configuration registers write-protected
                      00206 ;     WRTC = OFF           Configuration registers not write-protected
                      00207         CONFIG WRTC = OFF
                      00208 
                      00209 ;
                      00210 ;   Data EEPROM Write Protection bit:
                      00211 ;     WRTD = ON            Data EEPROM write-protected
                      00212 ;     WRTD = OFF           Data EEPROM not write-protected
                      00213         CONFIG WRTD = OFF
                      00214 
                      00215 ;
                      00216 ;   Table Read Protection bit:
                      00217 ;     EBTR0 = ON           Block 0 protected from table reads executed in other blocks
                      00218 ;     EBTR0 = OFF          Block 0 not protected from table reads executed in other blocks
                      00219         CONFIG EBTR0 = OFF
                      00220 
                      00221 ;
                      00222 ;   Table Read Protection bit:
                      00223 ;     EBTR1 = ON           Block 1 protected from table reads executed in other blocks
                      00224 ;     EBTR1 = OFF          Block 1 not protected from table reads executed in other blocks
                      00225         CONFIG EBTR1 = OFF
                      00226 
                      00227 ;
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00228 ;   Boot Block Table Read Protection bit:
                      00229 ;     EBTRB = ON           Boot block protected from table reads executed in other blocks
                      00230 ;     EBTRB = OFF          Boot block not protected from table reads executed in other blocks
                      00231         CONFIG EBTRB = OFF
                      00232 
                      00233 ;
                      00234 ;==========================================================================
                      00235 
                      00236 #endif
                      00077 #endif
                      00078 
                      00079         #include        "../header/midi.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      midi.h                                            *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef _MIDIH_
                      00022 #define _MIDIH_
                      00023 
                      00024 
                      00025 ; ******************* MIDI SYSEX DEFINES ***********************
                      00026 #define         VENDOR_ID       0x77
                      00027 #define         DEVICE_ID       0x1D
                      00028 #define         TERMINAL_PACKET_COMMAND_VALUE   0x1E
                      00029 
                      00030 ; ******************* MIDI BUFFER SIZES ***********************
                      00031 
                      00032 #define         MAX_MIDI_MESSAGE_SIZE   24
                      00033 #define         ACTIVE_NOTE_TABLE_SIZE  25
                      00034 
                      00035 
                      00036 ; ******************* STATUS BYTE DEFINITONS ***********************
                      00037 
                      00038 ; Note that lower nybble (channel) should be masked out for comparison
                      00039 ;------------------------
                      00040 #define         NOTE_OFF                                0x80
                      00041 #define         NOTE_ON                                 0x90
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00042 #define         KEY_PRESSURE                    0xA0
                      00043 #define         CONTROL_CHANGE                  0xB0
                      00044 #define         PROGRAM_CHANGE                  0xC0
                      00045 #define         CHANNEL_PRESSURE                0xD0
                      00046 #define         PITCH_WHEEL                             0xE0
                      00047 
                      00048 ; Sysex Status Byte Definitions
                      00049 #define         SYSEX                                   0xF0
                      00050 #define         EOX                                             0xF7
                      00051 
                      00052 #define         NOTE_OFF_MESSAGE_LENGTH                         3
                      00053 #define         NOTE_ON_MESSAGE_LENGTH                          3
                      00054 #define         KEY_PRESSURE_MESSAGE_LENGTH                     3
                      00055 #define         CONTROL_CHANGE_MESSAGE_LENGTH           3
                      00056 #define         PROGRAM_CHANGE_MESSAGE_LENGTH           2
                      00057 #define         CHANNEL_PRESSURE_MESSAGE_LENGTH         2
                      00058 #define         PITCH_WHEEL_MESSAGE_LENGTH                      3
                      00059 
                      00060 ; SysEx Sub Types
                      00061 ;----------------------------
                      00062 #define         NON_REAL_TIME                                           0x7E
                      00063 #define         GENERAL_INFORMATION                                     0x06
                      00064 #define         IDENTITY_REQUEST                                        0x01
                      00065 #define         IDENTITY_REPLY                                          0x02
                      00066 
                      00067 ; Control Change Data Types
                      00068 ;----------------------------
                      00069 #define         BANK_SELECT_MSB                                         0
                      00070 #define         MODULATION_WHEEL_MSB                            1
                      00071 #define         BREATH_CONTROLLER_MSB                           2
                      00072 #define         UNDEFINED_003                                           3
                      00073 #define         FOOT_CONTROLLER_MSB                                     4
                      00074 #define         PORTAMENTO_TIME                                         5
                      00075 #define         DATA_ENTRY_MSB                                          6
                      00076 #define         CHANNEL_VOLUME_MSB                                      7
                      00077 #define         BALANCE_MSB                                                     8
                      00078 #define         UNDEFINED_MSB                                           9
                      00079 #define         PAN_MSB                                                         10
                      00080 #define         EXPRESSION_MSB                                          11
                      00081 #define         EFFECT_CONTROL_1_MSB                            12
                      00082 #define         EFFECT_CONTROL_2_MSB                            13
                      00083 #define         UNDEFINED_014                                           14
                      00084 #define         UNDEFINED_015                                           15
                      00085 #define         GENERAL_PURPOSE_CONTROLLER_1_MSB        16
                      00086 #define         GENERAL_PURPOSE_CONTROLLER_2_MSB        17
                      00087 #define         GENERAL_PURPOSE_CONTROLLER_3_MSB        18
                      00088 #define         GENERAL_PURPOSE_CONTROLLER_4_MSB        19
                      00089 #define         UNDEFINED_020                                           20
                      00090 #define         UNDEFINED_021                                           21
                      00091 #define         UNDEFINED_022                                           22
                      00092 #define         UNDEFINED_023                                           23
                      00093 #define         UNDEFINED_024                                           24
                      00094 #define         UNDEFINED_025                                           25
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00095 #define         UNDEFINED_026                                           26
                      00096 #define         UNDEFINED_027                                           27
                      00097 #define         UNDEFINED_028                                           28
                      00098 #define         UNDEFINED_029                                           29
                      00099 #define         UNDEFINED_030                                           30
                      00100 #define         UNDEFINED_031                                           31
                      00101 #define         BANK_SELECT_LSB                                         32
                      00102 #define         MODULATION_WHEEL_LSB                            33
                      00103 #define         BREATH_CONTROLLER_LSB                           34
                      00104 #define         UNDEFINED_035                                           35
                      00105 #define         FOOT_CONTROLLER_LSB                                     36
                      00106 #define         PORTAMENTO_TIME_LSB                                     37
                      00107 #define         DATA_ENTRY_LSB                                          38
                      00108 #define         CHANNEL_VOLUME_LSB                                      39
                      00109 #define         BALANCE_LSB                                                     40
                      00110 #define         UNDEFINED_041                                           41
                      00111 #define         PAN_LSB                                                         42
                      00112 #define         EXPRESSION_LSB                                          43
                      00113 #define         EFFECT_CONTROL_1_LSB                            44
                      00114 #define         EFFECT_CONTROL_2_LSB                            45
                      00115 #define         UNDEFINED_046                                           46
                      00116 #define         UNDEFINED_047                                           47
                      00117 #define         GENERAL_PURPOSE_CONTROLLER_1_LSB        48
                      00118 #define         GENERAL_PURPOSE_CONTROLLER_2_LSB        49
                      00119 #define         GENERAL_PURPOSE_CONTROLLER_3_LSB        50
                      00120 #define         GENERAL_PURPOSE_CONTROLLER_4_LSB        51
                      00121 #define         UNDEFINED_052                                           52
                      00122 #define         UNDEFINED_053                                           53
                      00123 #define         UNDEFINED_054                                           54
                      00124 #define         UNDEFINED_055                                           55
                      00125 #define         UNDEFINED_056                                           56
                      00126 #define         UNDEFINED_057                                           57
                      00127 #define         UNDEFINED_058                                           58
                      00128 #define         UNDEFINED_059                                           59
                      00129 #define         UNDEFINED_060                                           60
                      00130 #define         UNDEFINED_061                                           61
                      00131 #define         UNDEFINED_062                                           62
                      00132 #define         UNDEFINED_063                                           63
                      00133 #define         SUSTAIN_PEDAL                                           64
                      00134 #define         PORTAMENTO_ONOFF                                        65
                      00135 #define         SOSTENUTO                                                       66
                      00136 #define         SOFT_PEDAL                                                      67
                      00137 #define         LEGATO_FOOTSWITCH                                       68
                      00138 #define         HOLD_2                                                          69
                      00139 #define         SOUND_CONTROLLER_1_DEFAULT_SOUND_VARIATION                              70
                      00140 #define         SOUND_CONTROLLER_2_DEFAULT_TIMBRE_HARMONIC_QUALITY              71
                      00141 #define         SOUND_CONTROLLER_3_DEFAULT_RELEASE_TIME                                 72
                      00142 #define         SOUND_CONTROLLER_4_DEFAULT_ATTACK_TIME                                  73
                      00143 #define         SOUND_CONTROLLER_5_DEFAULT_BRIGHTNESS                                   74
                      00144 #define         SOUND_CONTROLLER_6_GM2_DEFAULT_DECAY_TIME                               75
                      00145 #define         SOUND_CONTROLLER_7_GM2_DEFAULT_VIBRATO_RATE                             76
                      00146 #define         SOUND_CONTROLLER_8_GM2_DEFAULT_VIBRATO_DEPTH                    77
                      00147 #define         SOUND_CONTROLLER_9_GM2_DEFAULT_VIBRATO_DELAY                    78
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00148 #define         SOUND_CONTROLLER_10_GM2_DEFAULT_UNDEFINED                               79
                      00149 #define         GENERAL_PURPOSE_CONTROLLER_5                                                    80
                      00150 #define         GENERAL_PURPOSE_CONTROLLER_6                                                    81
                      00151 #define         GENERAL_PURPOSE_CONTROLLER_7                                                    82
                      00152 #define         GENERAL_PURPOSE_CONTROLLER_8                                                    83
                      00153 #define         PORTAMENTO_CONTROL                                                                      
                                    84
                      00154 #define         UNDEFINED_85                                                                    85
                      00155 #define         UNDEFINED_86                                                                    86
                      00156 #define         UNDEFINED_87                                                                    87
                      00157 #define         UNDEFINED_88                                                                    88
                      00158 #define         UNDEFINED_89                                                                    89
                      00159 #define         UNDEFINED_90                                                                    90
                      00160 #define         EFFECTS_1_DEPTH_DEFAULT_REVERB_SEND                             91
                      00161 #define         EFFECTS_2_DEPTH_DEFAULT_TREMOLO_DEPTH                   92
                      00162 #define         EFFECTS_3_DEPTH_DEFAULT_CHORUS_SEND                             93
                      00163 #define         EFFECTS_4_DEPTH_DEFAULT_CELESTE_[DETUNE]_DEPTH  94
                      00164 #define         EFFECTS_5_DEPTH_DEFAULT_PHASER_DEPTH                    95
                      00165 #define         DATA_INCREMENT                                                                  96
                      00166 #define         DATA_DECREMENT                                                                  97
                      00167 #define         NON_REG_PARAMETER_NUMBER_LSB                            98
                      00168 #define         NON_REG_PARAMETER_NUMBER_MSB                            99
                      00169 #define         REGISTERED_PARAMETER_NUMBER_LSB                                 100
                      00170 #define         REGISTERED_PARAMETER_NUMBERMSB                                  101
                      00171 #define         UNDEFINED_102                                           102
                      00172 #define         UNDEFINED_103                                           103
                      00173 #define         UNDEFINED_104                                           104
                      00174 #define         UNDEFINED_105                                           105
                      00175 #define         UNDEFINED_106                                           106
                      00176 #define         UNDEFINED_107                                           107
                      00177 #define         UNDEFINED_108                                           108
                      00178 #define         UNDEFINED_109                                           109
                      00179 #define         UNDEFINED_110                                           110
                      00180 #define         UNDEFINED_111                                           111
                      00181 #define         UNDEFINED_112                                           112
                      00182 #define         UNDEFINED_113                                           113
                      00183 #define         UNDEFINED_114                                           114
                      00184 #define         UNDEFINED_115                                           115
                      00185 #define         UNDEFINED_116                                           116
                      00186 #define         UNDEFINED_117                                           117
                      00187 #define         UNDEFINED_118                                           118
                      00188 #define         UNDEFINED_119                                           119
                      00189 #define         ALL_SOUND_OFF                                           120
                      00190 #define         RESET_ALL_CONTROLLERS                           121
                      00191 #define         LOCAL_CONTROL_ONOFF                                     122
                      00192 #define         ALL_NOTES_OFF                                           123
                      00193 #define         OMNI_MODE_OFF                                           124
                      00194 #define         OMNI_MODE_ON                                            125
                      00195 #define         POLY_MODE_OFF                                           126
                      00196 #define         POLY_MODE_ON                                            127
                      00197 
                      00198 
                      00199 ; ******************* MIDI MESSAGE STATES ***********************
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00200 
                      00201 #define CHANNEL                                         0x00
                      00202 #define DATA_BYTE0                                      0x01
                      00203 #define DATA_BYTE1                                      0x02
                      00204 #define MESSAGE_COMPLETE                        0xFF
                      00205 
                      00206 #define NOTE_COMPLETE                           DATA_BYTE1
                      00207 #define AFTERTOUCH_COMPLETE                     DATA_BYTE1
                      00208 #define CONTROL_CHANGE_COMPLETE         DATA_BYTE1
                      00209 #define PROGRAM_CHANGE_COMPLETE         DATA_BYTE0
                      00210 #define PITCH_WHEEL_COMPLETE            DATA_BYTE1
                      00211 
                      00212 
                      00213 ; ******************* FLAG VARIABLE DEFINITIONS ***********************
                      00214 
                      00215 ; midiFlags (bits 3:7 free for use by other modules)
                      00216 #define uartState_rxInProgress                  0
                      00217 #define midiState_messageNeedsMapping   1
                      00218 #define midiThruModeEnabled                             2
                      00219 
                      00220 
                      00221 #endif
                      00080         #include        "../header/eeprom.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      eeprom.h                                          *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef _EEPROMH_
                      00022 #define _EEPROMH_
                      00023 
                      00024 ; ******************* FLAG VARIABLE DEFINITIONS ***********************
                      00025 
                      00026 ; eepromFlags
                      00027 #define sampleChunkReady        0
                      00028 #define samplesLoaded                   1
                      00029 #define intState                                        2
                      00030 #define ready                                           3
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00031 
                      00032 ; CAT25128 Status reg flags
                      00033 #define NOT_RDY 0
                      00034 #define WEL                     1
                      00035 #define BP0                     2
                      00036 #define BP1                     3
                      00037 #define WPEN            7
                      00038 
                      00039 ; ******************* COMMAND DEFINES ***********************
                      00040 #define EE_WREN         B'00000110'     ; Enable Write Operations
                      00041 #define EE_WRDI         B'00000100'     ; Disable Write Operations
                      00042 #define EE_RDSR         B'00000101'     ; Read Status Register
                      00043 #define EE_WRSR         B'00000001'     ; Write Status Register
                      00044 #define EE_READ         B'00000011'     ; Read Data from Memory
                      00045 #define EE_WRITE        B'00000010'     ; Write Data to Memory
                      00046 
                      00047 ; ******************* GENERAL DEFINES ***********************
                      00048 #define SAMPLE_DATA_BUFFER_SIZE 64
                      00049 #define EEPROM_SIZE_BITS 128000
                      00050 #define NEXT_SAMPLE_ADDRESSES_EL_SIZE   2
                      00051 
                      00052 ;**********************************************************************
                      00053 ; MACROS
                      00054 ;**********************************************************************
                      00055 
                      00056 
                      00057 ;**********************************************************************
                      00058 ASSERT_SS       MACRO
                      00059         bcf             LATC, RC6, ACCESS       ; Chip select is active
                      00060         ENDM
                      00061 
                      00062 ;**********************************************************************
                      00063 DEASSERT_SS     MACRO
                      00064         bsf             LATC, RC6, ACCESS       ; Chip select is idle
                      00065         ENDM
                      00066 
                      00067 ;**********************************************************************
                      00068 EE_DISABLE_INTS MACRO
                      00069         bcf             eepromFlags, intState, ACCESS
                      00070         btfsc   INTCON, GIE, ACCESS
                      00071         bsf             eepromFlags, intState, ACCESS
                      00072         bcf             INTCON, GIE, ACCESS
                      00073         ENDM
                      00074 
                      00075 ;**********************************************************************
                      00076 EE_RESTORE_INTS MACRO
                      00077         btfsc   eepromFlags, intState, ACCESS
                      00078         bsf             INTCON, GIE, ACCESS
                      00079         ENDM
                      00080 
                      00081 ;**********************************************************************
                      00082 WRITE_INTERNAL_EEPROM   MACRO   literal_address, register_value
                      00083         local   writeIntEE_loop
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00084         
                      00085         ; load address
                      00086         movlw   literal_address
                      00087         movwf   EEADR, ACCESS
                      00088         ; load value
                      00089         movff   register_value, EEDATA
                      00090         ; configure eeprom
                      00091         ; point to EEPROM DATA memory
                      00092         bcf             EECON1, EEPGD, ACCESS
                      00093         ; Access EEPROM/Program
                      00094         bcf             EECON1, CFGS, ACCESS    
                      00095         ; Enable writes
                      00096         bsf             EECON1, WREN, ACCESS
                      00097 
                      00098         ; don't have to disable interrupts because I'm only calling this
                      00099         ; from within the high-priority ISR
                      00100 
                      00101         ; required write enable sequence
                      00102         movlw   0x55
                      00103         movwf   EECON2, ACCESS
                      00104         movlw   0xAA
                      00105         movwf   EECON2, ACCESS
                      00106 
                      00107         ; set WR bit to begin write
                      00108         bsf             EECON1, WR, ACCESS
                      00109 writeIntEE_loop
                      00110         ; wait for write to complete
                      00111         btfsc   EECON1, WR, ACCESS
                      00112         bra             writeIntEE_loop
                      00113         ; disable writes
                      00114         bcf             EECON1, WREN, ACCESS
                      00115 
                      00116         ; point to Program memory
                      00117         bsf             EECON1, EEPGD, ACCESS
                      00118 
                      00119         ENDM
                      00120 
                      00121 ;**********************************************************************
                      00122 WRITE_INTERNAL_EEPROM_FROM_REGS MACRO   address, data
                      00123         local   writeIntEE_loop
                      00124         
                      00125         ; load address
                      00126         movff   address, EEADR
                      00127         ; load value
                      00128         movff   data, EEDATA
                      00129         ; configure eeprom
                      00130         ; point to EEPROM DATA memory
                      00131         bcf             EECON1, EEPGD, ACCESS
                      00132         ; Access EEPROM/Program
                      00133         bcf             EECON1, CFGS, ACCESS    
                      00134         ; Enable writes
                      00135         bsf             EECON1, WREN, ACCESS
                      00136 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00137         ; don't have to disable interrupts because I'm only calling this
                      00138         ; from within the high-priority ISR
                      00139 
                      00140         ; required write enable sequence
                      00141         movlw   0x55
                      00142         movwf   EECON2, ACCESS
                      00143         movlw   0xAA
                      00144         movwf   EECON2, ACCESS
                      00145 
                      00146         ; set WR bit to begin write
                      00147         bsf             EECON1, WR, ACCESS
                      00148 writeIntEE_loop
                      00149         ; wait for write to complete
                      00150         btfsc   EECON1, WR, ACCESS
                      00151         bra             writeIntEE_loop
                      00152         ; disable writes
                      00153         bcf             EECON1, WREN, ACCESS
                      00154 
                      00155         ; point to Program memory
                      00156         bsf             EECON1, EEPGD, ACCESS
                      00157 
                      00158         ENDM
                      00159 
                      00160 ;;**********************************************************************
                      00161 ;;SPI_TX_LITERAL_RX_IN_WREG     MACRO   value
                      00162 ;       local   waitLoop
                      00163 ;
                      00164 ;; routine as recommended in Microchip PIC18F2458/2553/4458/4553 errata
                      00165 ;
                      00166 ;       ; clear interrupt flag
                      00167 ;       bcf             PIR1, SSPIF, ACCESS
                      00168 ;
                      00169 ;       ; perform read, even if the data in SSPBUF is not important 
                      00170 ;       movf    SSPBUF, w, ACCESS
                      00171 ;
                      00172 ;       ; SSPBUF = value
                      00173 ;       movlw   value
                      00174 ;       movwf   SSPBUF, ACCESS
                      00175 ;
                      00176 ;       ; wait fro transfer to complete
                      00177 ;waitLoop
                      00178 ;       btfss   PIR1, SSPIF, ACCESS
                      00179 ;       bra             waitLoop
                      00180 ;
                      00181 ;       ; the data received should be valid
                      00182 ;       movf    SSPBUF, w, ACCESS
                      00183 ;
                      00184 ;       ENDM
                      00185                                                 
                      00186 ;;**********************************************************************
                      00187 ;SPI_TX_WREG_RX_IN_WREG MACRO
                      00188 ;       local   waitLoop
                      00189 ;
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00190 ;       ; save WREG to software stack
                      00191 ;       PUSH_R  WREG
                      00192 ;       
                      00193 ;; routine as recommended in Microchip PIC18F2458/2553/4458/4553 errata
                      00194 ;       ; clear interrupt flag
                      00195 ;       bcf             PIR1, SSPIF, ACCESS
                      00196 ;
                      00197 ;       ; perform read, even if the data in SSPBUF is not important 
                      00198 ;       movf    SSPBUF, w, ACCESS
                      00199 ;
                      00200 ;       ; SSPBUF = restored WREG from software stack
                      00201 ;       POP_R   WREG
                      00202 ;       movwf   SSPBUF, ACCESS
                      00203 ;
                      00204 ;       ; wait for transfer to complete
                      00205 ;waitLoop
                      00206 ;       btfss   PIR1, SSPIF, ACCESS
                      00207 ;       bra             waitLoop
                      00208 ;
                      00209 ;       ; the data received should be valid
                      00210 ;       movf    SSPBUF, w, ACCESS
                      00211 ;
                      00212 ;       ENDM
                      00213 
                      00214 #endif
                      00081         #include        "../header/softwareStack.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      softwareStack.h                                   *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef SOFTWARESTACK_H
                      00022 #define SOFTWARESTACK_H
                      00023 
                      00024         #define softwareStackPointerFSR         FSR2
                      00025         #define softwareStackPointerINDF        INDF2
                      00026         #define softwareStackPointerPOSTINC     POSTINC2
                      00027         #define softwareStackPointerPOSTDEC     POSTDEC2
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00028         #define softwareStackPointerPREINC      PREINC2 
                      00029         #define softwareStackPointerPLUSW       PLUSW2  
                      00030 
                      00031 ; **** MACRO: PUSH_R    regName
                      00032 PUSH_R  MACRO   regName
                      00033         movff   regName, softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00034                 ENDM
                      00035                 
                      00036 ; **** MACRO: POP_R     regName
                      00037 POP_R   MACRO   regName
                      00038         movff   softwareStackPointerPREINC, regName     ; ++softwareStackPointerINDF = regName
                      00039                 ENDM
                      00040 
                      00041 #endif
                      00082         #include        "../header/soundGen.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      soundGen.h                                        *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef _SOUNDGENH_
                      00022 #define _SOUNDGENH_
                      00023 
                      00024 ;**********************************************************************
                      00025 ; GENERAL
                      00026 ;**********************************************************************
                      00027 
                      00028 ; Current code structure requires that MAX_POLY_DEPTH be set to 4!
                      00029 #define MAX_POLY_DEPTH                                  4       
                      00030 
                      00031 #define ACTIVE_NOTE_DELTAS_ELEMENT_SIZE 2
                      00032 #define ACTIVE_NOTE_DELTAS_SIZE                 MAX_POLY_DEPTH * ACTIVE_NOTE_DELTAS_ELEMENT_SIZE
                      00033 
                      00034 #define DELEGATED_DELTAS_ELEMENT_SIZE   2
                      00035 #define DELEGATED_DELTAS_SIZE                   MAX_POLY_DEPTH * DELEGATED_DELTAS_ELEMENT_SIZE
                      00036 
                      00037 #define OSC_DELTAS_ELEMENT_SIZE                 2
                      00038 #define OSC_DELTAS_SIZE                                 MAX_POLY_DEPTH * OSC_DELTAS_ELEMENT_SIZE
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00039 
                      00040 #define ACCUMULATORS_ELEMENT_SIZE               4
                      00041 #define ACCUMULATORS_SIZE                               MAX_POLY_DEPTH * ACCUMULATORS_ELEMENT_SIZE
                      00042 
                      00043 #define ACTIVE_OUTPUT_VALUES_EL_SIZE    1
                      00044 #define ACTIVE_OUTPUT_VALUES_SIZE               MAX_POLY_DEPTH * ACTIVE_OUTPUT_VALUES_EL_SIZE
                      00045 
                      00046 #define LED_BLINK_RATE_VOICE_THROUGH    20
                      00047 #define LED_BLINK_RATE_VOICE_RECORD             6
                      00048 
                      00049 ; set soundGen timebase prescales for wave and sample modes
                      00050 ; Timer2 interrupt period is currently 32uS
                      00051 ; set sample timebase period to 192uS (5208 Hz)
                      00052 #define SAMPLE_PRESCALE 6
                      00053 ; wave sine/square timebase period to 64uS (15.625 kHz)
                      00054 #define WAVE_PRESCALE   2
                      00055 
                      00056 #define MAX_MODE_LEVEL  MONO
                      00057 
                      00058 ; set power-up Attack and Release parameters
                      00059 ; adsrAttackRate and adsrReleaseRate variables have a range of 0 - 64
                      00060 ; rate of 0 == MIDI Attack/Release Time of 127
                      00061 ; rate of 64 == MIDI Attack/Release Time of 0
                      00062 #define ADSR_ATTACK_RATE        63
                      00063 #define ADSR_RELEASE_RATE       16
                      00064 
                      00065 ; set adsr prescale target to increment adsrLimiterRegs value every 19.52mS
                      00066 ; 19.52mS gives a max individual attack/release time of 4.99712 Seconds
                      00067 ; the "increment" value is set by adsrAttackRate and adsrReleaseRate
                      00068 #define ADSR_PRESCALE 610
                      00069 
                      00070 ; changing from 0x00 reference to 0x80 to improve Attack/Release waveform quality
                      00071 #define PWM_IDLE_OUTPUT_VALUE 0x80
                      00072 
                      00073 ; In SINE mode, this values sets the range (+/- PWM_IDLE_OUTPUT_VALUE) of activeOutputValue within which
                             an oscillator will be
                      00074 ; ungated for changes to its delegatedDelta value.  Only allowing changes when activeOutputValue is appr
                            oximately == PWM_IDLE_OUTPUT_VALUE
                      00075 ; greatly reduces popping caused by Sine wave cycle clipping
                      00076 #define OSC_TRANSITION_OUTPUT_THRESHOLD 0x04
                      00077 
                      00078 ; Audio input DC Bias measurement, 253 ADC sample average:
                      00079 ;   (VDD == 3.2V / 256 = 0.0125V per ADC increment)
                      00080 ;   on-board mic selected, MIC connceted      = 0x47 (@ VDD = 3.2V, 0x47 correlates to 0.8875V)
                      00081 ;   external mic selected, input floating     = 0x38 (@ VDD = 3.2V, 0x38 correlates to 0.7000V)
                      00082 ;   line-in selected, input floating          = 0x53 (@ VDD = 3.2V, 0x53 correlates to 1.0375V)
                      00083 ; Should have balanced these offsets in the hardware. oh well.
                      00084 ; Sine and Square outputs idle at 0x80, so compensate for difference in Sample bias to mitigate popping
                      00085 ; average of above measurement is 0x46, 0x80 - 0x46 = 0x3A
                      00086 ;#define SAMPLE_DC_OFFSET (PWM_IDLE_OUTPUT_VALUE - 0x46)
                      00087 ; DEBUG - sample dc offset will change with component tolerances.  need to set manually for each PCB
                      00088 ; measured 0.930V RMS, 0.930 / 0.0125 = 74.4
                      00089 #define SAMPLE_DC_OFFSET (PWM_IDLE_OUTPUT_VALUE - 74)
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00090 
                      00091 ; define the time to wait from record button release to start of sample recording
                      00092 ; this is an attempt to eliminate the record button's physical noise from the sample
                      00093 ;   Calculation Method:
                      00094 ;     timer2 int period == 32uS
                      00095 ;     samplePrescaleCounter == 6
                      00096 ;     32uS * 6 = 192uS
                      00097 ;     RECORD_BUTTON_RELEASE_WAIT_TIME = waitTimeInMs / 0.192
                      00098 ;                 maxTime = 192uS * 256 = 49.152mS
                      00099 ;
                      00100 ; load for delay of 5mS. (5 / 0.192 = 26.0417)
                      00101 #define RECORD_BUTTON_RELEASE_WAIT_TIME 26
                      00102 
                      00103 ;**********************************************************************
                      00104 ; ENUM TYPE DEFINITIONS
                      00105 ;**********************************************************************
                      00106 
                      00107 ; waveShape
                      00108 #define SINE 0
                      00109 #define SQUARE 1
                      00110 #define SAMPLE 2
                      00111 
                      00112 ; recordOrPlayback
                      00113 #define VOICE_THROUGH 0
                      00114 #define RECORD 1
                      00115 #define PLAYBACK 2
                      00116 
                      00117 ; modeLevels
                      00118 #define POLY 0
                      00119 #define SUSTAIN 1
                      00120 #define MONO 2
                      00121 
                      00122 
                      00123 ;**********************************************************************
                      00124 ; FLAG VARIABLE DEFINITIONS
                      00125 ;**********************************************************************
                      00126 
                      00127 ; midiFlags
                      00128 #define turnSoundOn 3
                      00129 #define turnSoundOff 4
                      00130 #define keyPressed 5
                      00131 #define soundOn 6
                      00132 
                      00133 ; soundGenFlags
                      00134 #define delegatorBusy 0
                      00135 #define pgDec 1
                      00136 #define needRefresh 2
                      00137 
                      00138 ; oscResetFlags
                      00139 #define osc0    0
                      00140 #define osc1    1
                      00141 #define osc2    2
                      00142 #define osc3    3
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00143 
                      00144 ; oscStateFlags
                      00145 #define release 0
                      00146 #define sustain 1
                      00147 #define decay 2
                      00148 #define attack 3
                      00149 
                      00150 
                      00151 ;**********************************************************************
                      00152 ; MACROS
                      00153 ;**********************************************************************
                      00154 
                      00155 ;**********************************************************************
                      00156 CLEAR_ACCUMULATORS      MACRO
                      00157         local   loop
                      00158 
                      00159         ; init local variables
                      00160         PUSH_R  r0
                      00161         PUSH_R  FSR0L
                      00162         PUSH_R  FSR0H
                      00163         
                      00164         ; load fsr
                      00165         lfsr    FSR0, accumulators
                      00166 
                      00167         ; init count
                      00168         movf    polyDepth, w, ACCESS
                      00169         movwf   r0, ACCESS
                      00170 loop    
                      00171         ; each accumulator is 4 bytes wide
                      00172         clrf    POSTINC0, ACCESS        
                      00173         clrf    POSTINC0, ACCESS        
                      00174         clrf    POSTINC0, ACCESS        
                      00175         clrf    POSTINC0, ACCESS        
                      00176         ; decrement count, skip if done
                      00177         decfsz  r0, f, ACCESS
                      00178         bra             loop
                      00179 
                      00180         ; restore variables
                      00181         POP_R   FSR0H
                      00182         POP_R   FSR0L
                      00183         POP_R   r0
                      00184         
                      00185         ENDM
                      00186         
                      00187 
                      00188 ;**********************************************************************
                      00189 ENABLE_SUSTAIN  MACRO
                      00190         comf    oscResetFlags, w, ACCESS
                      00191         andlw   0x0f
                      00192         movwf   sustainFlags, ACCESS
                      00193         ENDM
                      00194         
                      00195 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00196 DISABLE_SUSTAIN MACRO
                      00197         clrf    sustainFlags, ACCESS
                      00198         ENDM
                      00199 
                      00200 ;**********************************************************************
                      00201 REVERSE_SAMPLE_IF_MOD_OVER_63   MACRO
                      00202         local exitMacro
                      00203         ; if modulation > 63 then reverse sample
                      00204         movlw   63
                      00205         cpfsgt  modulation, ACCESS
                      00206         bra             exitMacro
                      00207         ; modulation > 63 so do nextSampleAddress = (sampleEndAddress - nextSampleAddress)
                      00208         movf    nextSampleAddress, w, ACCESS
                      00209         subwf   sampleEndAddress, w, ACCESS
                      00210         movwf   nextSampleAddress, ACCESS
                      00211         movf    nextSampleAddress + 1, w, ACCESS
                      00212         subwfb  sampleEndAddress + 1, w, ACCESS
                      00213         movwf   nextSampleAddress + 1, ACCESS
                      00214 exitMacro
                      00215         ENDM
                      00216 
                      00217 ;**********************************************************************
                      00218 OSC_READ_ADSR_FLAG      MACRO   FLAG
                      00219 ; oscillator number passed in WREG
                      00220 ; boolean value is returned in WREG and ZERO flag is set accordingly
                      00221 
                      00222         ; push working regs onto software stack
                      00223         PUSH_R  FSR0L
                      00224         PUSH_R  FSR0H
                      00225         
                      00226         ; load fsr
                      00227         lfsr    FSR0, oscStateFlags
                      00228         ; read the register into WREG
                      00229         movf    PLUSW0, w, ACCESS
                      00230         andlw   1<<FLAG
                      00231         
                      00232         ; restore working regs from stack
                      00233         POP_R   FSR0H
                      00234         POP_R   FSR0L   
                      00235         
                      00236         ENDM
                      00237 
                      00238 ;**********************************************************************
                      00239 OSC_ADVANCE_ADSR        MACRO   OSC_NUMBER
                      00240         local   macroDone, doAttack, attackDone, doRelease, releaseDone
                      00241 
                      00242         ; ignore advance if oscillator is sustained
                      00243         btfsc   sustainFlags, OSC_NUMBER, ACCESS
                      00244         bra             macroDone
                      00245         
                      00246         btfsc   oscStateFlags + OSC_NUMBER, attack, ACCESS
                      00247         bra             doAttack
                      00248         btfsc   oscStateFlags + OSC_NUMBER, release, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00249         bra             doRelease
                      00250         bra             macroDone
                      00251         
                      00252 doAttack
                      00253         ; osc is attacking
                      00254 
                      00255         ; test condition ((adsrLimiterRegs -= ADSR_ATTACK_RATE) <=0)
                      00256         movf    adsrAttackRate, w, ACCESS
                      00257         subwf   adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00258         bnc             attackDone
                      00259         bz              attackDone
                      00260 
                      00261         ; condition is FALSE so do the subtraction and exit
                      00262         ; (adsrLimiterRegs -= ADSR_ATTACK_RATE)
                      00263         movf    adsrAttackRate, w, ACCESS
                      00264         subwf   adsrLimiterRegs + OSC_NUMBER, f, ACCESS
                      00265         bra             macroDone
                      00266 
                      00267 attackDone
                      00268         ; clear attack flag
                      00269         bcf             oscStateFlags + OSC_NUMBER, attack, ACCESS
                      00270         clrf    adsrLimiterRegs + OSC_NUMBER, ACCESS
                      00271         bra     macroDone
                      00272 
                      00273 doRelease
                      00274         ; osc is releasing
                      00275 
                      00276         ; test condition: ((adsrLimiterRegs + ADSR_ATTACK_RATE) >= 255)
                      00277         movf    adsrReleaseRate, w, ACCESS
                      00278         addwf   adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00279         ; condition is TRUE so skip the addition and leave adsrLimiterRegs at its current value
                      00280         bc              releaseDone
                      00281         comf    WREG, w, ACCESS
                      00282         ; condition is TRUE so skip the addition and leave adsrLimiterRegs at its current value
                      00283         bz              releaseDone
                      00284 
                      00285         ; condition is FALSE so do the addition and exit
                      00286         ; do (adsrLimiterRegs += ADSR_ATTACK_RATE)      
                      00287         movf    adsrReleaseRate, w, ACCESS
                      00288         addwf   adsrLimiterRegs + OSC_NUMBER, f, ACCESS
                      00289         bra             macroDone
                      00290         
                      00291 releaseDone
                      00292         ; clear release flag
                      00293         bcf             oscStateFlags + OSC_NUMBER, release, ACCESS
                      00294         ; set limit reg to max
                      00295         setf    adsrLimiterRegs + OSC_NUMBER, ACCESS
                      00296         ; clear oscillator's delegatedDelta
                      00297         clrf    delegatedDeltas + OSC_NUMBER * 2;
                      00298         clrf    delegatedDeltas + (OSC_NUMBER * 2) + 1; 
                      00299         bra     macroDone
                      00300         
                      00301 macroDone
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00302         ENDM
                      00303         
                      00304 ;**********************************************************************
                      00305 OSC_MIX MACRO   OSC_NUMBER
                      00306         local   mixDone, mixDoPos, mixDoNeg, mixDoDone
                      00307                 
                      00308         ; check polarity of current activeOutputValue compared to PWM_IDLE_OUTPUT_VALUE
                      00309         movlw   PWM_IDLE_OUTPUT_VALUE
                      00310         subwf   activeOutputValues + OSC_NUMBER, w
                      00311         bnc             mixDoNeg
                      00312 mixDoPos
                      00313         ; WREG = adsrLimiterRegs/2
                      00314         bcf             STATUS, C, ACCESS
                      00315         rrcf    adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00316         subwf   activeOutputValues + OSC_NUMBER, w
                      00317         bra             mixDoDone
                      00318 mixDoNeg
                      00319         ; WREG = adsrLimiterRegs/2
                      00320         bcf             STATUS, C, ACCESS
                      00321         rrcf    adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00322         addwf   activeOutputValues + OSC_NUMBER, w      
                      00323 mixDoDone
                      00324         ; overflow indicates that last operation toggled bit 7
                      00325         btfsc   STATUS, OV, ACCESS
                      00326         movlw   PWM_IDLE_OUTPUT_VALUE
                      00327 
                      00328 mixDone
                      00329         ; add WREG to mixedOutputL/H
                      00330         addwf   mixedOutputL, f, ACCESS
                      00331         btfsc   STATUS, C, ACCESS
                      00332         incf    mixedOutputH, f, ACCESS
                      00333         
                      00334         ENDM
                      00335 
                      00336 ;**********************************************************************
                      00337 OSC_STATE_BLOCK MACRO   OSC_NUMBER
                      00338         local   checkDelegating, oscCheckActive, zeroAcc, oscActive, waveIsSample, noTransition, oscChec
                            kNotSine
                      00339         local   clrSampleAcc, addressOk, waveIsNotSample, waveIsSine, waveIsSquare, tableAddressLoaded, 
                            resetOscillator, macroDone
                      00340                 
                      00341         ; if oscillator is locked for sustain then leave it alone
                      00342         btfsc   sustainFlags, OSC_NUMBER, ACCESS
                      00343         bra             oscActive
                      00344                         
                      00345 checkDelegating
                      00346         ; don't update if delegator is busy because delegatedDelta value is volatile
                      00347         btfsc   soundGenFlags, delegatorBusy, ACCESS
                      00348         ; delegator is busy so just keep spinning
                      00349         bra             oscCheckActive
                      00350         
                      00351         ; THRESHOLD METHOD WORKS WELL
                      00352         movlw   SINE
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00353         cpfseq waveShape, ACCESS
                      00354         bra             oscCheckNotSine
                      00355         ; calculate absolute offset between PWM_IDLE_OUTPUT_VALUE and current activeOutputValue
                      00356         movlw   PWM_IDLE_OUTPUT_VALUE
                      00357         subwf   activeOutputValues + OSC_NUMBER, w
                      00358         ; invert if negative
                      00359         btfss   STATUS, C, ACCESS
                      00360         negf    WREG, ACCESS
                      00361         ; check if offset is below threshold value
                      00362         ; do (WREG = OSC_OUTPUT_GATE_THRESHOLD - WREG)
                      00363         sublw   OSC_TRANSITION_OUTPUT_THRESHOLD
                      00364         ; if result is positive then activeOutputValue offset from IDLE is <= THRESHOLD so allow changes
                      00365         bnc             oscCheckActive
                      00366 
                      00367 oscCheckNotSine
                      00368 
                      00369         ; delegator is idle and oscillator is enabled so copy delegated delta as internal
                      00370         movff   delegatedDeltas + (OSC_NUMBER * DELEGATED_DELTAS_ELEMENT_SIZE) + 0, oscDeltas + (OSC_NUM
                            BER * OSC_DELTAS_ELEMENT_SIZE) + 0
                      00371         movff   delegatedDeltas + (OSC_NUMBER * DELEGATED_DELTAS_ELEMENT_SIZE) + 1, oscDeltas + (OSC_NUM
                            BER * OSC_DELTAS_ELEMENT_SIZE) + 1
                      00372 
                      00373 oscCheckActive
                      00374         ; if oscDeltas[OSC_NUMBER] == 0x00 then oscillator is not really active so reset
                      00375         ; this check is required in event that (activeOutput == 0 && delegatorBusy == TRUE && oscDelta =
                            = 0)
                      00376         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, f
                      00377         bnz             oscActive
                      00378         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, f
                      00379         bz              resetOscillator
                      00380         
                      00381 oscActive
                      00382         ; if oscillator is starting from reset state then begin with 0x0000 accumulator
                      00383         btfsc   oscResetFlags, OSC_NUMBER, ACCESS
                      00384         bra             zeroAcc
                      00385 
                      00386         ;**** start procedure: step Accumulator (SINE/SQUARE/SAMPLE) ****
                      00387         ; accumulator += activeNoteDelta
                      00388         ; accumulators are 4 bytes wide, activeNoteDeltas are 2 bytes wide
                      00389         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, w
                      00390         addwf   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
                      00391         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, w  
                      00392         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
                      00393         movlw   0
                      00394         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
                      00395         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            + 3, f
                      00396         
                      00397 zeroAcc
                      00398         ; we're done with oscResetFlags flag so ensure that it's clear
                      00399         bcf             oscResetFlags, OSC_NUMBER, ACCESS
                      00400         
                      00401         ;**** start procedure: handle Pitch Wheel (SINE/SQUARE/SAMPLE) ****
                      00402         ; accumulator += pitchWheel
                      00403         movf    pitchWheel                                                                              
                                                                            + 0, w, ACCESS
                      00404         addwf   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
                      00405         movf    pitchWheel                                                                              
                                                                            + 1, w, ACCESS
                      00406         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
                      00407         movf    pitchWheel                                                                              
                                                                            + 2, w, ACCESS
                      00408         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
                      00409         movf    pitchWheel                                                                              
                                                                            + 3, w, ACCESS
                      00410         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                      00411         
                      00412         ;**** start procedure: if SAMPLE waveshape then load next read address  (SAMPLE ONLY) ****
                      00413         ; branch to waveform specific table address load
                      00414         movlw   SAMPLE
                      00415         cpfseq  waveShape, ACCESS
                      00416         bra             waveIsNotSample
                      00417 waveIsSample
                      00418 
                      00419         ; if samplesLoaded flag is set then load next EEPROM read address
                      00420         ; checking this here as opposed to before accumulator update will, in the event of the mainline 
                            not…
                      00421         ; being able to load the samples in time, cause audio chopping rather than detuning
                      00422         btfss   eepromFlags, samplesLoaded, ACCESS
                      00423         bra             macroDone
                      00424         
                      00425         ; check for note transition
                      00426         ; keyPressed flag is set every time a MIDI Note On message is received
                      00427         ; when a sample is playing back in POLY or SUSTAIN modes, we want the sample to restart from the
                             beginning...
                      00428         ; whenever a Note On message is received.
                      00429         btfss   midiFlags, keyPressed, ACCESS
                      00430         bra             noTransition
                      00431         ; is modeLevel == POLY
                      00432         movlw   POLY
                      00433         xorwf   modeLevel, w, ACCESS
                      00434         ; mode is POLY so reset accumulator to restart sample from beginning
                      00435         bz              clrSampleAcc
                      00436 
                      00437 noTransition    
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00438         ; nextSampleAddress = ((accumulator >> 8) & 0xffff)
                      00439         ; reset accumulator if nextSampleAddress value will exceed sampleEndAddress
                      00440         ; is waveTableIndex > sampleEndAddress?
                      00441         movf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, w
                      00442         subwf   sampleEndAddress, w, ACCESS
                      00443         movf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, w
                      00444         subwfb  sampleEndAddress + 1, w, ACCESS
                      00445         ; result is positive so waveTableIndex is within valid range
                      00446         bc              addressOk
                      00447         ; ((accumulator >> 8) & 0xffff) is out of valid sample range so restart sample from beginning
                      00448         ; reset accumulator
                      00449 clrSampleAcc
                      00450         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0
                      00451         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1
                      00452         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2
                      00453         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3
                      00454 addressOk
                      00455         
                      00456         ; do nextSampleAddress = ((accumulator >> 8) & 0xffff)
                      00457         movff   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, nextSampleAddresses + (OSC_NUMBER * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 0
                      00458         movff   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, nextSampleAddresses + (OSC_NUMBER * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 1
                      00459         
                      00460         bra             macroDone
                      00461         
                      00462 waveIsNotSample
                      00463         ;**** start procedure: waveshape is SINE or SQUARE so read Program Memory table  (SINE/SQUARE ON
                            LY) ****
                      00464         ; branch to waveform specific table address load
                      00465         movlw   SINE
                      00466         cpfseq  waveShape, ACCESS
                      00467         bra             waveIsSquare
                      00468 
                      00469 waveIsSine      
                      00470         ; 
                      00471         ; load address of SINE table read
                      00472         ; offset = ((accumulator >> 8) & 0xff)
                      00473         movf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1, w
                      00474         addwf   sineTableBaseAddress + 0, w
                      00475         movwf   TBLPTRL, ACCESS
                      00476         movf    sineTableBaseAddress + 1, w
                      00477         btfsc   STATUS, C, ACCESS
                      00478         addlw   1
                      00479         movwf   TBLPTRH, ACCESS
                      00480         movf    sineTableBaseAddress + 2, w
                      00481         btfsc   STATUS, C, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00482         addlw   1
                      00483         movwf   TBLPTRU, ACCESS
                      00484         bra             tableAddressLoaded
                      00485 
                      00486 waveIsSquare
                      00487         ; load address of SQUARE table read
                      00488         ; offset = ((accumulator >> 8) & 0xff)
                      00489         movf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1, w
                      00490         addwf   squareTableBaseAddress + 0, w
                      00491         movwf   TBLPTRL, ACCESS
                      00492         movf    squareTableBaseAddress + 1, w
                      00493         btfsc   STATUS, C, ACCESS
                      00494         addlw   1
                      00495         movwf   TBLPTRH, ACCESS
                      00496         movf    squareTableBaseAddress + 2, w
                      00497         btfsc   STATUS, C, ACCESS
                      00498         addlw   1
                      00499         movwf   TBLPTRU, ACCESS
                      00500 
                      00501 tableAddressLoaded
                      00502         ; read value from program memory
                      00503         tblrd*
                      00504         movff   TABLAT, activeOutputValues + (OSC_NUMBER * ACTIVE_OUTPUT_VALUES_EL_SIZE) + 0
                      00505         bra             macroDone
                      00506         
                      00507 resetOscillator
                      00508         ; set oscillator reset flag
                      00509         bsf             oscResetFlags, OSC_NUMBER, ACCESS
                      00510         movlw   PWM_IDLE_OUTPUT_VALUE
                      00511         movwf   activeOutputValues + (OSC_NUMBER * ACTIVE_OUTPUT_VALUES_EL_SIZE)
                      00512         clrf    oscDeltas + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE) + 0
                      00513         clrf    oscDeltas + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE) + 1
                      00514         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 0
                      00515         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1
                      00516         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 2
                      00517         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 3
                      00518 
                      00519 macroDone
                      00520 
                      00521         ENDM
                      00522         
                      00523         
                      00524 #endif
                      00525 
                      00526 
                      00083 
                      00084         
                      00085 ;**********************************************************************
                      00086 ; GLOBAL VARIABLES
                      00087 ;**********************************************************************
                      00088 
                      00089         ; declare isr tmp and working register variables
                      00090         ; align to RAM address 0x0000
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00091         CBLOCK 0
  00000000            00092                 wTmp:1
  00000001            00093                 statusTmp:1
  00000002            00094                 bsrTmp:1
  00000003            00095                 r0:1
  00000004            00096                 r1:1
  00000005            00097                 r2:1
  00000006            00098                 r3:1
  00000007            00099                 r4:1
  00000008            00100                 r5:1
  00000009            00101                 r6:1
  0000000A            00102                 r7:1
                      00103         ENDC
                      00104         
                      00105 
                      00106 ;**********************************************************************
                      00107 ; CODE BEGIN / RESET VECTOR
                      00108 ;**********************************************************************
                      00109 
                      00110         ORG             0x0000                                                  ; processor reset vector
000000 6AFA           00111         clrf    PCLATH                                                  ; ensure page bits are cleared
000002 EF?? F???      00112         goto    mootLoader                                              ; jump to bootloader
                      00113 
                      00114 ;**********************************************************************
                      00115 ; INTERRUPT VECTORS
                      00116 ;**********************************************************************
                      00117 
                      00118         ORG     0x0008                                          ; high-priority interrupt vector
000008 EF?? F???      00119         goto    highPriorityISR_redirect
                      00120 
                      00121         ORG     0x0018                                          ; low-priority interrupt vector
000018 EF?? F???      00122         goto    lowPriorityISR_redirect
                      00123 
                      00124 
                      00125 ;**********************************************************************
                      00126 ; USER-DEFINED MAIN() AND ISR() REDIRECTS
                      00127 ;**********************************************************************
                      00128 ; To prevent the user from rendering the bootloader unusable in the event
                      00129 ; of a failed Program Memory write, the first >=64 bytes of Program Memory
                      00130 ; will not be writable (set via USER_CODE_START_ADDRESS define) via the
                      00131 ; bootloader so must contain no user code.
                      00132 ; The first 64 bytes will contain only:
                      00133 ;
                      00134 ; 0x0000: clrf  PCLATH                                          ; set bank-select bits to Bank0
                      00135 ; 0x0001: goto  mootLoader                                      ; jump to bootloader on reset
                      00136 ; 0x0008: goto  highPriorityISR_redirect        ; jump to high priority ISR redirect in user space
                      00137 ; 0x0018: goto  lowPriorityISR_redirect         ; jump to low priority ISR redirect in user space
                      00138 ;
                      00139 ; since these will not be modifiable without a hardware programmer, these
                      00140 ; redirects will point to the following static addresses:
                      00141 ;
                      00142 ; 0x0040: goto main                             ; jump to main()
                      00143 ; 0x0044: goto highPriorityISR  ; jump to highPriorityISR()
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00144 ; 0x0048: goto lowPriorityISR   ; jump to lowPriorityISR()
                      00145 ;
                      00146 ; When writing new firmware, the user is responsible for maintaing these 
                      00147 ; jump instructions at these addresses.  Note that the "goto" instruction
                      00148 ; requires 2 words of Program Memory space.
                      00149 
                      00150         ORG             USER_CODE_START_ADDRESS
000040                00151 main_redirect
000040 EF?? F???      00152         goto    main
000044                00153 highPriorityISR_redirect
000044 EF?? F???      00154         goto    highPriorityISR
000048                00155 lowPriorityISR_redirect
000048 EF?? F???      00156         goto    lowPriorityISR
                      00157 
                      00158 ;**********************************************************************
                      00159 ; INTERRUPT SERVICE ROUTINE CODE BEGIN
                      00160 ;**********************************************************************
                      00161 
                      00162         ; insert ISR code
                      00163         #include        "../source/ISRs.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      ISRs.asm                                          *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021         
                      00022 ;**********************************************************************
                      00023 ; INCLUDES
                      00024 ;**********************************************************************
                      00025 
                      00026         #include        "../header/midi.h"
                      00222 
                      00223 ;**********************************************************************
                      00224 ;                                                                     *
                      00225 ;    Project:       deMIDulator                                       *
                      00226 ;    Filename:      midi.h                                            *
                      00227 ;    Date:                                                            *
                      00228 ;    File Version:                                                    *
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00229 ;                                                                     *
                      00230 ;    Author:        Derek Enos                                        *
                      00231 ;    Company:                                                         *
                      00232 ;                                                                     * 
                      00233 ;                                                                     *
                      00234 ;**********************************************************************
                      00235 ;                                                                     *
                      00236 ;    Files required:                                                  *
                      00237 ;                                                                     *
                      00238 ;                                                                     *
                      00239 ;                                                                     *
                      00240 ;**********************************************************************
                      00241 
                      00242 #ifndef _MIDIH_
                      00243 #define _MIDIH_
                      00244 
                      00245 
                      00246 ; ******************* MIDI SYSEX DEFINES ***********************
                      00247 #define         VENDOR_ID       0x77
                      00248 #define         DEVICE_ID       0x1D
                      00249 #define         TERMINAL_PACKET_COMMAND_VALUE   0x1E
                      00250 
                      00251 ; ******************* MIDI BUFFER SIZES ***********************
                      00252 
                      00253 #define         MAX_MIDI_MESSAGE_SIZE   24
                      00254 #define         ACTIVE_NOTE_TABLE_SIZE  25
                      00255 
                      00256 
                      00257 ; ******************* STATUS BYTE DEFINITONS ***********************
                      00258 
                      00259 ; Note that lower nybble (channel) should be masked out for comparison
                      00260 ;------------------------
                      00261 #define         NOTE_OFF                                0x80
                      00262 #define         NOTE_ON                                 0x90
                      00263 #define         KEY_PRESSURE                    0xA0
                      00264 #define         CONTROL_CHANGE                  0xB0
                      00265 #define         PROGRAM_CHANGE                  0xC0
                      00266 #define         CHANNEL_PRESSURE                0xD0
                      00267 #define         PITCH_WHEEL                             0xE0
                      00268 
                      00269 ; Sysex Status Byte Definitions
                      00270 #define         SYSEX                                   0xF0
                      00271 #define         EOX                                             0xF7
                      00272 
                      00273 #define         NOTE_OFF_MESSAGE_LENGTH                         3
                      00274 #define         NOTE_ON_MESSAGE_LENGTH                          3
                      00275 #define         KEY_PRESSURE_MESSAGE_LENGTH                     3
                      00276 #define         CONTROL_CHANGE_MESSAGE_LENGTH           3
                      00277 #define         PROGRAM_CHANGE_MESSAGE_LENGTH           2
                      00278 #define         CHANNEL_PRESSURE_MESSAGE_LENGTH         2
                      00279 #define         PITCH_WHEEL_MESSAGE_LENGTH                      3
                      00280 
                      00281 ; SysEx Sub Types
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00282 ;----------------------------
                      00283 #define         NON_REAL_TIME                                           0x7E
                      00284 #define         GENERAL_INFORMATION                                     0x06
                      00285 #define         IDENTITY_REQUEST                                        0x01
                      00286 #define         IDENTITY_REPLY                                          0x02
                      00287 
                      00288 ; Control Change Data Types
                      00289 ;----------------------------
                      00290 #define         BANK_SELECT_MSB                                         0
                      00291 #define         MODULATION_WHEEL_MSB                            1
                      00292 #define         BREATH_CONTROLLER_MSB                           2
                      00293 #define         UNDEFINED_003                                           3
                      00294 #define         FOOT_CONTROLLER_MSB                                     4
                      00295 #define         PORTAMENTO_TIME                                         5
                      00296 #define         DATA_ENTRY_MSB                                          6
                      00297 #define         CHANNEL_VOLUME_MSB                                      7
                      00298 #define         BALANCE_MSB                                                     8
                      00299 #define         UNDEFINED_MSB                                           9
                      00300 #define         PAN_MSB                                                         10
                      00301 #define         EXPRESSION_MSB                                          11
                      00302 #define         EFFECT_CONTROL_1_MSB                            12
                      00303 #define         EFFECT_CONTROL_2_MSB                            13
                      00304 #define         UNDEFINED_014                                           14
                      00305 #define         UNDEFINED_015                                           15
                      00306 #define         GENERAL_PURPOSE_CONTROLLER_1_MSB        16
                      00307 #define         GENERAL_PURPOSE_CONTROLLER_2_MSB        17
                      00308 #define         GENERAL_PURPOSE_CONTROLLER_3_MSB        18
                      00309 #define         GENERAL_PURPOSE_CONTROLLER_4_MSB        19
                      00310 #define         UNDEFINED_020                                           20
                      00311 #define         UNDEFINED_021                                           21
                      00312 #define         UNDEFINED_022                                           22
                      00313 #define         UNDEFINED_023                                           23
                      00314 #define         UNDEFINED_024                                           24
                      00315 #define         UNDEFINED_025                                           25
                      00316 #define         UNDEFINED_026                                           26
                      00317 #define         UNDEFINED_027                                           27
                      00318 #define         UNDEFINED_028                                           28
                      00319 #define         UNDEFINED_029                                           29
                      00320 #define         UNDEFINED_030                                           30
                      00321 #define         UNDEFINED_031                                           31
                      00322 #define         BANK_SELECT_LSB                                         32
                      00323 #define         MODULATION_WHEEL_LSB                            33
                      00324 #define         BREATH_CONTROLLER_LSB                           34
                      00325 #define         UNDEFINED_035                                           35
                      00326 #define         FOOT_CONTROLLER_LSB                                     36
                      00327 #define         PORTAMENTO_TIME_LSB                                     37
                      00328 #define         DATA_ENTRY_LSB                                          38
                      00329 #define         CHANNEL_VOLUME_LSB                                      39
                      00330 #define         BALANCE_LSB                                                     40
                      00331 #define         UNDEFINED_041                                           41
                      00332 #define         PAN_LSB                                                         42
                      00333 #define         EXPRESSION_LSB                                          43
                      00334 #define         EFFECT_CONTROL_1_LSB                            44
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00335 #define         EFFECT_CONTROL_2_LSB                            45
                      00336 #define         UNDEFINED_046                                           46
                      00337 #define         UNDEFINED_047                                           47
                      00338 #define         GENERAL_PURPOSE_CONTROLLER_1_LSB        48
                      00339 #define         GENERAL_PURPOSE_CONTROLLER_2_LSB        49
                      00340 #define         GENERAL_PURPOSE_CONTROLLER_3_LSB        50
                      00341 #define         GENERAL_PURPOSE_CONTROLLER_4_LSB        51
                      00342 #define         UNDEFINED_052                                           52
                      00343 #define         UNDEFINED_053                                           53
                      00344 #define         UNDEFINED_054                                           54
                      00345 #define         UNDEFINED_055                                           55
                      00346 #define         UNDEFINED_056                                           56
                      00347 #define         UNDEFINED_057                                           57
                      00348 #define         UNDEFINED_058                                           58
                      00349 #define         UNDEFINED_059                                           59
                      00350 #define         UNDEFINED_060                                           60
                      00351 #define         UNDEFINED_061                                           61
                      00352 #define         UNDEFINED_062                                           62
                      00353 #define         UNDEFINED_063                                           63
                      00354 #define         SUSTAIN_PEDAL                                           64
                      00355 #define         PORTAMENTO_ONOFF                                        65
                      00356 #define         SOSTENUTO                                                       66
                      00357 #define         SOFT_PEDAL                                                      67
                      00358 #define         LEGATO_FOOTSWITCH                                       68
                      00359 #define         HOLD_2                                                          69
                      00360 #define         SOUND_CONTROLLER_1_DEFAULT_SOUND_VARIATION                              70
                      00361 #define         SOUND_CONTROLLER_2_DEFAULT_TIMBRE_HARMONIC_QUALITY              71
                      00362 #define         SOUND_CONTROLLER_3_DEFAULT_RELEASE_TIME                                 72
                      00363 #define         SOUND_CONTROLLER_4_DEFAULT_ATTACK_TIME                                  73
                      00364 #define         SOUND_CONTROLLER_5_DEFAULT_BRIGHTNESS                                   74
                      00365 #define         SOUND_CONTROLLER_6_GM2_DEFAULT_DECAY_TIME                               75
                      00366 #define         SOUND_CONTROLLER_7_GM2_DEFAULT_VIBRATO_RATE                             76
                      00367 #define         SOUND_CONTROLLER_8_GM2_DEFAULT_VIBRATO_DEPTH                    77
                      00368 #define         SOUND_CONTROLLER_9_GM2_DEFAULT_VIBRATO_DELAY                    78
                      00369 #define         SOUND_CONTROLLER_10_GM2_DEFAULT_UNDEFINED                               79
                      00370 #define         GENERAL_PURPOSE_CONTROLLER_5                                                    80
                      00371 #define         GENERAL_PURPOSE_CONTROLLER_6                                                    81
                      00372 #define         GENERAL_PURPOSE_CONTROLLER_7                                                    82
                      00373 #define         GENERAL_PURPOSE_CONTROLLER_8                                                    83
                      00374 #define         PORTAMENTO_CONTROL                                                                      
                                    84
                      00375 #define         UNDEFINED_85                                                                    85
                      00376 #define         UNDEFINED_86                                                                    86
                      00377 #define         UNDEFINED_87                                                                    87
                      00378 #define         UNDEFINED_88                                                                    88
                      00379 #define         UNDEFINED_89                                                                    89
                      00380 #define         UNDEFINED_90                                                                    90
                      00381 #define         EFFECTS_1_DEPTH_DEFAULT_REVERB_SEND                             91
                      00382 #define         EFFECTS_2_DEPTH_DEFAULT_TREMOLO_DEPTH                   92
                      00383 #define         EFFECTS_3_DEPTH_DEFAULT_CHORUS_SEND                             93
                      00384 #define         EFFECTS_4_DEPTH_DEFAULT_CELESTE_[DETUNE]_DEPTH  94
                      00385 #define         EFFECTS_5_DEPTH_DEFAULT_PHASER_DEPTH                    95
                      00386 #define         DATA_INCREMENT                                                                  96
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00387 #define         DATA_DECREMENT                                                                  97
                      00388 #define         NON_REG_PARAMETER_NUMBER_LSB                            98
                      00389 #define         NON_REG_PARAMETER_NUMBER_MSB                            99
                      00390 #define         REGISTERED_PARAMETER_NUMBER_LSB                                 100
                      00391 #define         REGISTERED_PARAMETER_NUMBERMSB                                  101
                      00392 #define         UNDEFINED_102                                           102
                      00393 #define         UNDEFINED_103                                           103
                      00394 #define         UNDEFINED_104                                           104
                      00395 #define         UNDEFINED_105                                           105
                      00396 #define         UNDEFINED_106                                           106
                      00397 #define         UNDEFINED_107                                           107
                      00398 #define         UNDEFINED_108                                           108
                      00399 #define         UNDEFINED_109                                           109
                      00400 #define         UNDEFINED_110                                           110
                      00401 #define         UNDEFINED_111                                           111
                      00402 #define         UNDEFINED_112                                           112
                      00403 #define         UNDEFINED_113                                           113
                      00404 #define         UNDEFINED_114                                           114
                      00405 #define         UNDEFINED_115                                           115
                      00406 #define         UNDEFINED_116                                           116
                      00407 #define         UNDEFINED_117                                           117
                      00408 #define         UNDEFINED_118                                           118
                      00409 #define         UNDEFINED_119                                           119
                      00410 #define         ALL_SOUND_OFF                                           120
                      00411 #define         RESET_ALL_CONTROLLERS                           121
                      00412 #define         LOCAL_CONTROL_ONOFF                                     122
                      00413 #define         ALL_NOTES_OFF                                           123
                      00414 #define         OMNI_MODE_OFF                                           124
                      00415 #define         OMNI_MODE_ON                                            125
                      00416 #define         POLY_MODE_OFF                                           126
                      00417 #define         POLY_MODE_ON                                            127
                      00418 
                      00419 
                      00420 ; ******************* MIDI MESSAGE STATES ***********************
                      00421 
                      00422 #define CHANNEL                                         0x00
                      00423 #define DATA_BYTE0                                      0x01
                      00424 #define DATA_BYTE1                                      0x02
                      00425 #define MESSAGE_COMPLETE                        0xFF
                      00426 
                      00427 #define NOTE_COMPLETE                           DATA_BYTE1
                      00428 #define AFTERTOUCH_COMPLETE                     DATA_BYTE1
                      00429 #define CONTROL_CHANGE_COMPLETE         DATA_BYTE1
                      00430 #define PROGRAM_CHANGE_COMPLETE         DATA_BYTE0
                      00431 #define PITCH_WHEEL_COMPLETE            DATA_BYTE1
                      00432 
                      00433 
                      00434 ; ******************* FLAG VARIABLE DEFINITIONS ***********************
                      00435 
                      00436 ; midiFlags (bits 3:7 free for use by other modules)
                      00437 #define uartState_rxInProgress                  0
                      00438 #define midiState_messageNeedsMapping   1
                      00439 #define midiThruModeEnabled                             2
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00440 
                      00441 
                      00442 #endif
                      00027         #include        "../header/soundGen.h"
                      00527 
                      00528 ;**********************************************************************
                      00529 ;                                                                     *
                      00530 ;    Project:       deMIDulator                                       *
                      00531 ;    Filename:      soundGen.h                                        *
                      00532 ;    Date:                                                            *
                      00533 ;    File Version:                                                    *
                      00534 ;                                                                     *
                      00535 ;    Author:        Derek Enos                                        *
                      00536 ;    Company:                                                         *
                      00537 ;                                                                     * 
                      00538 ;                                                                     *
                      00539 ;**********************************************************************
                      00540 ;                                                                     *
                      00541 ;    Files required:                                                  *
                      00542 ;                                                                     *
                      00543 ;                                                                     *
                      00544 ;                                                                     *
                      00545 ;**********************************************************************
                      00546 
                      00547 #ifndef _SOUNDGENH_
                      00548 #define _SOUNDGENH_
                      00549 
                      00550 ;**********************************************************************
                      00551 ; GENERAL
                      00552 ;**********************************************************************
                      00553 
                      00554 ; Current code structure requires that MAX_POLY_DEPTH be set to 4!
                      00555 #define MAX_POLY_DEPTH                                  4       
                      00556 
                      00557 #define ACTIVE_NOTE_DELTAS_ELEMENT_SIZE 2
                      00558 #define ACTIVE_NOTE_DELTAS_SIZE                 MAX_POLY_DEPTH * ACTIVE_NOTE_DELTAS_ELEMENT_SIZE
                      00559 
                      00560 #define DELEGATED_DELTAS_ELEMENT_SIZE   2
                      00561 #define DELEGATED_DELTAS_SIZE                   MAX_POLY_DEPTH * DELEGATED_DELTAS_ELEMENT_SIZE
                      00562 
                      00563 #define OSC_DELTAS_ELEMENT_SIZE                 2
                      00564 #define OSC_DELTAS_SIZE                                 MAX_POLY_DEPTH * OSC_DELTAS_ELEMENT_SIZE
                      00565 
                      00566 #define ACCUMULATORS_ELEMENT_SIZE               4
                      00567 #define ACCUMULATORS_SIZE                               MAX_POLY_DEPTH * ACCUMULATORS_ELEMENT_SIZE
                      00568 
                      00569 #define ACTIVE_OUTPUT_VALUES_EL_SIZE    1
                      00570 #define ACTIVE_OUTPUT_VALUES_SIZE               MAX_POLY_DEPTH * ACTIVE_OUTPUT_VALUES_EL_SIZE
                      00571 
                      00572 #define LED_BLINK_RATE_VOICE_THROUGH    20
                      00573 #define LED_BLINK_RATE_VOICE_RECORD             6
                      00574 
                      00575 ; set soundGen timebase prescales for wave and sample modes
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00576 ; Timer2 interrupt period is currently 32uS
                      00577 ; set sample timebase period to 192uS (5208 Hz)
                      00578 #define SAMPLE_PRESCALE 6
                      00579 ; wave sine/square timebase period to 64uS (15.625 kHz)
                      00580 #define WAVE_PRESCALE   2
                      00581 
                      00582 #define MAX_MODE_LEVEL  MONO
                      00583 
                      00584 ; set power-up Attack and Release parameters
                      00585 ; adsrAttackRate and adsrReleaseRate variables have a range of 0 - 64
                      00586 ; rate of 0 == MIDI Attack/Release Time of 127
                      00587 ; rate of 64 == MIDI Attack/Release Time of 0
                      00588 #define ADSR_ATTACK_RATE        63
                      00589 #define ADSR_RELEASE_RATE       16
                      00590 
                      00591 ; set adsr prescale target to increment adsrLimiterRegs value every 19.52mS
                      00592 ; 19.52mS gives a max individual attack/release time of 4.99712 Seconds
                      00593 ; the "increment" value is set by adsrAttackRate and adsrReleaseRate
                      00594 #define ADSR_PRESCALE 610
                      00595 
                      00596 ; changing from 0x00 reference to 0x80 to improve Attack/Release waveform quality
                      00597 #define PWM_IDLE_OUTPUT_VALUE 0x80
                      00598 
                      00599 ; In SINE mode, this values sets the range (+/- PWM_IDLE_OUTPUT_VALUE) of activeOutputValue within which
                             an oscillator will be
                      00600 ; ungated for changes to its delegatedDelta value.  Only allowing changes when activeOutputValue is appr
                            oximately == PWM_IDLE_OUTPUT_VALUE
                      00601 ; greatly reduces popping caused by Sine wave cycle clipping
                      00602 #define OSC_TRANSITION_OUTPUT_THRESHOLD 0x04
                      00603 
                      00604 ; Audio input DC Bias measurement, 253 ADC sample average:
                      00605 ;   (VDD == 3.2V / 256 = 0.0125V per ADC increment)
                      00606 ;   on-board mic selected, MIC connceted      = 0x47 (@ VDD = 3.2V, 0x47 correlates to 0.8875V)
                      00607 ;   external mic selected, input floating     = 0x38 (@ VDD = 3.2V, 0x38 correlates to 0.7000V)
                      00608 ;   line-in selected, input floating          = 0x53 (@ VDD = 3.2V, 0x53 correlates to 1.0375V)
                      00609 ; Should have balanced these offsets in the hardware. oh well.
                      00610 ; Sine and Square outputs idle at 0x80, so compensate for difference in Sample bias to mitigate popping
                      00611 ; average of above measurement is 0x46, 0x80 - 0x46 = 0x3A
                      00612 ;#define SAMPLE_DC_OFFSET (PWM_IDLE_OUTPUT_VALUE - 0x46)
                      00613 ; DEBUG - sample dc offset will change with component tolerances.  need to set manually for each PCB
                      00614 ; measured 0.930V RMS, 0.930 / 0.0125 = 74.4
                      00615 #define SAMPLE_DC_OFFSET (PWM_IDLE_OUTPUT_VALUE - 74)
                      00616 
                      00617 ; define the time to wait from record button release to start of sample recording
                      00618 ; this is an attempt to eliminate the record button's physical noise from the sample
                      00619 ;   Calculation Method:
                      00620 ;     timer2 int period == 32uS
                      00621 ;     samplePrescaleCounter == 6
                      00622 ;     32uS * 6 = 192uS
                      00623 ;     RECORD_BUTTON_RELEASE_WAIT_TIME = waitTimeInMs / 0.192
                      00624 ;                 maxTime = 192uS * 256 = 49.152mS
                      00625 ;
                      00626 ; load for delay of 5mS. (5 / 0.192 = 26.0417)
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00627 #define RECORD_BUTTON_RELEASE_WAIT_TIME 26
                      00628 
                      00629 ;**********************************************************************
                      00630 ; ENUM TYPE DEFINITIONS
                      00631 ;**********************************************************************
                      00632 
                      00633 ; waveShape
                      00634 #define SINE 0
                      00635 #define SQUARE 1
                      00636 #define SAMPLE 2
                      00637 
                      00638 ; recordOrPlayback
                      00639 #define VOICE_THROUGH 0
                      00640 #define RECORD 1
                      00641 #define PLAYBACK 2
                      00642 
                      00643 ; modeLevels
                      00644 #define POLY 0
                      00645 #define SUSTAIN 1
                      00646 #define MONO 2
                      00647 
                      00648 
                      00649 ;**********************************************************************
                      00650 ; FLAG VARIABLE DEFINITIONS
                      00651 ;**********************************************************************
                      00652 
                      00653 ; midiFlags
                      00654 #define turnSoundOn 3
                      00655 #define turnSoundOff 4
                      00656 #define keyPressed 5
                      00657 #define soundOn 6
                      00658 
                      00659 ; soundGenFlags
                      00660 #define delegatorBusy 0
                      00661 #define pgDec 1
                      00662 #define needRefresh 2
                      00663 
                      00664 ; oscResetFlags
                      00665 #define osc0    0
                      00666 #define osc1    1
                      00667 #define osc2    2
                      00668 #define osc3    3
                      00669 
                      00670 ; oscStateFlags
                      00671 #define release 0
                      00672 #define sustain 1
                      00673 #define decay 2
                      00674 #define attack 3
                      00675 
                      00676 
                      00677 ;**********************************************************************
                      00678 ; MACROS
                      00679 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00680 
                      00681 ;**********************************************************************
                      00682 CLEAR_ACCUMULATORS      MACRO
                      00683         local   loop
                      00684 
                      00685         ; init local variables
                      00686         PUSH_R  r0
                      00687         PUSH_R  FSR0L
                      00688         PUSH_R  FSR0H
                      00689         
                      00690         ; load fsr
                      00691         lfsr    FSR0, accumulators
                      00692 
                      00693         ; init count
                      00694         movf    polyDepth, w, ACCESS
                      00695         movwf   r0, ACCESS
                      00696 loop    
                      00697         ; each accumulator is 4 bytes wide
                      00698         clrf    POSTINC0, ACCESS        
                      00699         clrf    POSTINC0, ACCESS        
                      00700         clrf    POSTINC0, ACCESS        
                      00701         clrf    POSTINC0, ACCESS        
                      00702         ; decrement count, skip if done
                      00703         decfsz  r0, f, ACCESS
                      00704         bra             loop
                      00705 
                      00706         ; restore variables
                      00707         POP_R   FSR0H
                      00708         POP_R   FSR0L
                      00709         POP_R   r0
                      00710         
                      00711         ENDM
                      00712         
                      00713 
                      00714 ;**********************************************************************
                      00715 ENABLE_SUSTAIN  MACRO
                      00716         comf    oscResetFlags, w, ACCESS
                      00717         andlw   0x0f
                      00718         movwf   sustainFlags, ACCESS
                      00719         ENDM
                      00720         
                      00721 ;**********************************************************************
                      00722 DISABLE_SUSTAIN MACRO
                      00723         clrf    sustainFlags, ACCESS
                      00724         ENDM
                      00725 
                      00726 ;**********************************************************************
                      00727 REVERSE_SAMPLE_IF_MOD_OVER_63   MACRO
                      00728         local exitMacro
                      00729         ; if modulation > 63 then reverse sample
                      00730         movlw   63
                      00731         cpfsgt  modulation, ACCESS
                      00732         bra             exitMacro
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00733         ; modulation > 63 so do nextSampleAddress = (sampleEndAddress - nextSampleAddress)
                      00734         movf    nextSampleAddress, w, ACCESS
                      00735         subwf   sampleEndAddress, w, ACCESS
                      00736         movwf   nextSampleAddress, ACCESS
                      00737         movf    nextSampleAddress + 1, w, ACCESS
                      00738         subwfb  sampleEndAddress + 1, w, ACCESS
                      00739         movwf   nextSampleAddress + 1, ACCESS
                      00740 exitMacro
                      00741         ENDM
                      00742 
                      00743 ;**********************************************************************
                      00744 OSC_READ_ADSR_FLAG      MACRO   FLAG
                      00745 ; oscillator number passed in WREG
                      00746 ; boolean value is returned in WREG and ZERO flag is set accordingly
                      00747 
                      00748         ; push working regs onto software stack
                      00749         PUSH_R  FSR0L
                      00750         PUSH_R  FSR0H
                      00751         
                      00752         ; load fsr
                      00753         lfsr    FSR0, oscStateFlags
                      00754         ; read the register into WREG
                      00755         movf    PLUSW0, w, ACCESS
                      00756         andlw   1<<FLAG
                      00757         
                      00758         ; restore working regs from stack
                      00759         POP_R   FSR0H
                      00760         POP_R   FSR0L   
                      00761         
                      00762         ENDM
                      00763 
                      00764 ;**********************************************************************
                      00765 OSC_ADVANCE_ADSR        MACRO   OSC_NUMBER
                      00766         local   macroDone, doAttack, attackDone, doRelease, releaseDone
                      00767 
                      00768         ; ignore advance if oscillator is sustained
                      00769         btfsc   sustainFlags, OSC_NUMBER, ACCESS
                      00770         bra             macroDone
                      00771         
                      00772         btfsc   oscStateFlags + OSC_NUMBER, attack, ACCESS
                      00773         bra             doAttack
                      00774         btfsc   oscStateFlags + OSC_NUMBER, release, ACCESS
                      00775         bra             doRelease
                      00776         bra             macroDone
                      00777         
                      00778 doAttack
                      00779         ; osc is attacking
                      00780 
                      00781         ; test condition ((adsrLimiterRegs -= ADSR_ATTACK_RATE) <=0)
                      00782         movf    adsrAttackRate, w, ACCESS
                      00783         subwf   adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00784         bnc             attackDone
                      00785         bz              attackDone
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00786 
                      00787         ; condition is FALSE so do the subtraction and exit
                      00788         ; (adsrLimiterRegs -= ADSR_ATTACK_RATE)
                      00789         movf    adsrAttackRate, w, ACCESS
                      00790         subwf   adsrLimiterRegs + OSC_NUMBER, f, ACCESS
                      00791         bra             macroDone
                      00792 
                      00793 attackDone
                      00794         ; clear attack flag
                      00795         bcf             oscStateFlags + OSC_NUMBER, attack, ACCESS
                      00796         clrf    adsrLimiterRegs + OSC_NUMBER, ACCESS
                      00797         bra     macroDone
                      00798 
                      00799 doRelease
                      00800         ; osc is releasing
                      00801 
                      00802         ; test condition: ((adsrLimiterRegs + ADSR_ATTACK_RATE) >= 255)
                      00803         movf    adsrReleaseRate, w, ACCESS
                      00804         addwf   adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00805         ; condition is TRUE so skip the addition and leave adsrLimiterRegs at its current value
                      00806         bc              releaseDone
                      00807         comf    WREG, w, ACCESS
                      00808         ; condition is TRUE so skip the addition and leave adsrLimiterRegs at its current value
                      00809         bz              releaseDone
                      00810 
                      00811         ; condition is FALSE so do the addition and exit
                      00812         ; do (adsrLimiterRegs += ADSR_ATTACK_RATE)      
                      00813         movf    adsrReleaseRate, w, ACCESS
                      00814         addwf   adsrLimiterRegs + OSC_NUMBER, f, ACCESS
                      00815         bra             macroDone
                      00816         
                      00817 releaseDone
                      00818         ; clear release flag
                      00819         bcf             oscStateFlags + OSC_NUMBER, release, ACCESS
                      00820         ; set limit reg to max
                      00821         setf    adsrLimiterRegs + OSC_NUMBER, ACCESS
                      00822         ; clear oscillator's delegatedDelta
                      00823         clrf    delegatedDeltas + OSC_NUMBER * 2;
                      00824         clrf    delegatedDeltas + (OSC_NUMBER * 2) + 1; 
                      00825         bra     macroDone
                      00826         
                      00827 macroDone
                      00828         ENDM
                      00829         
                      00830 ;**********************************************************************
                      00831 OSC_MIX MACRO   OSC_NUMBER
                      00832         local   mixDone, mixDoPos, mixDoNeg, mixDoDone
                      00833                 
                      00834         ; check polarity of current activeOutputValue compared to PWM_IDLE_OUTPUT_VALUE
                      00835         movlw   PWM_IDLE_OUTPUT_VALUE
                      00836         subwf   activeOutputValues + OSC_NUMBER, w
                      00837         bnc             mixDoNeg
                      00838 mixDoPos
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00839         ; WREG = adsrLimiterRegs/2
                      00840         bcf             STATUS, C, ACCESS
                      00841         rrcf    adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00842         subwf   activeOutputValues + OSC_NUMBER, w
                      00843         bra             mixDoDone
                      00844 mixDoNeg
                      00845         ; WREG = adsrLimiterRegs/2
                      00846         bcf             STATUS, C, ACCESS
                      00847         rrcf    adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00848         addwf   activeOutputValues + OSC_NUMBER, w      
                      00849 mixDoDone
                      00850         ; overflow indicates that last operation toggled bit 7
                      00851         btfsc   STATUS, OV, ACCESS
                      00852         movlw   PWM_IDLE_OUTPUT_VALUE
                      00853 
                      00854 mixDone
                      00855         ; add WREG to mixedOutputL/H
                      00856         addwf   mixedOutputL, f, ACCESS
                      00857         btfsc   STATUS, C, ACCESS
                      00858         incf    mixedOutputH, f, ACCESS
                      00859         
                      00860         ENDM
                      00861 
                      00862 ;**********************************************************************
                      00863 OSC_STATE_BLOCK MACRO   OSC_NUMBER
                      00864         local   checkDelegating, oscCheckActive, zeroAcc, oscActive, waveIsSample, noTransition, oscChec
                            kNotSine
                      00865         local   clrSampleAcc, addressOk, waveIsNotSample, waveIsSine, waveIsSquare, tableAddressLoaded, 
                            resetOscillator, macroDone
                      00866                 
                      00867         ; if oscillator is locked for sustain then leave it alone
                      00868         btfsc   sustainFlags, OSC_NUMBER, ACCESS
                      00869         bra             oscActive
                      00870                         
                      00871 checkDelegating
                      00872         ; don't update if delegator is busy because delegatedDelta value is volatile
                      00873         btfsc   soundGenFlags, delegatorBusy, ACCESS
                      00874         ; delegator is busy so just keep spinning
                      00875         bra             oscCheckActive
                      00876         
                      00877         ; THRESHOLD METHOD WORKS WELL
                      00878         movlw   SINE
                      00879         cpfseq waveShape, ACCESS
                      00880         bra             oscCheckNotSine
                      00881         ; calculate absolute offset between PWM_IDLE_OUTPUT_VALUE and current activeOutputValue
                      00882         movlw   PWM_IDLE_OUTPUT_VALUE
                      00883         subwf   activeOutputValues + OSC_NUMBER, w
                      00884         ; invert if negative
                      00885         btfss   STATUS, C, ACCESS
                      00886         negf    WREG, ACCESS
                      00887         ; check if offset is below threshold value
                      00888         ; do (WREG = OSC_OUTPUT_GATE_THRESHOLD - WREG)
                      00889         sublw   OSC_TRANSITION_OUTPUT_THRESHOLD
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00890         ; if result is positive then activeOutputValue offset from IDLE is <= THRESHOLD so allow changes
                      00891         bnc             oscCheckActive
                      00892 
                      00893 oscCheckNotSine
                      00894 
                      00895         ; delegator is idle and oscillator is enabled so copy delegated delta as internal
                      00896         movff   delegatedDeltas + (OSC_NUMBER * DELEGATED_DELTAS_ELEMENT_SIZE) + 0, oscDeltas + (OSC_NUM
                            BER * OSC_DELTAS_ELEMENT_SIZE) + 0
                      00897         movff   delegatedDeltas + (OSC_NUMBER * DELEGATED_DELTAS_ELEMENT_SIZE) + 1, oscDeltas + (OSC_NUM
                            BER * OSC_DELTAS_ELEMENT_SIZE) + 1
                      00898 
                      00899 oscCheckActive
                      00900         ; if oscDeltas[OSC_NUMBER] == 0x00 then oscillator is not really active so reset
                      00901         ; this check is required in event that (activeOutput == 0 && delegatorBusy == TRUE && oscDelta =
                            = 0)
                      00902         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, f
                      00903         bnz             oscActive
                      00904         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, f
                      00905         bz              resetOscillator
                      00906         
                      00907 oscActive
                      00908         ; if oscillator is starting from reset state then begin with 0x0000 accumulator
                      00909         btfsc   oscResetFlags, OSC_NUMBER, ACCESS
                      00910         bra             zeroAcc
                      00911 
                      00912         ;**** start procedure: step Accumulator (SINE/SQUARE/SAMPLE) ****
                      00913         ; accumulator += activeNoteDelta
                      00914         ; accumulators are 4 bytes wide, activeNoteDeltas are 2 bytes wide
                      00915         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, w
                      00916         addwf   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
                      00917         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, w  
                      00918         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
                      00919         movlw   0
                      00920         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
                      00921         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                      00922         
                      00923 zeroAcc
                      00924         ; we're done with oscResetFlags flag so ensure that it's clear
                      00925         bcf             oscResetFlags, OSC_NUMBER, ACCESS
                      00926         
                      00927         ;**** start procedure: handle Pitch Wheel (SINE/SQUARE/SAMPLE) ****
                      00928         ; accumulator += pitchWheel
                      00929         movf    pitchWheel                                                                              
                                                                            + 0, w, ACCESS
                      00930         addwf   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            + 0, f
                      00931         movf    pitchWheel                                                                              
                                                                            + 1, w, ACCESS
                      00932         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
                      00933         movf    pitchWheel                                                                              
                                                                            + 2, w, ACCESS
                      00934         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
                      00935         movf    pitchWheel                                                                              
                                                                            + 3, w, ACCESS
                      00936         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                      00937         
                      00938         ;**** start procedure: if SAMPLE waveshape then load next read address  (SAMPLE ONLY) ****
                      00939         ; branch to waveform specific table address load
                      00940         movlw   SAMPLE
                      00941         cpfseq  waveShape, ACCESS
                      00942         bra             waveIsNotSample
                      00943 waveIsSample
                      00944 
                      00945         ; if samplesLoaded flag is set then load next EEPROM read address
                      00946         ; checking this here as opposed to before accumulator update will, in the event of the mainline 
                            not…
                      00947         ; being able to load the samples in time, cause audio chopping rather than detuning
                      00948         btfss   eepromFlags, samplesLoaded, ACCESS
                      00949         bra             macroDone
                      00950         
                      00951         ; check for note transition
                      00952         ; keyPressed flag is set every time a MIDI Note On message is received
                      00953         ; when a sample is playing back in POLY or SUSTAIN modes, we want the sample to restart from the
                             beginning...
                      00954         ; whenever a Note On message is received.
                      00955         btfss   midiFlags, keyPressed, ACCESS
                      00956         bra             noTransition
                      00957         ; is modeLevel == POLY
                      00958         movlw   POLY
                      00959         xorwf   modeLevel, w, ACCESS
                      00960         ; mode is POLY so reset accumulator to restart sample from beginning
                      00961         bz              clrSampleAcc
                      00962 
                      00963 noTransition    
                      00964         ; nextSampleAddress = ((accumulator >> 8) & 0xffff)
                      00965         ; reset accumulator if nextSampleAddress value will exceed sampleEndAddress
                      00966         ; is waveTableIndex > sampleEndAddress?
                      00967         movf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, w
                      00968         subwf   sampleEndAddress, w, ACCESS
                      00969         movf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, w
                      00970         subwfb  sampleEndAddress + 1, w, ACCESS
                      00971         ; result is positive so waveTableIndex is within valid range
                      00972         bc              addressOk
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00973         ; ((accumulator >> 8) & 0xffff) is out of valid sample range so restart sample from beginning
                      00974         ; reset accumulator
                      00975 clrSampleAcc
                      00976         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0
                      00977         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1
                      00978         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2
                      00979         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3
                      00980 addressOk
                      00981         
                      00982         ; do nextSampleAddress = ((accumulator >> 8) & 0xffff)
                      00983         movff   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, nextSampleAddresses + (OSC_NUMBER * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 0
                      00984         movff   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, nextSampleAddresses + (OSC_NUMBER * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 1
                      00985         
                      00986         bra             macroDone
                      00987         
                      00988 waveIsNotSample
                      00989         ;**** start procedure: waveshape is SINE or SQUARE so read Program Memory table  (SINE/SQUARE ON
                            LY) ****
                      00990         ; branch to waveform specific table address load
                      00991         movlw   SINE
                      00992         cpfseq  waveShape, ACCESS
                      00993         bra             waveIsSquare
                      00994 
                      00995 waveIsSine      
                      00996         ; 
                      00997         ; load address of SINE table read
                      00998         ; offset = ((accumulator >> 8) & 0xff)
                      00999         movf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1, w
                      01000         addwf   sineTableBaseAddress + 0, w
                      01001         movwf   TBLPTRL, ACCESS
                      01002         movf    sineTableBaseAddress + 1, w
                      01003         btfsc   STATUS, C, ACCESS
                      01004         addlw   1
                      01005         movwf   TBLPTRH, ACCESS
                      01006         movf    sineTableBaseAddress + 2, w
                      01007         btfsc   STATUS, C, ACCESS
                      01008         addlw   1
                      01009         movwf   TBLPTRU, ACCESS
                      01010         bra             tableAddressLoaded
                      01011 
                      01012 waveIsSquare
                      01013         ; load address of SQUARE table read
                      01014         ; offset = ((accumulator >> 8) & 0xff)
                      01015         movf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1, w
                      01016         addwf   squareTableBaseAddress + 0, w
                      01017         movwf   TBLPTRL, ACCESS
                      01018         movf    squareTableBaseAddress + 1, w
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01019         btfsc   STATUS, C, ACCESS
                      01020         addlw   1
                      01021         movwf   TBLPTRH, ACCESS
                      01022         movf    squareTableBaseAddress + 2, w
                      01023         btfsc   STATUS, C, ACCESS
                      01024         addlw   1
                      01025         movwf   TBLPTRU, ACCESS
                      01026 
                      01027 tableAddressLoaded
                      01028         ; read value from program memory
                      01029         tblrd*
                      01030         movff   TABLAT, activeOutputValues + (OSC_NUMBER * ACTIVE_OUTPUT_VALUES_EL_SIZE) + 0
                      01031         bra             macroDone
                      01032         
                      01033 resetOscillator
                      01034         ; set oscillator reset flag
                      01035         bsf             oscResetFlags, OSC_NUMBER, ACCESS
                      01036         movlw   PWM_IDLE_OUTPUT_VALUE
                      01037         movwf   activeOutputValues + (OSC_NUMBER * ACTIVE_OUTPUT_VALUES_EL_SIZE)
                      01038         clrf    oscDeltas + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE) + 0
                      01039         clrf    oscDeltas + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE) + 1
                      01040         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 0
                      01041         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1
                      01042         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 2
                      01043         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 3
                      01044 
                      01045 macroDone
                      01046 
                      01047         ENDM
                      01048         
                      01049         
                      01050 #endif
                      01051 
                      01052 
                      00028         #include        "../header/userinterface.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      userinterface.h                                   *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef _USERINTERFACEH_
                      00022 #define _USERINTERFACEH_
                      00023 
                      00024 #define LEVEL_POLY_LED_BLINK_RATE               0
                      00025 #define LEVEL_SUSTAIN_LED_BLINK_RATE    2
                      00026 #define LEVEL_MONO_LED_BLINK_RATE               1
                      00027 
                      00028 ;**********************************************************************
                      00029 ; MACROS
                      00030 ;**********************************************************************
                      00031                                                         
                      00032 #ifndef THROUGH_HOLE_PCB
                      00033 
                      00034 #ifdef  LED_STEADY_STATE_DISABLED
                      00035 
                      00036 LED_SINE_ON     MACRO
                      00037 #ifndef LED_POLARITY_REVERSED
                      00038         bcf             ledOnOffFlags, RA5, ACCESS      ; LED is on
                      00039 #else
                      00040         bsf             ledOnOffFlags, RA5, ACCESS      ; LED is on
                      00041 #endif
                      00042         ENDM
                      00043 
                      00044 LED_SQUARE_ON   MACRO
                      00045 #ifndef LED_POLARITY_REVERSED
                      00046         bcf             ledOnOffFlags, RC4, ACCESS      ; LED is on
                      00047 #else
                      00048         bsf             ledOnOffFlags, RC4, ACCESS      ; LED is on
                      00049 #endif
                      00050         ENDM
                      00051 
                      00052 LED_SAMPLE_ON   MACRO
                      00053 #ifndef LED_POLARITY_REVERSED
                      00054         bcf             ledOnOffFlags, RC3, ACCESS      ; LED is on
                      00055 #else
                      00056         bsf             ledOnOffFlags, RC3, ACCESS      ; LED is on
                      00057 #endif
                      00058         ENDM
                      00059 
                      00060 LED_SINE_OFF    MACRO
                      00061 #ifndef LED_POLARITY_REVERSED
                      00062         bsf             ledOnOffFlags, RA5, ACCESS      ; LED is off
                      00063 #else
                      00064         bcf             ledOnOffFlags, RA5, ACCESS      ; LED is off
                      00065 #endif
                      00066         ENDM
                      00067 
                      00068 LED_SQUARE_OFF  MACRO
                      00069 #ifndef LED_POLARITY_REVERSED
                      00070         bsf             ledOnOffFlags, RC4, ACCESS      ; LED is off
                      00071 #else
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00072         bcf             ledOnOffFlags, RC4, ACCESS      ; LED is off
                      00073 #endif
                      00074         ENDM
                      00075 
                      00076 LED_SAMPLE_OFF  MACRO
                      00077 #ifndef LED_POLARITY_REVERSED
                      00078         bsf             ledOnOffFlags, RC3, ACCESS      ; LED is off
                      00079 #else
                      00080         bcf             ledOnOffFlags, RC3, ACCESS      ; LED is off
                      00081 #endif
                      00082         ENDM
                      00083 
                      00084 LED_SINE_TOGGLE MACRO
                      00085         btg             ledOnOffFlags, RA5, ACCESS      ; LED is toggled
                      00086         ENDM
                      00087 
                      00088 LED_SQUARE_TOGGLE       MACRO
                      00089         btg             ledOnOffFlags, RC4, ACCESS      ; LED is toggled
                      00090         ENDM
                      00091 
                      00092 LED_SAMPLE_TOGGLE       MACRO
                      00093         btg             ledOnOffFlags, RC3, ACCESS      ; LED is toggled
                      00094         ENDM
                      00095 
                      00096 #else   ; #ifdef LED_STEADY_STATE_DISABLED
                      00097 
                      00098 LED_SINE_ON     MACRO
                      00099 #ifndef LED_POLARITY_REVERSED
                      00100         bcf             LATA, RA5, ACCESS       ; LED is on
                      00101 #else
                      00102         bsf             LATA, RA5, ACCESS       ; LED is on
                      00103 #endif
                      00104         ENDM
                      00105 
                      00106 LED_SQUARE_ON   MACRO
                      00107 #ifndef LED_POLARITY_REVERSED
                      00108         bcf             LATC, RC4, ACCESS       ; LED is on
                      00109 #else
                      00110         bsf             LATC, RC4, ACCESS       ; LED is on
                      00111 #endif
                      00112         ENDM
                      00113 
                      00114 LED_SAMPLE_ON   MACRO
                      00115 #ifndef LED_POLARITY_REVERSED
                      00116         bcf             LATC, RC3, ACCESS       ; LED is on
                      00117 #else
                      00118         bsf             LATC, RC3, ACCESS       ; LED is on
                      00119 #endif
                      00120         ENDM
                      00121 
                      00122 LED_SINE_OFF    MACRO
                      00123 #ifndef LED_POLARITY_REVERSED
                      00124         bsf             LATA, RA5, ACCESS       ; LED is off
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00125 #else
                      00126         bcf             LATA, RA5, ACCESS       ; LED is off
                      00127 #endif
                      00128         ENDM
                      00129 
                      00130 LED_SQUARE_OFF  MACRO
                      00131 #ifndef LED_POLARITY_REVERSED
                      00132         bsf             LATC, RC4, ACCESS       ; LED is off
                      00133 #else
                      00134         bcf             LATC, RC4, ACCESS       ; LED is off
                      00135 #endif
                      00136         ENDM
                      00137 
                      00138 LED_SAMPLE_OFF  MACRO
                      00139 #ifndef LED_POLARITY_REVERSED
                      00140         bsf             LATC, RC3, ACCESS       ; LED is off
                      00141 #else
                      00142         bcf             LATC, RC3, ACCESS       ; LED is off
                      00143 #endif
                      00144         ENDM
                      00145 
                      00146 LED_SINE_TOGGLE MACRO
                      00147         btg             LATA, RA5, ACCESS       ; LED is toggled
                      00148         ENDM
                      00149 
                      00150 LED_SQUARE_TOGGLE       MACRO
                      00151         btg             LATC, RC4, ACCESS       ; LED is toggled
                      00152         ENDM
                      00153 
                      00154 LED_SAMPLE_TOGGLE       MACRO
                      00155         btg             LATC, RC3, ACCESS       ; LED is toggled
                      00156         ENDM
                      00157 
                      00158 #endif  ; #ifdef LED_STEADY_STATE_DISABLED
                      00159 
                      00160 #else   ; #ifndef THROUGH_HOLE_PCB
                      00161 
                      00162 #ifdef  LED_STEADY_STATE_DISABLED
                      00163 
                      00164 LED_SINE_ON     MACRO
                      00165 #ifndef LED_POLARITY_REVERSED
                      00166         bcf             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00167 #else
                      00168         bsf             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00169 #endif
                      00170         ENDM
                      00171 
                      00172 LED_SQUARE_ON   MACRO
                      00173 #ifndef LED_POLARITY_REVERSED
                      00174         bcf             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00175 #else
                      00176         bsf             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00177 #endif
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00178         ENDM
                      00179 
                      00180 LED_SAMPLE_ON   MACRO
                      00181 #ifndef LED_POLARITY_REVERSED
                      00182         bcf             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00183 #else
                      00184         bsf             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00185 #endif
                      00186         ENDM
                      00187 
                      00188 LED_SINE_OFF    MACRO
                      00189 #ifndef LED_POLARITY_REVERSED
                      00190         bsf             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00191 #else
                      00192         bcf             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00193 #endif
                      00194         ENDM
                      00195 
                      00196 LED_SQUARE_OFF  MACRO
                      00197 #ifndef LED_POLARITY_REVERSED
                      00198         bsf             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00199 #else
                      00200         bcf             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00201 #endif
                      00202         ENDM
                      00203 
                      00204 LED_SAMPLE_OFF  MACRO
                      00205 #ifndef LED_POLARITY_REVERSED
                      00206         bsf             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00207 #else
                      00208         bcf             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00209 #endif
                      00210         ENDM
                      00211 
                      00212 LED_SINE_TOGGLE MACRO
                      00213         btg             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00214         ENDM
                      00215 
                      00216 LED_SQUARE_TOGGLE       MACRO
                      00217         btg             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00218         ENDM
                      00219 
                      00220 LED_SAMPLE_TOGGLE       MACRO
                      00221         btg             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00222         ENDM
                      00223         
                      00224 #else   ; #ifdef LED_STEADY_STATE_DISABLED
                      00225 
                      00226 LED_SINE_ON     MACRO
                      00227 #ifndef LED_POLARITY_REVERSED
                      00228         bcf             LATC, RC3, ACCESS       ; SINE LED
                      00229 #else
                      00230         bsf             LATC, RC3, ACCESS       ; SINE LED
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00231 #endif
                      00232         ENDM
                      00233 
                      00234 LED_SQUARE_ON   MACRO
                      00235 #ifndef LED_POLARITY_REVERSED
                      00236         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                      00237 #else
                      00238         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                      00239 #endif
                      00240         ENDM
                      00241 
                      00242 LED_SAMPLE_ON   MACRO
                      00243 #ifndef LED_POLARITY_REVERSED
                      00244         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                      00245 #else
                      00246         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                      00247 #endif
                      00248         ENDM
                      00249 
                      00250 LED_SINE_OFF    MACRO
                      00251 #ifndef LED_POLARITY_REVERSED
                      00252         bsf             LATC, RC3, ACCESS       ; SINE LED
                      00253 #else
                      00254         bcf             LATC, RC3, ACCESS       ; SINE LED
                      00255 #endif
                      00256         ENDM
                      00257 
                      00258 LED_SQUARE_OFF  MACRO
                      00259 #ifndef LED_POLARITY_REVERSED
                      00260         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                      00261 #else
                      00262         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                      00263 #endif
                      00264         ENDM
                      00265 
                      00266 LED_SAMPLE_OFF  MACRO
                      00267 #ifndef LED_POLARITY_REVERSED
                      00268         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                      00269 #else
                      00270         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                      00271 #endif
                      00272         ENDM
                      00273 
                      00274 LED_SINE_TOGGLE MACRO
                      00275         btg             LATC, RC3, ACCESS       ; SINE LED
                      00276         ENDM
                      00277 
                      00278 LED_SQUARE_TOGGLE       MACRO
                      00279         btg             LATC, RC4, ACCESS       ; SQUARE LED
                      00280         ENDM
                      00281 
                      00282 LED_SAMPLE_TOGGLE       MACRO
                      00283         btg             LATA, RA5, ACCESS       ; SAMPLE LED
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00284         ENDM
                      00285 
                      00286 #endif  ; #ifdef LED_STEADY_STATE_DISABLED
                      00287 
                      00288 #endif  ; #ifndef THROUGH_HOLE_PCB
                      00289 
                      00290 LED_SINE_TOGGLE_OTHERS_OFF      MACRO
                      00291         LED_SINE_TOGGLE
                      00292         LED_SQUARE_OFF
                      00293         LED_SAMPLE_OFF
                      00294         ENDM
                      00295 
                      00296 LED_SQUARE_TOGGLE_OTHERS_OFF    MACRO
                      00297         LED_SINE_OFF
                      00298         LED_SQUARE_TOGGLE
                      00299         LED_SAMPLE_OFF
                      00300         ENDM
                      00301 
                      00302 LED_SAMPLE_TOGGLE_OTHERS_OFF    MACRO
                      00303         LED_SINE_OFF
                      00304         LED_SQUARE_OFF
                      00305         LED_SAMPLE_TOGGLE
                      00306         ENDM
                      00307 
                      00308 LED_ALL_TOGGLE  MACRO
                      00309         LED_SINE_TOGGLE
                      00310         LED_SQUARE_TOGGLE
                      00311         LED_SAMPLE_TOGGLE
                      00312         ENDM
                      00313 
                      00314 LED_ALL_ON      MACRO
                      00315         LED_SINE_ON
                      00316         LED_SQUARE_ON
                      00317         LED_SAMPLE_ON
                      00318         ENDM
                      00319 
                      00320 LED_ALL_OFF     MACRO
                      00321         LED_SINE_OFF
                      00322         LED_SQUARE_OFF
                      00323         LED_SAMPLE_OFF
                      00324         ENDM
                      00325 
                      00326 LED_ONLY_SINE_ON        MACRO
                      00327         LED_SINE_ON
                      00328         LED_SQUARE_OFF
                      00329         LED_SAMPLE_OFF
                      00330         ENDM
                      00331 
                      00332 LED_ONLY_SQUARE_ON      MACRO
                      00333         LED_SINE_OFF
                      00334         LED_SQUARE_ON
                      00335         LED_SAMPLE_OFF
                      00336         ENDM
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00337 
                      00338 LED_ONLY_SAMPLE_ON      MACRO
                      00339         LED_SINE_OFF
                      00340         LED_SQUARE_OFF
                      00341         LED_SAMPLE_ON
                      00342         ENDM
                      00343 
                      00344 #endif  ; #ifndef _USERINTERFACEH_
                      00345 
                      00029 
                      00030 ;**********************************************************************
                      00031 ; DEFINITIONS
                      00032 ;**********************************************************************
                      00033         
                      00034 ;**********************************************************************
                      00035 ; LOCAL VARIABLES
                      00036 ;********************************************************************** 
                      00037 
                      00038 ;**********************************************************************
                      00039 ; LOCAL MACROS
                      00040 ;********************************************************************** 
                      00041 INC_PRESCALE_COUNTERS MACRO
                      00042         ; increment prescale counters, clear on match with SAMPLE_PRESCALE or WAVE_PRESCALE
                      00043         incf    samplePrescaleCounter, f, ACCESS
                      00044         movlw   SAMPLE_PRESCALE
                      00045         cpfslt  samplePrescaleCounter, ACCESS   
                      00046         clrf    samplePrescaleCounter, ACCESS
                      00047 
                      00048         incf    wavePrescaleCounter, f, ACCESS
                      00049         movlw   WAVE_PRESCALE
                      00050         cpfslt  wavePrescaleCounter, ACCESS
                      00051         clrf    wavePrescaleCounter, ACCESS
                      00052         
                      00053         ; adsrPrescaleCounter reset is handled by serviceADSR()
                      00054         incf    adsrPrescaleCounter + 0, f, ACCESS
                      00055         btfsc   STATUS, C, ACCESS
                      00056         incf    adsrPrescaleCounter + 1, f, ACCESS
                      00057         
                      00058         ENDM
                      00059         
                      00060 ;**********************************************************************
                      00061 ; High Priority Interrupts Service Routines
                      00062 ;**********************************************************************
                      00063 
00004C                00064 highPriorityISR
                      00065         ; Using fast return for high-priority interrupts so context saving is not necessary
                      00066         ; push working regs onto software stack
                      00067         PUSH_R  r0
00004C C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00068         PUSH_R  r1
000050 C004 FFDD          M         movff   r1,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00069         ; define variables to pushed registers
                      00070         #define address         r0
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00071         #define tmpValue        r1
                      00072         
                      00073         ;**********************************************************************
                      00074         ; ****************
                      00075         ; **** Timer2 ****
                      00076         ; ****************
                      00077 
                      00078         ;**** start procedure: check if Timer2 interrupt needs servicing ****
                      00079         ; is Timer2 interrupt enabled?
000054 A29D           00080         btfss   PIE1, TMR2IE, ACCESS
000056 EF?? F???      00081         goto    highPriorityISR_Timer2Done
                      00082         ; if Timer2 interrupt flag set?
00005A A29E           00083         btfss   PIR1, TMR2IF, ACCESS
00005C EF?? F???      00084         goto    highPriorityISR_Timer2Done
                      00085 
                      00086         ; clear Timer2 interrupt flag
                      00087         ; this will allow function to determine if another interrupt occurred during processing
                      00088         ; this is applicable for sample record routine which I suspect takes > 1 Timer2 interrupt period
                             to complete
                      00089         ; haven't tested this yet but code to handle event fixes sample record/playback rate disparity
000060 929E           00090         bcf             PIR1, TMR2IF, ACCESS
                      00091 
                      00092 #ifdef  LED_STEADY_STATE_DISABLED
                      00093         ; toggle ON LEDs to save precious mA.  Saves ~4mA over steady state current for single LED
                      00094         btfss   ledOnOffFlags, RA5, ACCESS
                      00095         btg             LATA, RA5, ACCESS       ; SINE LED
                      00096         btfsc   ledOnOffFlags, RA5, ACCESS
                      00097         bcf             LATA, RA5, ACCESS       ; SINE LED
                      00098         
                      00099         btfss   ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00100         btg             LATC, RC4, ACCESS       ; SQUARE LED
                      00101         btfsc   ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00102         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                      00103         
                      00104         btfss   ledOnOffFlags, RC3, ACCESS      ; SAMPLE LED
                      00105         btg             LATC, RC3, ACCESS       ; SAMPLE LED
                      00106         btfsc   ledOnOffFlags, RC3, ACCESS      ; SAMPLE LED
                      00107         bcf             LATC, RC3, ACCESS       ; SAMPLE LED    
                      00108 #endif
                      00109 
                      00110         ; process SAMPLE or WAVE prescale counter
                      00111         ; audio playback/sample clock is (PWM Base Clk / SAMPLE_PRESCALE)
                      00112         ; waveform playback clock is (PWM Base Clk / WAVE_PRESCALE)
                      00113         ; wait for appropriate prescale counter to be reset to 0 before processing next sound step
                      00114         ; if current mode SAMPLE? 
000062 0E02           00115         movlw   SAMPLE
000064 181E           00116         xorwf   waveShape, w, ACCESS
                      00117         ; not SAMPLE so check wavePrescale
000066 E1??           00118         bnz             highPriorityISRTimer2_prescaleNotSample
                      00119         ; is SAMPLE so check samplePrescale
000068 5221           00120         movf    samplePrescaleCounter, f, ACCESS
00006A E0??           00121         bz              highPriorityISRTimer2_prescaleOK
00006C EF?? F???      00122         goto    highPriorityISRTimer2_skipStep
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00123 
                      00124         ; playback mode is SINE or SQUARE wave so wait for wavePrescale counter to be reset to 0 before 
                            continuing
Warning[208]: Label truncated at 32 characters. (highPriorityISRTimer2_prescaleNotSample)
000070                00125 highPriorityISRTimer2_prescaleNotSample
000070 5222           00126         movf    wavePrescaleCounter, f, ACCESS
000072 E0??           00127         bz              highPriorityISRTimer2_prescaleOK
000074 EF?? F???      00128         goto    highPriorityISRTimer2_skipStep
000078                00129 highPriorityISRTimer2_prescaleOK
                      00130 
000078 EC?? F???      00131         call    processSoundState       
                      00132 
                      00133         ; if Timer2 interrupt flag is set then clear it and increment prescale counters twice
00007C A29E           00134         btfss   PIR1, TMR2IF, ACCESS
00007E D???           00135         bra             highPriorityISRTimer2_skipStep
                      00136         
                      00137         ; clear the flag
000080 929E           00138         bcf             PIR1, TMR2IF, ACCESS
                      00139         
                      00140         ; increment prescale counters, clear on match with SAMPLE_PRESCALE, WAVE_PRESCALE or ADSR_PRESCA
                            LE
                      00141         INC_PRESCALE_COUNTERS
                          M         ; increment prescale counters, clear on match with SAMPLE_PRESCALE or WAVE_PRESCALE
000082 2A21               M         incf    samplePrescaleCounter, f, ACCESS
000084 0E06               M         movlw   SAMPLE_PRESCALE
000086 6021               M         cpfslt  samplePrescaleCounter, ACCESS   
000088 6A21               M         clrf    samplePrescaleCounter, ACCESS
                          M 
00008A 2A22               M         incf    wavePrescaleCounter, f, ACCESS
00008C 0E02               M         movlw   WAVE_PRESCALE
00008E 6022               M         cpfslt  wavePrescaleCounter, ACCESS
000090 6A22               M         clrf    wavePrescaleCounter, ACCESS
                          M         
                          M         ; adsrPrescaleCounter reset is handled by serviceADSR()
000092 2A39               M         incf    adsrPrescaleCounter + 0, f, ACCESS
000094 B0D8               M         btfsc   STATUS, C, ACCESS
000096 2A3A               M         incf    adsrPrescaleCounter + 1, f, ACCESS
                          M         
                      00142 
000098                00143 highPriorityISRTimer2_skipStep
                      00144         ; increment prescale counters, clear on match with SAMPLE_PRESCALE, WAVE_PRESCALE or ADSR_PRESCA
                            LE
                      00145         INC_PRESCALE_COUNTERS
                          M         ; increment prescale counters, clear on match with SAMPLE_PRESCALE or WAVE_PRESCALE
000098 2A21               M         incf    samplePrescaleCounter, f, ACCESS
00009A 0E06               M         movlw   SAMPLE_PRESCALE
00009C 6021               M         cpfslt  samplePrescaleCounter, ACCESS   
00009E 6A21               M         clrf    samplePrescaleCounter, ACCESS
                          M 
0000A0 2A22               M         incf    wavePrescaleCounter, f, ACCESS
0000A2 0E02               M         movlw   WAVE_PRESCALE
0000A4 6022               M         cpfslt  wavePrescaleCounter, ACCESS
0000A6 6A22               M         clrf    wavePrescaleCounter, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         
                          M         ; adsrPrescaleCounter reset is handled by serviceADSR()
0000A8 2A39               M         incf    adsrPrescaleCounter + 0, f, ACCESS
0000AA B0D8               M         btfsc   STATUS, C, ACCESS
0000AC 2A3A               M         incf    adsrPrescaleCounter + 1, f, ACCESS
                          M         
                      00146                 
                      00147 
0000AE                00148 highPriorityISR_Timer2Done
                      00149 
                      00150 
                      00151         ;**********************************************************************
                      00152         ; **************
                      00153         ; **** INT0 ****
                      00154         ; **************
                      00155 
                      00156         ; if(INT0IE && INT0IF)
0000AE A8F2           00157         btfss   INTCON, INT0IE, ACCESS
0000B0 EF?? F???      00158         goto    highPriorityISR_INT0Done
0000B4 A2F2           00159         btfss   INTCON, INT0IF, ACCESS
0000B6 EF?? F???      00160         goto    highPriorityISR_INT0Done
                      00161 
                      00162         ;       INT0IF = 0;
0000BA 92F2           00163         bcf             INTCON, INT0IF, ACCESS
                      00164 
                      00165 #ifndef THROUGH_HOLE_PCB
                      00166         call    userInterface_incWaveform
                      00167 #else
0000BC EC?? F???      00168         call    userInterface_incMode
                      00169 #endif
                      00170         
0000C0                00171 highPriorityISR_INT0Done
                      00172 
                      00173         ; undefine variables from pushed registers
                      00174         #undefine       address
                      00175         #undefine       tmpValue
                      00176         ; pop working regs from software stack
                      00177         POP_R   r1
0000C0 CFDC F004          M         movff   softwareStackPointerPREINC, r1          ; ++softwareStackPointerINDF = regName
                      00178         POP_R   r0
0000C4 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00179         ; Using fast return for high-priority interrupts so context saving is not necessary
0000C8 0011           00180         retfie  FAST
                      00181 
                      00182         
                      00183 ;**********************************************************************
                      00184 ; Low Priority Interrupts Service Routines
                      00185 ;**********************************************************************
                      00186 
0000CA                00187 lowPriorityISR
                      00188         ; save context
0000CA 6E00           00189         movwf   wTmp, ACCESS
0000CC CFD8 F001      00190         movff   STATUS, statusTmp
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000D0 CFE0 F002      00191         movff   BSR, bsrTmp
                      00192 
                      00193         ; push working regs onto software stack
                      00194         PUSH_R  r0
0000D4 C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00195         ; define variables for pushed registers
                      00196         #define tmpValue        r0
                      00197 
                      00198         ;**********************************************************************
                      00199         ; **************
                      00200         ; **** UART ****
                      00201         ; **************
                      00202 
                      00203         ; if(RCIF)
0000D8 BA9E           00204         btfsc   PIR1, RCIF, ACCESS
0000DA EC?? F???      00205         call    processRxAsMIDI
                      00206 
                      00207 
                      00208         ;**********************************************************************
                      00209         ; **************
                      00210         ; **** INT1 ****
                      00211         ; **************
                      00212 
                      00213         ; if(INT1IE && INT1IF)
0000DE A6F0           00214         btfss   INTCON3, INT1IE, ACCESS
0000E0 EF?? F???      00215         goto    lowPriorityISR_INT1Done
0000E4 A0F0           00216         btfss   INTCON3, INT1IF, ACCESS
0000E6 EF?? F???      00217         goto    lowPriorityISR_INT1Done
                      00218 
                      00219         ;       INT1IF = 0;
0000EA 90F0           00220         bcf             INTCON3, INT1IF, ACCESS
                      00221 
                      00222         ;       recordOrPlayback = VOICE_THROUGH;
0000EC 0E00           00223         movlw   VOICE_THROUGH
0000EE 6E1F           00224         movwf   recordOrPlayback, ACCESS
                      00225 
                      00226         ; eliminate record switch noise by waiting for it to stop bouncing before dumping data to eeprom
                      00227         ; after record button is released, processSoundState() will begin decrementing recordWaitCountdo
                            wn...
                      00228         ; and not begin recording until recordWaitCountdown == 0
                      00229 
0000F0 0E1A           00230         movlw   RECORD_BUTTON_RELEASE_WAIT_TIME
0000F2 6E3B           00231         movwf   recordWaitCountdown, ACCESS
                      00232         
                      00233         ;       sampleDataBufferIndex = 0;
0000F4 6A11           00234         clrf    sampleDataBufferIndex, ACCESS           
                      00235         ;       sampleChunkCount = 0;
0000F6 6A12           00236         clrf    sampleChunkCount, ACCESS
                      00237         ;       sampleChunkReady = FALSE;
0000F8 9017           00238         bcf             eepromFlags, sampleChunkReady, ACCESS
                      00239         
0000FA                00240 lowPriorityISR_INT1Done
                      00241 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00242         ;**********************************************************************
                      00243         ; **************
                      00244         ; **** INT2 ****
                      00245         ; **************
                      00246 
                      00247         ; if(INT2IE && INT2IF)
0000FA A8F0           00248         btfss   INTCON3, INT2IE, ACCESS
0000FC EF?? F???      00249         goto    lowPriorityISR_INT2Done
000100 A2F0           00250         btfss   INTCON3, INT2IF, ACCESS
000102 EF?? F???      00251         goto    lowPriorityISR_INT2Done
                      00252 
                      00253         ;       INT2IF = 0;
000106 92F0           00254         bcf             INTCON3, INT2IF, ACCESS
                      00255 
                      00256 #ifndef THROUGH_HOLE_PCB
                      00257         call    userInterface_incMode
                      00258 #else
000108 EC?? F???      00259         call    userInterface_incWaveform
                      00260 #endif
                      00261         
00010C                00262 lowPriorityISR_INT2Done
                      00263 
                      00264         ;**********************************************************************
                      00265         ; ****************
                      00266         ; **** TIMER0 ****
                      00267         ; ****************
                      00268         ;
                      00269         ; Timer0 handles LED state updates based on current waveShape and mode
                      00270                 
                      00271         ; if(TMR0IE && TMR0IF)
00010C AAF2           00272         btfss   INTCON, TMR0IE, ACCESS
00010E EF?? F???      00273         goto    lowPriorityISR_TMR0Done
000112 A4F2           00274         btfss   INTCON, TMR0IF, ACCESS
000114 EF?? F???      00275         goto    lowPriorityISR_TMR0Done
                      00276 
000118 94F2           00277         bcf             INTCON, TMR0IF, ACCESS
                      00278                 
                      00279         ; if playbackOrRecord == VOICE_THROUGH or RECORD, then turn all LEDs ON
00011A 0E00           00280         movlw   VOICE_THROUGH
00011C 181F           00281         xorwf   recordOrPlayback, w, ACCESS
00011E E0??           00282         bz              lowPriorityISR_TMR0AllOn
000120 0E01           00283         movlw   RECORD
000122 181F           00284         xorwf   recordOrPlayback, w, ACCESS
000124 E1??           00285         bnz             lowPriorityISR_TMR0NotAllOn
000126                00286 lowPriorityISR_TMR0AllOn
                      00287         LED_ALL_ON      
                          M         LED_SINE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
000126 868B               M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_ON
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
000128 888B               M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
00012A 8A89               M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
00012C D???           00288         bra             lowPriorityISR_TMR0Done
                      00289 
00012E                00290 lowPriorityISR_TMR0NotAllOn
                      00291         ; check if waveShape == SINE
00012E 0E00           00292         movlw   SINE
000130 621E           00293         cpfseq  waveShape, ACCESS
000132 D???           00294         bra             lowPriorityISR_TMR0TrySq
                      00295 
                      00296         ; waveShape == SINE
                      00297         ; if ledBlinkRate == 0 then LED is steady state
000134 523C           00298         movf    ledBlinkRate, f, ACCESS
000136 E1??           00299         bnz             lowPriorityISR_TMR0SiBlink
                      00300         ; led is steady state
                      00301         LED_ONLY_SINE_ON
                          M         LED_SINE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
000138 868B               M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
00013A 988B               M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
00013C 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
00013E D???           00302         bra             lowPriorityISR_TMR0Done
000140                00303 lowPriorityISR_TMR0SiBlink
                      00304         ; led is blinking
000140 2E3D           00305         decfsz  ledBlinkCounter, f, ACCESS
000142 D???           00306         bra             lowPriorityISR_TMR0Done
                      00307         ; toggle the LED
                      00308         LED_SINE_TOGGLE_OTHERS_OFF
                          M         LED_SINE_TOGGLE
000144 768B               M         btg             LATC, RC3, ACCESS       ; SINE LED
                          M         LED_SQUARE_OFF
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
000146 988B               M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
000148 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
                      00309         ; reload the counter
00014A C03C F03D      00310         movff   ledBlinkRate, ledBlinkCounter   
00014E D???           00311         bra             lowPriorityISR_TMR0Done
                      00312 
000150                00313 lowPriorityISR_TMR0TrySq
                      00314         ; waveShape is != SINE so check if waveShape == SQUARE
000150 0E01           00315         movlw   SQUARE
000152 621E           00316         cpfseq  waveShape, ACCESS
000154 D???           00317         bra             lowPriorityISR_TMR0TrySa
                      00318 
                      00319         ; waveShape == SQUARE
                      00320         ; if ledBlinkRate == 0 then LED is steady state
000156 523C           00321         movf    ledBlinkRate, f, ACCESS
000158 E1??           00322         bnz             lowPriorityISR_TMR0SqBlink
                      00323         ; led is steady state
                      00324         LED_ONLY_SQUARE_ON
                          M         LED_SINE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
00015A 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
00015C 888B               M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
00015E 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
000160 D???           00325         bra             lowPriorityISR_TMR0Done
000162                00326 lowPriorityISR_TMR0SqBlink
                      00327         ; led is blinking
000162 2E3D           00328         decfsz  ledBlinkCounter, f, ACCESS
000164 D???           00329         bra             lowPriorityISR_TMR0Done
                      00330         ; toggle the LED
                      00331         LED_SQUARE_TOGGLE_OTHERS_OFF
                          M         LED_SINE_OFF
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
000166 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_TOGGLE
000168 788B               M         btg             LATC, RC4, ACCESS       ; SQUARE LED
                          M         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
00016A 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
                      00332         ; reload the counter
00016C C03C F03D      00333         movff   ledBlinkRate, ledBlinkCounter   
000170 D???           00334         bra             lowPriorityISR_TMR0Done
                      00335 
000172                00336 lowPriorityISR_TMR0TrySa
                      00337         ; waveShape is != SQUARE so assume that waveShape == SQUARE
                      00338         ; if ledBlinkRate == 0 then LED is steady state
000172 523C           00339         movf    ledBlinkRate, f, ACCESS
000174 E1??           00340         bnz             lowPriorityISR_TMR0SaBlink
                      00341         ; led is steady state
                      00342         LED_ONLY_SAMPLE_ON
                          M         LED_SINE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
000176 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
000178 988B               M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
00017A 8A89               M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
00017C D???           00343         bra             lowPriorityISR_TMR0Done
00017E                00344 lowPriorityISR_TMR0SaBlink
                      00345         ; led is blinking
00017E 2E3D           00346         decfsz  ledBlinkCounter, f, ACCESS
000180 D???           00347         bra             lowPriorityISR_TMR0Done
                      00348         ; toggle the LED
                      00349         LED_SAMPLE_TOGGLE_OTHERS_OFF
                          M         LED_SINE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000182 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
000184 988B               M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_TOGGLE
000186 7A89               M         btg             LATA, RA5, ACCESS       ; SAMPLE LED
                      00350         ; reload the counter
000188 C03C F03D      00351         movff   ledBlinkRate, ledBlinkCounter   
00018C D???           00352         bra             lowPriorityISR_TMR0Done
                      00353 
00018E                00354 lowPriorityISR_TMR0Done
                      00355 
                      00356         ; undefine variables from pushed registers
                      00357         #undefine       tmpValue
                      00358         ; pop working regs from software stack
                      00359         POP_R   r0
00018E CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00360 
                      00361         ; restore context
000192 C002 FFE0      00362         movff   bsrTmp, BSR
000196 5000           00363         movf    wTmp, w, ACCESS
000198 C001 FFD8      00364         movff   statusTmp, STATUS
                      00365         
                      00366         ; return from interrupt
00019C 0010           00367         retfie
                      00368         
                      00369         
                      00370         
                      00164 
                      00165         
                      00166 ;**********************************************************************
                      00167 ; MAINLINE CODE BEGIN
                      00168 ;**********************************************************************
                      00169 
00019E                00170 main
                      00171         ; all variables aside from softwareStack are in RAM BANK 0
                      00172         ; all single byte or 2-byte variables are in ACCESS RAM
00019E 0100           00173         BANKSEL 0
                      00174 
                      00175         ; dummy instruction to check "endOfVariables" location in disassembly
0001A0                00176 dummy_endOfVariables
0001A0 CFE8 F03F      00177         movff   WREG, endOfVariables
                      00178         
0001A4 EC?? F???      00179         call    initCore
0001A8 EC?? F???      00180         call    initInternalEEPROM
0001AC EC?? F???      00181         call    initExternalEEPROM
0001B0 EC?? F???      00182         call    initMIDI
0001B4 EC?? F???      00183         call    initSoundGen
0001B8 EC?? F???      00184         call    initUserInterface
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00185                 
                      00186         ; enable global interrupts
0001BC 8EF2           00187         bsf             INTCON, GIE, ACCESS
                      00188         
0001BE                00189 mainLoop        
                      00190         
                      00191         ; handle EEPROM reading / writing in mainline to minimize audio corruption
                      00192         ;
                      00193         ; check if waveShape is == SAMPLE
0001BE 0E02           00194         movlw   SAMPLE
0001C0 621E           00195         cpfseq  waveShape, ACCESS
0001C2 D???           00196         bra             mainNotSample
                      00197 
                      00198         ; if sampleChunkReady is set then write sampleDataBuffer to EEPROM
                      00199         ; ISR sets playback mode to PLAYBACK immediately after last chunk is complete...
                      00200         ; so always just write EEPROM when sampleChunkReady is set
0001C4 A017           00201         btfss   eepromFlags, sampleChunkReady, ACCESS
0001C6 D???           00202         bra             mainCheckPlayback
                      00203         ; flag is set so write it to EEPROM
0001C8 EC?? F???      00204         call    eepromWrite64
                      00205 
                      00206         ; clear the flag so that we know when next chunk is ready to go
0001CC 9017           00207         bcf             eepromFlags, sampleChunkReady, ACCESS
0001CE D???           00208         bra             mainNotSample
                      00209                 
0001D0                00210 mainCheckPlayback
                      00211         ; check if mode is PLAYBACK
0001D0 0E02           00212         movlw   PLAYBACK
0001D2 621F           00213         cpfseq  recordOrPlayback, ACCESS
0001D4 D???           00214         bra             mainNotSample
                      00215 ;       if((soundOn || turnSoundOn) && (waveShape == SAMPLE) && !sampleReady)
0001D6 BC10           00216         btfsc   midiFlags, soundOn, ACCESS
0001D8 D???           00217         bra             mainCheckSampleWaveshape
0001DA A610           00218         btfss   midiFlags, turnSoundOn, ACCESS
0001DC D???           00219         bra             mainNotSample
0001DE                00220 mainCheckSampleWaveshape
0001DE B217           00221         btfsc   eepromFlags, samplesLoaded, ACCESS
0001E0 D???           00222         bra             mainNotSample
                      00223 
                      00224         ; check if EEPROM is ready to read
0001E2 B617           00225         btfsc   eepromFlags, ready, ACCESS
0001E4 D???           00226         bra             mainEepromReady
                      00227         ; eeprom is not ready so reset activeOutputValues
0001E6 0E80           00228         movlw   PWM_IDLE_OUTPUT_VALUE
0001E8 6FE1           00229         movwf   activeOutputValues + 0
0001EA 6FE2           00230         movwf   activeOutputValues + 1
0001EC 6FE3           00231         movwf   activeOutputValues + 2
0001EE 6FE4           00232         movwf   activeOutputValues + 3
                      00233         ; last time we checked, EEPROM wasn't ready so check it again
0001F0 EC?? F???      00234         call    eepromReadStatusReg
                      00235         ; WREG = EEPROM Status Reg, (eepromFlags, ready) = (STATUS, !(NOT_READY))
0001F4 B0E8           00236         btfsc   WREG, NOT_RDY, ACCESS
                      00237         ; NOT_READY bit in EEPROM Status register is set so don't do EEPROM read
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0001F6 D???           00238         bra             mainNotSample
                      00239         ; NOT_READY bit in EEPROM Status register is clear so set 'ready' flag and read the eeprom
0001F8 8617           00240         bsf             eepromFlags, ready, ACCESS
                      00241         
0001FA                00242 mainEepromReady
                      00243         ; get sample(s)
0001FA C0B1 F015      00244         movff   nextSampleAddresses + 0, nextSampleAddress
0001FE C0B2 F016      00245         movff   nextSampleAddresses + 1, nextSampleAddress + 1
                      00246         ; it pains me to put this sample address reversal code here as a macro but...
                      00247         ; but can't spare the cycles in processSoundState() to modify nextSampleAddress
                      00248         REVERSE_SAMPLE_IF_MOD_OVER_63
  0000                    M         local exitMacro
                          M         ; if modulation > 63 then reverse sample
000202 0E3F               M         movlw   63
000204 641D               M         cpfsgt  modulation, ACCESS
000206 D???               M         bra             exitMacro
                          M         ; modulation > 63 so do nextSampleAddress = (sampleEndAddress - nextSampleAddress)
000208 5015               M         movf    nextSampleAddress, w, ACCESS
00020A 5C13               M         subwf   sampleEndAddress, w, ACCESS
00020C 6E15               M         movwf   nextSampleAddress, ACCESS
00020E 5016               M         movf    nextSampleAddress + 1, w, ACCESS
000210 5814               M         subwfb  sampleEndAddress + 1, w, ACCESS
000212 6E16               M         movwf   nextSampleAddress + 1, ACCESS
000214                    M exitMacro
000214 EC?? F???      00249         call    eepromReadSingleByte
                      00250         ; save read value to output register
000218 6FE1           00251         movwf   activeOutputValues + 0
                      00252 
                      00253         ; continue process if poly
00021A 0E01           00254         movlw   1
00021C 6423           00255         cpfsgt  polyDepth, ACCESS
00021E D???           00256         bra             mainSampleMono
                      00257 
                      00258         ; get sample(s)
000220 C0B3 F015      00259         movff   nextSampleAddresses + 2, nextSampleAddress
000224 C0B4 F016      00260         movff   nextSampleAddresses + 3, nextSampleAddress + 1
                      00261         REVERSE_SAMPLE_IF_MOD_OVER_63
  0000                    M         local exitMacro
                          M         ; if modulation > 63 then reverse sample
000228 0E3F               M         movlw   63
00022A 641D               M         cpfsgt  modulation, ACCESS
00022C D???               M         bra             exitMacro
                          M         ; modulation > 63 so do nextSampleAddress = (sampleEndAddress - nextSampleAddress)
00022E 5015               M         movf    nextSampleAddress, w, ACCESS
000230 5C13               M         subwf   sampleEndAddress, w, ACCESS
000232 6E15               M         movwf   nextSampleAddress, ACCESS
000234 5016               M         movf    nextSampleAddress + 1, w, ACCESS
000236 5814               M         subwfb  sampleEndAddress + 1, w, ACCESS
000238 6E16               M         movwf   nextSampleAddress + 1, ACCESS
00023A                    M exitMacro
00023A EC?? F???      00262         call    eepromReadSingleByte
                      00263         ; save read value to output register
00023E 6FE2           00264         movwf   activeOutputValues + 1
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00265 
                      00266         ; get sample(s)
000240 C0B5 F015      00267         movff   nextSampleAddresses + 4, nextSampleAddress
000244 C0B6 F016      00268         movff   nextSampleAddresses + 5, nextSampleAddress + 1
                      00269         REVERSE_SAMPLE_IF_MOD_OVER_63
  0000                    M         local exitMacro
                          M         ; if modulation > 63 then reverse sample
000248 0E3F               M         movlw   63
00024A 641D               M         cpfsgt  modulation, ACCESS
00024C D???               M         bra             exitMacro
                          M         ; modulation > 63 so do nextSampleAddress = (sampleEndAddress - nextSampleAddress)
00024E 5015               M         movf    nextSampleAddress, w, ACCESS
000250 5C13               M         subwf   sampleEndAddress, w, ACCESS
000252 6E15               M         movwf   nextSampleAddress, ACCESS
000254 5016               M         movf    nextSampleAddress + 1, w, ACCESS
000256 5814               M         subwfb  sampleEndAddress + 1, w, ACCESS
000258 6E16               M         movwf   nextSampleAddress + 1, ACCESS
00025A                    M exitMacro
00025A EC?? F???      00270         call    eepromReadSingleByte
                      00271         ; save read value to output register
00025E 6FE3           00272         movwf   activeOutputValues + 2
                      00273 
                      00274         ; get sample(s)
000260 C0B7 F015      00275         movff   nextSampleAddresses + 6, nextSampleAddress
000264 C0B8 F016      00276         movff   nextSampleAddresses + 7, nextSampleAddress + 1
                      00277         REVERSE_SAMPLE_IF_MOD_OVER_63
  0000                    M         local exitMacro
                          M         ; if modulation > 63 then reverse sample
000268 0E3F               M         movlw   63
00026A 641D               M         cpfsgt  modulation, ACCESS
00026C D???               M         bra             exitMacro
                          M         ; modulation > 63 so do nextSampleAddress = (sampleEndAddress - nextSampleAddress)
00026E 5015               M         movf    nextSampleAddress, w, ACCESS
000270 5C13               M         subwf   sampleEndAddress, w, ACCESS
000272 6E15               M         movwf   nextSampleAddress, ACCESS
000274 5016               M         movf    nextSampleAddress + 1, w, ACCESS
000276 5814               M         subwfb  sampleEndAddress + 1, w, ACCESS
000278 6E16               M         movwf   nextSampleAddress + 1, ACCESS
00027A                    M exitMacro
00027A EC?? F???      00278         call    eepromReadSingleByte
                      00279         ; save read value to output register
00027E 6FE4           00280         movwf   activeOutputValues + 3
                      00281         
                      00282 
000280                00283 mainSampleMono
                      00284         ; set sampleReady flag so ISR will update address
000280 8217           00285         bsf             eepromFlags, samplesLoaded, ACCESS
                      00286 
000282                00287 mainNotSample
                      00288 
                      00289         ; call getActiveNoteDeltas() needRefresh flag is set
000282 A418           00290         btfss   soundGenFlags, needRefresh, ACCESS
000284 D???           00291         bra             mainLoop_noRefresh
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00292         ; immediately clear the flag.  Was previously clearing after return from getActiveNoteDeltas but
                             notes would 
                      00293         ; ocassionally hang on last note if flag was set in ISR during getActiveNoteDeltas execution
000286 9418           00294         bcf             soundGenFlags, needRefresh, ACCESS      
                      00295         ; need refresh so call for it
000288 EC?? F???      00296         call    getActiveNoteDeltas
00028C                00297 mainLoop_noRefresh
                      00298 
00028C EC?? F???      00299         call    serviceADSR
                      00300 
000290 EF?? F???      00301         goto    mainLoop
                      00302 
                      00303 ;**********************************************************************
                      00304         
                      00305         #include        "../source/init.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      init.asm                                          *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 ;**********************************************************************
                      00022 ; INCLUDE FILES
                      00023 ;**********************************************************************
                      00024 
                      00025 ;**********************************************************************
                      00026 ; LOCAL FUNCTIONS
                      00027 ;**********************************************************************
                      00028 
                      00029 ;**********************************************************************
                      00030 ; Function: void initCore()
                      00031 ;**********************************************************************
                      00032 
000294                00033 initCore
000294 EC?? F???      00034         call initOsc
000298 EC?? F???      00035         call initIO
00029C EC?? F???      00036         call initUART
0002A0 EC?? F???      00037         call initTimer0
0002A4 EC?? F???      00038         call initTimer1
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002A8 EC?? F???      00039         call initTimer2
0002AC EC?? F???      00040         call initCCP
0002B0 EC?? F???      00041         call initSPI
0002B4 EC?? F???      00042         call initADC
0002B8 EC?? F???      00043         call initInterrupts
0002BC EC?? F???      00044         call initRAM
0002C0 EC?? F???      00045         call initHeap
0002C4 0012           00046         return
                      00047                 
                      00048         
                      00049 ;**********************************************************************
                      00050 ; Function: void initOsc()
                      00051 ;**********************************************************************
                      00052 
0002C6                00053 initOsc
                      00054         ; configure for internal clock at 8Mhz & 4x PLL = 32Mhz
                      00055         ; primary clock determined by FOSC<3:0>
                      00056         ; confirgure internal osc for 8Mhz
0002C6 8CD3           00057         bsf             OSCCON, IRCF2, ACCESS
0002C8 8AD3           00058         bsf             OSCCON, IRCF1, ACCESS
0002CA 98D3           00059         bcf             OSCCON, IRCF0, ACCESS
0002CC                00060 initOsc_lp1
                      00061         ; wait for internal high freq osc to stabilize
                      00062 
                      00063 #ifdef  PIC18LF13K50
                      00064 ; "pic18lf13k50.inc" lists bit as "IOFS" but datasheet calls it "HFIOFS"
                      00065         btfss   OSCCON, IOFS, ACCESS
                      00066 #endif
                      00067 #ifdef  PIC18LF14K22
0002CC A4D3           00068         btfss   OSCCON, HFIOFS, ACCESS
                      00069 #endif
                      00070         
                      00071         
0002CE D???           00072         bra             initOsc_lp1
                      00073 
                      00074         ; enable PLL
Error[113]  : Symbol not previously defined (SPLLEN)
0002D0 809B           00075         bsf             OSCTUNE, SPLLEN, ACCESS
                      00076 
0002D2 0012           00077         return
                      00078 
                      00079 
                      00080 ;**********************************************************************
                      00081 ; Function: void initIO()
                      00082 ;**********************************************************************
                      00083 
0002D4                00084 initIO
                      00085         ; IO Summary
                      00086         ; 
                      00087         ; (organized by pin #)
                      00088         ; Pin   Port    Assignment
                      00089         ; ---  ----     ----------
                      00090         ; 1             VDD             VDD
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00091         ; 2             RA5             LED (Sine)
                      00092         ; 3             RA4             Audio In
                      00093         ; 4             RA3             ICSP
                      00094         ; 5             RC5             Audio Out
                      00095         ; 6             RC4             LED (Square)
                      00096         ; 7             RC3             LED (Sample)
                      00097         ; 8             RC6             EEPROM Chip Select
                      00098         ; 9             RC7             EEPROM Slave In
                      00099         ; 10    RB7             [Not Connected]
                      00100         ; 11    RB6             EEPROM Clock
                      00101         ; 12    RB5             MIDI In
                      00102         ; 13    RB4             EEPROM Slave Out
                      00103         ; 14    RC2             Switch (MIDI Record / Playback)
                      00104         ; 15    RC1             Switch (Voice Through / Record)
                      00105         ; 16    RC0             Switch (Waveform)
                      00106         ; 17    VUSB    [Not Connected]
                      00107         ; 18    RA1             ICSP
                      00108         ; 19    RA0             ICSP
                      00109         ; 20    VSS             VSS
                      00110         ;
                      00111         ; [PORT A]
                      00112         ; Pin   Port    Assignment                                                      Direction
                      00113         ; ---  ----             ----------                                                      --------
                            -
                      00114         ; 19    RA0             ICSP                                                            IN
                      00115         ; 18    RA1             ICSP                                                            IN
                      00116         ; 4             RA3             ICSP                                                            
                            IN
                      00117         ; 3             RA4             Audio In                                                        
                            IN
                      00118         ; 2             RA5             LED (Sine)                                                      
                            OUT
                      00119 
0002D4 8A89           00120         bsf             LATA, RA5, ACCESS       ; LED is off
0002D6 0EDF           00121         movlw   0xff ^ 1<<RA5
0002D8 6E92           00122         movwf   TRISA, ACCESS
                      00123 
                      00124         ; [PORT B]
                      00125         ; Pin   Port    Assignment                                                      Direction
                      00126         ; ---  ----             ----------                                                      --------
                            -
                      00127         ; 13    RB4             EEPROM Slave Out                                        IN
                      00128         ; 12    RB5             MIDI In                                                         IN
                      00129         ; 11    RB6             EEPROM Clock                                            OUT
                      00130         ; 10    RB7             [Not Connected]                                         IN
                      00131 
0002DA 0EBF           00132         movlw   0xff ^ 1<<RB6   ; EEPROM clock is LOW
0002DC 6E8A           00133         movwf   LATB, ACCESS
0002DE 0EBF           00134         movlw   0xff ^ 1<<RB6
0002E0 6E93           00135         movwf   TRISB, ACCESS
                      00136         
                      00137         ; [PORT C]
                      00138         ; Pin   Port    Assignment                                                      Direction
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00139         ; ---  ----             ----------                                                      --------
                            -
                      00140         ; 16    RC0             Switch (Waveform)                                       IN
                      00141         ; 15    RC1             Switch (Voice Through / Record)         IN
                      00142         ; 14    RC2             Switch (MIDI Record / Playback)         IN
                      00143         ; 7             RC3             LED (Sample)                                            OUT
                      00144         ; 6             RC4             LED (Square)                                            OUT
                      00145         ; 5             RC5             Audio Out                                                       
                            OUT
                      00146         ; 8             RC6             EEPROM Chip Select                                      OUT
                      00147         ; 9             RC7             EEPROM Slave In                                         OUT
                      00148         
0002E2 868B           00149         bsf             LATC, RC3, ACCESS       ; LED is off
0002E4 888B           00150         bsf             LATC, RC4, ACCESS       ; LED is off
0002E6 9A8B           00151         bcf             LATC, RC5, ACCESS       ; Audio out is low
0002E8 8C8B           00152         bsf             LATC, RC6, ACCESS       ; Chip select is idle
0002EA 0E07           00153         movlw   0x07
0002EC 6E94           00154         movwf   TRISC, ACCESS
                      00155         
                      00156         ; [General IO]
0002EE 9EF1           00157         bcf             INTCON2, NOT_RABPU, ACCESS      ; enable PORT A & B pullups per WPU registers
0002F0 0E08           00158         movlw   1<<ANS3 ; ANS3 = RA4(Audio In)
0002F2 6E7E           00159         movwf   ANSEL, ACCESS   ; enable digital input buffers for all non-analog inputs
0002F4 6A7F           00160         clrf    ANSELH, ACCESS  ; enable digital input buffers for all non-analog inputs        
0002F6 0012           00161         return
                      00162         
                      00163         
                      00164 ;**********************************************************************
                      00165 ; Function: void initUART()
                      00166 ;**********************************************************************
                      00167 
0002F8                00168 initUART
0002F8 0E0F           00169         movlw   15      ; 31.25K baud rate @ 32Mhz clock
0002FA 6EAF           00170         movwf   SPBRG, ACCESS
                      00171         ; Enable serial port
                      00172         ; Enable reception
0002FC 8EAB           00173         bsf             RCSTA, SPEN, ACCESS
0002FE 88AB           00174         bsf             RCSTA, CREN, ACCESS
                      00175         ; Enable transmission
000300 8AAC           00176         bsf             TXSTA, TXEN, ACCESS
000302 0012           00177         return
                      00178 
                      00179 
                      00180 ;**********************************************************************
                      00181 ; Function: void initTimer0()
                      00182 ;**********************************************************************
                      00183 
000304                00184 initTimer0
                      00185         ; timer is on
                      00186         ; 16-bit mode
000304 9CD5           00187         bcf     T0CON, T08BIT, ACCESS
                      00188         ; clock = internal
000306 9AD5           00189         bcf             T0CON, T0CS, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00190         ; timer0 using prescaler
                      00191         ; prescale = 1:8
                      00192         ; Fosc = 32Mhz. 1/((32Mhz/4)/ 8) * overflowValue(==65536) = overflow every 65.536mS)
000308 96D5           00193         bcf             T0CON, PSA, ACCESS
00030A 94D5           00194         bcf             T0CON, T0PS2, ACCESS
00030C 82D5           00195         bsf             T0CON, T0PS1, ACCESS    
00030E 90D5           00196         bcf             T0CON, T0PS0, ACCESS    
                      00197 
000310 0012           00198         return
                      00199 
                      00200 
                      00201 ;**********************************************************************
                      00202 ; Function: void initTimer1()
                      00203 ;**********************************************************************
                      00204 
000312                00205 initTimer1
                      00206         ; DO NOT ENABLE TIMER1 OR SDO WILL NOT WORK!
000312 0012           00207         return
                      00208 
                      00209 
                      00210 ;**********************************************************************
                      00211 ; Function: void initTimer2()
                      00212 ;**********************************************************************
                      00213 
000314                00214 initTimer2
                      00215 
                      00216         ; Turn on Timer2
000314 84CA           00217         bsf             T2CON, TMR2ON, ACCESS
                      00218         ; Using default power-on prescale of 1:1
                      00219         ; Reset and interrupt on match value
000316 0EFF           00220         movlw   255
000318 6ECB           00221         movwf   PR2, ACCESS
                      00222         ; Timer2 configured for 32uS interrupt period
                      00223         ; (SYS_OSC / PERIPH_CLK_DIV) / PR2 = period
                      00224         ; (32Mhz / 4) / 256 = 32uS
00031A 0012           00225         return
                      00226         
                      00227 
                      00228 ;**********************************************************************
                      00229 ; Function: void initCCP()
                      00230 ;**********************************************************************
                      00231 
00031C                00232 initCCP
                      00233         ; PWM single output
                      00234         ; PWM mode; P1A, P1C active-high; P1B, P1D active-high
                      00235         ; 10-bit PWM bits [1:0] = 0b11
00031C 86BD           00236         bsf             CCP1CON, CCP1M3, ACCESS
00031E 84BD           00237         bsf             CCP1CON, CCP1M2, ACCESS
                      00238 
000320 6ABE           00239         clrf    CCPR1L, ACCESS  
000322 0012           00240         return
                      00241 
                      00242 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00243 ;**********************************************************************
                      00244 ; Function: void initSPI()
                      00245 ;**********************************************************************
                      00246 
000324                00247 initSPI
                      00248         ; serial port enabled
                      00249         ; idle clock is LOW
                      00250         ; mode is SPI master, clock = Fosc/4 = 8MHz
000324 8AC6           00251         bsf             SSPCON1, SSPEN, ACCESS
                      00252 
                      00253         ; input data latched on idle->active
                      00254         ; output data latched on active->idle clock
000326 8CC7           00255         bsf             SSPSTAT, CKE, ACCESS
000328 0012           00256         return
                      00257         
                      00258 
                      00259 ;**********************************************************************
                      00260 ; Function: void initADC()
                      00261 ;**********************************************************************
                      00262 
00032A                00263 initADC
                      00264         ; channel = AN3
                      00265         ; ADC is on
00032A 86C2           00266         bsf             ADCON0, CHS1, ACCESS    
00032C 84C2           00267         bsf             ADCON0, CHS0, ACCESS    
00032E 80C2           00268         bsf             ADCON0, ADON, ACCESS    
                      00269         
                      00270         ; positive reference is internal VDD
                      00271         ; negative reference is internal VSS
                      00272 
                      00273         ; left justify result
                      00274         ; acquisition time = 4 tad
                      00275         ; clock source = Fosc/32 = 32Mhz/32 = 1Mhz, TAD = 1uS
000330 88C0           00276         bsf             ADCON2, ACQT1, ACCESS
000332 82C0           00277         bsf             ADCON2, ADCS1, ACCESS
000334 0012           00278         return
                      00279 
                      00280 
                      00281 ;**********************************************************************
                      00282 ; Function: void initInterrupts()
                      00283 ;**********************************************************************
                      00284 
000336                00285 initInterrupts
                      00286         ; Enable interrupt priorities           
000336 8ED0           00287         bsf             RCON, IPEN, ACCESS
                      00288         
                      00289         ; unmask peripheral interrupts
                      00290         ; enable timer0 interrupts
                      00291         ; enable INT0 interrupts
                      00292         ; clear timer0 int flag
                      00293         ; clear INT0 int flag
000338 8CF2           00294         bsf             INTCON, PEIE, ACCESS
00033A 8AF2           00295         bsf             INTCON, TMR0IE, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00033C 88F2           00296         bsf             INTCON, INT0IE, ACCESS
00033E 94F2           00297         bcf             INTCON, TMR0IF, ACCESS
000340 92F2           00298         bcf             INTCON, INT0IF, ACCESS
                      00299         
                      00300         ; INT0 interrupt on falling edge
                      00301         ; INT1 interrupt on falling edge
                      00302         ; INT2 interrupt on falling edge
                      00303         ; Interrupt priority is low
000342 9CF1           00304         bcf             INTCON2, INTEDG0, ACCESS
000344 9AF1           00305         bcf             INTCON2, INTEDG1, ACCESS
000346 98F1           00306         bcf             INTCON2, INTEDG2, ACCESS
000348 94F1           00307         bcf             INTCON2, TMR0IP, ACCESS
                      00308                 
                      00309         ; INT2 is low Priority interrupt
                      00310         ; INT1 is low Priority interrupt
                      00311         ; enable INT2 interrupts
                      00312         ; enable INT1 interrupts
                      00313         ; clear INT2 int flag
                      00314         ; clear INT1 int flag
00034A 9EF0           00315         bcf             INTCON3, INT2IP, ACCESS
00034C 9CF0           00316         bcf             INTCON3, INT1IP, ACCESS
00034E 88F0           00317         bsf             INTCON3, INT2IE, ACCESS
000350 86F0           00318         bsf             INTCON3, INT1IE, ACCESS
000352 92F0           00319         bcf             INTCON3, INT2IF, ACCESS
000354 90F0           00320         bcf             INTCON3, INT1IF, ACCESS
                      00321                         
                      00322         ; UART RX is low priority interrupt     
000356 9A9F           00323         bcf             IPR1, RCIP, ACCESS
                      00324         
                      00325         ; clear timer2 int flag
000358 929E           00326         bcf             PIR1, TMR2IF, ACCESS            
                      00327         
                      00328         ; enable UART rx ints
                      00329         ; enable timer2 interrupts
00035A 8A9D           00330         bsf             PIE1, RCIE, ACCESS
00035C 829D           00331         bsf             PIE1, TMR2IE, ACCESS
00035E 0012           00332         return
                      00333         
                      00334 
                      00335 ;**********************************************************************
                      00336 ; Function: void initRAM()
                      00337 ;**********************************************************************
000360                00338 initRAM
                      00339         ; clear all general purpose RAM locations to 0x00
000360                00340 initRAM_bank0
                      00341         ; init pointer to start of BANK0
000360 6AE9           00342         clrf    FSR0L, ACCESS
000362 6AEA           00343         clrf    FSR0H, ACCESS
000364                00344 initRAM_bank0Lp
000364 6AEE           00345         clrf    POSTINC0, ACCESS
                      00346         ; BANK0 is done when FSR0 == 0x0100
000366 0E01           00347         movlw   1
000368 62EA           00348         cpfseq  FSR0H, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00036A D???           00349         bra             initRAM_bank0Lp
                      00350 
00036C                00351 initRAM_bank1
                      00352         ; PIC18LF13K50 does not implement BANK1 so skip it
                      00353 
00036C                00354 initRAM_bank2
                      00355         ; init pointer to start of BANK2
00036C 6AE9           00356         clrf    FSR0L, ACCESS
00036E 0E02           00357         movlw   0x02
000370 6EEA           00358         movwf   FSR0H, ACCESS
000372                00359 initRAM_bank2Lp
000372 6AEE           00360         clrf    POSTINC0, ACCESS
                      00361         ; BANK2 is done when FSR0 == 0x0300
000374 0E03           00362         movlw   3
000376 62EA           00363         cpfseq  FSR0H, ACCESS
000378 D???           00364         bra             initRAM_bank2Lp
                      00365 
                      00366         ; reset fsr address
00037A 6AE9           00367         clrf    FSR0L, ACCESS   
00037C 6AEA           00368         clrf    FSR0H, ACCESS   
00037E 0012           00369         return
                      00370 
                      00371 ;**********************************************************************
                      00372 ; Function: void initHeap()
                      00373 ;**********************************************************************
                      00374 
000380                00375 initHeap
000380 EE22 F0FF      00376         lfsr    softwareStackPointerFSR, softwareStackBaseAddress
000384 0012           00377         return
                      00378         
                      00379 
                      00380         
                      00306         #include        "../source/midi.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      midi.asm                                          *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00021         
                      00022 ;**********************************************************************
                      00023 ; INCLUDES
                      00024 ;**********************************************************************
                      00025 
                      00026         #include        "../header/midi.h"
                      00443 
                      00444 ;**********************************************************************
                      00445 ;                                                                     *
                      00446 ;    Project:       deMIDulator                                       *
                      00447 ;    Filename:      midi.h                                            *
                      00448 ;    Date:                                                            *
                      00449 ;    File Version:                                                    *
                      00450 ;                                                                     *
                      00451 ;    Author:        Derek Enos                                        *
                      00452 ;    Company:                                                         *
                      00453 ;                                                                     * 
                      00454 ;                                                                     *
                      00455 ;**********************************************************************
                      00456 ;                                                                     *
                      00457 ;    Files required:                                                  *
                      00458 ;                                                                     *
                      00459 ;                                                                     *
                      00460 ;                                                                     *
                      00461 ;**********************************************************************
                      00462 
                      00463 #ifndef _MIDIH_
                      00464 #define _MIDIH_
                      00465 
                      00466 
                      00467 ; ******************* MIDI SYSEX DEFINES ***********************
                      00468 #define         VENDOR_ID       0x77
                      00469 #define         DEVICE_ID       0x1D
                      00470 #define         TERMINAL_PACKET_COMMAND_VALUE   0x1E
                      00471 
                      00472 ; ******************* MIDI BUFFER SIZES ***********************
                      00473 
                      00474 #define         MAX_MIDI_MESSAGE_SIZE   24
                      00475 #define         ACTIVE_NOTE_TABLE_SIZE  25
                      00476 
                      00477 
                      00478 ; ******************* STATUS BYTE DEFINITONS ***********************
                      00479 
                      00480 ; Note that lower nybble (channel) should be masked out for comparison
                      00481 ;------------------------
                      00482 #define         NOTE_OFF                                0x80
                      00483 #define         NOTE_ON                                 0x90
                      00484 #define         KEY_PRESSURE                    0xA0
                      00485 #define         CONTROL_CHANGE                  0xB0
                      00486 #define         PROGRAM_CHANGE                  0xC0
                      00487 #define         CHANNEL_PRESSURE                0xD0
                      00488 #define         PITCH_WHEEL                             0xE0
                      00489 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00490 ; Sysex Status Byte Definitions
                      00491 #define         SYSEX                                   0xF0
                      00492 #define         EOX                                             0xF7
                      00493 
                      00494 #define         NOTE_OFF_MESSAGE_LENGTH                         3
                      00495 #define         NOTE_ON_MESSAGE_LENGTH                          3
                      00496 #define         KEY_PRESSURE_MESSAGE_LENGTH                     3
                      00497 #define         CONTROL_CHANGE_MESSAGE_LENGTH           3
                      00498 #define         PROGRAM_CHANGE_MESSAGE_LENGTH           2
                      00499 #define         CHANNEL_PRESSURE_MESSAGE_LENGTH         2
                      00500 #define         PITCH_WHEEL_MESSAGE_LENGTH                      3
                      00501 
                      00502 ; SysEx Sub Types
                      00503 ;----------------------------
                      00504 #define         NON_REAL_TIME                                           0x7E
                      00505 #define         GENERAL_INFORMATION                                     0x06
                      00506 #define         IDENTITY_REQUEST                                        0x01
                      00507 #define         IDENTITY_REPLY                                          0x02
                      00508 
                      00509 ; Control Change Data Types
                      00510 ;----------------------------
                      00511 #define         BANK_SELECT_MSB                                         0
                      00512 #define         MODULATION_WHEEL_MSB                            1
                      00513 #define         BREATH_CONTROLLER_MSB                           2
                      00514 #define         UNDEFINED_003                                           3
                      00515 #define         FOOT_CONTROLLER_MSB                                     4
                      00516 #define         PORTAMENTO_TIME                                         5
                      00517 #define         DATA_ENTRY_MSB                                          6
                      00518 #define         CHANNEL_VOLUME_MSB                                      7
                      00519 #define         BALANCE_MSB                                                     8
                      00520 #define         UNDEFINED_MSB                                           9
                      00521 #define         PAN_MSB                                                         10
                      00522 #define         EXPRESSION_MSB                                          11
                      00523 #define         EFFECT_CONTROL_1_MSB                            12
                      00524 #define         EFFECT_CONTROL_2_MSB                            13
                      00525 #define         UNDEFINED_014                                           14
                      00526 #define         UNDEFINED_015                                           15
                      00527 #define         GENERAL_PURPOSE_CONTROLLER_1_MSB        16
                      00528 #define         GENERAL_PURPOSE_CONTROLLER_2_MSB        17
                      00529 #define         GENERAL_PURPOSE_CONTROLLER_3_MSB        18
                      00530 #define         GENERAL_PURPOSE_CONTROLLER_4_MSB        19
                      00531 #define         UNDEFINED_020                                           20
                      00532 #define         UNDEFINED_021                                           21
                      00533 #define         UNDEFINED_022                                           22
                      00534 #define         UNDEFINED_023                                           23
                      00535 #define         UNDEFINED_024                                           24
                      00536 #define         UNDEFINED_025                                           25
                      00537 #define         UNDEFINED_026                                           26
                      00538 #define         UNDEFINED_027                                           27
                      00539 #define         UNDEFINED_028                                           28
                      00540 #define         UNDEFINED_029                                           29
                      00541 #define         UNDEFINED_030                                           30
                      00542 #define         UNDEFINED_031                                           31
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00543 #define         BANK_SELECT_LSB                                         32
                      00544 #define         MODULATION_WHEEL_LSB                            33
                      00545 #define         BREATH_CONTROLLER_LSB                           34
                      00546 #define         UNDEFINED_035                                           35
                      00547 #define         FOOT_CONTROLLER_LSB                                     36
                      00548 #define         PORTAMENTO_TIME_LSB                                     37
                      00549 #define         DATA_ENTRY_LSB                                          38
                      00550 #define         CHANNEL_VOLUME_LSB                                      39
                      00551 #define         BALANCE_LSB                                                     40
                      00552 #define         UNDEFINED_041                                           41
                      00553 #define         PAN_LSB                                                         42
                      00554 #define         EXPRESSION_LSB                                          43
                      00555 #define         EFFECT_CONTROL_1_LSB                            44
                      00556 #define         EFFECT_CONTROL_2_LSB                            45
                      00557 #define         UNDEFINED_046                                           46
                      00558 #define         UNDEFINED_047                                           47
                      00559 #define         GENERAL_PURPOSE_CONTROLLER_1_LSB        48
                      00560 #define         GENERAL_PURPOSE_CONTROLLER_2_LSB        49
                      00561 #define         GENERAL_PURPOSE_CONTROLLER_3_LSB        50
                      00562 #define         GENERAL_PURPOSE_CONTROLLER_4_LSB        51
                      00563 #define         UNDEFINED_052                                           52
                      00564 #define         UNDEFINED_053                                           53
                      00565 #define         UNDEFINED_054                                           54
                      00566 #define         UNDEFINED_055                                           55
                      00567 #define         UNDEFINED_056                                           56
                      00568 #define         UNDEFINED_057                                           57
                      00569 #define         UNDEFINED_058                                           58
                      00570 #define         UNDEFINED_059                                           59
                      00571 #define         UNDEFINED_060                                           60
                      00572 #define         UNDEFINED_061                                           61
                      00573 #define         UNDEFINED_062                                           62
                      00574 #define         UNDEFINED_063                                           63
                      00575 #define         SUSTAIN_PEDAL                                           64
                      00576 #define         PORTAMENTO_ONOFF                                        65
                      00577 #define         SOSTENUTO                                                       66
                      00578 #define         SOFT_PEDAL                                                      67
                      00579 #define         LEGATO_FOOTSWITCH                                       68
                      00580 #define         HOLD_2                                                          69
                      00581 #define         SOUND_CONTROLLER_1_DEFAULT_SOUND_VARIATION                              70
                      00582 #define         SOUND_CONTROLLER_2_DEFAULT_TIMBRE_HARMONIC_QUALITY              71
                      00583 #define         SOUND_CONTROLLER_3_DEFAULT_RELEASE_TIME                                 72
                      00584 #define         SOUND_CONTROLLER_4_DEFAULT_ATTACK_TIME                                  73
                      00585 #define         SOUND_CONTROLLER_5_DEFAULT_BRIGHTNESS                                   74
                      00586 #define         SOUND_CONTROLLER_6_GM2_DEFAULT_DECAY_TIME                               75
                      00587 #define         SOUND_CONTROLLER_7_GM2_DEFAULT_VIBRATO_RATE                             76
                      00588 #define         SOUND_CONTROLLER_8_GM2_DEFAULT_VIBRATO_DEPTH                    77
                      00589 #define         SOUND_CONTROLLER_9_GM2_DEFAULT_VIBRATO_DELAY                    78
                      00590 #define         SOUND_CONTROLLER_10_GM2_DEFAULT_UNDEFINED                               79
                      00591 #define         GENERAL_PURPOSE_CONTROLLER_5                                                    80
                      00592 #define         GENERAL_PURPOSE_CONTROLLER_6                                                    81
                      00593 #define         GENERAL_PURPOSE_CONTROLLER_7                                                    82
                      00594 #define         GENERAL_PURPOSE_CONTROLLER_8                                                    83
                      00595 #define         PORTAMENTO_CONTROL                                                                      
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                                    84
                      00596 #define         UNDEFINED_85                                                                    85
                      00597 #define         UNDEFINED_86                                                                    86
                      00598 #define         UNDEFINED_87                                                                    87
                      00599 #define         UNDEFINED_88                                                                    88
                      00600 #define         UNDEFINED_89                                                                    89
                      00601 #define         UNDEFINED_90                                                                    90
                      00602 #define         EFFECTS_1_DEPTH_DEFAULT_REVERB_SEND                             91
                      00603 #define         EFFECTS_2_DEPTH_DEFAULT_TREMOLO_DEPTH                   92
                      00604 #define         EFFECTS_3_DEPTH_DEFAULT_CHORUS_SEND                             93
                      00605 #define         EFFECTS_4_DEPTH_DEFAULT_CELESTE_[DETUNE]_DEPTH  94
                      00606 #define         EFFECTS_5_DEPTH_DEFAULT_PHASER_DEPTH                    95
                      00607 #define         DATA_INCREMENT                                                                  96
                      00608 #define         DATA_DECREMENT                                                                  97
                      00609 #define         NON_REG_PARAMETER_NUMBER_LSB                            98
                      00610 #define         NON_REG_PARAMETER_NUMBER_MSB                            99
                      00611 #define         REGISTERED_PARAMETER_NUMBER_LSB                                 100
                      00612 #define         REGISTERED_PARAMETER_NUMBERMSB                                  101
                      00613 #define         UNDEFINED_102                                           102
                      00614 #define         UNDEFINED_103                                           103
                      00615 #define         UNDEFINED_104                                           104
                      00616 #define         UNDEFINED_105                                           105
                      00617 #define         UNDEFINED_106                                           106
                      00618 #define         UNDEFINED_107                                           107
                      00619 #define         UNDEFINED_108                                           108
                      00620 #define         UNDEFINED_109                                           109
                      00621 #define         UNDEFINED_110                                           110
                      00622 #define         UNDEFINED_111                                           111
                      00623 #define         UNDEFINED_112                                           112
                      00624 #define         UNDEFINED_113                                           113
                      00625 #define         UNDEFINED_114                                           114
                      00626 #define         UNDEFINED_115                                           115
                      00627 #define         UNDEFINED_116                                           116
                      00628 #define         UNDEFINED_117                                           117
                      00629 #define         UNDEFINED_118                                           118
                      00630 #define         UNDEFINED_119                                           119
                      00631 #define         ALL_SOUND_OFF                                           120
                      00632 #define         RESET_ALL_CONTROLLERS                           121
                      00633 #define         LOCAL_CONTROL_ONOFF                                     122
                      00634 #define         ALL_NOTES_OFF                                           123
                      00635 #define         OMNI_MODE_OFF                                           124
                      00636 #define         OMNI_MODE_ON                                            125
                      00637 #define         POLY_MODE_OFF                                           126
                      00638 #define         POLY_MODE_ON                                            127
                      00639 
                      00640 
                      00641 ; ******************* MIDI MESSAGE STATES ***********************
                      00642 
                      00643 #define CHANNEL                                         0x00
                      00644 #define DATA_BYTE0                                      0x01
                      00645 #define DATA_BYTE1                                      0x02
                      00646 #define MESSAGE_COMPLETE                        0xFF
                      00647 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00648 #define NOTE_COMPLETE                           DATA_BYTE1
                      00649 #define AFTERTOUCH_COMPLETE                     DATA_BYTE1
                      00650 #define CONTROL_CHANGE_COMPLETE         DATA_BYTE1
                      00651 #define PROGRAM_CHANGE_COMPLETE         DATA_BYTE0
                      00652 #define PITCH_WHEEL_COMPLETE            DATA_BYTE1
                      00653 
                      00654 
                      00655 ; ******************* FLAG VARIABLE DEFINITIONS ***********************
                      00656 
                      00657 ; midiFlags (bits 3:7 free for use by other modules)
                      00658 #define uartState_rxInProgress                  0
                      00659 #define midiState_messageNeedsMapping   1
                      00660 #define midiThruModeEnabled                             2
                      00661 
                      00662 
                      00663 #endif
                      00027         
                      00028 ;**********************************************************************
                      00029 ; LOCAL VARIABLES
                      00030 ;**********************************************************************
                      00031 
                      00032         CBLOCK
                      00033 
  0000000B            00034                 midiState_lastStatus:1
  0000000C            00035                 midiState_lastLength:1
  0000000D            00036                 uartState_currentRxIndex:1
  0000000E            00037                 midiRxMessage_length:1
  0000000F            00038                 midiLastProgramValue:1
                      00039                         
  00000010            00040                 midiFlags:1
                      00041                 ; Bits defined in midi.h
                      00042                 ; #define uartState_rxInProgress                0
                      00043                 ; #define midiState_messageNeedsMapping 1
                      00044                 ; #define midiThroughMode_enabled               2
                      00045                 ; Bits 3:7 free for use by other modules
                      00046 
                      00047                 ; Declared at end of main.asm to ensure that arrays are pushed to end of memory...
                      00048                 ; with smaller variables in ACCESS memory
                      00049                 ; ---------------------------------------
                      00050                 ; midiRxMessage:MAX_MIDI_MESSAGE_SIZE
                      00051                 ; activeNoteTable:ACTIVE_NOTE_TABLE_SIZE
                      00052                                 
                      00053         ENDC
                      00054                         
                      00055 ;**********************************************************************
                      00056 ; LOCAL FUNCTIONS
                      00057 ;**********************************************************************
                      00058 
                      00059 ; [Function Summary]
                      00060 ;
                      00061 ; Function: initMIDI()
                      00062 ; Abstract: initializes MIDI state variables and flags
                      00063 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00064 ; Function: processRxAsMIDI()
                      00065 ; Abstract: reads rx byte from UART's RCREG and processes as incoming MIDI transaction
                      00066 ;           calls midiMessageMapper() when last byte of complete MIDI message has been received
                      00067 
                      00068 ; Function: midiMessageMapper()
                      00069 ; Abstract: determines type of received MIDI message and reacts
                      00070 ;           received Note On triggers call to activeNoteTableAdd()
                      00071 ;                       received Note Off triggers call to activeNoteTableRemove()
                      00072 ;                       received Pitch Wheel value is saved to variable pitchWheel
                      00073 
                      00074 
                      00075 ;**********************************************************************
                      00076 ; Function: void midiDebugTriggerHandler()
                      00077 ;**********************************************************************
                      00078 ; since the PIC18LF13K50 doesn't contain debugging hardware,
                      00079 ; I'm using this routine as a crude way to dump memory contents via MIDI output
                      00080 ; this code will only be include if MIDI_DEBUG_TRIGGER_ENABLED is #define(d)
                      00081 
                      00082 #IFDEF MIDI_DEBUG_TRIGGER_ENABLED
                      00083 midiDebugTriggerHandler
                      00084         PUSH_R  r0
                      00085         PUSH_R  FSR0L
                      00086         PUSH_R  FSR0H
                      00087         
                      00088         #define byteCount r0
                      00089 
                      00090         ; dump activeNoteTable
                      00091         ; start SysEx message
                      00092         movlw   SYSEX
                      00093         call    midiDebugTriggerHandler_SendByte
                      00094         ; init
                      00095         lfsr    FSR0, activeNoteTable
                      00096         movlw   ACTIVE_NOTE_TABLE_SIZE
                      00097         movwf   byteCount, ACCESS
                      00098 midiDebugTriggerHandler_antLp
                      00099         movf    byteCount, w, ACCESS
                      00100         sublw   ACTIVE_NOTE_TABLE_SIZE
                      00101         movf    PLUSW0, w, ACCESS
                      00102         ; empty activeNoteTable entry == 0xff which is not cool to send inside SysEx so compliment
                      00103         ; add 1 to WREG, if result is ZERO then value was 0xff so just send 0 value to port
                      00104         addlw   1
                      00105         btfss   STATUS, Z, ACCESS
                      00106         ; result was not ZERO so value was not 0xff. subtract 1 to restore original value
                      00107         sublw   1
                      00108         call    midiDebugTriggerHandler_SendByte
                      00109         decf    byteCount, f, ACCESS
                      00110         bnz             midiDebugTriggerHandler_antLp
                      00111         ; close SysEx message
                      00112         movlw   EOX
                      00113         call    midiDebugTriggerHandler_SendByte
                      00114 
                      00115         ; dump activeNoteDeltas
                      00116         ; start SysEx message
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00117         movlw   SYSEX
                      00118         call    midiDebugTriggerHandler_SendByte
                      00119         ; init
                      00120         lfsr    FSR0, activeNoteDeltas
                      00121         movlw   ACTIVE_NOTE_DELTAS_SIZE
                      00122         movwf   byteCount, ACCESS
                      00123 midiDebugTriggerHandler_andLp
                      00124         movf    byteCount, w, ACCESS
                      00125         sublw   ACTIVE_NOTE_TABLE_SIZE
                      00126         movf    PLUSW0, w, ACCESS
                      00127         ; activeNoteDeltas values are not SysEx friendly su just clear bit7 no matter what
                      00128         andlw   0x7f
                      00129         call    midiDebugTriggerHandler_SendByte
                      00130         decf    byteCount, f, ACCESS
                      00131         bnz             midiDebugTriggerHandler_andLp
                      00132         ; close SysEx message
                      00133         movlw   EOX
                      00134         call    midiDebugTriggerHandler_SendByte
                      00135 
                      00136         #undefine       byteCount
                      00137 
                      00138         POP_R   FSR0H
                      00139         POP_R   FSR0L
                      00140         POP_R   r0
                      00141 
                      00142         return
                      00143 
                      00144 
                      00145 midiDebugTriggerHandler_SendByte
                      00146         ; skip if TXREG is ready for writting
                      00147         btfss   PIR1, TXIF, ACCESS
                      00148         ; not ready so keep checking
                      00149         goto    midiDebugTriggerHandler_SendByte
                      00150         ; is ready so write it
                      00151         movwf TXREG, ACCESS
                      00152         return
                      00153 #ENDIF
                      00154 
                      00155 ;**********************************************************************
                      00156 ; Function: void initMIDI(void)
                      00157 ;**********************************************************************
                      00158 
000386                00159 initMIDI
                      00160         ; push working regs onto software stack
                      00161         PUSH_R  r0
000386 C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00162         PUSH_R  FSR0L
00038A CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00163         PUSH_R  FSR0H
00038E CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00164         ; define variables to pushed registers
                      00165         #define count                                   r0
                      00166         #define FSR_activeNoteTable             FSR0
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00167         #define POSTINC_activeNoteTable POSTINC0
                      00168                 
                      00169         ; load fsr
000392 EE00 F058      00170         lfsr    FSR_activeNoteTable, activeNoteTable    
                      00171         
000396 6A0B           00172         clrf    midiState_lastStatus, ACCESS
000398 6A0C           00173         clrf    midiState_lastLength, ACCESS
00039A 6A0D           00174         clrf    uartState_currentRxIndex, ACCESS
00039C 6A0E           00175         clrf    midiRxMessage_length, ACCESS
00039E 6A0F           00176         clrf    midiLastProgramValue, ACCESS
                      00177                                                 
0003A0 9010           00178         bcf             midiFlags, uartState_rxInProgress, ACCESS               
0003A2 9210           00179         bcf             midiFlags, midiState_messageNeedsMapping, ACCESS
                      00180         ; enable MIDI THRU mode
0003A4 8410           00181         bsf             midiFlags, midiThruModeEnabled, ACCESS  
                      00182 
0003A6 0E19           00183         movlw   ACTIVE_NOTE_TABLE_SIZE
0003A8 6E03           00184         movwf   count, ACCESS
0003AA 0EFF           00185         movlw   0xff
0003AC                00186 initMIDI_lp     
0003AC 6EEE           00187         movwf   POSTINC_activeNoteTable, ACCESS
0003AE 2E03           00188         decfsz  count, f, ACCESS
0003B0 D???           00189         bra             initMIDI_lp
                      00190                 
                      00191         ; undefine variables from pushed registers
                      00192         #undefine count
                      00193         #undefine FSR_activeNoteTable
                      00194         #undefine POSTINC_activeNoteTable
                      00195         ; pop working regs from software stack
                      00196         POP_R   FSR0H
0003B2 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00197         POP_R   FSR0L
0003B6 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00198         POP_R   r0
0003BA CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00199 
0003BE 0012           00200         return
                      00201 
                      00202 
                      00203 ;**********************************************************************
                      00204 ; Function: void processRxAsMIDI(RCREG)
                      00205 ;**********************************************************************
                      00206 
0003C0                00207 processRxAsMIDI
                      00208         ; push working regs onto software stack
                      00209         PUSH_R  r0
0003C0 C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00210         PUSH_R  r1
0003C4 C004 FFDD          M         movff   r1,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00211         PUSH_R  FSR0L
0003C8 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00212         PUSH_R  FSR0H
0003CC CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00213         ; define variables to pushed registers
                      00214         #define rxByte                          r0
                      00215         #define tmpValue                        r1      
                      00216         #define FSR_midiRxMessage       FSR0
                      00217         #define PLUSW_midiRxMessage     PLUSW0
                      00218 
                      00219         ; init FSR
0003D0 EE00 F040      00220         lfsr    FSR_midiRxMessage, midiRxMessage
                      00221         
                      00222         ;**** start procedure: read UART RX byte and check error states ****
0003D4                00223 processRxAsMIDI_readFIFO
                      00224         ; skip if framing error occurred for top unread char in rx FIFO
0003D4 A4AB           00225         btfss   RCSTA, FERR, ACCESS
                      00226         ; no framing error so read the character
0003D6 D???           00227         bra             processRxAsMIDI_readGO
                      00228         ; framing error occurred
                      00229         ; read incorrectly framed character out of FIFO
0003D8 50AE           00230         movf    RCREG, w, ACCESS
                      00231         ; skip if rx FIFO is empty
0003DA BA9E           00232         btfsc   PIR1, RCIF, ACCESS
                      00233         ; FIFO is not empty so try next character
0003DC D???           00234         bra             processRxAsMIDI_readFIFO
                      00235         ; all characters in FIFO were incorrectly framed, no data to process
                      00236         ; attempt to remedy: reset UART receiver by toggling Continous Receive Enable bit
0003DE 98AB           00237         bcf             RCSTA, CREN, ACCESS
0003E0 88AB           00238         bsf             RCSTA, CREN, ACCESS
                      00239         ; exit ISR
0003E2 EF?? F???      00240         goto    processRxAsMIDI_Exit
                      00241         
0003E6                00242 processRxAsMIDI_readGO
                      00243         ; save RX byte / clear RCIF
0003E6 CFAE F003      00244         movff   RCREG, rxByte
                      00245 
                      00246         ; if MIDI THRU mode is enabled then write byte to UART output
0003EA B410           00247         btfsc   midiFlags, midiThruModeEnabled, ACCESS
0003EC C003 FFAD      00248         movff   rxByte, TXREG
                      00249 
                      00250         ; check for rx buffer overrun
                      00251         ; skip if buffer overrun occurred
0003F0 A2AB           00252         btfss   RCSTA, OERR, ACCESS
0003F2 D???           00253         bra             processRxAsMIDI_noErrors
                      00254         ; reset UART receiver by toggling Continous Receive Enable bit
0003F4 98AB           00255         bcf             RCSTA, CREN, ACCESS
0003F6 88AB           00256         bsf             RCSTA, CREN, ACCESS
                      00257 
0003F8                00258 processRxAsMIDI_noErrors
                      00259 
                      00260         ; **** Notes About MIDI Message Handling Implementation ****
                      00261         ; 1. Only the following MIDI message types are currently supported:
                      00262         ;    * 1000nnnn : Note Off
                      00263         ;    * 1001nnnn : Note On
                      00264         ;    * 1011nnnn : Control Change
                      00265         ;    * 1100nnnn : Program Change
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00266         ;    * 1110nnnn : Pitch Wheel
                      00267         ;    * 11110000 : System Exclusive
                      00268         ;    * 11111111 : Reset
                      00269         ; 2. Status values above SysEx (0xF0) are not currently supported
                      00270         ;    Unsupported common messages include:
                      00271         ;    * 11110001 : MIDI Time Code Quarter Frame
                      00272         ;    * 11110010 : Song Position Pointer
                      00273         ;    * 11110011 : Song Select
                      00274         ;    * 11110110 : Tune Request
                      00275         ;    * 11111000 : Timing Clock
                      00276         ;    * 11111010 : Start
                      00277         ;    * 11111011 : Continue
                      00278         ;    * 11111100 : Stop
                      00279         ;    * 11111110 : Active Sense
                      00280         
                      00281         ;**** start procedure: is STATUS? ****
                      00282         ; if bit 7 is set then received byte is STATUS
0003F8 AE03           00283         btfss   rxByte, 7, ACCESS
0003FA D???           00284         bra             processRxAsMIDI_notStatusOrIsEOX
                      00285         ; ignore > SysEx (0xF0) values as STATUS but continue to process as non-STATUS to capture EOX
                      00286         ; 
0003FC 0EF0           00287         movlw   SYSEX
                      00288         ; compare f with W, skip if f > W
0003FE 6403           00289         cpfsgt  rxByte, ACCESS
000400 D???           00290         bra             processRxAsMIDI_getLength
000402 D???           00291         bra             processRxAsMIDI_notStatusOrIsEOX
                      00292 
                      00293         ;**** start procedure: get message length ****
000404                00294 processRxAsMIDI_getLength
                      00295         ; midiRxMessage_length = length of MIDI message type
                      00296         ; midiRxMessage_length of 0x0 is used to indicate unsupported message types
000404 6A0E           00297         clrf    midiRxMessage_length, ACCESS
                      00298         
                      00299         ; mask out channel data and save in tmpValue
000406 5003           00300         movf    rxByte, w, ACCESS
000408 0BF0           00301         andlw   0xF0
00040A 6E04           00302         movwf   tmpValue, ACCESS
                      00303         
                      00304         ; Check if STATUS is a 2-byte message type
                      00305         ; case PROGRAM_CHANGE
00040C 0EC0           00306         movlw   PROGRAM_CHANGE
00040E 1804           00307         xorwf   tmpValue, w, ACCESS
000410 E0??           00308         bz              processRxAsMIDI_lengthIs2
                      00309         ; case CHANNEL_PRESSURE
000412 0ED0           00310         movlw   CHANNEL_PRESSURE
000414 1804           00311         xorwf   tmpValue, w, ACCESS
000416 E0??           00312         bz              processRxAsMIDI_lengthIs2
000418 D???           00313         bra             processRxAsMIDI_lengthIsNot2
00041A                00314 processRxAsMIDI_lengthIs2
                      00315         ; midiRxMessage_length = 2
00041A 0E02           00316         movlw   2
00041C 6E0E           00317         movwf   midiRxMessage_length, ACCESS    
00041E D???           00318         bra             processRxAsMIDI_getLengthDone
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000420                00319 processRxAsMIDI_lengthIsNot2
                      00320 
                      00321         ; Check if STATUS is a 3-byte message type
                      00322         ; case NOTE_OFF
000420 0E80           00323         movlw   NOTE_OFF
000422 1804           00324         xorwf   tmpValue, w, ACCESS
000424 E0??           00325         bz              processRxAsMIDI_lengthIs3               
                      00326         ; case NOTE_ON
000426 0E90           00327         movlw   NOTE_ON
000428 1804           00328         xorwf   tmpValue, w, ACCESS
00042A E0??           00329         bz              processRxAsMIDI_lengthIs3               
                      00330         ; case KEY_PRESSURE
00042C 0EA0           00331         movlw   KEY_PRESSURE
00042E 1804           00332         xorwf   tmpValue, w, ACCESS
000430 E0??           00333         bz              processRxAsMIDI_lengthIs3               
                      00334         ; case CONTROL_CHANGE
000432 0EB0           00335         movlw   CONTROL_CHANGE
000434 1804           00336         xorwf   tmpValue, w, ACCESS
000436 E0??           00337         bz              processRxAsMIDI_lengthIs3               
                      00338         ; case PITCH_WHEEL
000438 0EE0           00339         movlw   PITCH_WHEEL
00043A 1804           00340         xorwf   tmpValue, w, ACCESS
00043C E0??           00341         bz              processRxAsMIDI_lengthIs3               
00043E D???           00342         bra             processRxAsMIDI_lengthIsNot3
000440                00343 processRxAsMIDI_lengthIs3
                      00344         ; midiRxMessage_length = 3
000440 0E03           00345         movlw   3
000442 6E0E           00346         movwf   midiRxMessage_length, ACCESS    
000444 D???           00347         bra             processRxAsMIDI_getLengthDone
000446                00348 processRxAsMIDI_lengthIsNot3
                      00349 
                      00350         ; Check if STATUS is EOX-byte message type
                      00351         ; case SYSEX
000446 0EF0           00352         movlw   SYSEX
000448 1804           00353         xorwf   tmpValue, w, ACCESS
00044A E1??           00354         bnz             processRxAsMIDI_getLengthDone
00044C 0EF7           00355         movlw   EOX
00044E 6E0E           00356         movwf   midiRxMessage_length, ACCESS    
000450                00357 processRxAsMIDI_getLengthDone
                      00358         
                      00359         ;**** start procedure: supported message type? ****
                      00360         ; midiRxMessage_length of 0 indicates unsupported STATUS value
000450 520E           00361         movf    midiRxMessage_length, f, ACCESS
000452 E0??           00362         bz              processRxAsMIDI_resetUartState
                      00363 
                      00364         ;**** start procedure: message supported, init uartState for reception ****
000454 8010           00365         bsf             midiFlags, uartState_rxInProgress, ACCESS
                      00366         ;       midiRxMessage[0] = STATUS including channel data
000456 C003 F040      00367         movff   rxByte, midiRxMessage
                      00368         ;       uartState_currentRxIndex = 1
00045A 0E01           00369         movlw   1
00045C 6E0D           00370         movwf   uartState_currentRxIndex, ACCESS
                      00371         ;       midiState_lastStatus = rxdata
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00045E C003 F00B      00372         movff   rxByte, midiState_lastStatus
                      00373         ;       midiState_lastLength = midiRxMessage_length
000462 C00E F00C      00374         movff   midiRxMessage_length, midiState_lastLength
000466 D???           00375         bra             processRxAsMIDI_RxHandlingDone
                      00376 
                      00377         ;**** start procedure: message unsupported, reset uartState ****
000468                00378 processRxAsMIDI_resetUartState
                      00379         ; Fixes logic problem discovered because Axiom 25 streams aftertouch data which was being interp
                            reted as running status Note Ons
                      00380         ; Reception of an unsupported MIDI message will kill any in-progress message rx
                      00381         ; uartState_rxInProgress = FALSE
000468 9010           00382         bcf             midiFlags, uartState_rxInProgress, ACCESS
                      00383         ; Reset midiState.lastStatus so that subsequent non-status values are not interpreted as running
                             status
00046A 6A0B           00384         clrf    midiState_lastStatus, ACCESS
00046C D???           00385         bra             processRxAsMIDI_RxHandlingDone
                      00386 
                      00387         ; process STATUS byte done
                      00388         ;**********************************************************************
                      00389         ; process non-STATUS or EOX byte begin
                      00390 
                      00391         ;**** start procedure: process non-STATUS or EOX byte ****
00046E                00392 processRxAsMIDI_notStatusOrIsEOX
                      00393         ; continue if reception in progress
00046E B010           00394         btfsc   midiFlags, uartState_rxInProgress, ACCESS
000470 D???           00395         bra             processRxAsMIDI_rxInProgress
                      00396 
                      00397         ; no reception in progress so attempt to process as running STATUS if rxByte < SYSEX, otherwise 
                            ignore
000472 0EF0           00398         movlw   SYSEX
000474 6003           00399         cpfslt  rxByte, ACCESS
000476 D???           00400         bra             processRxAsMIDI_RxHandlingDone
000478 D???           00401         bra             processRxAsMIDI_tryRunningStatus
                      00402         
00047A                00403 processRxAsMIDI_rxInProgress
                      00404         ; continue if byte is non-STATUS
00047A AE03           00405         btfss   rxByte, 7, ACCESS
00047C D???           00406         bra             processRxAsMIDI_notStatusContinue
                      00407 
                      00408         ; byte is STATUS, continue if EOX
00047E 0EF7           00409         movlw   EOX
000480 1803           00410         xorwf   rxByte, w, ACCESS       
                      00411         ; byte is STATUS but not EOX or any other supported STATUS value so ignore
000482 E1??           00412         bnz             processRxAsMIDI_RxHandlingDone
                      00413 
                      00414         ;**** start procedure: save incoming byte to buffer ****
Warning[208]: Label truncated at 32 characters. (processRxAsMIDI_notStatusContinue)
000484                00415 processRxAsMIDI_notStatusContinue
                      00416         ; check buffer capacity
000484 0E18           00417         movlw   MAX_MIDI_MESSAGE_SIZE
000486 600D           00418         cpfslt  uartState_currentRxIndex, ACCESS
                      00419         ; buffer is completely full with incomplete message
                      00420         ; cancel current reception / reset uartState
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000488 D???           00421         bra             processRxAsMIDI_resetUartState
                      00422 
                      00423         ;       midiRxMessage[uartState_currentRxIndex] = rxdata
00048A 500D           00424         movf    uartState_currentRxIndex, w, ACCESS
00048C C003 FFEB      00425         movff   rxByte, PLUSW_midiRxMessage
                      00426         ;       uartState_currentRxIndex++;
000490 2A0D           00427         incf    uartState_currentRxIndex, f, ACCESS
                      00428                 
                      00429         ;**** start procedure: check if message is complete ****
                      00430         ; for non-SYSEX messages: message reception is complete if uartState_currentRxIndex == midiRxMes
                            sage_length
000492 500D           00431         movf    uartState_currentRxIndex, w, ACCESS
000494 620E           00432         cpfseq  midiRxMessage_length, ACCESS
000496 D???           00433         bra             processRxAsMIDI_checkEOX
000498 D???           00434         bra             processRxAsMIDI_messageComplete
                      00435 
                      00436         ; for SYSEX messages: message reception is complete if rxByte == EOX
00049A                00437 processRxAsMIDI_checkEOX
00049A 0EF7           00438         movlw   EOX
00049C 6203           00439         cpfseq  rxByte, ACCESS
                      00440         ; message reception is not complete
00049E D???           00441         bra             processRxAsMIDI_RxHandlingDone  
                      00442 
                      00443         ;**** start procedure: midi message reception is complete ****
0004A0                00444 processRxAsMIDI_messageComplete 
                      00445         ; update midiRxMessage_length to reflect actual length of SYSEX message
0004A0 500D           00446         movf    uartState_currentRxIndex, w, ACCESS
0004A2 6E0E           00447         movwf   midiRxMessage_length, ACCESS
                      00448 
                      00449         ; reset uart state
0004A4 9010           00450         bcf             midiFlags, uartState_rxInProgress, ACCESS
                      00451         
                      00452         ; process received message
0004A6 EC?? F???      00453         call    midiMessageMapper
0004AA D???           00454         bra             processRxAsMIDI_RxHandlingDone
                      00455 
                      00456         ;**** start procedure: attempt to process non-STATUS byte as running STATUS ****
0004AC                00457 processRxAsMIDI_tryRunningStatus        
                      00458         ; continue if midiState_lastStatus != 0
                      00459         ; midiState_lastStatus is set every time supported STATUS byte is received
                      00460         ; midiState_lastStatus is cleared whenever unsupported STATUS byte is received
0004AC 520B           00461         movf    midiState_lastStatus, f, ACCESS
0004AE E0??           00462         bz              processRxAsMIDI_RxHandlingDone
                      00463 
                      00464         ;**** start procedure: is running STATUS, init uartState for reception ****
0004B0 8010           00465         bsf             midiFlags, uartState_rxInProgress, ACCESS
                      00466         ;       midiRxMessage.message[0] = midiState_lastStatus
0004B2 C00B F040      00467         movff   midiState_lastStatus, midiRxMessage
                      00468         ;       midiRxMessage_length = midiState_lastLength
0004B6 C00C F00E      00469         movff   midiState_lastLength, midiRxMessage_length
                      00470         ;       midiRxMessage.message[1] = rxByte
0004BA 0E01           00471         movlw   1
0004BC C003 FFEB      00472         movff   rxByte, PLUSW_midiRxMessage     
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00473         ;       uartState_currentRxIndex = 2
0004C0 0E02           00474         movlw   2
0004C2 6E0D           00475         movwf   uartState_currentRxIndex, ACCESS
                      00476 
                      00477 
0004C4                00478 processRxAsMIDI_RxHandlingDone
                      00479 
                      00480         
0004C4                00481 processRxAsMIDI_checkRxFIFO
0004C4 BA9E           00482         btfsc   PIR1, RCIF, ACCESS
0004C6 EF?? F???      00483         goto    processRxAsMIDI_readFIFO
                      00484         
0004CA                00485 processRxAsMIDI_Exit
                      00486 
                      00487         ; undefine variables from pushed registers
                      00488         #undefine       rxByte
                      00489         #undefine       tmpValue
                      00490         #undefine       FSR_midiRxMessage
                      00491         #undefine       PLUSW_midiRxMessage
                      00492         ; pop working regs from software stack
                      00493         POP_R   FSR0H
0004CA CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00494         POP_R   FSR0L
0004CE CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00495         POP_R   r1
0004D2 CFDC F004          M         movff   softwareStackPointerPREINC, r1          ; ++softwareStackPointerINDF = regName
                      00496         POP_R   r0
0004D6 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00497                 
0004DA 0012           00498         return
                      00499 
                      00500 
                      00501 ;**********************************************************************
                      00502 ; Function: void midiMessageMapper(midiRxMessage)
                      00503 ;**********************************************************************
                      00504 
0004DC                00505 midiMessageMapper
                      00506         ; push working regs onto software stack
                      00507         PUSH_R  r0
0004DC C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00508         PUSH_R  r1
0004E0 C004 FFDD          M         movff   r1,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00509         PUSH_R  r2
0004E4 C005 FFDD          M         movff   r2,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00510         PUSH_R  r3
0004E8 C006 FFDD          M         movff   r3,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00511         PUSH_R  FSR0L
0004EC CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00512         PUSH_R  FSR0H           
0004F0 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00513         ; define variables to pushed registers
                      00514         #define tmpValue                        r0
                      00515         #define statusByte                      r1
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00516         #define noteNumberByte          r2
                      00517         #define programValue            noteNumberByte
                      00518         #define controllerNumber        noteNumberByte
                      00519         #define velocityByte            r3
                      00520         #define controllerValue         velocityByte
                      00521         #define FSR_midiRxMessage       FSR0
                      00522         #define PLUSW_midiRxMessage     PLUSW0
                      00523         
                      00524         ; do work
0004F4 EE00 F040      00525         lfsr    FSR_midiRxMessage, midiRxMessage
                      00526         
                      00527         ;       status = midiRxMessage[0] & 0xf0
0004F8 0E00           00528         movlw   0
0004FA 50EB           00529         movf    PLUSW_midiRxMessage, w, ACCESS
0004FC 0BF0           00530         andlw   0xf0
0004FE 6E04           00531         movwf   statusByte, ACCESS      
                      00532 
                      00533         ;       noteNumber = midiRxMessage[1]
000500 0E01           00534         movlw   1
000502 50EB           00535         movf    PLUSW_midiRxMessage, w, ACCESS
000504 6E05           00536         movwf   noteNumberByte, ACCESS  
                      00537 
                      00538         ;       velocity = midiRxMessage[2]
000506 0E02           00539         movlw   2
000508 50EB           00540         movf    PLUSW_midiRxMessage, w, ACCESS
00050A 6E06           00541         movwf   velocityByte, ACCESS    
                      00542 
                      00543         ;       if((status == NOTE_ON) && (velocity == 0))
                      00544         ;               status = NOTE_OFF;
00050C 0E90           00545         movlw   NOTE_ON
00050E 6204           00546         cpfseq  statusByte, ACCESS
000510 D???           00547         bra             midiMessageMapper_notNoteOnWithZeroVel
000512 5206           00548         movf    velocityByte, f, ACCESS
000514 E1??           00549         bnz             midiMessageMapper_notNoteOnWithZeroVel  
000516 0E80           00550         movlw   NOTE_OFF
000518 6E04           00551         movwf   statusByte, ACCESS
Warning[208]: Label truncated at 32 characters. (midiMessageMapper_notNoteOnWithZeroVel)
00051A                00552 midiMessageMapper_notNoteOnWithZeroVel
                      00553 
                      00554         ; case NOTE_ON
00051A 0E90           00555         movlw   NOTE_ON
00051C 6204           00556         cpfseq  statusByte, ACCESS
00051E D???           00557         bra             midiMessageMapper_notNoteOn
                      00558 
000520 5005           00559         movf    noteNumberByte, w, ACCESS
000522 EC?? F???      00560         call    activeNoteTableAdd
                      00561 
000526 D???           00562         bra             midiMessageMapper_exit
                      00563         ; break
000528                00564 midiMessageMapper_notNoteOn
                      00565         
                      00566         
                      00567         ; case NOTE_OFF
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000528 0E80           00568         movlw   NOTE_OFF
00052A 6204           00569         cpfseq  statusByte, ACCESS
00052C D???           00570         bra             midiMessageMapper_notNoteOff
                      00571 
00052E 5005           00572         movf    noteNumberByte, w, ACCESS
000530 EC?? F???      00573         call    activeNoteTableRemove
                      00574 
000534 D???           00575         bra             midiMessageMapper_exit
                      00576         ; break
000536                00577 midiMessageMapper_notNoteOff
                      00578 
                      00579 
                      00580         ; case PITCH_WHEEL
000536 0EE0           00581         movlw   PITCH_WHEEL
000538 6204           00582         cpfseq  statusByte, ACCESS
00053A D???           00583         bra             midiMessageMapper_notPitchWheel
                      00584 
                      00585         ; if sustain is active then ignore pitch
00053C 0E01           00586         movlw   SUSTAIN
00053E 1820           00587         xorwf   modeLevel, w, ACCESS
000540 E0??           00588         bz              midiMessageMapper_notPitchWheel
                      00589         
                      00590         ; pitchWheel == pitch wheel value
000542 C041 F019      00591         movff   midiRxMessage + 1, pitchWheel + 0
                      00592         ; pitchWheel + 0 is only a 7-bit value
                      00593         ; so concatenate received pitch wheel MSB and LSB into contiguous 16-bit value
                      00594         ; roll least significant bit out of received pitch wheel high byte
000546 90D8           00595         bcf             STATUS, C, ACCESS
000548 3042           00596         rrcf    midiRxMessage + 2, w
                      00597         ; if rolled out bit was set then set bit 7 of pitchWheel + 0
00054A B0D8           00598         btfsc   STATUS, C, ACCESS
00054C 8E19           00599         bsf             pitchWheel + 0, 7, ACCESS
                      00600         ; write high byte into pitchWheel
00054E 6E1A           00601         movwf   pitchWheel + 1, ACCESS
000550 6A1B           00602         clrf    pitchWheel + 2, ACCESS
000552 6A1C           00603         clrf    pitchWheel + 3, ACCESS
                      00604         ; value has been concatenated into contiguous 16-bit value
                      00605         
                      00606         ; calulate offset from 0x2000 (center)
000554 0E20           00607         movlw   0x20
000556 601A           00608         cpfslt  pitchWheel + 1, ACCESS
000558 D???           00609         bra             midiMessageMapper_pitchPos
                      00610 
                      00611         ; pitch wheel is negative
00055A 0E20           00612         movlw   0x20
00055C 5E1A           00613         subwf   pitchWheel + 1, f, ACCESS
00055E A0D8           00614         btfss   STATUS, C, ACCESS
000560 061B           00615         decf    pitchWheel + 2, f, ACCESS       
000562 A0D8           00616         btfss   STATUS, C, ACCESS
000564 061C           00617         decf    pitchWheel + 3, f, ACCESS       
000566 D???           00618         bra             midiMessageMapper_exit
                      00619 
000568                00620 midiMessageMapper_pitchPos
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00621         ; pitch wheel is positive
000568 0E20           00622         movlw   0x20
00056A 5E1A           00623         subwf   pitchWheel + 1, f, ACCESS
00056C D???           00624         bra             midiMessageMapper_exit
                      00625 
00056E                00626 midiMessageMapper_notPitchWheel
                      00627 
                      00628 
                      00629         ; case CONTROL_CHANGE
00056E 0EB0           00630         movlw   CONTROL_CHANGE
000570 6204           00631         cpfseq  statusByte, ACCESS
000572 D???           00632         bra             midiMessageMapper_notControlChange
                      00633 
                      00634         ;       switch(midiRxPoppedMessage.message[1])  // controller #
                      00635         ;       {
                      00636         ;               case ALL_SOUND_OFF:
                      00637         ;               case RESET_ALL_CONTROLLERS:
                      00638         ;               case ALL_NOTES_OFF:
                      00639         ;                       for(=0; count<ACTIVE_NOTE_TABLE_SIZE; count++)
                      00640         ;                               activeNoteTable[count];
                      00641         ;                       initSoundGen();
                      00642         ;               break;
                      00643         ;       }
                      00644 
                      00645         ; **** check for Panic! condition ****
                      00646         ; noteNumber == midiRxMessage[1]
000574 5005           00647         movf    controllerNumber, w, ACCESS
000576 0A78           00648         xorlw   ALL_SOUND_OFF
000578 E0??           00649         bz              midiMessageMapper_doPanic
00057A 5005           00650         movf    controllerNumber, w, ACCESS
00057C 0A7B           00651         xorlw   ALL_NOTES_OFF
00057E E1??           00652         bnz             midiMessageMapper_notPanic
000580                00653 midiMessageMapper_doPanic
                      00654         ; passing 0xff to activeNoteTableRemove() will flush table
000580 0EFF           00655         movlw   0xff
000582 EC?? F???      00656         call    activeNoteTableRemove
000586 D???           00657         bra             midiMessageMapper_exit
000588                00658 midiMessageMapper_notPanic
                      00659 
                      00660         ; **** check for controller reset ****
000588 5005           00661         movf    controllerNumber, w, ACCESS
00058A 0A79           00662         xorlw   RESET_ALL_CONTROLLERS
00058C E1??           00663         bnz             midiMessageMapper_notControllerReset
                      00664         ; easiest option is straight-up software reset, so do it!
00058E 00FF           00665         reset
Warning[208]: Label truncated at 32 characters. (midiMessageMapper_notControllerReset)
000590                00666 midiMessageMapper_notControllerReset
                      00667 
                      00668         ; **** check for Sustain ****
                      00669         ; noteNumber == midiRxMessage[1]
000590 5005           00670         movf    controllerNumber, w, ACCESS
000592 0A40           00671         xorlw   SUSTAIN_PEDAL
000594 E1??           00672         bnz             midiMessageMapper_notSustain
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 88


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00673         ; sustain message: <63 means sustain off, >64 mean sustain on
                      00674         ; controllerValue == midiRxMessage[2]
000596 0E3F           00675         movlw   63
000598 6406           00676         cpfsgt  controllerValue, ACCESS
00059A D???           00677         bra             midiMessageMapper_sustainOff
                      00678         ; turn sustain on. Spec says >64 but I'm just doing >63
                      00679         ; set modeLevel to MONO and call userInterface_incMode()
00059C 0E00           00680         movlw   POLY
00059E 6E20           00681         movwf   modeLevel, ACCESS
0005A0 EC?? F???      00682         call    userInterface_incMode
0005A4 D???           00683         bra             midiMessageMapper_exit
0005A6                00684 midiMessageMapper_sustainOff
                      00685         ; turn sustain off
                      00686         ; set modeLevel to SUSTAIN and call userInterface_incMode()
0005A6 0E02           00687         movlw   MONO
0005A8 6E20           00688         movwf   modeLevel, ACCESS
0005AA EC?? F???      00689         call    userInterface_incMode
0005AE D???           00690         bra             midiMessageMapper_exit
0005B0                00691 midiMessageMapper_notSustain
                      00692         
                      00693         ; **** check for POLY MODE OFF ****
0005B0 5005           00694         movf    controllerNumber, w, ACCESS
0005B2 0A7E           00695         xorlw   POLY_MODE_OFF
0005B4 E1??           00696         bnz             midiMessageMapper_notPolyOff
0005B6 0E01           00697         movlw   SUSTAIN
0005B8 6E20           00698         movwf   modeLevel, ACCESS
0005BA EC?? F???      00699         call    userInterface_incMode
0005BE D???           00700         bra             midiMessageMapper_exit
0005C0                00701 midiMessageMapper_notPolyOff
                      00702         
                      00703         ; **** check for POLY MODE ON ****
0005C0 5005           00704         movf    controllerNumber, w, ACCESS
0005C2 0A7F           00705         xorlw   POLY_MODE_ON
0005C4 E1??           00706         bnz             midiMessageMapper_notPolyOn
0005C6 0E02           00707         movlw   MONO
0005C8 6E20           00708         movwf   modeLevel, ACCESS
0005CA EC?? F???      00709         call    userInterface_incMode
0005CE D???           00710         bra             midiMessageMapper_exit
0005D0                00711 midiMessageMapper_notPolyOn
                      00712         
                      00713         
                      00714         ; **** check for Mod Wheel ****
                      00715         ; noteNumber == midiRxMessage[1]
0005D0 5005           00716         movf    controllerNumber, w, ACCESS
0005D2 0A01           00717         xorlw   MODULATION_WHEEL_MSB
0005D4 E1??           00718         bnz             midiMessageMapper_notMod
                      00719 
                      00720         ; if sustain is active then ignore modulation
0005D6 0E01           00721         movlw   SUSTAIN
0005D8 1820           00722         xorwf   modeLevel, w, ACCESS
0005DA E0??           00723         bz              midiMessageMapper_notMod
                      00724 
                      00725         ; save current modulation value
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 89


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0005DC C006 F01D      00726         movff   controllerValue, modulation
                      00727         ; in Sample mode: mainline eeprom read call code uses modulation variable       
                      00728         ; in Sine/Square modes: always modify table base addresses in response to modulation
                      00729         ; init table addresses
                      00730 
0005E0 0E??           00731         movlw   low(sineTable)
0005E2 6E24           00732         movwf   sineTableBaseAddress + 0
0005E4 0E??           00733         movlw   high(sineTable)
0005E6 6E25           00734         movwf   sineTableBaseAddress + 1
0005E8 0E??           00735         movlw   upper(sineTable)
0005EA 6E26           00736         movwf   sineTableBaseAddress + 2
                      00737         
0005EC 0E??           00738         movlw   low(squareTable)
0005EE 6E27           00739         movwf   squareTableBaseAddress + 0
0005F0 0E??           00740         movlw   high(squareTable)
0005F2 6E28           00741         movwf   squareTableBaseAddress + 1
0005F4 0E??           00742         movlw   upper(squareTable)
0005F6 6E29           00743         movwf   squareTableBaseAddress + 2
                      00744         
                      00745         ; push sine backward into modulationBlendTable
0005F8 5006           00746         movf    controllerValue, w, ACCESS
0005FA 5E24           00747         subwf   sineTableBaseAddress + 0, f
0005FC A0D8           00748         btfss   STATUS, C, ACCESS
0005FE 0625           00749         decf    sineTableBaseAddress + 1, f
000600 A0D8           00750         btfss   STATUS, C, ACCESS
000602 0626           00751         decf    sineTableBaseAddress + 2, f
                      00752 
                      00753         ; push square forward into modulationBlendTable
000604 5006           00754         movf    controllerValue, w, ACCESS
000606 2627           00755         addwf   squareTableBaseAddress + 0, f
000608 B0D8           00756         btfsc   STATUS, C, ACCESS
00060A 2A28           00757         incf    squareTableBaseAddress + 1, f
00060C B0D8           00758         btfsc   STATUS, C, ACCESS
00060E 2A29           00759         incf    squareTableBaseAddress + 2, f
000610 D???           00760         bra             midiMessageMapper_exit  
000612                00761 midiMessageMapper_notMod
                      00762         
                      00763         ; **** check for Attack ****
000612 5005           00764         movf    controllerNumber, w, ACCESS
000614 0A49           00765         xorlw   73
000616 E1??           00766         bnz             midiMessageMapper_notAttack
                      00767         ; load tmpValue with 64 for later inversion op
000618 0E40           00768         movlw   64
00061A 6E03           00769         movwf   tmpValue, ACCESS
                      00770         ; do (adsrAttackRate = (controllerValue+1)/2) to scale max range to 0 - 64
00061C 2806           00771         incf    controllerValue, w, ACCESS
00061E 90D8           00772         bcf             STATUS, C, ACCESS
000620 30E8           00773         rrcf    WREG, w, ACCESS
                      00774         ; do (64 - midiAttackTime) to invert value and make adsrAttackRate logically time-correlated
000622 5C03           00775         subwf   tmpValue, w, ACCESS
                      00776         ; save it
000624 6E37           00777         movwf   adsrAttackRate, ACCESS
000626                00778 midiMessageMapper_notAttack
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 90


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00779 
                      00780         ; **** check for Release ****
000626 5005           00781         movf    controllerNumber, w, ACCESS
000628 0A48           00782         xorlw   72
00062A E1??           00783         bnz             midiMessageMapper_notRelease
                      00784         ; load tmpValue with 64 for later inversion op
00062C 0E40           00785         movlw   64
00062E 6E03           00786         movwf   tmpValue, ACCESS
                      00787         ; do (adsrReleaseRate = (controllerValue+1)/2) to scale max range to 0 - 64
000630 2806           00788         incf    controllerValue, w, ACCESS
000632 90D8           00789         bcf             STATUS, C, ACCESS
000634 30E8           00790         rrcf    WREG, w, ACCESS
                      00791         ; do (64 - midiRelease) to invert value and make adsrReleaseRate logically time-correlated
000636 5C03           00792         subwf   tmpValue, w, ACCESS
                      00793         ; save it
000638 6E38           00794         movwf   adsrReleaseRate, ACCESS
00063A                00795 midiMessageMapper_notRelease
                      00796 
                      00797 
                      00798 #IFDEF  MIDI_DEBUG_TRIGGER_ENABLED
                      00799 ; DEBUG - assign CC General Purpose 7 as variable dump trigger
                      00800         ; **** check for General Purpose Controller 7 (EDIROL Stop Key default function) ****
                      00801         movf    controllerNumber, w, ACCESS
                      00802         xorlw   MIDI_DEBUG_CC_NAME
                      00803         bnz             midiMessageMapper_notDebugTrigger
                      00804 ;       only call trigger on button down
                      00805         movlw   127
                      00806         cpfslt controllerValue, ACCESS
                      00807         call    midiDebugTriggerHandler
                      00808 midiMessageMapper_notDebugTrigger
                      00809 #ENDIF ; #IFDEF MIDI_DEBUG_TRIGGER_ENABLED
                      00810 
Warning[208]: Label truncated at 32 characters. (midiMessageMapper_notControlChange)
00063A                00811 midiMessageMapper_notControlChange
                      00812 
                      00813 
                      00814         ; case PROGRAM_CHANGE
00063A 0EC0           00815         movlw   PROGRAM_CHANGE
00063C 6204           00816         cpfseq  statusByte, ACCESS
00063E D???           00817         bra             midiMessageMapper_notPG
                      00818         
                      00819         ; Program Change increases will cycle waveform mode in the following direction SINE -> SQUARE ->
                             SAMPLE -> SINE
                      00820         ; Program Change decreases will cycle waveform mode in the following direction SINE -> SAMPLE ->
                             SQUARE -> SINE 
                      00821         
                      00822         ; if value is 0, 1 or 2 then hardset to Sine, Square or Sample
000640 5005           00823         movf    programValue, w, ACCESS
                      00824         ; do (2 - programValue)
000642 0802           00825         sublw   2
                      00826         ; if result is negative then do compare
000644 E3??           00827         bnc             midiMessageMapper_pgCompare
                      00828         ; otherwise result is positive so waveShape = programValue
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 91


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000646 C005 F01E      00829         movff   programValue, waveShape
                      00830         ; waveShape is changing so set needDelgator flag
00064A 8418           00831         bsf             soundGenFlags, needRefresh, ACCESS
00064C D???           00832         bra             midiMessageMapper_pgDone        
                      00833 
00064E                00834 midiMessageMapper_pgCompare
                      00835         ; value > 2 so compare current program change value against previous
00064E 500F           00836         movf    midiLastProgramValue, w, ACCESS
000650 6405           00837         cpfsgt  programValue, ACCESS
                      00838         ; set decrement flag
000652 8218           00839         bsf             soundGenFlags, pgDec, ACCESS
                      00840         ; increment waveform
000654 EC?? F???      00841         call    userInterface_incWaveform
000658                00842 midiMessageMapper_pgDone
                      00843         ; save current as previous
000658 C005 F00F      00844         movff   programValue, midiLastProgramValue
00065C                00845 midiMessageMapper_notPG
                      00846 
                      00847         ; case SYSEX
00065C 0EF0           00848         movlw   SYSEX
00065E 6204           00849         cpfseq  statusByte, ACCESS
000660 D???           00850         bra             midiMessageMapper_notSysEx
                      00851         ; check for terminal ascii packet
                      00852         ; check Vendor ID
000662 0E01           00853         movlw 1
000664 50EB           00854         movf    PLUSW_midiRxMessage, w, ACCESS
000666 0A77           00855         xorlw VENDOR_ID
000668 E1??           00856         bnz             midiMessageMapper_notSysEx
                      00857         ; check Device ID
00066A 0E02           00858         movlw 2
00066C 50EB           00859         movf    PLUSW_midiRxMessage, w, ACCESS
00066E 0A1D           00860         xorlw DEVICE_ID
000670 E1??           00861         bnz             midiMessageMapper_notSysEx
                      00862         ; check Command
000672 0E03           00863         movlw 3
000674 50EB           00864         movf    PLUSW_midiRxMessage, w, ACCESS
000676 0A1E           00865         xorlw TERMINAL_PACKET_COMMAND_VALUE
000678 E1??           00866         bnz             midiMessageMapper_notSysEx
                      00867         ; packet is terminal ascii so send to terminal
                      00868 #ifdef ENABLE_MIDI_TERMINAL
                      00869         call    midiTerminal_receive
                      00870 #endif
00067A                00871 midiMessageMapper_notSysEx
                      00872 
00067A                00873 midiMessageMapper_exit
                      00874         ; undefine variables from pushed registers
                      00875         #undefine       tmpValue
                      00876         #undefine       statusByte
                      00877         #undefine       noteNumberByte
                      00878         #undefine       velocityByte
                      00879         #undefine       FSR_midiRxMessage
                      00880         #undefine       PLUSW_midiRxMessage
                      00881         ; pop working regs from software stack
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 92


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00882         POP_R   FSR0H   
00067A CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00883         POP_R   FSR0L
00067E CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00884         POP_R   r3
000682 CFDC F006          M         movff   softwareStackPointerPREINC, r3          ; ++softwareStackPointerINDF = regName
                      00885         POP_R   r2
000686 CFDC F005          M         movff   softwareStackPointerPREINC, r2          ; ++softwareStackPointerINDF = regName
                      00886         POP_R   r1
00068A CFDC F004          M         movff   softwareStackPointerPREINC, r1          ; ++softwareStackPointerINDF = regName
                      00887         POP_R   r0
00068E CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00888 
000692 0012           00889         return
                      00890         
                      00891         
                      00307         #include        "../source/eeprom.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      eeprom.asm                                        *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 ; Target EEPROM is On Semiconductor CAT25128 or compatible
                      00022 ; Functions perform no address boundry checking
                      00023 ; Functions do not poll EEPROM for Ready so period between EEPROM write requests must be >5mS per CAT251
                            28 datasheet
                      00024 
                      00025 ;**********************************************************************
                      00026 ; INCLUDES
                      00027 ;**********************************************************************
                      00028 
                      00029         #include "../header/eeprom.h"
                      00215 
                      00216 ;**********************************************************************
                      00217 ;                                                                     *
                      00218 ;    Project:       deMIDulator                                       *
                      00219 ;    Filename:      eeprom.h                                          *
                      00220 ;    Date:                                                            *
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 93


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00221 ;    File Version:                                                    *
                      00222 ;                                                                     *
                      00223 ;    Author:        Derek Enos                                        *
                      00224 ;    Company:                                                         *
                      00225 ;                                                                     * 
                      00226 ;                                                                     *
                      00227 ;**********************************************************************
                      00228 ;                                                                     *
                      00229 ;    Files required:                                                  *
                      00230 ;                                                                     *
                      00231 ;                                                                     *
                      00232 ;                                                                     *
                      00233 ;**********************************************************************
                      00234 
                      00235 #ifndef _EEPROMH_
                      00236 #define _EEPROMH_
                      00237 
                      00238 ; ******************* FLAG VARIABLE DEFINITIONS ***********************
                      00239 
                      00240 ; eepromFlags
                      00241 #define sampleChunkReady        0
                      00242 #define samplesLoaded                   1
                      00243 #define intState                                        2
                      00244 #define ready                                           3
                      00245 
                      00246 ; CAT25128 Status reg flags
                      00247 #define NOT_RDY 0
                      00248 #define WEL                     1
                      00249 #define BP0                     2
                      00250 #define BP1                     3
                      00251 #define WPEN            7
                      00252 
                      00253 ; ******************* COMMAND DEFINES ***********************
                      00254 #define EE_WREN         B'00000110'     ; Enable Write Operations
                      00255 #define EE_WRDI         B'00000100'     ; Disable Write Operations
                      00256 #define EE_RDSR         B'00000101'     ; Read Status Register
                      00257 #define EE_WRSR         B'00000001'     ; Write Status Register
                      00258 #define EE_READ         B'00000011'     ; Read Data from Memory
                      00259 #define EE_WRITE        B'00000010'     ; Write Data to Memory
                      00260 
                      00261 ; ******************* GENERAL DEFINES ***********************
                      00262 #define SAMPLE_DATA_BUFFER_SIZE 64
                      00263 #define EEPROM_SIZE_BITS 128000
                      00264 #define NEXT_SAMPLE_ADDRESSES_EL_SIZE   2
                      00265 
                      00266 ;**********************************************************************
                      00267 ; MACROS
                      00268 ;**********************************************************************
                      00269 
                      00270 
                      00271 ;**********************************************************************
                      00272 ASSERT_SS       MACRO
                      00273         bcf             LATC, RC6, ACCESS       ; Chip select is active
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 94


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00274         ENDM
                      00275 
                      00276 ;**********************************************************************
                      00277 DEASSERT_SS     MACRO
                      00278         bsf             LATC, RC6, ACCESS       ; Chip select is idle
                      00279         ENDM
                      00280 
                      00281 ;**********************************************************************
                      00282 EE_DISABLE_INTS MACRO
                      00283         bcf             eepromFlags, intState, ACCESS
                      00284         btfsc   INTCON, GIE, ACCESS
                      00285         bsf             eepromFlags, intState, ACCESS
                      00286         bcf             INTCON, GIE, ACCESS
                      00287         ENDM
                      00288 
                      00289 ;**********************************************************************
                      00290 EE_RESTORE_INTS MACRO
                      00291         btfsc   eepromFlags, intState, ACCESS
                      00292         bsf             INTCON, GIE, ACCESS
                      00293         ENDM
                      00294 
                      00295 ;**********************************************************************
                      00296 WRITE_INTERNAL_EEPROM   MACRO   literal_address, register_value
                      00297         local   writeIntEE_loop
                      00298         
                      00299         ; load address
                      00300         movlw   literal_address
                      00301         movwf   EEADR, ACCESS
                      00302         ; load value
                      00303         movff   register_value, EEDATA
                      00304         ; configure eeprom
                      00305         ; point to EEPROM DATA memory
                      00306         bcf             EECON1, EEPGD, ACCESS
                      00307         ; Access EEPROM/Program
                      00308         bcf             EECON1, CFGS, ACCESS    
                      00309         ; Enable writes
                      00310         bsf             EECON1, WREN, ACCESS
                      00311 
                      00312         ; don't have to disable interrupts because I'm only calling this
                      00313         ; from within the high-priority ISR
                      00314 
                      00315         ; required write enable sequence
                      00316         movlw   0x55
                      00317         movwf   EECON2, ACCESS
                      00318         movlw   0xAA
                      00319         movwf   EECON2, ACCESS
                      00320 
                      00321         ; set WR bit to begin write
                      00322         bsf             EECON1, WR, ACCESS
                      00323 writeIntEE_loop
                      00324         ; wait for write to complete
                      00325         btfsc   EECON1, WR, ACCESS
                      00326         bra             writeIntEE_loop
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 95


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00327         ; disable writes
                      00328         bcf             EECON1, WREN, ACCESS
                      00329 
                      00330         ; point to Program memory
                      00331         bsf             EECON1, EEPGD, ACCESS
                      00332 
                      00333         ENDM
                      00334 
                      00335 ;**********************************************************************
                      00336 WRITE_INTERNAL_EEPROM_FROM_REGS MACRO   address, data
                      00337         local   writeIntEE_loop
                      00338         
                      00339         ; load address
                      00340         movff   address, EEADR
                      00341         ; load value
                      00342         movff   data, EEDATA
                      00343         ; configure eeprom
                      00344         ; point to EEPROM DATA memory
                      00345         bcf             EECON1, EEPGD, ACCESS
                      00346         ; Access EEPROM/Program
                      00347         bcf             EECON1, CFGS, ACCESS    
                      00348         ; Enable writes
                      00349         bsf             EECON1, WREN, ACCESS
                      00350 
                      00351         ; don't have to disable interrupts because I'm only calling this
                      00352         ; from within the high-priority ISR
                      00353 
                      00354         ; required write enable sequence
                      00355         movlw   0x55
                      00356         movwf   EECON2, ACCESS
                      00357         movlw   0xAA
                      00358         movwf   EECON2, ACCESS
                      00359 
                      00360         ; set WR bit to begin write
                      00361         bsf             EECON1, WR, ACCESS
                      00362 writeIntEE_loop
                      00363         ; wait for write to complete
                      00364         btfsc   EECON1, WR, ACCESS
                      00365         bra             writeIntEE_loop
                      00366         ; disable writes
                      00367         bcf             EECON1, WREN, ACCESS
                      00368 
                      00369         ; point to Program memory
                      00370         bsf             EECON1, EEPGD, ACCESS
                      00371 
                      00372         ENDM
                      00373 
                      00374 ;;**********************************************************************
                      00375 ;;SPI_TX_LITERAL_RX_IN_WREG     MACRO   value
                      00376 ;       local   waitLoop
                      00377 ;
                      00378 ;; routine as recommended in Microchip PIC18F2458/2553/4458/4553 errata
                      00379 ;
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 96


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00380 ;       ; clear interrupt flag
                      00381 ;       bcf             PIR1, SSPIF, ACCESS
                      00382 ;
                      00383 ;       ; perform read, even if the data in SSPBUF is not important 
                      00384 ;       movf    SSPBUF, w, ACCESS
                      00385 ;
                      00386 ;       ; SSPBUF = value
                      00387 ;       movlw   value
                      00388 ;       movwf   SSPBUF, ACCESS
                      00389 ;
                      00390 ;       ; wait fro transfer to complete
                      00391 ;waitLoop
                      00392 ;       btfss   PIR1, SSPIF, ACCESS
                      00393 ;       bra             waitLoop
                      00394 ;
                      00395 ;       ; the data received should be valid
                      00396 ;       movf    SSPBUF, w, ACCESS
                      00397 ;
                      00398 ;       ENDM
                      00399                                                 
                      00400 ;;**********************************************************************
                      00401 ;SPI_TX_WREG_RX_IN_WREG MACRO
                      00402 ;       local   waitLoop
                      00403 ;
                      00404 ;       ; save WREG to software stack
                      00405 ;       PUSH_R  WREG
                      00406 ;       
                      00407 ;; routine as recommended in Microchip PIC18F2458/2553/4458/4553 errata
                      00408 ;       ; clear interrupt flag
                      00409 ;       bcf             PIR1, SSPIF, ACCESS
                      00410 ;
                      00411 ;       ; perform read, even if the data in SSPBUF is not important 
                      00412 ;       movf    SSPBUF, w, ACCESS
                      00413 ;
                      00414 ;       ; SSPBUF = restored WREG from software stack
                      00415 ;       POP_R   WREG
                      00416 ;       movwf   SSPBUF, ACCESS
                      00417 ;
                      00418 ;       ; wait for transfer to complete
                      00419 ;waitLoop
                      00420 ;       btfss   PIR1, SSPIF, ACCESS
                      00421 ;       bra             waitLoop
                      00422 ;
                      00423 ;       ; the data received should be valid
                      00424 ;       movf    SSPBUF, w, ACCESS
                      00425 ;
                      00426 ;       ENDM
                      00427 
                      00428 #endif
                      00030         #include "../header/softwareStack.h"
                      00042 
                      00043 ;**********************************************************************
                      00044 ;                                                                     *
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 97


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00045 ;    Project:       deMIDulator                                       *
                      00046 ;    Filename:      softwareStack.h                                   *
                      00047 ;    Date:                                                            *
                      00048 ;    File Version:                                                    *
                      00049 ;                                                                     *
                      00050 ;    Author:        Derek Enos                                        *
                      00051 ;    Company:                                                         *
                      00052 ;                                                                     * 
                      00053 ;                                                                     *
                      00054 ;**********************************************************************
                      00055 ;                                                                     *
                      00056 ;    Files required:                                                  *
                      00057 ;                                                                     *
                      00058 ;                                                                     *
                      00059 ;                                                                     *
                      00060 ;**********************************************************************
                      00061 
                      00062 #ifndef SOFTWARESTACK_H
                      00063 #define SOFTWARESTACK_H
                      00064 
                      00065         #define softwareStackPointerFSR         FSR2
                      00066         #define softwareStackPointerINDF        INDF2
                      00067         #define softwareStackPointerPOSTINC     POSTINC2
                      00068         #define softwareStackPointerPOSTDEC     POSTDEC2
                      00069         #define softwareStackPointerPREINC      PREINC2 
                      00070         #define softwareStackPointerPLUSW       PLUSW2  
                      00071 
                      00072 ; **** MACRO: PUSH_R    regName
                      00073 PUSH_R  MACRO   regName
                      00074         movff   regName, softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00075                 ENDM
                      00076                 
                      00077 ; **** MACRO: POP_R     regName
                      00078 POP_R   MACRO   regName
                      00079         movff   softwareStackPointerPREINC, regName     ; ++softwareStackPointerINDF = regName
                      00080                 ENDM
                      00081 
                      00082 #endif
                      00031         
                      00032 
                      00033 ;**********************************************************************
                      00034 ; LOCAL VARIABLES
                      00035 ;**********************************************************************
                      00036 
                      00037         CBLOCK
  00000011            00038                 sampleDataBufferIndex:1
  00000012            00039                 sampleChunkCount:1
  00000013            00040                 sampleEndAddress:2
  00000015            00041                 nextSampleAddress:2
                      00042                 
  00000017            00043                 eepromFlags:1
                      00044                 ; bits defined in eeprom.h
                      00045                 ; #define sampleChunkReady      0
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 98


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00046                 ; #define samplesLoaded                 1
                      00047                 ; #define intState                                      2
                      00048                 ; #define       ready                                           3
                      00049 
                      00050                 ; Declared at end of main.asm to ensure that arrays are pushed to end of memory...
                      00051                 ; with smaller variables in ACCESS memory
                      00052                 ; ---------------------------------------
                      00053                 ; sampleDataBuffer:SAMPLE_DATA_BUFFER_SIZE
                      00054                 ; nextSampleAddresses:MAX_POLY_DEPTH * NEXT_SAMPLE_ADDRESSES_EL_SIZE
                      00055 
                      00056         ENDC
                      00057                         
                      00058 
                      00059 ;**********************************************************************
                      00060 ; LOCAL FUNCTIONS
                      00061 ;**********************************************************************
                      00062 
                      00063 ;**********************************************************************
                      00064 ; Function: wreg eepromXferSingleByte(byte wreg)
                      00065 ;**********************************************************************
                      00066         ; !! Function does not assert Slave Select signal and so should not be called directly
                      00067         ; !! Function is called by other EEPROM functions
000694                00068 eepromXferSingleByte
                      00069 
                      00070         ; save current global interrupt enable state, disable global interrupts
                      00071         EE_DISABLE_INTS
000694 9417               M         bcf             eepromFlags, intState, ACCESS
000696 BEF2               M         btfsc   INTCON, GIE, ACCESS
000698 8417               M         bsf             eepromFlags, intState, ACCESS
00069A 9EF2               M         bcf             INTCON, GIE, ACCESS
                      00072 
                      00073         ;**** start procedure: SPI transfer. TX value = WREG, WREG = RX value ****
                      00074         ; push WREG to software stack
                      00075         PUSH_R  WREG
00069C CFE8 FFDD          M         movff   WREG,    softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00076 
                      00077         ; perform read, even if the data in SSPBUF is not important 
0006A0 50C9           00078         movf    SSPBUF, w, ACCESS
                      00079 
                      00080         ; clear Write Collision flag
0006A2 9EC6           00081         bcf             SSPCON1, WCOL, ACCESS
                      00082 
                      00083         ; SSPBUF = restored WREG from software stack
                      00084         POP_R   WREG
0006A4 CFDC FFE8          M         movff   softwareStackPointerPREINC, WREG        ; ++softwareStackPointerINDF = regName
0006A8 6EC9           00085         movwf   SSPBUF, ACCESS
                      00086 
                      00087         ; skip if no Write Collision occurred 
0006AA BEC6           00088         btfsc   SSPCON1, WCOL, ACCESS
                      00089         ; collision occured, return WREG
0006AC D???           00090         bra             eepromXferSingleByte_exit
                      00091 
                      00092         ; clear interrupt flag
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 99


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0006AE 969E           00093         bcf             PIR1, SSPIF, ACCESS
                      00094 
0006B0                00095 eepromXferSingleByte_lp
                      00096         ; wait for transfer to complete
                      00097 #ifndef __DEBUG
0006B0 A69E           00098         btfss   PIR1, SSPIF, ACCESS
0006B2 D???           00099         bra             eepromXferSingleByte_lp 
                      00100 #else
                      00101         ; if DEBUG then simulate worst case transaction time
                      00102         ; SPI Clock = 4MHz = Instruction Clock so it should take 8 instruction cycles per byte transfer
                      00103         ; 3 cycles elapsed since SSPBUF load so make up the 5 cycle balance + loop error of ~5 cycles
                      00104         ; balance
                      00105         nop
                      00106         nop
                      00107         nop
                      00108         nop
                      00109         nop
                      00110         ; potential error
                      00111         nop
                      00112         nop
                      00113         nop
                      00114         nop
                      00115         nop
                      00116 #endif
                      00117 
                      00118         ; the data received should be valid
0006B4 50C9           00119         movf    SSPBUF, w, ACCESS
                      00120         
0006B6                00121 eepromXferSingleByte_exit
                      00122 
                      00123         ; restore global interrupt enable state
                      00124         EE_RESTORE_INTS
0006B6 B417               M         btfsc   eepromFlags, intState, ACCESS
0006B8 8EF2               M         bsf             INTCON, GIE, ACCESS
                      00125 
0006BA 0012           00126         return
                      00127 
                      00128 
                      00129 ;**********************************************************************
                      00130 ; Function: void initExternalEEPROM(void)
                      00131 ;**********************************************************************
                      00132 
0006BC                00133 initExternalEEPROM
                      00134         ; enable EEPROM writes
0006BC EC?? F???      00135         call    eepromWriteEnable
                      00136 
                      00137         ; init Status register
                      00138         ; Bank Protect bits, BP1:0, = 0
                      00139         ; Write Protect Enable bit, WPEN, = 0
                      00140         ; !WP pin on IC is pulled HIGH so WPEN would have no effect either way 
0006C0 0E00           00141         movlw   0
0006C2 EC?? F???      00142         call    eepromWriteStatusReg
                      00143 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 100


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00144         ; init EEPROM variables 
0006C6 6A11           00145         clrf    sampleDataBufferIndex, ACCESS
0006C8 6A12           00146         clrf    sampleChunkCount, ACCESS
0006CA 6A15           00147         clrf    nextSampleAddress, ACCESS
0006CC 6A16           00148         clrf    nextSampleAddress + 1, ACCESS
0006CE 9017           00149         bcf             eepromFlags, sampleChunkReady, ACCESS
0006D0 9217           00150         bcf             eepromFlags, samplesLoaded, ACCESS
                      00151 
                      00152         ; recall saved sampleEndAddress from uC's internal EEPROM in little endian format
0006D2 0E00           00153         movlw   0
0006D4 EC?? F???      00154         call    eepromInternalRead
0006D8 6E13           00155         movwf   sampleEndAddress, ACCESS
0006DA 0E01           00156         movlw   1
0006DC EC?? F???      00157         call    eepromInternalRead
0006E0 6E14           00158         movwf   sampleEndAddress + 1, ACCESS
                      00159         
0006E2 0012           00160         return
                      00161 
                      00162 
                      00163 ;**********************************************************************
                      00164 ; Function: void eepromWriteEnable(void)
                      00165 ;**********************************************************************
                      00166 
0006E4                00167 eepromWriteEnable
                      00168 
                      00169         ; assert SLave Select signal
                      00170         ASSERT_SS
0006E4 9C8B               M         bcf             LATC, RC6, ACCESS       ; Chip select is active
                      00171 
                      00172         ; first write to SSPBUF in routine so we need to check for collision
                      00173         ; if collision then continue to attempt write
0006E6                00174 eepromWriteEnable_lp
0006E6 0E06           00175         movlw   EE_WREN
0006E8 EC?? F???      00176         call    eepromXferSingleByte
0006EC BEC6           00177         btfsc   SSPCON1, WCOL, ACCESS
0006EE D???           00178         bra             eepromWriteEnable_lp
                      00179 
                      00180         ; deassert Slave Select signal
                      00181         DEASSERT_SS
0006F0 8C8B               M         bsf             LATC, RC6, ACCESS       ; Chip select is idle
                      00182         
0006F2 0012           00183         return
                      00184 
                      00185 
                      00186 ;**********************************************************************
                      00187 ; Function: void eepromReadStatusReg(byte wreg)
                      00188 ;**********************************************************************
                      00189 
0006F4                00190 eepromReadStatusReg
                      00191         
                      00192         ; assert Slave Select signal
                      00193         ASSERT_SS
0006F4 9C8B               M         bcf             LATC, RC6, ACCESS       ; Chip select is active
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 101


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00194 
                      00195         ; first write to SSPBUF in routine so we need to check for collision
                      00196         ; if collision then continue to attempt write
0006F6                00197 eepromReadStatusReg_doLp1
0006F6 0E05           00198         movlw   EE_RDSR
0006F8 EC?? F???      00199         call    eepromXferSingleByte
0006FC BEC6           00200         btfsc   SSPCON1, WCOL, ACCESS
0006FE D???           00201         bra             eepromReadStatusReg_doLp1
                      00202         
                      00203         ; routine is now synchronized with SSP operation so no need to check WCOl
                      00204 
                      00205         ; send dummy value while receiving Status register
000700 0E00           00206         movlw   0
000702 EC?? F???      00207         call    eepromXferSingleByte
                      00208 
                      00209         ; read Status Reg complete
                      00210         ; WREG = EEPROM Status
                      00211 
                      00212         ; deassert Slave Select signal
                      00213         DEASSERT_SS
000706 8C8B               M         bsf             LATC, RC6, ACCESS       ; Chip select is idle
                      00214 
000708 0012           00215         return
                      00216 
                      00217 
                      00218 ;**********************************************************************
                      00219 ; Function: void eepromWriteStatusReg(byte wreg)
                      00220 ;**********************************************************************
                      00221 
00070A                00222 eepromWriteStatusReg
                      00223 
                      00224         ; push working regs onto software stack
                      00225         PUSH_R  r0
00070A C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00226         ; define variables to pushed registers
                      00227         #define statusRegValue  r0
                      00228 
                      00229         ; save argument passed in WREG
00070E 6E03           00230         movwf   statusRegValue, ACCESS
                      00231         
                      00232         ; assert Slave Select signal
                      00233         ASSERT_SS
000710 9C8B               M         bcf             LATC, RC6, ACCESS       ; Chip select is active
                      00234 
                      00235         ; first write to SSPBUF in routine so we need to check for collision
                      00236         ; if collision then continue to attempt write
000712                00237 eepromWriteStatusReg_doLp1
000712 0E01           00238         movlw   EE_WRSR
000714 EC?? F???      00239         call    eepromXferSingleByte
000718 BEC6           00240         btfsc   SSPCON1, WCOL, ACCESS
00071A D???           00241         bra             eepromWriteStatusReg_doLp1
                      00242         
                      00243         ; routine is now synchronized with SSP operation so no need to check WCOl
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 102


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00244 
                      00245         ; send Status register value to write
00071C 5003           00246         movf    statusRegValue, w, ACCESS
00071E EC?? F???      00247         call    eepromXferSingleByte
                      00248 
                      00249         ; write Status Reg complete
                      00250 
                      00251         ; deassert Slave Select signal
                      00252         DEASSERT_SS
000722 8C8B               M         bsf             LATC, RC6, ACCESS       ; Chip select is idle
                      00253 
                      00254         ; pop working regs onto software stack
                      00255         POP_R   r0
000724 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00256         ; undefine variables from popped registers
                      00257         #undefine       statusRegValue
                      00258 
000728 0012           00259         return
                      00260 
                      00261 
                      00262 ;**********************************************************************
                      00263 ; Function: sampleDataBuffer[0] = eepromReadSingleByte(nextSampleAddress)
                      00264 ;**********************************************************************
                      00265 
00072A                00266 eepromReadSingleByte
                      00267 
                      00268         ; push working regs onto software stack
                      00269         PUSH_R  r0
00072A C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00270         PUSH_R  FSR0L
00072E CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00271         PUSH_R  FSR0H
000732 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00272         ; define variables to pushed registers
                      00273         #define tmpValue                                r0
                      00274         #define FSR_sampleDataBuffer    FSR0
                      00275         #define PLUSW_sampleDataBuffer  PLUSW0  
                      00276                 
                      00277         ; load pointer
000736 EE00 F071      00278         lfsr    FSR_sampleDataBuffer, sampleDataBuffer
                      00279 
                      00280         ; assert Slave Select signal
                      00281         ASSERT_SS
00073A 9C8B               M         bcf             LATC, RC6, ACCESS       ; Chip select is active
                      00282         
                      00283         ; first write to SSPBUF in routine so we need to check for collision
                      00284         ; if collision then continue to attempt write
00073C                00285 eepromReadSingleByte_lp1
00073C 0E03           00286         movlw   EE_READ
00073E EC?? F???      00287         call    eepromXferSingleByte
000742 BEC6           00288         btfsc   SSPCON1, WCOL, ACCESS
000744 D???           00289         bra             eepromReadSingleByte_lp1
                      00290         
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 103


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00291         ; send address HIGH byte
000746 5016           00292         movf    nextSampleAddress + 1, w, ACCESS
000748 EC?? F???      00293         call    eepromXferSingleByte
                      00294 
                      00295         ; send address LOW byte
00074C 5015           00296         movf    nextSampleAddress, w, ACCESS
00074E EC?? F???      00297         call    eepromXferSingleByte
                      00298 
                      00299         ; send dummy 0x00 value, get byte from EEPROM
000752 0E00           00300         movlw   0
000754 EC?? F???      00301         call    eepromXferSingleByte
                      00302         
                      00303         ; deassert Slave Select signal
                      00304         DEASSERT_SS
000758 8C8B               M         bsf             LATC, RC6, ACCESS       ; Chip select is idle
                      00305 
                      00306         ; pop working regs from software stack
                      00307         POP_R   FSR0H
00075A CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00308         POP_R   FSR0L
00075E CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00309         POP_R   r0
000762 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00310         ; undefine variables from popped registers
                      00311         #undefine       tmpValue
                      00312         #undefine       FSR_sampleDataBuffer
                      00313         #undefine       PLUSW_sampleDataBuffer
                      00314 
000766 0012           00315         return
                      00316 
                      00317 
                      00318 ;**********************************************************************
                      00319 ; Function: void eepromWrite64(void)
                      00320 ;**********************************************************************
                      00321 
000768                00322 eepromWrite64
                      00323         ; push working regs onto software stack
                      00324         PUSH_R  r0
000768 C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00325         PUSH_R  FSR0L
00076C CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00326         PUSH_R  FSR0H
000770 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00327         PUSH_R  PRODL   
000774 CFF3 FFDD          M         movff   PRODL,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00328         PUSH_R  PRODH
000778 CFF4 FFDD          M         movff   PRODH,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00329         ; define variables to pushed registers
                      00330         #define index                                           r0
                      00331         #define FSR_sampleDataBuffer            FSR0
                      00332         #define PLUSW_sampleDataBuffer          PLUSW0  
                      00333 
                      00334         ; load fsr
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 104


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00077C EE00 F071      00335         lfsr    FSR_sampleDataBuffer, sampleDataBuffer  
                      00336         
                      00337         ;**** start procedure: send 'WRITE ENABLE' command to EEPROM ****
                      00338         ; eepromWriteEnable function takes care of waiting for collision-free write
000780 EC?? F???      00339         call    eepromWriteEnable
                      00340 
                      00341         ; routine is now synchronized with SSP operation so no need to check WCOl
                      00342         
                      00343         ;**** start procedure: send 'WRITE' command to EEPROM ****
                      00344         ; assert Slave Select signal
                      00345         ASSERT_SS
000784 9C8B               M         bcf             LATC, RC6, ACCESS       ; Chip select is active
                      00346 
                      00347         ; load EEPROM WRITE command value into WREG
000786 0E02           00348         movlw   EE_WRITE
                      00349         ; write command value into SSPBUF
000788 EC?? F???      00350         call    eepromXferSingleByte
                      00351 
                      00352         ; load EEPROM WRITE ADDRESS into SSPBUF
                      00353         ; calculate EEPROM write address for current sample data chunk
                      00354         ; address = ((sampleChunkCount - 1) * SAMPLE_DATA_BUFFER_SIZE);
                      00355         ; after multiply, registers PRODH:L = address
00078C 0412           00356         decf    sampleChunkCount, w, ACCESS
00078E 0D40           00357         mullw   SAMPLE_DATA_BUFFER_SIZE
                      00358 
                      00359         ; load EEPROM WRITE ADDRESS HIGH BYTE into SSPBUF
                      00360 
                      00361 ; [Problem Code Begin]
                      00362 ; this code breaks EEPROM write
                      00363 ;       movff   PRODH, SSPBUF
                      00364 ; DEBUG
                      00365 ; but this code works
000790 50F4           00366         movf    PRODH, w, ACCESS
                      00367         ; write command value into SSPBUF
000792 EC?? F???      00368         call    eepromXferSingleByte
                      00369 ; [Problem Code End]
                      00370 
                      00371         ; load EEPROM WRITE ADDRESS LOW BYTE into SSPBUF
                      00372 
                      00373 ; [Problem Code Begin]
                      00374 ; this code breaks EEPROM write
                      00375 ;       movff   PRODL, SSPBUF
                      00376 ; DEBUG
                      00377 ; but this code works
000796 50F3           00378         movf    PRODL, w, ACCESS
                      00379         ; write command value into SSPBUF
000798 EC?? F???      00380         call    eepromXferSingleByte
                      00381 ; [Problem Code End]
                      00382         
                      00383         ; write 64-byte sampleDataBuffer to EEPROM
                      00384         ; init index to point at first element in buffer
00079C 6A03           00385         clrf    index, ACCESS
00079E                00386 eepromWrite64_sendBuffer
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 105


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00387         ; SSPBUF = sampleDataBuffer(index)
                      00388 
                      00389 ; [Problem Code Begin]
                      00390 ; this code breaks EEPROM writing
                      00391 ;       movf    index, w, ACCESS
                      00392 ;       movff   PLUSW_sampleDataBuffer, SSPBUF
                      00393 ; DEBUG
                      00394 ; but this code works
00079E 5003           00395         movf    index, w, ACCESS
0007A0 50EB           00396         movf    PLUSW_sampleDataBuffer, w, ACCESS
                      00397         ; write data into SSPBUF
0007A2 EC?? F???      00398         call    eepromXferSingleByte
                      00399 ; [Problem Code End]
                      00400 
                      00401         ; increment index
0007A6 2A03           00402         incf    index, f, ACCESS
                      00403         ; if index is == SAMPLE_DATA_BUFFER_SIZE then entire buffer has been sent
0007A8 0E40           00404         movlw   SAMPLE_DATA_BUFFER_SIZE
0007AA 6203           00405         cpfseq  index, ACCESS
                      00406         ; not done so continue
0007AC D???           00407         bra             eepromWrite64_sendBuffer
                      00408         
                      00409         ; entire buffer has been sent
                      00410         ; buffer write request complete
                      00411 
                      00412         ; clear eeprom ready flag to signal that eeprom will be unavailable for a bit while the write co
                            mpletes
0007AE 9617           00413         bcf             eepromFlags, ready, ACCESS
                      00414 
                      00415         ; deassert Slave Select signal
                      00416         DEASSERT_SS                                                     
0007B0 8C8B               M         bsf             LATC, RC6, ACCESS       ; Chip select is idle
                      00417 
                      00418         ; undefine variables from pushed registers
                      00419         #undefine       index
                      00420         #undefine       FSR_sampleDataBuffer
                      00421         #undefine       PLUSW_sampleDataBuffer
                      00422         ; pop working regs from software stack
                      00423         POP_R   PRODH   
0007B2 CFDC FFF4          M         movff   softwareStackPointerPREINC, PRODH       ; ++softwareStackPointerINDF = regName
                      00424         POP_R   PRODL
0007B6 CFDC FFF3          M         movff   softwareStackPointerPREINC, PRODL       ; ++softwareStackPointerINDF = regName
                      00425         POP_R   FSR0H   
0007BA CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00426         POP_R   FSR0L
0007BE CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00427         POP_R   r0
0007C2 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00428 
0007C6 0012           00429         return
                      00430         
                      00431         
                      00432 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 106


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00433 ; Function: void initInternalEEPROM(void)
                      00434 ;**********************************************************************
                      00435 
0007C8                00436 initInternalEEPROM
                      00437         ; ensure that access is always to Program Memory aside from inside EEPROM functions
                      00438         ; EEPGD (1 = Access Program Memory, 0 = Access EEPROM)
0007C8 8EA6           00439         bsf             EECON1, EEPGD, ACCESS
                      00440         ; CFGS (1 = Access Configuration Registers, 0 = Access Program Memory or EEPROM)
0007CA 9CA6           00441         bcf             EECON1, CFGS, ACCESS
                      00442 
0007CC 0012           00443         return
                      00444         
                      00445 
                      00446 ;**********************************************************************
                      00447 ; Function: wreg eepromInternalRead(wreg address)
                      00448 ;**********************************************************************
                      00449 
0007CE                00450 eepromInternalRead
                      00451         ; load address
0007CE 6EA9           00452         movwf   EEADR, ACCESS
                      00453         ; EEPGD (1 = Access Program Memory, 0 = Access EEPROM)
0007D0 9EA6           00454         bcf             EECON1, EEPGD, ACCESS
                      00455         ; start read
0007D2 80A6           00456         bsf             EECON1, RD, ACCESS
                      00457         ; save read value to wreg
0007D4 50A8           00458         movf    EEDATA, w, ACCESS
                      00459         ; ensure that access is always to Program Memory aside from inside EEPROM functions
                      00460         ; EEPGD (1 = Access Program Memory, 0 = Access EEPROM)
0007D6 8EA6           00461         bsf             EECON1, EEPGD, ACCESS
                      00462 
0007D8 0012           00463         return
                      00464 
                      00465 
                      00466 
                      00467 
                      00308         #include        "../source/soundGen.asm"
                      00001         
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      soundGen.asm                                      *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 107


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 ;**********************************************************************
                      00022 ; INCLUDE FILES
                      00023 ;**********************************************************************
                      00024 
                      00025         #include        "../header/soundGen.h"
                      01053 
                      01054 ;**********************************************************************
                      01055 ;                                                                     *
                      01056 ;    Project:       deMIDulator                                       *
                      01057 ;    Filename:      soundGen.h                                        *
                      01058 ;    Date:                                                            *
                      01059 ;    File Version:                                                    *
                      01060 ;                                                                     *
                      01061 ;    Author:        Derek Enos                                        *
                      01062 ;    Company:                                                         *
                      01063 ;                                                                     * 
                      01064 ;                                                                     *
                      01065 ;**********************************************************************
                      01066 ;                                                                     *
                      01067 ;    Files required:                                                  *
                      01068 ;                                                                     *
                      01069 ;                                                                     *
                      01070 ;                                                                     *
                      01071 ;**********************************************************************
                      01072 
                      01073 #ifndef _SOUNDGENH_
                      01074 #define _SOUNDGENH_
                      01075 
                      01076 ;**********************************************************************
                      01077 ; GENERAL
                      01078 ;**********************************************************************
                      01079 
                      01080 ; Current code structure requires that MAX_POLY_DEPTH be set to 4!
                      01081 #define MAX_POLY_DEPTH                                  4       
                      01082 
                      01083 #define ACTIVE_NOTE_DELTAS_ELEMENT_SIZE 2
                      01084 #define ACTIVE_NOTE_DELTAS_SIZE                 MAX_POLY_DEPTH * ACTIVE_NOTE_DELTAS_ELEMENT_SIZE
                      01085 
                      01086 #define DELEGATED_DELTAS_ELEMENT_SIZE   2
                      01087 #define DELEGATED_DELTAS_SIZE                   MAX_POLY_DEPTH * DELEGATED_DELTAS_ELEMENT_SIZE
                      01088 
                      01089 #define OSC_DELTAS_ELEMENT_SIZE                 2
                      01090 #define OSC_DELTAS_SIZE                                 MAX_POLY_DEPTH * OSC_DELTAS_ELEMENT_SIZE
                      01091 
                      01092 #define ACCUMULATORS_ELEMENT_SIZE               4
                      01093 #define ACCUMULATORS_SIZE                               MAX_POLY_DEPTH * ACCUMULATORS_ELEMENT_SIZE
                      01094 
                      01095 #define ACTIVE_OUTPUT_VALUES_EL_SIZE    1
                      01096 #define ACTIVE_OUTPUT_VALUES_SIZE               MAX_POLY_DEPTH * ACTIVE_OUTPUT_VALUES_EL_SIZE
                      01097 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 108


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01098 #define LED_BLINK_RATE_VOICE_THROUGH    20
                      01099 #define LED_BLINK_RATE_VOICE_RECORD             6
                      01100 
                      01101 ; set soundGen timebase prescales for wave and sample modes
                      01102 ; Timer2 interrupt period is currently 32uS
                      01103 ; set sample timebase period to 192uS (5208 Hz)
                      01104 #define SAMPLE_PRESCALE 6
                      01105 ; wave sine/square timebase period to 64uS (15.625 kHz)
                      01106 #define WAVE_PRESCALE   2
                      01107 
                      01108 #define MAX_MODE_LEVEL  MONO
                      01109 
                      01110 ; set power-up Attack and Release parameters
                      01111 ; adsrAttackRate and adsrReleaseRate variables have a range of 0 - 64
                      01112 ; rate of 0 == MIDI Attack/Release Time of 127
                      01113 ; rate of 64 == MIDI Attack/Release Time of 0
                      01114 #define ADSR_ATTACK_RATE        63
                      01115 #define ADSR_RELEASE_RATE       16
                      01116 
                      01117 ; set adsr prescale target to increment adsrLimiterRegs value every 19.52mS
                      01118 ; 19.52mS gives a max individual attack/release time of 4.99712 Seconds
                      01119 ; the "increment" value is set by adsrAttackRate and adsrReleaseRate
                      01120 #define ADSR_PRESCALE 610
                      01121 
                      01122 ; changing from 0x00 reference to 0x80 to improve Attack/Release waveform quality
                      01123 #define PWM_IDLE_OUTPUT_VALUE 0x80
                      01124 
                      01125 ; In SINE mode, this values sets the range (+/- PWM_IDLE_OUTPUT_VALUE) of activeOutputValue within which
                             an oscillator will be
                      01126 ; ungated for changes to its delegatedDelta value.  Only allowing changes when activeOutputValue is appr
                            oximately == PWM_IDLE_OUTPUT_VALUE
                      01127 ; greatly reduces popping caused by Sine wave cycle clipping
                      01128 #define OSC_TRANSITION_OUTPUT_THRESHOLD 0x04
                      01129 
                      01130 ; Audio input DC Bias measurement, 253 ADC sample average:
                      01131 ;   (VDD == 3.2V / 256 = 0.0125V per ADC increment)
                      01132 ;   on-board mic selected, MIC connceted      = 0x47 (@ VDD = 3.2V, 0x47 correlates to 0.8875V)
                      01133 ;   external mic selected, input floating     = 0x38 (@ VDD = 3.2V, 0x38 correlates to 0.7000V)
                      01134 ;   line-in selected, input floating          = 0x53 (@ VDD = 3.2V, 0x53 correlates to 1.0375V)
                      01135 ; Should have balanced these offsets in the hardware. oh well.
                      01136 ; Sine and Square outputs idle at 0x80, so compensate for difference in Sample bias to mitigate popping
                      01137 ; average of above measurement is 0x46, 0x80 - 0x46 = 0x3A
                      01138 ;#define SAMPLE_DC_OFFSET (PWM_IDLE_OUTPUT_VALUE - 0x46)
                      01139 ; DEBUG - sample dc offset will change with component tolerances.  need to set manually for each PCB
                      01140 ; measured 0.930V RMS, 0.930 / 0.0125 = 74.4
                      01141 #define SAMPLE_DC_OFFSET (PWM_IDLE_OUTPUT_VALUE - 74)
                      01142 
                      01143 ; define the time to wait from record button release to start of sample recording
                      01144 ; this is an attempt to eliminate the record button's physical noise from the sample
                      01145 ;   Calculation Method:
                      01146 ;     timer2 int period == 32uS
                      01147 ;     samplePrescaleCounter == 6
                      01148 ;     32uS * 6 = 192uS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 109


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01149 ;     RECORD_BUTTON_RELEASE_WAIT_TIME = waitTimeInMs / 0.192
                      01150 ;                 maxTime = 192uS * 256 = 49.152mS
                      01151 ;
                      01152 ; load for delay of 5mS. (5 / 0.192 = 26.0417)
                      01153 #define RECORD_BUTTON_RELEASE_WAIT_TIME 26
                      01154 
                      01155 ;**********************************************************************
                      01156 ; ENUM TYPE DEFINITIONS
                      01157 ;**********************************************************************
                      01158 
                      01159 ; waveShape
                      01160 #define SINE 0
                      01161 #define SQUARE 1
                      01162 #define SAMPLE 2
                      01163 
                      01164 ; recordOrPlayback
                      01165 #define VOICE_THROUGH 0
                      01166 #define RECORD 1
                      01167 #define PLAYBACK 2
                      01168 
                      01169 ; modeLevels
                      01170 #define POLY 0
                      01171 #define SUSTAIN 1
                      01172 #define MONO 2
                      01173 
                      01174 
                      01175 ;**********************************************************************
                      01176 ; FLAG VARIABLE DEFINITIONS
                      01177 ;**********************************************************************
                      01178 
                      01179 ; midiFlags
                      01180 #define turnSoundOn 3
                      01181 #define turnSoundOff 4
                      01182 #define keyPressed 5
                      01183 #define soundOn 6
                      01184 
                      01185 ; soundGenFlags
                      01186 #define delegatorBusy 0
                      01187 #define pgDec 1
                      01188 #define needRefresh 2
                      01189 
                      01190 ; oscResetFlags
                      01191 #define osc0    0
                      01192 #define osc1    1
                      01193 #define osc2    2
                      01194 #define osc3    3
                      01195 
                      01196 ; oscStateFlags
                      01197 #define release 0
                      01198 #define sustain 1
                      01199 #define decay 2
                      01200 #define attack 3
                      01201 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 110


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01202 
                      01203 ;**********************************************************************
                      01204 ; MACROS
                      01205 ;**********************************************************************
                      01206 
                      01207 ;**********************************************************************
                      01208 CLEAR_ACCUMULATORS      MACRO
                      01209         local   loop
                      01210 
                      01211         ; init local variables
                      01212         PUSH_R  r0
                      01213         PUSH_R  FSR0L
                      01214         PUSH_R  FSR0H
                      01215         
                      01216         ; load fsr
                      01217         lfsr    FSR0, accumulators
                      01218 
                      01219         ; init count
                      01220         movf    polyDepth, w, ACCESS
                      01221         movwf   r0, ACCESS
                      01222 loop    
                      01223         ; each accumulator is 4 bytes wide
                      01224         clrf    POSTINC0, ACCESS        
                      01225         clrf    POSTINC0, ACCESS        
                      01226         clrf    POSTINC0, ACCESS        
                      01227         clrf    POSTINC0, ACCESS        
                      01228         ; decrement count, skip if done
                      01229         decfsz  r0, f, ACCESS
                      01230         bra             loop
                      01231 
                      01232         ; restore variables
                      01233         POP_R   FSR0H
                      01234         POP_R   FSR0L
                      01235         POP_R   r0
                      01236         
                      01237         ENDM
                      01238         
                      01239 
                      01240 ;**********************************************************************
                      01241 ENABLE_SUSTAIN  MACRO
                      01242         comf    oscResetFlags, w, ACCESS
                      01243         andlw   0x0f
                      01244         movwf   sustainFlags, ACCESS
                      01245         ENDM
                      01246         
                      01247 ;**********************************************************************
                      01248 DISABLE_SUSTAIN MACRO
                      01249         clrf    sustainFlags, ACCESS
                      01250         ENDM
                      01251 
                      01252 ;**********************************************************************
                      01253 REVERSE_SAMPLE_IF_MOD_OVER_63   MACRO
                      01254         local exitMacro
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 111


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01255         ; if modulation > 63 then reverse sample
                      01256         movlw   63
                      01257         cpfsgt  modulation, ACCESS
                      01258         bra             exitMacro
                      01259         ; modulation > 63 so do nextSampleAddress = (sampleEndAddress - nextSampleAddress)
                      01260         movf    nextSampleAddress, w, ACCESS
                      01261         subwf   sampleEndAddress, w, ACCESS
                      01262         movwf   nextSampleAddress, ACCESS
                      01263         movf    nextSampleAddress + 1, w, ACCESS
                      01264         subwfb  sampleEndAddress + 1, w, ACCESS
                      01265         movwf   nextSampleAddress + 1, ACCESS
                      01266 exitMacro
                      01267         ENDM
                      01268 
                      01269 ;**********************************************************************
                      01270 OSC_READ_ADSR_FLAG      MACRO   FLAG
                      01271 ; oscillator number passed in WREG
                      01272 ; boolean value is returned in WREG and ZERO flag is set accordingly
                      01273 
                      01274         ; push working regs onto software stack
                      01275         PUSH_R  FSR0L
                      01276         PUSH_R  FSR0H
                      01277         
                      01278         ; load fsr
                      01279         lfsr    FSR0, oscStateFlags
                      01280         ; read the register into WREG
                      01281         movf    PLUSW0, w, ACCESS
                      01282         andlw   1<<FLAG
                      01283         
                      01284         ; restore working regs from stack
                      01285         POP_R   FSR0H
                      01286         POP_R   FSR0L   
                      01287         
                      01288         ENDM
                      01289 
                      01290 ;**********************************************************************
                      01291 OSC_ADVANCE_ADSR        MACRO   OSC_NUMBER
                      01292         local   macroDone, doAttack, attackDone, doRelease, releaseDone
                      01293 
                      01294         ; ignore advance if oscillator is sustained
                      01295         btfsc   sustainFlags, OSC_NUMBER, ACCESS
                      01296         bra             macroDone
                      01297         
                      01298         btfsc   oscStateFlags + OSC_NUMBER, attack, ACCESS
                      01299         bra             doAttack
                      01300         btfsc   oscStateFlags + OSC_NUMBER, release, ACCESS
                      01301         bra             doRelease
                      01302         bra             macroDone
                      01303         
                      01304 doAttack
                      01305         ; osc is attacking
                      01306 
                      01307         ; test condition ((adsrLimiterRegs -= ADSR_ATTACK_RATE) <=0)
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 112


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01308         movf    adsrAttackRate, w, ACCESS
                      01309         subwf   adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      01310         bnc             attackDone
                      01311         bz              attackDone
                      01312 
                      01313         ; condition is FALSE so do the subtraction and exit
                      01314         ; (adsrLimiterRegs -= ADSR_ATTACK_RATE)
                      01315         movf    adsrAttackRate, w, ACCESS
                      01316         subwf   adsrLimiterRegs + OSC_NUMBER, f, ACCESS
                      01317         bra             macroDone
                      01318 
                      01319 attackDone
                      01320         ; clear attack flag
                      01321         bcf             oscStateFlags + OSC_NUMBER, attack, ACCESS
                      01322         clrf    adsrLimiterRegs + OSC_NUMBER, ACCESS
                      01323         bra     macroDone
                      01324 
                      01325 doRelease
                      01326         ; osc is releasing
                      01327 
                      01328         ; test condition: ((adsrLimiterRegs + ADSR_ATTACK_RATE) >= 255)
                      01329         movf    adsrReleaseRate, w, ACCESS
                      01330         addwf   adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      01331         ; condition is TRUE so skip the addition and leave adsrLimiterRegs at its current value
                      01332         bc              releaseDone
                      01333         comf    WREG, w, ACCESS
                      01334         ; condition is TRUE so skip the addition and leave adsrLimiterRegs at its current value
                      01335         bz              releaseDone
                      01336 
                      01337         ; condition is FALSE so do the addition and exit
                      01338         ; do (adsrLimiterRegs += ADSR_ATTACK_RATE)      
                      01339         movf    adsrReleaseRate, w, ACCESS
                      01340         addwf   adsrLimiterRegs + OSC_NUMBER, f, ACCESS
                      01341         bra             macroDone
                      01342         
                      01343 releaseDone
                      01344         ; clear release flag
                      01345         bcf             oscStateFlags + OSC_NUMBER, release, ACCESS
                      01346         ; set limit reg to max
                      01347         setf    adsrLimiterRegs + OSC_NUMBER, ACCESS
                      01348         ; clear oscillator's delegatedDelta
                      01349         clrf    delegatedDeltas + OSC_NUMBER * 2;
                      01350         clrf    delegatedDeltas + (OSC_NUMBER * 2) + 1; 
                      01351         bra     macroDone
                      01352         
                      01353 macroDone
                      01354         ENDM
                      01355         
                      01356 ;**********************************************************************
                      01357 OSC_MIX MACRO   OSC_NUMBER
                      01358         local   mixDone, mixDoPos, mixDoNeg, mixDoDone
                      01359                 
                      01360         ; check polarity of current activeOutputValue compared to PWM_IDLE_OUTPUT_VALUE
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 113


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01361         movlw   PWM_IDLE_OUTPUT_VALUE
                      01362         subwf   activeOutputValues + OSC_NUMBER, w
                      01363         bnc             mixDoNeg
                      01364 mixDoPos
                      01365         ; WREG = adsrLimiterRegs/2
                      01366         bcf             STATUS, C, ACCESS
                      01367         rrcf    adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      01368         subwf   activeOutputValues + OSC_NUMBER, w
                      01369         bra             mixDoDone
                      01370 mixDoNeg
                      01371         ; WREG = adsrLimiterRegs/2
                      01372         bcf             STATUS, C, ACCESS
                      01373         rrcf    adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      01374         addwf   activeOutputValues + OSC_NUMBER, w      
                      01375 mixDoDone
                      01376         ; overflow indicates that last operation toggled bit 7
                      01377         btfsc   STATUS, OV, ACCESS
                      01378         movlw   PWM_IDLE_OUTPUT_VALUE
                      01379 
                      01380 mixDone
                      01381         ; add WREG to mixedOutputL/H
                      01382         addwf   mixedOutputL, f, ACCESS
                      01383         btfsc   STATUS, C, ACCESS
                      01384         incf    mixedOutputH, f, ACCESS
                      01385         
                      01386         ENDM
                      01387 
                      01388 ;**********************************************************************
                      01389 OSC_STATE_BLOCK MACRO   OSC_NUMBER
                      01390         local   checkDelegating, oscCheckActive, zeroAcc, oscActive, waveIsSample, noTransition, oscChec
                            kNotSine
                      01391         local   clrSampleAcc, addressOk, waveIsNotSample, waveIsSine, waveIsSquare, tableAddressLoaded, 
                            resetOscillator, macroDone
                      01392                 
                      01393         ; if oscillator is locked for sustain then leave it alone
                      01394         btfsc   sustainFlags, OSC_NUMBER, ACCESS
                      01395         bra             oscActive
                      01396                         
                      01397 checkDelegating
                      01398         ; don't update if delegator is busy because delegatedDelta value is volatile
                      01399         btfsc   soundGenFlags, delegatorBusy, ACCESS
                      01400         ; delegator is busy so just keep spinning
                      01401         bra             oscCheckActive
                      01402         
                      01403         ; THRESHOLD METHOD WORKS WELL
                      01404         movlw   SINE
                      01405         cpfseq waveShape, ACCESS
                      01406         bra             oscCheckNotSine
                      01407         ; calculate absolute offset between PWM_IDLE_OUTPUT_VALUE and current activeOutputValue
                      01408         movlw   PWM_IDLE_OUTPUT_VALUE
                      01409         subwf   activeOutputValues + OSC_NUMBER, w
                      01410         ; invert if negative
                      01411         btfss   STATUS, C, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 114


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01412         negf    WREG, ACCESS
                      01413         ; check if offset is below threshold value
                      01414         ; do (WREG = OSC_OUTPUT_GATE_THRESHOLD - WREG)
                      01415         sublw   OSC_TRANSITION_OUTPUT_THRESHOLD
                      01416         ; if result is positive then activeOutputValue offset from IDLE is <= THRESHOLD so allow changes
                      01417         bnc             oscCheckActive
                      01418 
                      01419 oscCheckNotSine
                      01420 
                      01421         ; delegator is idle and oscillator is enabled so copy delegated delta as internal
                      01422         movff   delegatedDeltas + (OSC_NUMBER * DELEGATED_DELTAS_ELEMENT_SIZE) + 0, oscDeltas + (OSC_NUM
                            BER * OSC_DELTAS_ELEMENT_SIZE) + 0
                      01423         movff   delegatedDeltas + (OSC_NUMBER * DELEGATED_DELTAS_ELEMENT_SIZE) + 1, oscDeltas + (OSC_NUM
                            BER * OSC_DELTAS_ELEMENT_SIZE) + 1
                      01424 
                      01425 oscCheckActive
                      01426         ; if oscDeltas[OSC_NUMBER] == 0x00 then oscillator is not really active so reset
                      01427         ; this check is required in event that (activeOutput == 0 && delegatorBusy == TRUE && oscDelta =
                            = 0)
                      01428         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, f
                      01429         bnz             oscActive
                      01430         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, f
                      01431         bz              resetOscillator
                      01432         
                      01433 oscActive
                      01434         ; if oscillator is starting from reset state then begin with 0x0000 accumulator
                      01435         btfsc   oscResetFlags, OSC_NUMBER, ACCESS
                      01436         bra             zeroAcc
                      01437 
                      01438         ;**** start procedure: step Accumulator (SINE/SQUARE/SAMPLE) ****
                      01439         ; accumulator += activeNoteDelta
                      01440         ; accumulators are 4 bytes wide, activeNoteDeltas are 2 bytes wide
                      01441         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, w
                      01442         addwf   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
                      01443         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, w  
                      01444         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
                      01445         movlw   0
                      01446         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
                      01447         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                      01448         
                      01449 zeroAcc
                      01450         ; we're done with oscResetFlags flag so ensure that it's clear
                      01451         bcf             oscResetFlags, OSC_NUMBER, ACCESS
                      01452         
                      01453         ;**** start procedure: handle Pitch Wheel (SINE/SQUARE/SAMPLE) ****
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 115


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01454         ; accumulator += pitchWheel
                      01455         movf    pitchWheel                                                                              
                                                                            + 0, w, ACCESS
                      01456         addwf   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
                      01457         movf    pitchWheel                                                                              
                                                                            + 1, w, ACCESS
                      01458         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
                      01459         movf    pitchWheel                                                                              
                                                                            + 2, w, ACCESS
                      01460         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
                      01461         movf    pitchWheel                                                                              
                                                                            + 3, w, ACCESS
                      01462         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                      01463         
                      01464         ;**** start procedure: if SAMPLE waveshape then load next read address  (SAMPLE ONLY) ****
                      01465         ; branch to waveform specific table address load
                      01466         movlw   SAMPLE
                      01467         cpfseq  waveShape, ACCESS
                      01468         bra             waveIsNotSample
                      01469 waveIsSample
                      01470 
                      01471         ; if samplesLoaded flag is set then load next EEPROM read address
                      01472         ; checking this here as opposed to before accumulator update will, in the event of the mainline 
                            not…
                      01473         ; being able to load the samples in time, cause audio chopping rather than detuning
                      01474         btfss   eepromFlags, samplesLoaded, ACCESS
                      01475         bra             macroDone
                      01476         
                      01477         ; check for note transition
                      01478         ; keyPressed flag is set every time a MIDI Note On message is received
                      01479         ; when a sample is playing back in POLY or SUSTAIN modes, we want the sample to restart from the
                             beginning...
                      01480         ; whenever a Note On message is received.
                      01481         btfss   midiFlags, keyPressed, ACCESS
                      01482         bra             noTransition
                      01483         ; is modeLevel == POLY
                      01484         movlw   POLY
                      01485         xorwf   modeLevel, w, ACCESS
                      01486         ; mode is POLY so reset accumulator to restart sample from beginning
                      01487         bz              clrSampleAcc
                      01488 
                      01489 noTransition    
                      01490         ; nextSampleAddress = ((accumulator >> 8) & 0xffff)
                      01491         ; reset accumulator if nextSampleAddress value will exceed sampleEndAddress
                      01492         ; is waveTableIndex > sampleEndAddress?
                      01493         movf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, w
                      01494         subwf   sampleEndAddress, w, ACCESS
                      01495         movf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 116


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            + 2, w
                      01496         subwfb  sampleEndAddress + 1, w, ACCESS
                      01497         ; result is positive so waveTableIndex is within valid range
                      01498         bc              addressOk
                      01499         ; ((accumulator >> 8) & 0xffff) is out of valid sample range so restart sample from beginning
                      01500         ; reset accumulator
                      01501 clrSampleAcc
                      01502         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0
                      01503         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1
                      01504         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2
                      01505         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3
                      01506 addressOk
                      01507         
                      01508         ; do nextSampleAddress = ((accumulator >> 8) & 0xffff)
                      01509         movff   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, nextSampleAddresses + (OSC_NUMBER * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 0
                      01510         movff   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, nextSampleAddresses + (OSC_NUMBER * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 1
                      01511         
                      01512         bra             macroDone
                      01513         
                      01514 waveIsNotSample
                      01515         ;**** start procedure: waveshape is SINE or SQUARE so read Program Memory table  (SINE/SQUARE ON
                            LY) ****
                      01516         ; branch to waveform specific table address load
                      01517         movlw   SINE
                      01518         cpfseq  waveShape, ACCESS
                      01519         bra             waveIsSquare
                      01520 
                      01521 waveIsSine      
                      01522         ; 
                      01523         ; load address of SINE table read
                      01524         ; offset = ((accumulator >> 8) & 0xff)
                      01525         movf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1, w
                      01526         addwf   sineTableBaseAddress + 0, w
                      01527         movwf   TBLPTRL, ACCESS
                      01528         movf    sineTableBaseAddress + 1, w
                      01529         btfsc   STATUS, C, ACCESS
                      01530         addlw   1
                      01531         movwf   TBLPTRH, ACCESS
                      01532         movf    sineTableBaseAddress + 2, w
                      01533         btfsc   STATUS, C, ACCESS
                      01534         addlw   1
                      01535         movwf   TBLPTRU, ACCESS
                      01536         bra             tableAddressLoaded
                      01537 
                      01538 waveIsSquare
                      01539         ; load address of SQUARE table read
                      01540         ; offset = ((accumulator >> 8) & 0xff)
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 117


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01541         movf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1, w
                      01542         addwf   squareTableBaseAddress + 0, w
                      01543         movwf   TBLPTRL, ACCESS
                      01544         movf    squareTableBaseAddress + 1, w
                      01545         btfsc   STATUS, C, ACCESS
                      01546         addlw   1
                      01547         movwf   TBLPTRH, ACCESS
                      01548         movf    squareTableBaseAddress + 2, w
                      01549         btfsc   STATUS, C, ACCESS
                      01550         addlw   1
                      01551         movwf   TBLPTRU, ACCESS
                      01552 
                      01553 tableAddressLoaded
                      01554         ; read value from program memory
                      01555         tblrd*
                      01556         movff   TABLAT, activeOutputValues + (OSC_NUMBER * ACTIVE_OUTPUT_VALUES_EL_SIZE) + 0
                      01557         bra             macroDone
                      01558         
                      01559 resetOscillator
                      01560         ; set oscillator reset flag
                      01561         bsf             oscResetFlags, OSC_NUMBER, ACCESS
                      01562         movlw   PWM_IDLE_OUTPUT_VALUE
                      01563         movwf   activeOutputValues + (OSC_NUMBER * ACTIVE_OUTPUT_VALUES_EL_SIZE)
                      01564         clrf    oscDeltas + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE) + 0
                      01565         clrf    oscDeltas + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE) + 1
                      01566         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 0
                      01567         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1
                      01568         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 2
                      01569         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 3
                      01570 
                      01571 macroDone
                      01572 
                      01573         ENDM
                      01574         
                      01575         
                      01576 #endif
                      01577 
                      01578 
                      00026         #include        "../header/midi.h"
                      00664 
                      00665 ;**********************************************************************
                      00666 ;                                                                     *
                      00667 ;    Project:       deMIDulator                                       *
                      00668 ;    Filename:      midi.h                                            *
                      00669 ;    Date:                                                            *
                      00670 ;    File Version:                                                    *
                      00671 ;                                                                     *
                      00672 ;    Author:        Derek Enos                                        *
                      00673 ;    Company:                                                         *
                      00674 ;                                                                     * 
                      00675 ;                                                                     *
                      00676 ;**********************************************************************
                      00677 ;                                                                     *
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 118


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00678 ;    Files required:                                                  *
                      00679 ;                                                                     *
                      00680 ;                                                                     *
                      00681 ;                                                                     *
                      00682 ;**********************************************************************
                      00683 
                      00684 #ifndef _MIDIH_
                      00685 #define _MIDIH_
                      00686 
                      00687 
                      00688 ; ******************* MIDI SYSEX DEFINES ***********************
                      00689 #define         VENDOR_ID       0x77
                      00690 #define         DEVICE_ID       0x1D
                      00691 #define         TERMINAL_PACKET_COMMAND_VALUE   0x1E
                      00692 
                      00693 ; ******************* MIDI BUFFER SIZES ***********************
                      00694 
                      00695 #define         MAX_MIDI_MESSAGE_SIZE   24
                      00696 #define         ACTIVE_NOTE_TABLE_SIZE  25
                      00697 
                      00698 
                      00699 ; ******************* STATUS BYTE DEFINITONS ***********************
                      00700 
                      00701 ; Note that lower nybble (channel) should be masked out for comparison
                      00702 ;------------------------
                      00703 #define         NOTE_OFF                                0x80
                      00704 #define         NOTE_ON                                 0x90
                      00705 #define         KEY_PRESSURE                    0xA0
                      00706 #define         CONTROL_CHANGE                  0xB0
                      00707 #define         PROGRAM_CHANGE                  0xC0
                      00708 #define         CHANNEL_PRESSURE                0xD0
                      00709 #define         PITCH_WHEEL                             0xE0
                      00710 
                      00711 ; Sysex Status Byte Definitions
                      00712 #define         SYSEX                                   0xF0
                      00713 #define         EOX                                             0xF7
                      00714 
                      00715 #define         NOTE_OFF_MESSAGE_LENGTH                         3
                      00716 #define         NOTE_ON_MESSAGE_LENGTH                          3
                      00717 #define         KEY_PRESSURE_MESSAGE_LENGTH                     3
                      00718 #define         CONTROL_CHANGE_MESSAGE_LENGTH           3
                      00719 #define         PROGRAM_CHANGE_MESSAGE_LENGTH           2
                      00720 #define         CHANNEL_PRESSURE_MESSAGE_LENGTH         2
                      00721 #define         PITCH_WHEEL_MESSAGE_LENGTH                      3
                      00722 
                      00723 ; SysEx Sub Types
                      00724 ;----------------------------
                      00725 #define         NON_REAL_TIME                                           0x7E
                      00726 #define         GENERAL_INFORMATION                                     0x06
                      00727 #define         IDENTITY_REQUEST                                        0x01
                      00728 #define         IDENTITY_REPLY                                          0x02
                      00729 
                      00730 ; Control Change Data Types
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 119


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00731 ;----------------------------
                      00732 #define         BANK_SELECT_MSB                                         0
                      00733 #define         MODULATION_WHEEL_MSB                            1
                      00734 #define         BREATH_CONTROLLER_MSB                           2
                      00735 #define         UNDEFINED_003                                           3
                      00736 #define         FOOT_CONTROLLER_MSB                                     4
                      00737 #define         PORTAMENTO_TIME                                         5
                      00738 #define         DATA_ENTRY_MSB                                          6
                      00739 #define         CHANNEL_VOLUME_MSB                                      7
                      00740 #define         BALANCE_MSB                                                     8
                      00741 #define         UNDEFINED_MSB                                           9
                      00742 #define         PAN_MSB                                                         10
                      00743 #define         EXPRESSION_MSB                                          11
                      00744 #define         EFFECT_CONTROL_1_MSB                            12
                      00745 #define         EFFECT_CONTROL_2_MSB                            13
                      00746 #define         UNDEFINED_014                                           14
                      00747 #define         UNDEFINED_015                                           15
                      00748 #define         GENERAL_PURPOSE_CONTROLLER_1_MSB        16
                      00749 #define         GENERAL_PURPOSE_CONTROLLER_2_MSB        17
                      00750 #define         GENERAL_PURPOSE_CONTROLLER_3_MSB        18
                      00751 #define         GENERAL_PURPOSE_CONTROLLER_4_MSB        19
                      00752 #define         UNDEFINED_020                                           20
                      00753 #define         UNDEFINED_021                                           21
                      00754 #define         UNDEFINED_022                                           22
                      00755 #define         UNDEFINED_023                                           23
                      00756 #define         UNDEFINED_024                                           24
                      00757 #define         UNDEFINED_025                                           25
                      00758 #define         UNDEFINED_026                                           26
                      00759 #define         UNDEFINED_027                                           27
                      00760 #define         UNDEFINED_028                                           28
                      00761 #define         UNDEFINED_029                                           29
                      00762 #define         UNDEFINED_030                                           30
                      00763 #define         UNDEFINED_031                                           31
                      00764 #define         BANK_SELECT_LSB                                         32
                      00765 #define         MODULATION_WHEEL_LSB                            33
                      00766 #define         BREATH_CONTROLLER_LSB                           34
                      00767 #define         UNDEFINED_035                                           35
                      00768 #define         FOOT_CONTROLLER_LSB                                     36
                      00769 #define         PORTAMENTO_TIME_LSB                                     37
                      00770 #define         DATA_ENTRY_LSB                                          38
                      00771 #define         CHANNEL_VOLUME_LSB                                      39
                      00772 #define         BALANCE_LSB                                                     40
                      00773 #define         UNDEFINED_041                                           41
                      00774 #define         PAN_LSB                                                         42
                      00775 #define         EXPRESSION_LSB                                          43
                      00776 #define         EFFECT_CONTROL_1_LSB                            44
                      00777 #define         EFFECT_CONTROL_2_LSB                            45
                      00778 #define         UNDEFINED_046                                           46
                      00779 #define         UNDEFINED_047                                           47
                      00780 #define         GENERAL_PURPOSE_CONTROLLER_1_LSB        48
                      00781 #define         GENERAL_PURPOSE_CONTROLLER_2_LSB        49
                      00782 #define         GENERAL_PURPOSE_CONTROLLER_3_LSB        50
                      00783 #define         GENERAL_PURPOSE_CONTROLLER_4_LSB        51
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 120


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00784 #define         UNDEFINED_052                                           52
                      00785 #define         UNDEFINED_053                                           53
                      00786 #define         UNDEFINED_054                                           54
                      00787 #define         UNDEFINED_055                                           55
                      00788 #define         UNDEFINED_056                                           56
                      00789 #define         UNDEFINED_057                                           57
                      00790 #define         UNDEFINED_058                                           58
                      00791 #define         UNDEFINED_059                                           59
                      00792 #define         UNDEFINED_060                                           60
                      00793 #define         UNDEFINED_061                                           61
                      00794 #define         UNDEFINED_062                                           62
                      00795 #define         UNDEFINED_063                                           63
                      00796 #define         SUSTAIN_PEDAL                                           64
                      00797 #define         PORTAMENTO_ONOFF                                        65
                      00798 #define         SOSTENUTO                                                       66
                      00799 #define         SOFT_PEDAL                                                      67
                      00800 #define         LEGATO_FOOTSWITCH                                       68
                      00801 #define         HOLD_2                                                          69
                      00802 #define         SOUND_CONTROLLER_1_DEFAULT_SOUND_VARIATION                              70
                      00803 #define         SOUND_CONTROLLER_2_DEFAULT_TIMBRE_HARMONIC_QUALITY              71
                      00804 #define         SOUND_CONTROLLER_3_DEFAULT_RELEASE_TIME                                 72
                      00805 #define         SOUND_CONTROLLER_4_DEFAULT_ATTACK_TIME                                  73
                      00806 #define         SOUND_CONTROLLER_5_DEFAULT_BRIGHTNESS                                   74
                      00807 #define         SOUND_CONTROLLER_6_GM2_DEFAULT_DECAY_TIME                               75
                      00808 #define         SOUND_CONTROLLER_7_GM2_DEFAULT_VIBRATO_RATE                             76
                      00809 #define         SOUND_CONTROLLER_8_GM2_DEFAULT_VIBRATO_DEPTH                    77
                      00810 #define         SOUND_CONTROLLER_9_GM2_DEFAULT_VIBRATO_DELAY                    78
                      00811 #define         SOUND_CONTROLLER_10_GM2_DEFAULT_UNDEFINED                               79
                      00812 #define         GENERAL_PURPOSE_CONTROLLER_5                                                    80
                      00813 #define         GENERAL_PURPOSE_CONTROLLER_6                                                    81
                      00814 #define         GENERAL_PURPOSE_CONTROLLER_7                                                    82
                      00815 #define         GENERAL_PURPOSE_CONTROLLER_8                                                    83
                      00816 #define         PORTAMENTO_CONTROL                                                                      
                                    84
                      00817 #define         UNDEFINED_85                                                                    85
                      00818 #define         UNDEFINED_86                                                                    86
                      00819 #define         UNDEFINED_87                                                                    87
                      00820 #define         UNDEFINED_88                                                                    88
                      00821 #define         UNDEFINED_89                                                                    89
                      00822 #define         UNDEFINED_90                                                                    90
                      00823 #define         EFFECTS_1_DEPTH_DEFAULT_REVERB_SEND                             91
                      00824 #define         EFFECTS_2_DEPTH_DEFAULT_TREMOLO_DEPTH                   92
                      00825 #define         EFFECTS_3_DEPTH_DEFAULT_CHORUS_SEND                             93
                      00826 #define         EFFECTS_4_DEPTH_DEFAULT_CELESTE_[DETUNE]_DEPTH  94
                      00827 #define         EFFECTS_5_DEPTH_DEFAULT_PHASER_DEPTH                    95
                      00828 #define         DATA_INCREMENT                                                                  96
                      00829 #define         DATA_DECREMENT                                                                  97
                      00830 #define         NON_REG_PARAMETER_NUMBER_LSB                            98
                      00831 #define         NON_REG_PARAMETER_NUMBER_MSB                            99
                      00832 #define         REGISTERED_PARAMETER_NUMBER_LSB                                 100
                      00833 #define         REGISTERED_PARAMETER_NUMBERMSB                                  101
                      00834 #define         UNDEFINED_102                                           102
                      00835 #define         UNDEFINED_103                                           103
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 121


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00836 #define         UNDEFINED_104                                           104
                      00837 #define         UNDEFINED_105                                           105
                      00838 #define         UNDEFINED_106                                           106
                      00839 #define         UNDEFINED_107                                           107
                      00840 #define         UNDEFINED_108                                           108
                      00841 #define         UNDEFINED_109                                           109
                      00842 #define         UNDEFINED_110                                           110
                      00843 #define         UNDEFINED_111                                           111
                      00844 #define         UNDEFINED_112                                           112
                      00845 #define         UNDEFINED_113                                           113
                      00846 #define         UNDEFINED_114                                           114
                      00847 #define         UNDEFINED_115                                           115
                      00848 #define         UNDEFINED_116                                           116
                      00849 #define         UNDEFINED_117                                           117
                      00850 #define         UNDEFINED_118                                           118
                      00851 #define         UNDEFINED_119                                           119
                      00852 #define         ALL_SOUND_OFF                                           120
                      00853 #define         RESET_ALL_CONTROLLERS                           121
                      00854 #define         LOCAL_CONTROL_ONOFF                                     122
                      00855 #define         ALL_NOTES_OFF                                           123
                      00856 #define         OMNI_MODE_OFF                                           124
                      00857 #define         OMNI_MODE_ON                                            125
                      00858 #define         POLY_MODE_OFF                                           126
                      00859 #define         POLY_MODE_ON                                            127
                      00860 
                      00861 
                      00862 ; ******************* MIDI MESSAGE STATES ***********************
                      00863 
                      00864 #define CHANNEL                                         0x00
                      00865 #define DATA_BYTE0                                      0x01
                      00866 #define DATA_BYTE1                                      0x02
                      00867 #define MESSAGE_COMPLETE                        0xFF
                      00868 
                      00869 #define NOTE_COMPLETE                           DATA_BYTE1
                      00870 #define AFTERTOUCH_COMPLETE                     DATA_BYTE1
                      00871 #define CONTROL_CHANGE_COMPLETE         DATA_BYTE1
                      00872 #define PROGRAM_CHANGE_COMPLETE         DATA_BYTE0
                      00873 #define PITCH_WHEEL_COMPLETE            DATA_BYTE1
                      00874 
                      00875 
                      00876 ; ******************* FLAG VARIABLE DEFINITIONS ***********************
                      00877 
                      00878 ; midiFlags (bits 3:7 free for use by other modules)
                      00879 #define uartState_rxInProgress                  0
                      00880 #define midiState_messageNeedsMapping   1
                      00881 #define midiThruModeEnabled                             2
                      00882 
                      00883 
                      00884 #endif
                      00027 
                      00028 
                      00029 ;**********************************************************************
                      00030 ; LOCAL VARIABLES
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 122


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00031 ;**********************************************************************
                      00032 
                      00033         CBLOCK
                      00034 
  00000018            00035                 soundGenFlags:1
                      00036                 ; bits defined in soundGen.h
                      00037                 ;       #define delegatorBusy 0
                      00038                 ;       #define pgDec 1
                      00039                 ;       #define needRefresh 2
  00000019            00040                 pitchWheel:4
  0000001D            00041                 modulation:1
  0000001E            00042                 waveShape:1
  0000001F            00043                 recordOrPlayback:1
  00000020            00044                 modeLevel:1
  00000021            00045                 samplePrescaleCounter:1
  00000022            00046                 wavePrescaleCounter:1
                      00047                 ; polyDepth (assigned from MAX_POLY_DEPTH during init) needs to be > 2 and a multiple of
                             2
  00000023            00048                 polyDepth:1
                      00049                 ; adding table addresses as variable to allow for roaming program memory samples
  00000024            00050                 sineTableBaseAddress:3
  00000027            00051                 squareTableBaseAddress:3
  0000002A            00052                 oscResetFlags:1
                      00053                 ; bits defined in soundGen.h
                      00054                 ; #define       osc0    0
                      00055                 ; #define       osc1    1
                      00056                 ; #define       osc2    2
                      00057                 ; #define       osc3    3
                      00058 
                      00059                 ; making these variables global to save time during processSoundState ISR call
  0000002B            00060                 sustainFlags:1
  0000002C            00061                 sample:1
  0000002D            00062                 mixedOutputL:1
  0000002E            00063                 mixedOutputH:1
  0000002F            00064                 oscStateFlags:4
                      00065                 ; bits defined in soundGen.h
                      00066                 ; #define       release 0
                      00067                 ; #define       sustain 1
                      00068                 ; #define       decay 2
                      00069                 ; #define       attack 3
  00000033            00070                 adsrLimiterRegs:4
  00000037            00071                 adsrAttackRate:1
  00000038            00072                 adsrReleaseRate:1
  00000039            00073                 adsrPrescaleCounter:2
                      00074                 
  0000003B            00075                 recordWaitCountdown:1
                      00076                 
                      00077                 ; Declared at end of main.asm to ensure that arrays are pushed to end of memory...
                      00078                 ; with smaller variables in ACCESS memory
                      00079                 ; ---------------------------------------
                      00080                 ; activeNoteDeltas:ACTIVE_NOTE_DELTAS_SIZE
                      00081                 ; delegatedDeltas:DELEGATED_DELTAS_SIZE
                      00082                 ; oscDeltas:OSC_DELTAS_SIZE
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 123


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00083                 ; accumulators:ACCUMULATORS_SIZE
                      00084                 ; activeOutputValues:ACTIVE_OUTPUT_VALUES_SIZE
                      00085 
                      00086         ENDC
                      00087 
                      00088 
                      00089 ;**********************************************************************
                      00090 ; LOCAL FUNCTIONS
                      00091 ;**********************************************************************
                      00092 
                      00093 ; [Function Summary]
                      00094 ;
                      00095 ; Function: initSoundGen()
                      00096 ; Abstract: initialize sound sound generation state variables
                      00097 ;
                      00098 ; Function: activeNoteTableAdd(WREG)
                      00099 ; Abstract: shift all values in activeNoteTable one level deeper and write note value passed in WREG to 
                            index 0
                      00100 ;           call refreshActiveNoteState()
                      00101 ;
                      00102 ; Function: activeNoteTableRemove(WREG)
                      00103 ; Abstract: look for index of note value passed in WREG in activeNoteTable and wipe location to 0xff if 
                            found
                      00104 ;           bubble sort all non-0xff values toward index 0
                      00105 ;           call refreshActiveNoteState()
                      00106 ;
                      00107 ; Function: refreshActiveNoteState()
                      00108 ; Abstract: check status of activeNoteTable entries and set turnSoundOn, turnSoundOff and notTransition 
                            flags appropriately
                      00109 ;           call getActiveNoteDeltas()
                      00110 ;
                      00111 ; Function: getActiveNoteDeltas()
                      00112 ; Abstract: for all active entries (non-0xff) in activeNoteTable from index 0 - polyDepth...
                      00113 ;           read accumulator delta value from Flash Program Memory table and save to corresponding index
                             in activeNoteDeltas table
                      00114 ;
                      00115 ; Function: processSoundState()
                      00116 ; Abstract: called by Timer2 ISR
                      00117 ;           handles audio sampling/recording, calls eepromWrite64() when 64-byte sample buffer is full
                      00118 ;           handles all sound generation.  reading from Program Mem or EEPROM and writing to PWM
                      00119 
                      00120 
                      00121         ; ***********************************************************************
                      00122         ; Function: void initSoundGen(void)
                      00123         ; ***********************************************************************
0007DA                00124 initSoundGen
                      00125         ; push working regs onto software stack
                      00126         PUSH_R  r0
0007DA C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00127         PUSH_R  FSR0L
0007DE CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00128         PUSH_R  FSR0H
0007E2 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 124


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00129         ; define variables to pushed registers
                      00130         #define count   r0
                      00131         
                      00132         ; using FSR0 for all inits, no need for fancy defines
                      00133 
0007E6 6A19           00134         clrf    pitchWheel, ACCESS
0007E8 6A1A           00135         clrf    pitchWheel + 1, ACCESS
0007EA 6A1B           00136         clrf    pitchWheel + 2, ACCESS
0007EC 6A1C           00137         clrf    pitchWheel + 3, ACCESS
                      00138         
0007EE 6A1D           00139         clrf    modulation, ACCESS
                      00140                 
0007F0 0E00           00141         movlw   SINE
0007F2 6E1E           00142         movwf   waveShape, ACCESS
0007F4 0E02           00143         movlw   PLAYBACK
0007F6 6E1F           00144         movwf   recordOrPlayback, ACCESS        
0007F8 0E00           00145         movlw   POLY
0007FA 6E20           00146         movwf   modeLevel, ACCESS
                      00147         
0007FC 0E04           00148         movlw   MAX_POLY_DEPTH
0007FE 6E23           00149         movwf   polyDepth, ACCESS
                      00150 
000800 6A21           00151         clrf    samplePrescaleCounter, ACCESS
000802 6A22           00152         clrf    wavePrescaleCounter, ACCESS
                      00153 
000804 9610           00154         bcf             midiFlags, turnSoundOn, ACCESS          
000806 9810           00155         bcf             midiFlags, turnSoundOff, ACCESS         
000808 9A10           00156         bcf             midiFlags, keyPressed, ACCESS           
00080A 9C10           00157         bcf             midiFlags, soundOn, ACCESS
                      00158 
00080C 9018           00159         bcf             soundGenFlags, delegatorBusy, ACCESS
00080E 9218           00160         bcf             soundGenFlags, pgDec, ACCESS    
000810 9418           00161         bcf             soundGenFlags, needRefresh, ACCESS
                      00162         
000812 0E??           00163         movlw   low(sineTable)
000814 6E24           00164         movwf   sineTableBaseAddress + 0
000816 0E??           00165         movlw   high(sineTable)
000818 6E25           00166         movwf   sineTableBaseAddress + 1
00081A 0E??           00167         movlw   upper(sineTable)
00081C 6E26           00168         movwf   sineTableBaseAddress + 2
                      00169         
00081E 0E??           00170         movlw   low(squareTable)
000820 6E27           00171         movwf   squareTableBaseAddress + 0
000822 0E??           00172         movlw   high(squareTable)
000824 6E28           00173         movwf   squareTableBaseAddress + 1
000826 0E??           00174         movlw   upper(squareTable)
000828 6E29           00175         movwf   squareTableBaseAddress + 2
                      00176         
00082A 802A           00177         bsf             oscResetFlags, osc0, ACCESS             
00082C 822A           00178         bsf             oscResetFlags, osc1, ACCESS             
00082E 842A           00179         bsf             oscResetFlags, osc2, ACCESS             
000830 862A           00180         bsf             oscResetFlags, osc3, ACCESS             
                      00181         
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 125


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000832 6A2B           00182         clrf    sustainFlags, ACCESS
                      00183 
                      00184         ; init ADSR variables
000834 6A2F           00185         clrf    oscStateFlags + 0, ACCESS
000836 6A30           00186         clrf    oscStateFlags + 1, ACCESS
000838 6A31           00187         clrf    oscStateFlags + 2, ACCESS
00083A 6A32           00188         clrf    oscStateFlags + 3, ACCESS
                      00189         
00083C 6833           00190         setf    adsrLimiterRegs + 0, ACCESS
00083E 6834           00191         setf    adsrLimiterRegs + 1, ACCESS
000840 6835           00192         setf    adsrLimiterRegs + 2, ACCESS
000842 6836           00193         setf    adsrLimiterRegs + 3, ACCESS
000844 6A39           00194         clrf    adsrPrescaleCounter + 0, ACCESS
000846 6A3A           00195         clrf    adsrPrescaleCounter + 1, ACCESS
                      00196         
000848 6A3B           00197         clrf    recordWaitCountdown, ACCESS
                      00198                 
                      00199         ; load default adsr attack and release rates
00084A 0E3F           00200         movlw   ADSR_ATTACK_RATE
00084C 6E37           00201         movwf   adsrAttackRate, ACCESS
00084E 0E10           00202         movlw   ADSR_RELEASE_RATE       
000850 6E38           00203         movwf   adsrReleaseRate, ACCESS
                      00204                         
                      00205         ; load fsr
000852 EE00 F0B9      00206         lfsr    FSR0, activeNoteDeltas
                      00207 
000856 0E08           00208         movlw   ACTIVE_NOTE_DELTAS_SIZE
000858 6E03           00209         movwf   count, ACCESS
00085A                00210 initSoundGen_lp1                
00085A 6AEE           00211         clrf    POSTINC0, ACCESS
00085C 2E03           00212         decfsz  count, f, ACCESS
00085E D???           00213         bra             initSoundGen_lp1
                      00214 
                      00215         ; load fsr
000860 EE00 F0D1      00216         lfsr    FSR0, accumulators
                      00217 
000864 0E10           00218         movlw   ACCUMULATORS_SIZE
000866 6E03           00219         movwf   count, ACCESS
000868                00220 initSoundGen_lp2        
000868 6AEE           00221         clrf    POSTINC0, ACCESS
00086A 2E03           00222         decfsz  count, f, ACCESS
00086C D???           00223         bra             initSoundGen_lp2
                      00224 
                      00225         ; load fsr
00086E EE00 F0E1      00226         lfsr    FSR0, activeOutputValues
                      00227 
000872 0E04           00228         movlw   ACTIVE_OUTPUT_VALUES_SIZE
000874 6E03           00229         movwf   count, ACCESS
000876                00230 initSoundGen_lp3
000876 0E80           00231         movlw   PWM_IDLE_OUTPUT_VALUE
000878 6EEE           00232         movwf   POSTINC0, ACCESS
                      00233 
00087A 2E03           00234         decfsz  count, f, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 126


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00087C D???           00235         bra             initSoundGen_lp3
                      00236 
                      00237         ; load fsr
00087E EE00 F0C1      00238         lfsr    FSR0, delegatedDeltas
                      00239 
000882 0E08           00240         movlw   DELEGATED_DELTAS_SIZE
000884 6E03           00241         movwf   count, ACCESS
000886                00242 initSoundGen_lp4
                      00243         ; 0xff indicates that delta is unowned
000886 6AEE           00244         clrf    POSTINC0, ACCESS
000888 2E03           00245         decfsz  count, f, ACCESS
00088A D???           00246         bra             initSoundGen_lp4
                      00247 
                      00248         ; load fsr
00088C EE00 F0C9      00249         lfsr    FSR0, oscDeltas
                      00250 
000890 0E08           00251         movlw   OSC_DELTAS_SIZE
000892 6E03           00252         movwf   count, ACCESS
000894                00253 initSoundGen_lp5
000894 6AEE           00254         clrf    POSTINC0, ACCESS
000896 2E03           00255         decfsz  count, f, ACCESS
000898 D???           00256         bra             initSoundGen_lp5
                      00257 
                      00258         ; undefine variables from pushed registers
                      00259         #undefine count
                      00260         ; pop working regs from software stack
                      00261         POP_R   FSR0H
00089A CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00262         POP_R   FSR0L
00089E CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00263         POP_R   r0
0008A2 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00264         
0008A6 0012           00265         return
                      00266 
                      00267 
                      00268         ; ***********************************************************************
                      00269         ; Function: void activeNoteTableAdd(byte note)
                      00270         ; ***********************************************************************
0008A8                00271 activeNoteTableAdd
                      00272         ; push working regs onto software stack
                      00273         PUSH_R  r0
0008A8 C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00274         PUSH_R  r1
0008AC C004 FFDD          M         movff   r1,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00275         PUSH_R  r2
0008B0 C005 FFDD          M         movff   r2,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00276         PUSH_R  FSR0L
0008B4 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00277         PUSH_R  FSR0H
0008B8 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00278         ; define variables to pushed registers
                      00279         #define note                                    r0
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 127


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00280         #define index                                   r1
                      00281         #define tmpValue                                r2
                      00282         #define FSR_activeNoteTable             FSR0
                      00283         #define PLUSW_activeNoteTable   PLUSW0
                      00284 
                      00285         ; load fsr
0008BC EE00 F058      00286         lfsr    FSR_activeNoteTable, activeNoteTable
                      00287 
                      00288         ; saved argument passed in WREG
0008C0 6E03           00289         movwf   note, ACCESS
                      00290                 
                      00291         ;**** start procedure: add note to activeNoteTable index 0 ****
                      00292         ; start at end of table and shift all entries 1 level deeper
                      00293         ; note that if all activeNoteTable entries are active then note at index ACTIVE_NOTE_TABLE_SIZE 
                            - 1 will be lost
                      00294 
                      00295         ; initialize index to end of table
0008C2 0E18           00296         movlw   ACTIVE_NOTE_TABLE_SIZE - 1
0008C4 6E04           00297         movwf   index, ACCESS
0008C6                00298 activeNoteTableAdd_lp1
                      00299         ; tmpValue = activeNoteTable[index - 1]
0008C6 0404           00300         decf    index, w, ACCESS
0008C8 50EB           00301         movf    PLUSW_activeNoteTable, w, ACCESS
0008CA 6E05           00302         movwf   tmpValue, ACCESS
                      00303         ; activeNoteTable[index] = activeNoteTable[index - 1]
0008CC 5004           00304         movf    index, w, ACCESS
0008CE C005 FFEB      00305         movff   tmpValue, PLUSW_activeNoteTable
                      00306         ; decrement index and abort if we've reach the beginning of the table
0008D2 2E04           00307         decfsz  index, f, ACCESS
0008D4 D???           00308         bra             activeNoteTableAdd_lp1
                      00309 
                      00310         ; save note value to activeNoteTable index 0
0008D6 C003 F058      00311         movff   note, activeNoteTable
                      00312 
0008DA                00313 activeNoteTableAdd_exit
                      00314         ; undefine variables from pushed registers
                      00315         #undefine       note
                      00316         #undefine       index
                      00317         #undefine       tmpValue
                      00318         #undefine       FSR_activeNoteTable
                      00319         #undefine       PLUSW_activeNoteTable
                      00320         ; pop working regs from software stack
                      00321         POP_R   FSR0H
0008DA CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00322         POP_R   FSR0L
0008DE CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00323         POP_R   r2
0008E2 CFDC F005          M         movff   softwareStackPointerPREINC, r2          ; ++softwareStackPointerINDF = regName
                      00324         POP_R   r1
0008E6 CFDC F004          M         movff   softwareStackPointerPREINC, r1          ; ++softwareStackPointerINDF = regName
                      00325         POP_R   r0
0008EA CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00326 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 128


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00327         ; set MIDI keyPressed flag to indicate Note On message received
                      00328         ; this flag is checked and then cleared in processSoundState() to determine when to terminate an
                             audio sample recording
                      00329         ; and whether or not to retrigger sample playback from beginning
0008EE 8A10           00330         bsf             midiFlags, keyPressed, ACCESS           
                      00331 
0008F0 EC?? F???      00332         call    refreshActiveNoteState
                      00333         
0008F4 0012           00334         return
                      00335         
                      00336         ; ***********************************************************************
                      00337         ; Function: void activeNoteTableRemove(byte note)
                      00338         ; ***********************************************************************
0008F6                00339 activeNoteTableRemove
                      00340         ; push working regs onto software stack
                      00341         PUSH_R  r0
0008F6 C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00342         PUSH_R  r1
0008FA C004 FFDD          M         movff   r1,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00343         PUSH_R  r2
0008FE C005 FFDD          M         movff   r2,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00344         PUSH_R  r3
000902 C006 FFDD          M         movff   r3,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00345         PUSH_R  FSR0L
000906 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00346         PUSH_R  FSR0H
00090A CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00347         ; define variables to pushed registers
                      00348         #define note                                    r0
                      00349         #define index                                   r1
                      00350         #define tmpValue                                r2
                      00351         #define sorting                                 r3
                      00352         #define FSR_activeNoteTable             FSR0
                      00353         #define PLUSW_activeNoteTable   PLUSW0
                      00354 
                      00355         ; load fsr
00090E EE00 F058      00356         lfsr    FSR_activeNoteTable, activeNoteTable
                      00357 
                      00358         ; save argument passed in WREG
000912 6E03           00359         movwf   note, ACCESS
                      00360                 
                      00361         ;**** start procedure: find all activeNoteTable entries equal to note value and wipe to 0xff ***
                            *
                      00362         ; init index
000914 6A04           00363         clrf    index, ACCESS
                      00364 
000916                00365 activeNoteTableRemove_lp1
                      00366         ; if passed noteNumber is 0xff then ignore compare and just wipe location
000916 1C03           00367         comf    note, w, ACCESS
000918 E0??           00368         bz              activeNoteTableRemove_lp1Wipe
                      00369 
                      00370         ; WREG = activeNoteTable[index]
00091A 5004           00371         movf    index, w, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 129


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00091C 50EB           00372         movf    PLUSW_activeNoteTable, w, ACCESS
                      00373         ; skip if activeNoteTable[index] == note
00091E 6203           00374         cpfseq  note, ACCESS
                      00375         ; activeNoteTable[index] is != note so bypass wipe
000920 D???           00376         bra             activeNoteTableRemove_lp1Jmp1
                      00377 
000922                00378 activeNoteTableRemove_lp1Wipe
                      00379         ; activeNoteTable[index] is == note or passed noteNumber was 0xff so wipe location value to 0xff
000922 5004           00380         movf    index, w, ACCESS
000924 68EB           00381         setf    PLUSW_activeNoteTable, ACCESS
                      00382         ; previously was aborting operation at this point but doing so provides...
                      00383         ; less robust Note Off handling. In event of missed Note Off, note value can occupy multiple ind
                            exes
000926                00384 activeNoteTableRemove_lp1Jmp1
                      00385         ; increment index indexer
000926 2A04           00386         incf    index, f, ACCESS
                      00387         ; compare to ACTIVE_NOTE_TABLE_SIZE, skip if equal
000928 0E19           00388         movlw   ACTIVE_NOTE_TABLE_SIZE
00092A 6204           00389         cpfseq  index, ACCESS
00092C D???           00390         bra             activeNoteTableRemove_lp1
                      00391 
                      00392         
                      00393         ;**** start procedure: bubble sort all non-0xff values toward index 0 ****
                      00394         ; logic of routine in C:
                      00395         ;
                      00396         ;       sorting = TRUE; 
                      00397         ;       while(sorting)
                      00398         ;       {
                      00399         ;               sorting = FALSE;
                      00400         ;
                      00401         ;               for(index = 0; index < ACTIVE_NOTE_TABLE_SIZE - 1; index++)
                      00402         ;               {
                      00403         ;                       if((activeNoteTable[index] == 0xff) && (activeNoteTable[index + 1] != 0x
                            ff))
                      00404         ;                       {
                      00405         ;                               activeNoteTable[index] = activeNoteTable[index + 1];
                      00406         ;                               activeNoteTable[index + 1] = 0xff;
                      00407         ;                               sorting = TRUE;
                      00408         ;                       }
                      00409         ;               }
                      00410         ;       }
                      00411 
                      00412         ; using entire register for single bit sorting flag, set to TRUE to start first cycle
00092E 6806           00413         setf    sorting, ACCESS
                      00414         
000930                00415 activeNoteTableRemove_sortLoop
                      00416         ; are we still sorting?
000930 5206           00417         movf    sorting, f, ACCESS
                      00418         ; no so abort
000932 E0??           00419         bz              activeNoteTableRemove_sortDone
                      00420         
                      00421         ; reset sorting flag to FALSE. will be set by following code if we're not actually done
000934 6A06           00422         clrf    sorting, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 130


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00423 
                      00424         ; init index
000936 6A04           00425         clrf    index, ACCESS
000938                00426 activeNoteTableRemove_bubbleLoop
                      00427         ; is activeNoteTable[index] == 0xff?
000938 5004           00428         movf    index, w, ACCESS
00093A 1CEB           00429         comf    PLUSW_activeNoteTable, w, ACCESS
                      00430         ; no so increment index and continue
00093C E1??           00431         bnz             activeNoteTableRemove_bubbleContinue
                      00432 
                      00433         ; is activeNoteTable[i+1] != 0xff?
00093E 2804           00434         incf    index, w, ACCESS
000940 1CEB           00435         comf    PLUSW_activeNoteTable, w, ACCESS
                      00436         ; no so increment index and continue
000942 E0??           00437         bz              activeNoteTableRemove_bubbleContinue
                      00438                 
                      00439         ; sorting condition was met so set flag
000944 6806           00440         setf    sorting, ACCESS         
                      00441 
                      00442         ; activeNoteTable[index] = activeNoteTable[index+1]
000946 2804           00443         incf    index, w, ACCESS
000948 50EB           00444         movf    PLUSW_activeNoteTable, w, ACCESS
00094A 6E05           00445         movwf   tmpValue, ACCESS
00094C 5004           00446         movf    index, w, ACCESS
00094E C005 FFEB      00447         movff   tmpValue, PLUSW_activeNoteTable
                      00448         
                      00449         ; activeNoteTable[index+1] = 0xff
000952 2804           00450         incf    index, w, ACCESS
000954 68EB           00451         setf    PLUSW_activeNoteTable, ACCESS
                      00452         
Warning[208]: Label truncated at 32 characters. (activeNoteTableRemove_bubbleContinue)
000956                00453 activeNoteTableRemove_bubbleContinue
                      00454         ; increment index and save in self
000956 2A04           00455         incf    index, f, ACCESS
000958 0E18           00456         movlw   ACTIVE_NOTE_TABLE_SIZE - 1
                      00457         ; if index is == ACTIVE_NOTE_TABLE_SIZE - 1 then we've reach the end of the table so skip loop b
                            ranch
00095A 6204           00458         cpfseq  index, ACCESS
                      00459         ; not done stepping through activeNoteTable so continue
00095C D???           00460         bra             activeNoteTableRemove_bubbleLoop        
                      00461         
                      00462         ; done stepping through activeNoteTable
                      00463         ; branch to check if any sorting action was taken
                      00464         ; process will keep looping until stepping through entire activeNoteTable causes no data swappin
                            g to occur
00095E D???           00465         bra             activeNoteTableRemove_sortLoop
                      00466 
000960                00467 activeNoteTableRemove_sortDone
                      00468 
                      00469         ; undefine variables from pushed registers
                      00470         #undefine       note
                      00471         #undefine       index
                      00472         #undefine       tmpValue
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 131


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00473         #undefine       sorting
                      00474         #undefine       FSR_activeNoteTable
                      00475         #undefine       PLUSW_activeNoteTable
                      00476         ; pop working regs from software stack
                      00477         POP_R   FSR0H
000960 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00478         POP_R   FSR0L
000964 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00479         POP_R   r3
000968 CFDC F006          M         movff   softwareStackPointerPREINC, r3          ; ++softwareStackPointerINDF = regName
                      00480         POP_R   r2
00096C CFDC F005          M         movff   softwareStackPointerPREINC, r2          ; ++softwareStackPointerINDF = regName
                      00481         POP_R   r1
000970 CFDC F004          M         movff   softwareStackPointerPREINC, r1          ; ++softwareStackPointerINDF = regName
                      00482         POP_R   r0
000974 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00483 
000978 EC?? F???      00484         call    refreshActiveNoteState
                      00485         
00097C 0012           00486         return
                      00487 
                      00488 
                      00489 ;**********************************************************************
                      00490 ; Function: void refreshActiveNoteState(void)
                      00491 ;**********************************************************************
00097E                00492 refreshActiveNoteState
                      00493         ; check if there are any active notes
                      00494         ; if activeNoteTable[0] == 0xff then there are no active notes
00097E 1C58           00495         comf    activeNoteTable + 0, w
                      00496         ; at least one note is active so keep sound on
000980 E1??           00497         bnz             refreshActiveNoteState_active
                      00498         ; no notes are active so request sound off
000982 8810           00499         bsf             midiFlags, turnSoundOff, ACCESS
000984 9610           00500         bcf             midiFlags, turnSoundOn, ACCESS
000986 D???           00501         bra             refreshActiveNoteState_exit
                      00502 
000988                00503 refreshActiveNoteState_active           
                      00504         ; check if sound is on  
000988 AC10           00505         btfss   midiFlags, soundOn, ACCESS
00098A D???           00506         bra             refreshActiveNoteState_soundIsOff
                      00507 
                      00508         ; sound is on so request transition
00098C 9810           00509         bcf             midiFlags, turnSoundOff, ACCESS
00098E 9610           00510         bcf             midiFlags, turnSoundOn, ACCESS
000990 D???           00511         bra             refreshActiveNoteState_exit
                      00512 
Warning[208]: Label truncated at 32 characters. (refreshActiveNoteState_soundIsOff)
000992                00513 refreshActiveNoteState_soundIsOff
                      00514         ; sound is off so request sound on
000992 9810           00515         bcf             midiFlags, turnSoundOff, ACCESS
000994 8610           00516         bsf             midiFlags, turnSoundOn, ACCESS
                      00517         
000996                00518 refreshActiveNoteState_exit
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 132


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00519         ; calling getActiveNoteDeltas() is a big task which includes theDelegator()
                      00520         ; so just try setting the refresh flag since we're inside the UART ISR right now
000996 8418           00521         bsf             soundGenFlags, needRefresh, ACCESS
                      00522 
000998 0012           00523         return
                      00524 
                      00525 
                      00526 ;**********************************************************************
                      00527 ; Function: void getActiveNoteDeltas(void)
                      00528 ;**********************************************************************
00099A                00529 getActiveNoteDeltas
                      00530 
                      00531         ; push working regs onto software stack
                      00532         PUSH_R  r0
00099A C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00533         PUSH_R  FSR0L
00099E CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00534         PUSH_R  FSR0H
0009A2 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00535         PUSH_R  FSR1L
0009A6 CFE1 FFDD          M         movff   FSR1L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00536         PUSH_R  FSR1H
0009AA CFE2 FFDD          M         movff   FSR1H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00537         PUSH_R  TBLPTRL
0009AE CFF6 FFDD          M         movff   TBLPTRL, softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00538         PUSH_R  TBLPTRH
0009B2 CFF7 FFDD          M         movff   TBLPTRH, softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00539         PUSH_R  TBLPTRU
0009B6 CFF8 FFDD          M         movff   TBLPTRU, softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00540         PUSH_R  TABLAT
0009BA CFF5 FFDD          M         movff   TABLAT,  softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00541         ; define variables to pushed registers
                      00542         #define index                                           r0
                      00543         #define FSR_activeNoteTable                     FSR0
                      00544         #define PLUSW_activeNoteTable           PLUSW0
                      00545         #define FSR_activeNoteDeltas            FSR1
                      00546         #define PLUSW_activeNoteDeltas          PLUSW1
                      00547 
                      00548         ; load FSR
0009BE EE00 F058      00549         lfsr    FSR_activeNoteTable, activeNoteTable
0009C2 EE10 F0B9      00550         lfsr    FSR_activeNoteDeltas, activeNoteDeltas
                      00551 
                      00552         ; init index
0009C6 6A03           00553         clrf    index, ACCESS
                      00554 
0009C8                00555 getActiveNoteDeltas_loop        
                      00556         ; check if reading note or sample delta table
0009C8 0E02           00557         movlw   SAMPLE
0009CA 181E           00558         xorwf   waveShape, w, ACCESS
0009CC E0??           00559         bz              getActiveNoteDeltas_loadSampleDelta
                      00560 
                      00561         ; **** load value from midi delta table ****
                      00562         ; load table pointer address
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 133


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00563         ; shift activeNote left once to get proper program memory offset since noteDelta values are word
                            -sized
                      00564         ; w = activeNoteTable[index]
0009CE 5003           00565         movf    index, w, ACCESS
                      00566         ; if bit 7 is set then note at index is not valid
0009D0 BEEB           00567         btfsc   PLUSW_activeNoteTable, 7, ACCESS
0009D2 D???           00568         bra             getActiveNoteDeltas_zeroDelta
                      00569         ; note at index is valid so continue
0009D4 90D8           00570         bcf             STATUS, C, ACCESS
0009D6 34EB           00571         rlcf    PLUSW_activeNoteTable, w, ACCESS
0009D8 0F??           00572         addlw   low(midiNoteDeltaTable)
0009DA 6EF6           00573         movwf   TBLPTRL, ACCESS
0009DC 0E??           00574         movlw   high(midiNoteDeltaTable)
0009DE B0D8           00575         btfsc   STATUS, C, ACCESS
0009E0 0F01           00576         addlw   1
0009E2 6EF7           00577         movwf   TBLPTRH, ACCESS
0009E4 0E??           00578         movlw   upper(midiNoteDeltaTable)
0009E6 B0D8           00579         btfsc   STATUS, C, ACCESS
0009E8 0F01           00580         addlw   1
0009EA 6EF8           00581         movwf   TBLPTRU, ACCESS
0009EC D???           00582         bra             getActiveNoteDeltas_readTableAndSave
                      00583 
                      00584         ; **** load value from sample delta table ****
Warning[208]: Label truncated at 32 characters. (getActiveNoteDeltas_loadSampleDelta)
0009EE                00585 getActiveNoteDeltas_loadSampleDelta
                      00586         ; load table pointer address
                      00587         ; shift activeNote left once to get proper program memory offset since noteDelta values are word
                            -sized
                      00588         ; w = activeNoteTable[index]
0009EE 5003           00589         movf    index, w, ACCESS
                      00590         ; if bit 7 is set then note at index is not valid
0009F0 BEEB           00591         btfsc   PLUSW_activeNoteTable, 7, ACCESS
0009F2 D???           00592         bra             getActiveNoteDeltas_zeroDelta
                      00593         ; note at index is valid so continue
0009F4 90D8           00594         bcf             STATUS, C, ACCESS
0009F6 34EB           00595         rlcf    PLUSW_activeNoteTable, w, ACCESS
0009F8 0F??           00596         addlw   low(sampleMidiNoteDeltaTable)
0009FA 6EF6           00597         movwf   TBLPTRL, ACCESS
0009FC 0E??           00598         movlw   high(sampleMidiNoteDeltaTable)
0009FE B0D8           00599         btfsc   STATUS, C, ACCESS
000A00 0F01           00600         addlw   1
000A02 6EF7           00601         movwf   TBLPTRH, ACCESS
000A04 0E??           00602         movlw   upper(sampleMidiNoteDeltaTable)
000A06 B0D8           00603         btfsc   STATUS, C, ACCESS
000A08 0F01           00604         addlw   1
000A0A 6EF8           00605         movwf   TBLPTRU, ACCESS
000A0C D???           00606         bra             getActiveNoteDeltas_readTableAndSave
                      00607 
000A0E                00608 getActiveNoteDeltas_zeroDelta
                      00609         ; w = index * 2
000A0E 90D8           00610         bcf             STATUS, C, ACCESS
000A10 3403           00611         rlcf    index, w, ACCESS
                      00612 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 134


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00613         ; Critical Section Begin
                      00614         ; **************************
                      00615         ; clear global interrupt to avoid ISR reading partial delta value
000A12 9EF2           00616         bcf             INTCON, GIE, ACCESS
                      00617 
000A14 6AE3           00618         clrf    PLUSW_activeNoteDeltas, ACCESS
                      00619         ; w = (index * 2) + 1
000A16 0F01           00620         addlw   1
000A18 6AE3           00621         clrf    PLUSW_activeNoteDeltas, ACCESS
                      00622 
                      00623         ; re-enable interrupts
000A1A 8EF2           00624         bsf             INTCON, GIE, ACCESS
                      00625         ; **************************
                      00626         ; Critical Section End
                      00627 
000A1C D???           00628         bra             getActiveNoteDeltas_next
                      00629 
Warning[208]: Label truncated at 32 characters. (getActiveNoteDeltas_readTableAndSave)
000A1E                00630 getActiveNoteDeltas_readTableAndSave
                      00631         ; read low byte into TBLAT
000A1E 0009           00632         tblrd*+
                      00633         ; w = index * 2
000A20 90D8           00634         bcf             STATUS, C, ACCESS
000A22 3403           00635         rlcf    index, w, ACCESS
                      00636 
                      00637         ; Critical Section Begin
                      00638         ; **************************
                      00639         ; clear global interrupt to avoid ISR reading partial delta value
000A24 9EF2           00640         bcf             INTCON, GIE, ACCESS
                      00641         
000A26 CFF5 FFE3      00642         movff   TABLAT, PLUSW_activeNoteDeltas
                      00643         ; read high byte into TBLAT
000A2A 0009           00644         tblrd*+
                      00645         ; w = (index * 2) + 1
000A2C 0F01           00646         addlw   1
000A2E CFF5 FFE3      00647         movff   TABLAT, PLUSW_activeNoteDeltas
                      00648 
                      00649         ; re-enable interrupts
000A32 8EF2           00650         bsf             INTCON, GIE, ACCESS
                      00651         ; **************************
                      00652         ; Critical Section End
                      00653 
000A34                00654 getActiveNoteDeltas_next        
                      00655         ; increment index
000A34 2A03           00656         incf    index, f, ACCESS
                      00657         ; compare against polyDepth to check if done
000A36 0E04           00658         movlw   MAX_POLY_DEPTH
000A38 1803           00659         xorwf   index, w, ACCESS
000A3A E1??           00660         bnz             getActiveNoteDeltas_loop
                      00661 
000A3C                00662 getActiveNoteDeltas_exit
                      00663         ; undefine variables from pushed registers
                      00664         #undefine       index
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 135


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00665         #undefine       FSR_activeNoteTable
                      00666         #undefine       PLUSW_activeNoteTable
                      00667         #undefine       FSR_activeNoteDeltas
                      00668         #undefine       PLUSW_activeNoteDeltas
                      00669         ; pop working regs from software stack
                      00670         POP_R   TABLAT
000A3C CFDC FFF5          M         movff   softwareStackPointerPREINC, TABLAT      ; ++softwareStackPointerINDF = regName
                      00671         POP_R   TBLPTRU
000A40 CFDC FFF8          M         movff   softwareStackPointerPREINC, TBLPTRU     ; ++softwareStackPointerINDF = regName
                      00672         POP_R   TBLPTRH
000A44 CFDC FFF7          M         movff   softwareStackPointerPREINC, TBLPTRH     ; ++softwareStackPointerINDF = regName
                      00673         POP_R   TBLPTRL
000A48 CFDC FFF6          M         movff   softwareStackPointerPREINC, TBLPTRL     ; ++softwareStackPointerINDF = regName
                      00674         POP_R   FSR1H
000A4C CFDC FFE2          M         movff   softwareStackPointerPREINC, FSR1H       ; ++softwareStackPointerINDF = regName
                      00675         POP_R   FSR1L
000A50 CFDC FFE1          M         movff   softwareStackPointerPREINC, FSR1L       ; ++softwareStackPointerINDF = regName
                      00676         POP_R   FSR0H
000A54 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00677         POP_R   FSR0L
000A58 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00678         POP_R   r0
000A5C CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      00679 
                      00680         ; deltas have been updated so call the DelagatOr
                      00681         ; need this here because getActiveNoteDeltas is called when waveShape is change by user
000A60 EC?? F???      00682         call    theDelegatOr
                      00683 
000A64 0012           00684         return
                      00685 
                      00686 
                      00687         ; ***********************************************************************
                      00688         ; Function: void theDelegatOr(void)
                      00689         ; ***********************************************************************
000A66                00690 theDelegatOr
                      00691 
                      00692         PUSH_R  r0
000A66 C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00693         PUSH_R  r1
000A6A C004 FFDD          M         movff   r1,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00694         PUSH_R  r2
000A6E C005 FFDD          M         movff   r2,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00695         PUSH_R  r3
000A72 C006 FFDD          M         movff   r3,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00696         PUSH_R  r4
000A76 C007 FFDD          M         movff   r4,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00697         PUSH_R  r5
000A7A C008 FFDD          M         movff   r5,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00698         PUSH_R  r6
000A7E C009 FFDD          M         movff   r6,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00699         PUSH_R  FSR0L
000A82 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00700         PUSH_R  FSR0H
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 136


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000A86 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00701         PUSH_R  FSR1L
000A8A CFE1 FFDD          M         movff   FSR1L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00702         PUSH_R  FSR1H
000A8E CFE2 FFDD          M         movff   FSR1H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00703         
                      00704         #define ddLockedFlags                           r0
                      00705         #define ddIndex                                 r1
                      00706         #define ddIndexMask                             r2
                      00707         #define andIndex                                r3
                      00708         #define andIndexMask                    r4
                      00709         #define tmpValue                                r5
                      00710         #define andLockedFlags  r6
                      00711         #define FSR_activeNoteDeltas    FSR0
                      00712         #define PLUSW_activeNoteDeltas  PLUSW0
                      00713         #define FSR_delegatedDeltas             FSR1
                      00714         #define PLUSW_delegatedDeltas   PLUSW1
                      00715         
000A92 EE00 F0B9      00716         lfsr    FSR_activeNoteDeltas, activeNoteDeltas
000A96 EE10 F0C1      00717         lfsr    FSR_delegatedDeltas, delegatedDeltas
                      00718 
                      00719         ; set flag to indicate to oscillators that delegatedDeltas are volatile
000A9A 8018           00720         bsf             soundGenFlags, delegatorBusy, ACCESS
                      00721         
                      00722         ; check if poly or mono mode
000A9C 0E01           00723         movlw   1
000A9E 6423           00724         cpfsgt  polyDepth, ACCESS
000AA0 D???           00725         bra             theDelgatOr_doMono
                      00726         
                      00727         ;**** start procedure: free up any oscillator whose current delta is no longer present in active
                            NoteDeltas ****
                      00728 
                      00729         ; corresponding ddLockedFlags and andLockedFlags will be set for each delegatedDelta that matche
                            s an activeNoteDelta
                      00730         ; so clear em
000AA2 6A03           00731         clrf    ddLockedFlags, ACCESS
000AA4 6A09           00732         clrf    andLockedFlags, ACCESS
                      00733         
                      00734         ; the purpose of the following routine is to check each oscillator's delegatedDelta value agains
                            t the activeNoteDelta array
                      00735         ; and free any oscillator up that is no longer valid
                      00736         ; "ddLockedFlags" is used locally to indicate if an oscillator is locked to a current activeNote
                            Delta element
                      00737         
                      00738         ; start looking through delegatedDeltas[0...3] for a match in the activeNoteTable[0...polyDepth-
                            1]
                      00739         ; reset delegatedDeltas index count
000AA6 6A04           00740         clrf    ddIndex, ACCESS
                      00741         ; reset delegatedDeltas index mask
000AA8 0E01           00742         movlw   1
000AAA 6E05           00743         movwf   ddIndexMask, ACCESS
                      00744         ; start delegatedDelta iteration loop
000AAC                00745 theDelegatOr_undelOutLp
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 137


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00746         ; check for delegatedDeltas[ddIndex] == 0x0000
000AAC 90D8           00747         bcf             STATUS, C, ACCESS
000AAE 3404           00748         rlcf    ddIndex, w, ACCESS
000AB0 52E3           00749         movf    PLUSW_delegatedDeltas, f, ACCESS
000AB2 E1??           00750         bnz             theDelegatOr_undelDdNonZero
000AB4 0F01           00751         addlw   1
000AB6 52E3           00752         movf    PLUSW_delegatedDeltas, f, ACCESS
                      00753         ; delegatedDeltas[ddIndex] value is nonZero so continue
000AB8 E1??           00754         bnz     theDelegatOr_undelDdNonZero
                      00755         
                      00756         ; delegatedDeltas[ddIndex] value is 0x0000 so...
                      00757         ; iterate to next delegatedDelta
000ABA D???           00758         bra             theDelegatOr_undelNextDD
                      00759 
000ABC                00760 theDelegatOr_undelDdNonZero
                      00761         ; reset activeNoteTable index count
000ABC 6A06           00762         clrf    andIndex, ACCESS
                      00763         ; reset activeNoteTable index mask
000ABE 0E01           00764         movlw   1
000AC0 6E07           00765         movwf   andIndexMask, ACCESS
                      00766 
                      00767         ; start activeNoteTable iteration loop
000AC2                00768 theDelegatOr_undelInLp
                      00769         ; try to match low byte
                      00770         ; elements are 2-bytes wide so WREG = index * 2
000AC2 90D8           00771         bcf             STATUS, C, ACCESS
000AC4 3404           00772         rlcf    ddIndex, w, ACCESS
000AC6 50E3           00773         movf    PLUSW_delegatedDeltas, w, ACCESS
000AC8 6E08           00774         movwf   tmpValue, ACCESS
000ACA 90D8           00775         bcf             STATUS, C, ACCESS
000ACC 3406           00776         rlcf    andIndex, w, ACCESS
000ACE 50EB           00777         movf    PLUSW_activeNoteDeltas, w, ACCESS
000AD0 1808           00778         xorwf   tmpValue, w, ACCESS
                      00779         ; low byte does not match so iterate to next activeNoteDeltas index
000AD2 E1??           00780         bnz             theDelegatOr_undelNextAnd
                      00781         ; low byte matches, try to match high byte
000AD4 90D8           00782         bcf             STATUS, C, ACCESS
000AD6 3404           00783         rlcf    ddIndex, w, ACCESS
000AD8 0F01           00784         addlw   1
000ADA 50E3           00785         movf    PLUSW_delegatedDeltas, w, ACCESS
000ADC 6E08           00786         movwf   tmpValue, ACCESS
000ADE 90D8           00787         bcf             STATUS, C, ACCESS
000AE0 3406           00788         rlcf    andIndex, w, ACCESS
000AE2 0F01           00789         addlw   1
000AE4 50EB           00790         movf    PLUSW_activeNoteDeltas, w, ACCESS
000AE6 1808           00791         xorwf   tmpValue, w, ACCESS
                      00792         ; elements do not match so iterate to next activeNoteDeltas index
000AE8 E1??           00793         bnz             theDelegatOr_undelNextAnd
                      00794 
                      00795         ; nonZero element in delegatedDeltas matches an element in activeNoteDeltas
                      00796         ; set activeNoteDelta and delegatedDelta locked flags
000AEA 5005           00797         movf    ddIndexMask, w, ACCESS
000AEC 1203           00798         iorwf   ddLockedFlags, f, ACCESS        
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 138


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000AEE 5007           00799         movf    andIndexMask, w, ACCESS
000AF0 1209           00800         iorwf   andLockedFlags, f, ACCESS       
                      00801 
                      00802         ; if it's releasing then reattack
000AF2 5004           00803         movf    ddIndex, w, ACCESS
                      00804         ; macro returns boolean value in WREG and also sets ZERO flag accordingly
                      00805         OSC_READ_ADSR_FLAG release
                          M ; oscillator number passed in WREG
                          M ; boolean value is returned in WREG and ZERO flag is set accordingly
                          M 
                          M         ; push working regs onto software stack
                          M         PUSH_R  FSR0L
000AF4 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                          M         PUSH_R  FSR0H
000AF8 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                          M         
                          M         ; load fsr
000AFC EE00 F02F          M         lfsr    FSR0, oscStateFlags
                          M         ; read the register into WREG
000B00 50EB               M         movf    PLUSW0, w, ACCESS
000B02 0B01               M         andlw   1<<0
                          M         
                          M         ; restore working regs from stack
                          M         POP_R   FSR0H
000B04 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                          M         POP_R   FSR0L   
000B08 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                          M         
                      00806         ; don't reattack if it's not releasing
000B0C E0??           00807         bz              theDelegatOr_undelNextDD
                      00808         ; oscillator is releasing so reattack
000B0E 5004           00809         movf    ddIndex, w, ACCESS
000B10 EC?? F???      00810         call    oscAdsrTriggerAttack
                      00811         
000B14 D???           00812         bra             theDelegatOr_undelNextDD        
                      00813         
000B16                00814 theDelegatOr_undelNextAnd
                      00815         ; current activeNoteDelta does not match current delegatedDelta so iterate to next
                      00816         ; increment activeNoteDeltas index mask value
000B16 90D8           00817         bcf             STATUS, C, ACCESS
000B18 3607           00818         rlcf    andIndexMask, f, ACCESS
                      00819         ; increment activeNoteDeltas index
000B1A 2A06           00820         incf    andIndex, f, ACCESS
                      00821         ; we're done if andIndex == MAX_POLY_DEPTH
000B1C 5006           00822         movf    andIndex, w, ACCESS
000B1E 0A04           00823         xorlw   MAX_POLY_DEPTH
                      00824         ; still have more activeNoteDelta elements to check for match so keep going
000B20 E1??           00825         bnz             theDelegatOr_undelInLp
                      00826 
000B22                00827 theDelegatOr_undelAndLoopDone
                      00828         ; done trying to match delegatedDeltas[ddIndex] to activeNoteDeltas[0 - polyDepth]
                      00829         ; did not find a match (any match would've branched to theDelegatOr_undelNextDD)
                      00830 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 139


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00831         ; delatedDeltas[ddIndex] is nonZero and has no match in activeNoteDeltas[0…polyDepth-1] so kil
                            l it with adsr-release  
                      00832         ; set the release flag
000B22 5004           00833         movf    ddIndex, w, ACCESS
000B24 EC?? F???      00834         call    oscAdsrTriggerRelease
                      00835 
                      00836         ; check next delegatedDelta
000B28                00837 theDelegatOr_undelNextDD
000B28 90D8           00838         bcf             STATUS, C, ACCESS
000B2A 3605           00839         rlcf    ddIndexMask, f, ACCESS
000B2C 2A04           00840         incf    ddIndex, f, ACCESS
000B2E 5004           00841         movf    ddIndex, w, ACCESS
000B30 0A04           00842         xorlw   MAX_POLY_DEPTH
000B32 E1??           00843         bnz             theDelegatOr_undelOutLp
                      00844                 
                      00845 
                      00846         ;**** start procedure: delegate any unlocked activeNoteDeltas to a free oscillator **** 
                      00847         ; this procedure is reversed from the previous in that it tries to match an unmatch activeNoteDe
                            lta to
                      00848         ; the first available unmatched oscillator
                      00849         
                      00850         ; reset activeNoteDelta index count
000B34 6A06           00851         clrf    andIndex, ACCESS
                      00852         ; reset activeNoteDelta index mask
000B36 0E01           00853         movlw   1
000B38 6E07           00854         movwf   andIndexMask, ACCESS
000B3A                00855 theDelegatOr_delOutLp
                      00856         ; ignore activeNoteDelta if its locked
000B3A 5007           00857         movf    andIndexMask, w, ACCESS
000B3C 1409           00858         andwf   andLockedFlags, w, ACCESS
000B3E E1??           00859         bnz             theDelegatOr_delOutLpNext
                      00860         
                      00861         ; only attempt match if activeNoteDelta != 0x0000
                      00862         ; WREG = ddIndex * 2
000B40 90D8           00863         bcf             STATUS, C, ACCESS
000B42 3406           00864         rlcf    andIndex, w, ACCESS
000B44 52EB           00865         movf    PLUSW_activeNoteDeltas, f, ACCESS
000B46 E1??           00866         bnz             theDelegatOr_andNotZero
000B48 0F01           00867         addlw   1
000B4A 52EB           00868         movf    PLUSW_activeNoteDeltas, f, ACCESS
000B4C E0??           00869         bz              theDelegatOr_delOutLpNext
                      00870 
000B4E                00871 theDelegatOr_andNotZero                 
                      00872         ; if possible, we want to leave releasing oscillators alone and assign unmatch activeNoteDeltas 
                            to a completely
                      00873         ; idle oscillator.  If no idle oscillator is found then force assignment to a releasing oscillat
                            or
                      00874         ; ddLockedFlags bit 7 == 0 for available
                      00875         ; ddLockedFlags bit 7 == 1 for force assign to releasing        
000B4E 9E03           00876         bcf             ddLockedFlags, 7, ACCESS
                      00877 
000B50                00878 theDelegatOr_delInLpInit
                      00879         ; found unmatched activeNoteDelta, so assign to first available oscillator's delegatedDelta
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 140


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00880         ; reset delegatedDeltas index count
000B50 6A04           00881         clrf    ddIndex, ACCESS
                      00882         ; reset delegatedDeltas index mask
000B52 0E01           00883         movlw   1
000B54 6E05           00884         movwf   ddIndexMask, ACCESS
                      00885 
000B56                00886 theDelegatOr_delInLp
                      00887         ; WREG = ddIndex * 2
000B56 90D8           00888         bcf             STATUS, C, ACCESS
000B58 3404           00889         rlcf    ddIndex, w, ACCESS
                      00890 
                      00891         ; IF YOU"RE GONNA HIJACK a releasing osc then maybe choose the one that the most released?
                      00892         
                      00893         ; check if we're still looking for idle oscillators or forcing assignment to a releasing osc
000B5A BE03           00894         btfsc   ddLockedFlags, 7, ACCESS
000B5C D???           00895         bra             theDelegatOr_delInLpForceAssign
                      00896 
                      00897         ; check low byte for zero
000B5E 52E3           00898         movf    PLUSW_delegatedDeltas, f, ACCESS
000B60 E1??           00899         bnz             theDelegatOr_delInLpNext
                      00900         ; check high byte for zero
000B62 0F01           00901         addlw   1
000B64 52E3           00902         movf    PLUSW_delegatedDeltas, f, ACCESS
000B66 E1??           00903         bnz             theDelegatOr_delInLpNext
                      00904         ; found idle oscillator so assign it
000B68 D???           00905         bra             theDelegatOr_delInLpAssignOsc
                      00906         
000B6A                00907 theDelegatOr_delInLpForceAssign
                      00908         ; if oscillator is not locked then it may be releasing so force assignment
000B6A 5005           00909         movf    ddIndexMask, w, ACCESS
000B6C 1403           00910         andwf   ddLockedFlags, w, ACCESS
                      00911         ; oscillator is locked so don't touch it
000B6E E1??           00912         bnz             theDelegatOr_delInLpNext
                      00913 
000B70                00914 theDelegatOr_delInLpAssignOsc
                      00915         ; found suitable oscillator, ignore if locked for sustain
000B70 5005           00916         movf    ddIndexMask, w, ACCESS
000B72 142B           00917         andwf   sustainFlags, w, ACCESS
                      00918         ; oscillator is locked for sustain so consider it ineligible
000B74 E1??           00919         bnz             theDelegatOr_delInLpNext
                      00920 
                      00921         ; oscillator is not locked for sustain so do delegatedDeltas[ddIndex] = activeNoteDeltas[andInde
                            x]
                      00922         ; copy low byte
000B76 90D8           00923         bcf             STATUS, C, ACCESS
000B78 3406           00924         rlcf    andIndex, w, ACCESS
000B7A 50EB           00925         movf    PLUSW_activeNoteDeltas, w, ACCESS
000B7C 6E08           00926         movwf   tmpValue, ACCESS
000B7E 90D8           00927         bcf             STATUS, C, ACCESS
000B80 3404           00928         rlcf    ddIndex, w, ACCESS
000B82 C008 FFE3      00929         movff   tmpValue, PLUSW_delegatedDeltas
                      00930         ; copy high byte
000B86 90D8           00931         bcf             STATUS, C, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 141


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000B88 3406           00932         rlcf    andIndex, w, ACCESS
000B8A 0F01           00933         addlw   1
000B8C 50EB           00934         movf    PLUSW_activeNoteDeltas, w, ACCESS
000B8E 6E08           00935         movwf   tmpValue, ACCESS
000B90 90D8           00936         bcf             STATUS, C, ACCESS
000B92 3404           00937         rlcf    ddIndex, w, ACCESS
000B94 0F01           00938         addlw   1
000B96 C008 FFE3      00939         movff   tmpValue, PLUSW_delegatedDeltas
                      00940 
                      00941         ; oscillator is starting up so set attack flag
000B9A 5004           00942         movf    ddIndex, w, ACCESS
000B9C EC?? F???      00943         call    oscAdsrTriggerAttack
                      00944         
                      00945         ; skip to next unlocked activeNoteDelta
000BA0 D???           00946         bra             theDelegatOr_delOutLpNext
                      00947         
000BA2                00948 theDelegatOr_delInLpNext
000BA2 90D8           00949         bcf             STATUS, C, ACCESS
000BA4 3605           00950         rlcf    ddIndexMask, f, ACCESS
000BA6 2A04           00951         incf    ddIndex, f, ACCESS
000BA8 5004           00952         movf    ddIndex, w, ACCESS
000BAA 0A04           00953         xorlw   MAX_POLY_DEPTH
000BAC E1??           00954         bnz             theDelegatOr_delInLp
                      00955         
                      00956         ; toggle idle/forceOnReleasing flag if necessary
000BAE BE03           00957         btfsc   ddLockedFlags, 7, ACCESS
                      00958         ; just completed force on releasing cycle so continue
000BB0 D???           00959         bra             theDelegatOr_delOutLpNext
                      00960         ; just complete idle assign loop so toggle to force
000BB2 8E03           00961         bsf             ddLockedFlags, 7, ACCESS
                      00962         ; go try to find a releasing oscillator to snag
000BB4 D???           00963         bra             theDelegatOr_delInLpInit
                      00964 
000BB6                00965 theDelegatOr_delOutLpNext
000BB6 90D8           00966         bcf             STATUS, C, ACCESS
000BB8 3607           00967         rlcf    andIndexMask, f, ACCESS
000BBA 2A06           00968         incf    andIndex, f, ACCESS
000BBC 5006           00969         movf    andIndex, w, ACCESS
000BBE 0A04           00970         xorlw   MAX_POLY_DEPTH
000BC0 E1??           00971         bnz             theDelegatOr_delOutLp
                      00972         
000BC2 D???           00973         bra             theDelegatOr_done
                      00974 
000BC4                00975 theDelgatOr_doMono
                      00976         ; kill adsr for monophonic mode
000BC4 6A33           00977         clrf    adsrLimiterRegs + 0, ACCESS
000BC6 C0B9 F0C1      00978         movff   activeNoteDeltas + 0, delegatedDeltas + 0       
000BCA C0BA F0C2      00979         movff   activeNoteDeltas + 1, delegatedDeltas + 1
000BCE 6BC3           00980         clrf    delegatedDeltas + 2
000BD0 6BC4           00981         clrf    delegatedDeltas + 3
000BD2 6BC5           00982         clrf    delegatedDeltas + 4
000BD4 6BC6           00983         clrf    delegatedDeltas + 5
000BD6 6BC7           00984         clrf    delegatedDeltas + 6
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 142


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000BD8 6BC8           00985         clrf    delegatedDeltas + 7
                      00986 
000BDA                00987 theDelegatOr_done
                      00988         ; clear flag to indicate to oscillators that delegatedDeltas are no longer volatile
000BDA 9018           00989         bcf             soundGenFlags, delegatorBusy, ACCESS
                      00990 
                      00991         POP_R   FSR1H
000BDC CFDC FFE2          M         movff   softwareStackPointerPREINC, FSR1H       ; ++softwareStackPointerINDF = regName
                      00992         POP_R   FSR1L
000BE0 CFDC FFE1          M         movff   softwareStackPointerPREINC, FSR1L       ; ++softwareStackPointerINDF = regName
                      00993         POP_R   FSR0H
000BE4 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00994         POP_R   FSR0L
000BE8 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      00995         POP_R   r6
000BEC CFDC F009          M         movff   softwareStackPointerPREINC, r6          ; ++softwareStackPointerINDF = regName
                      00996         POP_R   r5
000BF0 CFDC F008          M         movff   softwareStackPointerPREINC, r5          ; ++softwareStackPointerINDF = regName
                      00997         POP_R   r4
000BF4 CFDC F007          M         movff   softwareStackPointerPREINC, r4          ; ++softwareStackPointerINDF = regName
                      00998         POP_R   r3
000BF8 CFDC F006          M         movff   softwareStackPointerPREINC, r3          ; ++softwareStackPointerINDF = regName
                      00999         POP_R   r2
000BFC CFDC F005          M         movff   softwareStackPointerPREINC, r2          ; ++softwareStackPointerINDF = regName
                      01000         POP_R   r1
000C00 CFDC F004          M         movff   softwareStackPointerPREINC, r1          ; ++softwareStackPointerINDF = regName
                      01001         POP_R   r0
000C04 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      01002         
                      01003         #undefine       ddLockedFlags
                      01004         #undefine       ddIndex
                      01005         #undefine       ddIndexMask
                      01006         #undefine       andIndex
                      01007         #undefine       andIndexMask
                      01008         #undefine       tmpValue
                      01009         #undefine       andLockedFlags
                      01010         #undefine       FSR_activeNoteDeltas
                      01011         #undefine       PLUSW_activeNoteDeltas
                      01012         #undefine       FSR_delegatedDeltas
                      01013         #undefine       PLUSW_delegatedDeltas
                      01014 
000C08 0012           01015         return
                      01016 
                      01017 
                      01018         ; ***********************************************************************
                      01019         ; Function: void processSoundState(void)
                      01020         ; ***********************************************************************
000C0A                01021 processSoundState
                      01022         ; push working regs onto software stack
                      01023         PUSH_R  FSR0L
000C0A CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01024         PUSH_R  FSR0H
000C0E CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 143


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01025         PUSH_R  FSR1L
000C12 CFE1 FFDD          M         movff   FSR1L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01026         PUSH_R  FSR1H
000C16 CFE2 FFDD          M         movff   FSR1H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01027         PUSH_R  TBLPTRL
000C1A CFF6 FFDD          M         movff   TBLPTRL, softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01028         PUSH_R  TBLPTRH
000C1E CFF7 FFDD          M         movff   TBLPTRH, softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01029         PUSH_R  TBLPTRU
000C22 CFF8 FFDD          M         movff   TBLPTRU, softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01030         PUSH_R  TABLAT
000C26 CFF5 FFDD          M         movff   TABLAT,  softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01031         PUSH_R  PRODL
000C2A CFF3 FFDD          M         movff   PRODL,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01032         PUSH_R  PRODH
000C2E CFF4 FFDD          M         movff   PRODH,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01033         ; Define FSR(s) for recording, playback pointers will be redefined as needed
                      01034         #define FSR_sampleDataBuffer            FSR0
                      01035         #define PLUSW_sampleDataBuffer          PLUSW0  
                      01036 
                      01037         ; load fsr
000C32 EE00 F071      01038         lfsr    FSR_sampleDataBuffer, sampleDataBuffer
                      01039 
                      01040         ;**** start procedure: sample audio if mode is VOICE_THROUGH or RECORD ****
000C36 0E00           01041         movlw   VOICE_THROUGH
000C38 181F           01042         xorwf   recordOrPlayback, w, ACCESS
000C3A E0??           01043         bz              processSoundState_StartADC
000C3C 0E01           01044         movlw   RECORD
000C3E 181F           01045         xorwf   recordOrPlayback, w, ACCESS
000C40 E0??           01046         bz              processSoundState_StartADC
000C42 EF?? F???      01047         goto    processSoundState_Playback      
                      01048 
                      01049         ;**** start procedure: sample audio ****
000C46                01050 processSoundState_StartADC
                      01051         ; start ADC conversion
000C46 82C2           01052         bsf             ADCON0, GO, ACCESS
                      01053         ; wait for conversion to finish
000C48                01054 processSoundState_ADCWait
000C48 B2C2           01055         btfsc   ADCON0, DONE, ACCESS
000C4A D???           01056         bra             processSoundState_ADCWait
                      01057                 
                      01058         ; sample complete, save ADC value
000C4C 50C4           01059         movf    ADRESH, w, ACCESS
                      01060         ; add op-amp DC OFFSET
                      01061         ; REMEBER that DC-OFFSET will be affected by component tolerances so measure each circuit!
000C4E 0F36           01062         addlw   SAMPLE_DC_OFFSET 
                      01063         ; if overflow then clip at 0xff
000C50 B0D8           01064         btfsc   STATUS, C, ACCESS
000C52 0EFF           01065         movlw 0xff
                      01066         ; save value
000C54 6E2C           01067         movwf   sample, ACCESS
                      01068                 
                      01069 ; DEBUG - sample mix
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 144


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01070         ; amplify incoming sample volume by 3
000C56 0E80           01071         movlw   PWM_IDLE_OUTPUT_VALUE
000C58 5C2C           01072         subwf   sample, w, ACCESS
000C5A E3??           01073         bnc             processSoundState_sampAmpNeg
                      01074         ; result was positive so increase value
000C5C 90D8           01075         bcf             STATUS, C, ACCESS
000C5E 34E8           01076         rlcf    WREG, w, ACCESS
000C60 242C           01077         addwf   sample, w, ACCESS
                      01078         ; if overflow then clip at 0xff
000C62 B0D8           01079         btfsc   STATUS, C, ACCESS
000C64 0EFF           01080         movlw 0xff
000C66 D???           01081         bra             processSoundState_sampAmpExit
000C68                01082 processSoundState_sampAmpNeg
                      01083         ; result was negative so decrease value
                      01084         ; invert difference so it's positive
000C68 6CE8           01085         negf    WREG, ACCESS
000C6A 90D8           01086         bcf             STATUS, C, ACCESS
000C6C 34E8           01087         rlcf    WREG, w, ACCESS
000C6E 5C2C           01088         subwf   sample, w, ACCESS
                      01089         ; if overflow then clip at 0x00
000C70 A0D8           01090         btfss   STATUS, C, ACCESS
000C72 0E00           01091         movlw   0
000C74                01092 processSoundState_sampAmpExit
000C74 6E2C           01093         movwf   sample, ACCESS
                      01094 
                      01095         ; write sample value to PWM for immediate playback
                      01096         ; /4 and add (PWM_IDLE_OUTPUT_VALUE/4 * 3) to simulate final single voice sound mix
000C76 90D8           01097   bcf           STATUS, C, ACCESS
000C78 302C           01098         rrcf    sample, w, ACCESS
000C7A 90D8           01099   bcf           STATUS, C, ACCESS
000C7C 30E8           01100         rrcf    WREG, w, ACCESS
000C7E 0F60           01101         addlw   PWM_IDLE_OUTPUT_VALUE/4 * 3
000C80 6EBE           01102         movwf   CCPR1L, ACCESS
                      01103                 
                      01104         ;**** start procedure: should we be recording this? ****
                      01105         ; has RECORD button been released?
                      01106 #ifndef __DEBUG
                      01107         ; if debugging then assume that button has been released and we want to record
000C82 A282           01108         btfss   PORTC, RC1, ACCESS
                      01109         ; RECORD button is still depressed so don't record
000C84 EF?? F???      01110         goto    processSoundState_exit
                      01111 #endif
                      01112 
                      01113         ; RECORD button has been released
                      01114         
                      01115         ; is waveShape == SAMPLE?
000C88 0E02           01116         movlw   SAMPLE
000C8A 621E           01117         cpfseq  waveShape, ACCESS
                      01118         ; waveShape is != SAMPLE so don't record
000C8C EF?? F???      01119         goto    processSoundState_cancelVoiceThru
000C90 D???           01120         bra             processSoundState_recordGo
                      01121 
                      01122         ; waveShape != SAMPLE so cancel VOICE_THROUGH and return to PLAYBACK
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 145


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[208]: Label truncated at 32 characters. (processSoundState_cancelVoiceThru)
000C92                01123 processSoundState_cancelVoiceThru
000C92 0E02           01124         movlw   PLAYBACK
000C94 6E1F           01125         movwf   recordOrPlayback, ACCESS
000C96 0E80           01126         movlw   PWM_IDLE_OUTPUT_VALUE
000C98 6EBE           01127         movwf   CCPR1L, ACCESS
000C9A EF?? F???      01128         goto    processSoundState_exit
                      01129 
                      01130         ;**********************************************************************
                      01131         ; Record Begin
                      01132 
000C9E                01133 processSoundState_recordGo
                      01134         ;**** start procedure: record sample ****
                      01135 
                      01136         ; don't start recording until recordWaitCountdown == 0x00
                      01137         ; recordWaitCountdown value is set by INT1 (record button) ISR
000C9E 523B           01138         movf    recordWaitCountdown, f, ACCESS
000CA0 E0??           01139         bz              processSoundState_recordGoForRealz
000CA2 063B           01140         decf    recordWaitCountdown, f, ACCESS
000CA4 EF?? F???      01141         goto    processSoundState_exit
                      01142 
Warning[208]: Label truncated at 32 characters. (processSoundState_recordGoForRealz)
000CA8                01143 processSoundState_recordGoForRealz
                      01144 
                      01145         ; update recordOrPlayback state to RECORD
000CA8 0E01           01146         movlw   RECORD
000CAA 6E1F           01147         movwf   recordOrPlayback, ACCESS
                      01148 
                      01149         ;**** start procedure: write sample into data buffer ****
                      01150         ; sampleDataBuffer[sampleDataBufferIndex] = sample
000CAC 5011           01151         movf    sampleDataBufferIndex, w, ACCESS
000CAE C02C FFEB      01152         movff   sample, PLUSW_sampleDataBuffer
                      01153         
                      01154         ; increment index
000CB2 2A11           01155         incf    sampleDataBufferIndex, f, ACCESS
                      01156 
                      01157         ; check buffer capacity
                      01158         ; buffer is full if sampleDataBufferIndex is == SAMPLE_DATA_BUFFER_SIZE
000CB4 0E40           01159         movlw   SAMPLE_DATA_BUFFER_SIZE
000CB6 6211           01160         cpfseq  sampleDataBufferIndex, ACCESS
                      01161         ; buffer is not full, our work here is done
000CB8 D???           01162         bra             processSoundState_exit
                      01163 
                      01164         ; reset sampleDataBufferIndex to 0x0
000CBA 6A11           01165         clrf    sampleDataBufferIndex, ACCESS
                      01166         ; set sampleChunkReady flag to indicate that sample buffer is ready for EEPEROM write
000CBC 8017           01167         bsf             eepromFlags, sampleChunkReady, ACCESS
                      01168         ; sampleChunkCount indicates how many times the sample buffer has been filled, increment it
000CBE 2A12           01169         incf    sampleChunkCount, f, ACCESS
                      01170 
                      01171         ; buffer is full and ready for writing
                      01172 
                      01173         ; not using 'sample' to hold sample data anymore so change variable alias to 'tmpValue'
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 146


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01174         #define         tmpValue        sample
                      01175         
                      01176         ; MOVED THIS TO MAINLINE WHICH WAITS FOR SAMPLECHUNKREADY TO BE SET
                      01177         ; write sampleDataBuffer to EEPROM. Call takes 548uS @ 16MHz clock and 4MHz SPI clock
                      01178 ;       call    eepromWrite64
                      01179         ; sample chunk has been written so clear sampleChunkReadyFlag
                      01180 ;       bcf             eepromFlags, sampleChunkReady, ACCESS
                      01181 
                      01182         ;**** start procedure: should we stop recording? ****
                      01183         ; if EEPROM is full then stop recording
000CC0 0EFA           01184         movlw   ((EEPROM_SIZE_BITS/8) / SAMPLE_DATA_BUFFER_SIZE)
000CC2 1812           01185         xorwf   sampleChunkCount, w, ACCESS
000CC4 B4D8           01186         btfsc   STATUS, Z, ACCESS
000CC6 D???           01187         bra             processSoundState_stopRecording
                      01188 
                      01189         ; if turnSoundOn or keyPressed is set then stop recording
                      01190         ; either flag being set indicates that a new Note On message has been received since record star
                            t
                      01191         ; this allows for using MIDI Note On message to set sample length
000CC8 B610           01192         btfsc   midiFlags, turnSoundOn, ACCESS
000CCA D???           01193         bra             processSoundState_stopRecording
000CCC AA10           01194         btfss   midiFlags, keyPressed, ACCESS
                      01195 
                      01196         ; EEPROM is not full and no Note On has been received since record start so keep recording, exit
                             ISR
000CCE EF?? F???      01197         goto    processSoundState_exit
                      01198 
                      01199         ;**** start procedure: stop recording ****
000CD2                01200 processSoundState_stopRecording
                      01201         ; set mode back to Playback
000CD2 0E02           01202         movlw   PLAYBACK
000CD4 6E1F           01203         movwf   recordOrPlayback, ACCESS
                      01204 
                      01205         ; leave PWM output at PWM_IDLE_OUTPUT_VALUE
000CD6 0E80           01206         movlw   PWM_IDLE_OUTPUT_VALUE
000CD8 6EBE           01207         movwf   CCPR1L, ACCESS
                      01208         
                      01209         ; use sampleChunkCount to calculate EEPROM end address
                      01210         ; sampleEndAddress = (sampleChunkCount * SAMPLE_DATA_BUFFER_SIZE) - 1
000CDA 0E40           01211         movlw   SAMPLE_DATA_BUFFER_SIZE
000CDC 0212           01212         mulwf   sampleChunkCount, ACCESS
000CDE 0E01           01213         movlw   1
000CE0 5EF3           01214         subwf   PRODL, f, ACCESS
000CE2 A0D8           01215         btfss   STATUS, C, ACCESS
000CE4 06F4           01216         decf    PRODH, f, ACCESS
                      01217 
                      01218         ; save sample end address to RAM for immediate playback
000CE6 CFF3 F013      01219         movff   PRODL, sampleEndAddress
000CEA CFF4 F014      01220         movff   PRODH, sampleEndAddress + 1
                      01221 
                      01222         ; save sample end address to on-chip EEPROM
                      01223         ; during power-up device init, initExternalEeprom() reads on-chip EEPROM address into RAM variab
                            le sampleEndAddress
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 147


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01224         ; write address low byte
                      01225         WRITE_INTERNAL_EEPROM   0, sampleEndAddress
  0000                    M         local   writeIntEE_loop
                          M         
                          M         ; load address
000CEE 0E00               M         movlw   0
000CF0 6EA9               M         movwf   EEADR, ACCESS
                          M         ; load value
000CF2 C013 FFA8          M         movff   sampleEndAddress, EEDATA
                          M         ; configure eeprom
                          M         ; point to EEPROM DATA memory
000CF6 9EA6               M         bcf             EECON1, EEPGD, ACCESS
                          M         ; Access EEPROM/Program
000CF8 9CA6               M         bcf             EECON1, CFGS, ACCESS    
                          M         ; Enable writes
000CFA 84A6               M         bsf             EECON1, WREN, ACCESS
                          M 
                          M         ; don't have to disable interrupts because I'm only calling this
                          M         ; from within the high-priority ISR
                          M 
                          M         ; required write enable sequence
000CFC 0E55               M         movlw   0x55
000CFE 6EA7               M         movwf   EECON2, ACCESS
000D00 0EAA               M         movlw   0xAA
000D02 6EA7               M         movwf   EECON2, ACCESS
                          M 
                          M         ; set WR bit to begin write
000D04 82A6               M         bsf             EECON1, WR, ACCESS
000D06                    M writeIntEE_loop
                          M         ; wait for write to complete
000D06 B2A6               M         btfsc   EECON1, WR, ACCESS
000D08 D???               M         bra             writeIntEE_loop
                          M         ; disable writes
000D0A 94A6               M         bcf             EECON1, WREN, ACCESS
                          M 
                          M         ; point to Program memory
000D0C 8EA6               M         bsf             EECON1, EEPGD, ACCESS
                          M 
                      01226         ; write address high byte
                      01227         WRITE_INTERNAL_EEPROM   1, (sampleEndAddress + 1)
  0000                    M         local   writeIntEE_loop
                          M         
                          M         ; load address
000D0E 0E01               M         movlw   1
000D10 6EA9               M         movwf   EEADR, ACCESS
                          M         ; load value
000D12 C014 FFA8          M         movff   (sampleEndAddress + 1), EEDATA
                          M         ; configure eeprom
                          M         ; point to EEPROM DATA memory
000D16 9EA6               M         bcf             EECON1, EEPGD, ACCESS
                          M         ; Access EEPROM/Program
000D18 9CA6               M         bcf             EECON1, CFGS, ACCESS    
                          M         ; Enable writes
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 148


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000D1A 84A6               M         bsf             EECON1, WREN, ACCESS
                          M 
                          M         ; don't have to disable interrupts because I'm only calling this
                          M         ; from within the high-priority ISR
                          M 
                          M         ; required write enable sequence
000D1C 0E55               M         movlw   0x55
000D1E 6EA7               M         movwf   EECON2, ACCESS
000D20 0EAA               M         movlw   0xAA
000D22 6EA7               M         movwf   EECON2, ACCESS
                          M 
                          M         ; set WR bit to begin write
000D24 82A6               M         bsf             EECON1, WR, ACCESS
000D26                    M writeIntEE_loop
                          M         ; wait for write to complete
000D26 B2A6               M         btfsc   EECON1, WR, ACCESS
000D28 D???               M         bra             writeIntEE_loop
                          M         ; disable writes
000D2A 94A6               M         bcf             EECON1, WREN, ACCESS
                          M 
                          M         ; point to Program memory
000D2C 8EA6               M         bsf             EECON1, EEPGD, ACCESS
                          M 
                      01228 
                      01229         ; reset accumulators for good measure
                      01230         CLEAR_ACCUMULATORS
  0000                    M         local   loop
                          M 
                          M         ; init local variables
                          M         PUSH_R  r0
000D2E C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                          M         PUSH_R  FSR0L
000D32 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                          M         PUSH_R  FSR0H
000D36 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                          M         
                          M         ; load fsr
000D3A EE00 F0D1          M         lfsr    FSR0, accumulators
                          M 
                          M         ; init count
000D3E 5023               M         movf    polyDepth, w, ACCESS
000D40 6E03               M         movwf   r0, ACCESS
000D42                    M loop    
                          M         ; each accumulator is 4 bytes wide
000D42 6AEE               M         clrf    POSTINC0, ACCESS        
000D44 6AEE               M         clrf    POSTINC0, ACCESS        
000D46 6AEE               M         clrf    POSTINC0, ACCESS        
000D48 6AEE               M         clrf    POSTINC0, ACCESS        
                          M         ; decrement count, skip if done
000D4A 2E03               M         decfsz  r0, f, ACCESS
000D4C D???               M         bra             loop
                          M 
                          M         ; restore variables
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 149


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         POP_R   FSR0H
000D4E CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                          M         POP_R   FSR0L
000D52 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                          M         POP_R   r0
000D56 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                          M         
                      01231 
                      01232         ; fixes bug if key was held during record start
000D5A 9810           01233         bcf             midiFlags, turnSoundOff, ACCESS
                      01234 
000D5C D???           01235         bra             processSoundState_exit
                      01236 
                      01237         ; undefine local FSRs
                      01238         #undefine       FSR_sampleDataBuffer
                      01239         #undefine       PLUSW_sampleDataBuffer
                      01240 
                      01241         ;**********************************************************************
                      01242         ; Playback Begin
                      01243 
000D5E                01244 processSoundState_Playback      
                      01245         ;**** start procedure: playback waveform or sample ****
                      01246 
                      01247         ; not using 'tmpValue' to hold anymore so change variable alias to 'count'
                      01248         #undefine       tmpValue
                      01249         #define         count   sample
                      01250                 
                      01251         ;**** start procedure: should we make any noise? ****
                      01252         ; if soundOn is set then continue to generate sound
000D5E BC10           01253         btfsc   midiFlags, soundOn, ACCESS
000D60 D???           01254         bra             processSoundState_SoundOn
                      01255 
                      01256         ; if turnSoundOn is set then start generating sound
000D62 A610           01257         btfss   midiFlags, turnSoundOn, ACCESS
                      01258         ; neither is set so reset sound gen state and exit ISR
                      01259 ;       bra             processSoundState_reset
000D64 D???           01260         bra             processSoundState_SoundOn
                      01261         ; request has been made for sound to turn on so do it
000D66 9610           01262         bcf             midiFlags, turnSoundOn, ACCESS
000D68 8C10           01263         bsf             midiFlags, soundOn, ACCESS
                      01264         ; for SAMPLE mode, clear the samplesLoaded flag to tell the mainline that you need a new sample
000D6A 9217           01265         bcf             eepromFlags, samplesLoaded, ACCESS
                      01266         
                      01267         ;**** start procedure: make some noise ****
000D6C                01268 processSoundState_SoundOn
                      01269         ;**** start procedure: update oscillator states ****
                      01270         ; if waveShape is == SINE or SQUARE then macro will update oscillator's activeOutputValue regist
                            er
                      01271         ; if waveShape is == SAMPLE and samplesLoaded flag is set then macro will clear flag and load ne
                            xtSampleAddress register
                      01272         OSC_STATE_BLOCK 0
  0000                    M         local   checkDelegating, oscCheckActive, zeroAcc, oscActive, waveIsSample, noTransition, oscChec
                            kNotSine
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 150


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M         local   clrSampleAcc, addressOk, waveIsNotSample, waveIsSine, waveIsSquare, tableAddressLoaded, 
                            resetOscillator, macroDone
                          M                 
                          M         ; if oscillator is locked for sustain then leave it alone
000D6C B02B               M         btfsc   sustainFlags, 0,          ACCESS
000D6E D???               M         bra             oscActive
                          M                         
000D70                    M checkDelegating
                          M         ; don't update if delegator is busy because delegatedDelta value is volatile
000D70 B018               M         btfsc   soundGenFlags, delegatorBusy, ACCESS
                          M         ; delegator is busy so just keep spinning
000D72 D???               M         bra             oscCheckActive
                          M         
                          M         ; THRESHOLD METHOD WORKS WELL
000D74 0E00               M         movlw   SINE
000D76 621E               M         cpfseq waveShape, ACCESS
000D78 D???               M         bra             oscCheckNotSine
                          M         ; calculate absolute offset between PWM_IDLE_OUTPUT_VALUE and current activeOutputValue
000D7A 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
000D7C 5DE1               M         subwf   activeOutputValues + 0,          w
                          M         ; invert if negative
000D7E A0D8               M         btfss   STATUS, C, ACCESS
000D80 6CE8               M         negf    WREG, ACCESS
                          M         ; check if offset is below threshold value
                          M         ; do (WREG = OSC_OUTPUT_GATE_THRESHOLD - WREG)
000D82 0804               M         sublw   OSC_TRANSITION_OUTPUT_THRESHOLD
                          M         ; if result is positive then activeOutputValue offset from IDLE is <= THRESHOLD so allow changes
000D84 E3??               M         bnc             oscCheckActive
                          M 
000D86                    M oscCheckNotSine
                          M 
                          M         ; delegator is idle and oscillator is enabled so copy delegated delta as internal
000D86 C0C1 F0C9          M         movff   delegatedDeltas + (0          * DELEGATED_DELTAS_ELEMENT_SIZE) + 0, oscDeltas + (0      
                                * OSC_DELTAS_ELEMENT_SIZE) + 0
000D8A C0C2 F0CA          M         movff   delegatedDeltas + (0          * DELEGATED_DELTAS_ELEMENT_SIZE) + 1, oscDeltas + (0      
                                * OSC_DELTAS_ELEMENT_SIZE) + 1
                          M 
000D8E                    M oscCheckActive
                          M         ; if oscDeltas[OSC_NUMBER] == 0x00 then oscillator is not really active so reset
                          M         ; this check is required in event that (activeOutput == 0 && delegatorBusy == TRUE && oscDelta =
                            = 0)
000D8E 53C9               M         movf    oscDeltas                       + (0          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, f
000D90 E1??               M         bnz             oscActive
000D92 53CA               M         movf    oscDeltas                       + (0          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, f
000D94 E0??               M         bz              resetOscillator
                          M         
000D96                    M oscActive
                          M         ; if oscillator is starting from reset state then begin with 0x0000 accumulator
000D96 B02A               M         btfsc   oscResetFlags, 0,          ACCESS
000D98 D???               M         bra             zeroAcc
                          M 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 151


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         ;**** start procedure: step Accumulator (SINE/SQUARE/SAMPLE) ****
                          M         ; accumulator += activeNoteDelta
                          M         ; accumulators are 4 bytes wide, activeNoteDeltas are 2 bytes wide
000D9A 51C9               M         movf    oscDeltas                       + (0          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, w
000D9C 27D1               M         addwf   accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
000D9E 51CA               M         movf    oscDeltas                       + (0          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, w  
000DA0 23D2               M         addwfc  accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
000DA2 0E00               M         movlw   0
000DA4 23D3               M         addwfc  accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
000DA6 23D4               M         addwfc  accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                          M         
000DA8                    M zeroAcc
                          M         ; we're done with oscResetFlags flag so ensure that it's clear
000DA8 902A               M         bcf             oscResetFlags, 0,          ACCESS
                          M         
                          M         ;**** start procedure: handle Pitch Wheel (SINE/SQUARE/SAMPLE) ****
                          M         ; accumulator += pitchWheel
000DAA 5019               M         movf    pitchWheel                                                                              
                                                                            + 0, w, ACCESS
000DAC 27D1               M         addwf   accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
000DAE 501A               M         movf    pitchWheel                                                                              
                                                                            + 1, w, ACCESS
000DB0 23D2               M         addwfc  accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
000DB2 501B               M         movf    pitchWheel                                                                              
                                                                            + 2, w, ACCESS
000DB4 23D3               M         addwfc  accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
000DB6 501C               M         movf    pitchWheel                                                                              
                                                                            + 3, w, ACCESS
000DB8 23D4               M         addwfc  accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                          M         
                          M         ;**** start procedure: if SAMPLE waveshape then load next read address  (SAMPLE ONLY) ****
                          M         ; branch to waveform specific table address load
000DBA 0E02               M         movlw   SAMPLE
000DBC 621E               M         cpfseq  waveShape, ACCESS
000DBE D???               M         bra             waveIsNotSample
000DC0                    M waveIsSample
                          M 
                          M         ; if samplesLoaded flag is set then load next EEPROM read address
                          M         ; checking this here as opposed to before accumulator update will, in the event of the mainline 
                            not…
                          M         ; being able to load the samples in time, cause audio chopping rather than detuning
000DC0 A217               M         btfss   eepromFlags, samplesLoaded, ACCESS
000DC2 D???               M         bra             macroDone
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 152


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         
                          M         ; check for note transition
                          M         ; keyPressed flag is set every time a MIDI Note On message is received
                          M         ; when a sample is playing back in POLY or SUSTAIN modes, we want the sample to restart from the
                             beginning...
                          M         ; whenever a Note On message is received.
000DC4 AA10               M         btfss   midiFlags, keyPressed, ACCESS
000DC6 D???               M         bra             noTransition
                          M         ; is modeLevel == POLY
000DC8 0E00               M         movlw   POLY
000DCA 1820               M         xorwf   modeLevel, w, ACCESS
                          M         ; mode is POLY so reset accumulator to restart sample from beginning
000DCC E0??               M         bz              clrSampleAcc
                          M 
000DCE                    M noTransition    
                          M         ; nextSampleAddress = ((accumulator >> 8) & 0xffff)
                          M         ; reset accumulator if nextSampleAddress value will exceed sampleEndAddress
                          M         ; is waveTableIndex > sampleEndAddress?
000DCE 51D2               M         movf    accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, w
000DD0 5C13               M         subwf   sampleEndAddress, w, ACCESS
000DD2 51D3               M         movf    accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, w
000DD4 5814               M         subwfb  sampleEndAddress + 1, w, ACCESS
                          M         ; result is positive so waveTableIndex is within valid range
000DD6 E2??               M         bc              addressOk
                          M         ; ((accumulator >> 8) & 0xffff) is out of valid sample range so restart sample from beginning
                          M         ; reset accumulator
000DD8                    M clrSampleAcc
000DD8 6BD1               M         clrf    accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0
000DDA 6BD2               M         clrf    accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1
000DDC 6BD3               M         clrf    accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2
000DDE 6BD4               M         clrf    accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3
000DE0                    M addressOk
                          M         
                          M         ; do nextSampleAddress = ((accumulator >> 8) & 0xffff)
000DE0 C0D2 F0B1          M         movff   accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, nextSampleAddresses + (0          * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 0
000DE4 C0D3 F0B2          M         movff   accumulators            + (0          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, nextSampleAddresses + (0          * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 1
                          M         
000DE8 D???               M         bra             macroDone
                          M         
000DEA                    M waveIsNotSample
                          M         ;**** start procedure: waveshape is SINE or SQUARE so read Program Memory table  (SINE/SQUARE ON
                            LY) ****
                          M         ; branch to waveform specific table address load
000DEA 0E00               M         movlw   SINE
000DEC 621E               M         cpfseq  waveShape, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 153


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000DEE D???               M         bra             waveIsSquare
                          M 
000DF0                    M waveIsSine      
                          M         ; 
                          M         ; load address of SINE table read
                          M         ; offset = ((accumulator >> 8) & 0xff)
000DF0 51D2               M         movf    accumulators + (0          * ACCUMULATORS_ELEMENT_SIZE) + 1, w
000DF2 2424               M         addwf   sineTableBaseAddress + 0, w
000DF4 6EF6               M         movwf   TBLPTRL, ACCESS
000DF6 5025               M         movf    sineTableBaseAddress + 1, w
000DF8 B0D8               M         btfsc   STATUS, C, ACCESS
000DFA 0F01               M         addlw   1
000DFC 6EF7               M         movwf   TBLPTRH, ACCESS
000DFE 5026               M         movf    sineTableBaseAddress + 2, w
000E00 B0D8               M         btfsc   STATUS, C, ACCESS
000E02 0F01               M         addlw   1
000E04 6EF8               M         movwf   TBLPTRU, ACCESS
000E06 D???               M         bra             tableAddressLoaded
                          M 
000E08                    M waveIsSquare
                          M         ; load address of SQUARE table read
                          M         ; offset = ((accumulator >> 8) & 0xff)
000E08 51D2               M         movf    accumulators + (0          * ACCUMULATORS_ELEMENT_SIZE) + 1, w
000E0A 2427               M         addwf   squareTableBaseAddress + 0, w
000E0C 6EF6               M         movwf   TBLPTRL, ACCESS
000E0E 5028               M         movf    squareTableBaseAddress + 1, w
000E10 B0D8               M         btfsc   STATUS, C, ACCESS
000E12 0F01               M         addlw   1
000E14 6EF7               M         movwf   TBLPTRH, ACCESS
000E16 5029               M         movf    squareTableBaseAddress + 2, w
000E18 B0D8               M         btfsc   STATUS, C, ACCESS
000E1A 0F01               M         addlw   1
000E1C 6EF8               M         movwf   TBLPTRU, ACCESS
                          M 
000E1E                    M tableAddressLoaded
                          M         ; read value from program memory
000E1E 0008               M         tblrd*
000E20 CFF5 F0E1          M         movff   TABLAT, activeOutputValues + (0          * ACTIVE_OUTPUT_VALUES_EL_SIZE) + 0
000E24 D???               M         bra             macroDone
                          M         
000E26                    M resetOscillator
                          M         ; set oscillator reset flag
000E26 802A               M         bsf             oscResetFlags, 0,          ACCESS
000E28 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
000E2A 6FE1               M         movwf   activeOutputValues + (0          * ACTIVE_OUTPUT_VALUES_EL_SIZE)
000E2C 6BC9               M         clrf    oscDeltas + (0          * OSC_DELTAS_ELEMENT_SIZE) + 0
000E2E 6BCA               M         clrf    oscDeltas + (0          * OSC_DELTAS_ELEMENT_SIZE) + 1
000E30 6BD1               M         clrf    accumulators + (0          * ACCUMULATORS_ELEMENT_SIZE) + 0
000E32 6BD2               M         clrf    accumulators + (0          * ACCUMULATORS_ELEMENT_SIZE) + 1
000E34 6BD3               M         clrf    accumulators + (0          * ACCUMULATORS_ELEMENT_SIZE) + 2
000E36 6BD4               M         clrf    accumulators + (0          * ACCUMULATORS_ELEMENT_SIZE) + 3
                          M 
000E38                    M macroDone
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 154


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
                      01273         OSC_STATE_BLOCK 1
  0000                    M         local   checkDelegating, oscCheckActive, zeroAcc, oscActive, waveIsSample, noTransition, oscChec
                            kNotSine
  0000                    M         local   clrSampleAcc, addressOk, waveIsNotSample, waveIsSine, waveIsSquare, tableAddressLoaded, 
                            resetOscillator, macroDone
                          M                 
                          M         ; if oscillator is locked for sustain then leave it alone
000E38 B22B               M         btfsc   sustainFlags, 1,          ACCESS
000E3A D???               M         bra             oscActive
                          M                         
000E3C                    M checkDelegating
                          M         ; don't update if delegator is busy because delegatedDelta value is volatile
000E3C B018               M         btfsc   soundGenFlags, delegatorBusy, ACCESS
                          M         ; delegator is busy so just keep spinning
000E3E D???               M         bra             oscCheckActive
                          M         
                          M         ; THRESHOLD METHOD WORKS WELL
000E40 0E00               M         movlw   SINE
000E42 621E               M         cpfseq waveShape, ACCESS
000E44 D???               M         bra             oscCheckNotSine
                          M         ; calculate absolute offset between PWM_IDLE_OUTPUT_VALUE and current activeOutputValue
000E46 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
000E48 5DE2               M         subwf   activeOutputValues + 1,          w
                          M         ; invert if negative
000E4A A0D8               M         btfss   STATUS, C, ACCESS
000E4C 6CE8               M         negf    WREG, ACCESS
                          M         ; check if offset is below threshold value
                          M         ; do (WREG = OSC_OUTPUT_GATE_THRESHOLD - WREG)
000E4E 0804               M         sublw   OSC_TRANSITION_OUTPUT_THRESHOLD
                          M         ; if result is positive then activeOutputValue offset from IDLE is <= THRESHOLD so allow changes
000E50 E3??               M         bnc             oscCheckActive
                          M 
000E52                    M oscCheckNotSine
                          M 
                          M         ; delegator is idle and oscillator is enabled so copy delegated delta as internal
000E52 C0C3 F0CB          M         movff   delegatedDeltas + (1          * DELEGATED_DELTAS_ELEMENT_SIZE) + 0, oscDeltas + (1      
                                * OSC_DELTAS_ELEMENT_SIZE) + 0
000E56 C0C4 F0CC          M         movff   delegatedDeltas + (1          * DELEGATED_DELTAS_ELEMENT_SIZE) + 1, oscDeltas + (1      
                                * OSC_DELTAS_ELEMENT_SIZE) + 1
                          M 
000E5A                    M oscCheckActive
                          M         ; if oscDeltas[OSC_NUMBER] == 0x00 then oscillator is not really active so reset
                          M         ; this check is required in event that (activeOutput == 0 && delegatorBusy == TRUE && oscDelta =
                            = 0)
000E5A 53CB               M         movf    oscDeltas                       + (1          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, f
000E5C E1??               M         bnz             oscActive
000E5E 53CC               M         movf    oscDeltas                       + (1          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, f
000E60 E0??               M         bz              resetOscillator
                          M         
000E62                    M oscActive
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 155


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         ; if oscillator is starting from reset state then begin with 0x0000 accumulator
000E62 B22A               M         btfsc   oscResetFlags, 1,          ACCESS
000E64 D???               M         bra             zeroAcc
                          M 
                          M         ;**** start procedure: step Accumulator (SINE/SQUARE/SAMPLE) ****
                          M         ; accumulator += activeNoteDelta
                          M         ; accumulators are 4 bytes wide, activeNoteDeltas are 2 bytes wide
000E66 51CB               M         movf    oscDeltas                       + (1          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, w
000E68 27D5               M         addwf   accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
000E6A 51CC               M         movf    oscDeltas                       + (1          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, w  
000E6C 23D6               M         addwfc  accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
000E6E 0E00               M         movlw   0
000E70 23D7               M         addwfc  accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
000E72 23D8               M         addwfc  accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                          M         
000E74                    M zeroAcc
                          M         ; we're done with oscResetFlags flag so ensure that it's clear
000E74 922A               M         bcf             oscResetFlags, 1,          ACCESS
                          M         
                          M         ;**** start procedure: handle Pitch Wheel (SINE/SQUARE/SAMPLE) ****
                          M         ; accumulator += pitchWheel
000E76 5019               M         movf    pitchWheel                                                                              
                                                                            + 0, w, ACCESS
000E78 27D5               M         addwf   accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
000E7A 501A               M         movf    pitchWheel                                                                              
                                                                            + 1, w, ACCESS
000E7C 23D6               M         addwfc  accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
000E7E 501B               M         movf    pitchWheel                                                                              
                                                                            + 2, w, ACCESS
000E80 23D7               M         addwfc  accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
000E82 501C               M         movf    pitchWheel                                                                              
                                                                            + 3, w, ACCESS
000E84 23D8               M         addwfc  accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                          M         
                          M         ;**** start procedure: if SAMPLE waveshape then load next read address  (SAMPLE ONLY) ****
                          M         ; branch to waveform specific table address load
000E86 0E02               M         movlw   SAMPLE
000E88 621E               M         cpfseq  waveShape, ACCESS
000E8A D???               M         bra             waveIsNotSample
000E8C                    M waveIsSample
                          M 
                          M         ; if samplesLoaded flag is set then load next EEPROM read address
                          M         ; checking this here as opposed to before accumulator update will, in the event of the mainline 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 156


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            not…
                          M         ; being able to load the samples in time, cause audio chopping rather than detuning
000E8C A217               M         btfss   eepromFlags, samplesLoaded, ACCESS
000E8E D???               M         bra             macroDone
                          M         
                          M         ; check for note transition
                          M         ; keyPressed flag is set every time a MIDI Note On message is received
                          M         ; when a sample is playing back in POLY or SUSTAIN modes, we want the sample to restart from the
                             beginning...
                          M         ; whenever a Note On message is received.
000E90 AA10               M         btfss   midiFlags, keyPressed, ACCESS
000E92 D???               M         bra             noTransition
                          M         ; is modeLevel == POLY
000E94 0E00               M         movlw   POLY
000E96 1820               M         xorwf   modeLevel, w, ACCESS
                          M         ; mode is POLY so reset accumulator to restart sample from beginning
000E98 E0??               M         bz              clrSampleAcc
                          M 
000E9A                    M noTransition    
                          M         ; nextSampleAddress = ((accumulator >> 8) & 0xffff)
                          M         ; reset accumulator if nextSampleAddress value will exceed sampleEndAddress
                          M         ; is waveTableIndex > sampleEndAddress?
000E9A 51D6               M         movf    accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, w
000E9C 5C13               M         subwf   sampleEndAddress, w, ACCESS
000E9E 51D7               M         movf    accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, w
000EA0 5814               M         subwfb  sampleEndAddress + 1, w, ACCESS
                          M         ; result is positive so waveTableIndex is within valid range
000EA2 E2??               M         bc              addressOk
                          M         ; ((accumulator >> 8) & 0xffff) is out of valid sample range so restart sample from beginning
                          M         ; reset accumulator
000EA4                    M clrSampleAcc
000EA4 6BD5               M         clrf    accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0
000EA6 6BD6               M         clrf    accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1
000EA8 6BD7               M         clrf    accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2
000EAA 6BD8               M         clrf    accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3
000EAC                    M addressOk
                          M         
                          M         ; do nextSampleAddress = ((accumulator >> 8) & 0xffff)
000EAC C0D6 F0B3          M         movff   accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, nextSampleAddresses + (1          * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 0
000EB0 C0D7 F0B4          M         movff   accumulators            + (1          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, nextSampleAddresses + (1          * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 1
                          M         
000EB4 D???               M         bra             macroDone
                          M         
000EB6                    M waveIsNotSample
                          M         ;**** start procedure: waveshape is SINE or SQUARE so read Program Memory table  (SINE/SQUARE ON
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 157


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            LY) ****
                          M         ; branch to waveform specific table address load
000EB6 0E00               M         movlw   SINE
000EB8 621E               M         cpfseq  waveShape, ACCESS
000EBA D???               M         bra             waveIsSquare
                          M 
000EBC                    M waveIsSine      
                          M         ; 
                          M         ; load address of SINE table read
                          M         ; offset = ((accumulator >> 8) & 0xff)
000EBC 51D6               M         movf    accumulators + (1          * ACCUMULATORS_ELEMENT_SIZE) + 1, w
000EBE 2424               M         addwf   sineTableBaseAddress + 0, w
000EC0 6EF6               M         movwf   TBLPTRL, ACCESS
000EC2 5025               M         movf    sineTableBaseAddress + 1, w
000EC4 B0D8               M         btfsc   STATUS, C, ACCESS
000EC6 0F01               M         addlw   1
000EC8 6EF7               M         movwf   TBLPTRH, ACCESS
000ECA 5026               M         movf    sineTableBaseAddress + 2, w
000ECC B0D8               M         btfsc   STATUS, C, ACCESS
000ECE 0F01               M         addlw   1
000ED0 6EF8               M         movwf   TBLPTRU, ACCESS
000ED2 D???               M         bra             tableAddressLoaded
                          M 
000ED4                    M waveIsSquare
                          M         ; load address of SQUARE table read
                          M         ; offset = ((accumulator >> 8) & 0xff)
000ED4 51D6               M         movf    accumulators + (1          * ACCUMULATORS_ELEMENT_SIZE) + 1, w
000ED6 2427               M         addwf   squareTableBaseAddress + 0, w
000ED8 6EF6               M         movwf   TBLPTRL, ACCESS
000EDA 5028               M         movf    squareTableBaseAddress + 1, w
000EDC B0D8               M         btfsc   STATUS, C, ACCESS
000EDE 0F01               M         addlw   1
000EE0 6EF7               M         movwf   TBLPTRH, ACCESS
000EE2 5029               M         movf    squareTableBaseAddress + 2, w
000EE4 B0D8               M         btfsc   STATUS, C, ACCESS
000EE6 0F01               M         addlw   1
000EE8 6EF8               M         movwf   TBLPTRU, ACCESS
                          M 
000EEA                    M tableAddressLoaded
                          M         ; read value from program memory
000EEA 0008               M         tblrd*
000EEC CFF5 F0E2          M         movff   TABLAT, activeOutputValues + (1          * ACTIVE_OUTPUT_VALUES_EL_SIZE) + 0
000EF0 D???               M         bra             macroDone
                          M         
000EF2                    M resetOscillator
                          M         ; set oscillator reset flag
000EF2 822A               M         bsf             oscResetFlags, 1,          ACCESS
000EF4 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
000EF6 6FE2               M         movwf   activeOutputValues + (1          * ACTIVE_OUTPUT_VALUES_EL_SIZE)
000EF8 6BCB               M         clrf    oscDeltas + (1          * OSC_DELTAS_ELEMENT_SIZE) + 0
000EFA 6BCC               M         clrf    oscDeltas + (1          * OSC_DELTAS_ELEMENT_SIZE) + 1
000EFC 6BD5               M         clrf    accumulators + (1          * ACCUMULATORS_ELEMENT_SIZE) + 0
000EFE 6BD6               M         clrf    accumulators + (1          * ACCUMULATORS_ELEMENT_SIZE) + 1
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 158


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000F00 6BD7               M         clrf    accumulators + (1          * ACCUMULATORS_ELEMENT_SIZE) + 2
000F02 6BD8               M         clrf    accumulators + (1          * ACCUMULATORS_ELEMENT_SIZE) + 3
                          M 
000F04                    M macroDone
                          M 
                      01274         OSC_STATE_BLOCK 2
  0000                    M         local   checkDelegating, oscCheckActive, zeroAcc, oscActive, waveIsSample, noTransition, oscChec
                            kNotSine
  0000                    M         local   clrSampleAcc, addressOk, waveIsNotSample, waveIsSine, waveIsSquare, tableAddressLoaded, 
                            resetOscillator, macroDone
                          M                 
                          M         ; if oscillator is locked for sustain then leave it alone
000F04 B42B               M         btfsc   sustainFlags, 2,          ACCESS
000F06 D???               M         bra             oscActive
                          M                         
000F08                    M checkDelegating
                          M         ; don't update if delegator is busy because delegatedDelta value is volatile
000F08 B018               M         btfsc   soundGenFlags, delegatorBusy, ACCESS
                          M         ; delegator is busy so just keep spinning
000F0A D???               M         bra             oscCheckActive
                          M         
                          M         ; THRESHOLD METHOD WORKS WELL
000F0C 0E00               M         movlw   SINE
000F0E 621E               M         cpfseq waveShape, ACCESS
000F10 D???               M         bra             oscCheckNotSine
                          M         ; calculate absolute offset between PWM_IDLE_OUTPUT_VALUE and current activeOutputValue
000F12 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
000F14 5DE3               M         subwf   activeOutputValues + 2,          w
                          M         ; invert if negative
000F16 A0D8               M         btfss   STATUS, C, ACCESS
000F18 6CE8               M         negf    WREG, ACCESS
                          M         ; check if offset is below threshold value
                          M         ; do (WREG = OSC_OUTPUT_GATE_THRESHOLD - WREG)
000F1A 0804               M         sublw   OSC_TRANSITION_OUTPUT_THRESHOLD
                          M         ; if result is positive then activeOutputValue offset from IDLE is <= THRESHOLD so allow changes
000F1C E3??               M         bnc             oscCheckActive
                          M 
000F1E                    M oscCheckNotSine
                          M 
                          M         ; delegator is idle and oscillator is enabled so copy delegated delta as internal
000F1E C0C5 F0CD          M         movff   delegatedDeltas + (2          * DELEGATED_DELTAS_ELEMENT_SIZE) + 0, oscDeltas + (2      
                                * OSC_DELTAS_ELEMENT_SIZE) + 0
000F22 C0C6 F0CE          M         movff   delegatedDeltas + (2          * DELEGATED_DELTAS_ELEMENT_SIZE) + 1, oscDeltas + (2      
                                * OSC_DELTAS_ELEMENT_SIZE) + 1
                          M 
000F26                    M oscCheckActive
                          M         ; if oscDeltas[OSC_NUMBER] == 0x00 then oscillator is not really active so reset
                          M         ; this check is required in event that (activeOutput == 0 && delegatorBusy == TRUE && oscDelta =
                            = 0)
000F26 53CD               M         movf    oscDeltas                       + (2          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, f
000F28 E1??               M         bnz             oscActive
000F2A 53CE               M         movf    oscDeltas                       + (2          * OSC_DELTAS_ELEMENT_SIZE)                
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 159


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                                    + 1, f
000F2C E0??               M         bz              resetOscillator
                          M         
000F2E                    M oscActive
                          M         ; if oscillator is starting from reset state then begin with 0x0000 accumulator
000F2E B42A               M         btfsc   oscResetFlags, 2,          ACCESS
000F30 D???               M         bra             zeroAcc
                          M 
                          M         ;**** start procedure: step Accumulator (SINE/SQUARE/SAMPLE) ****
                          M         ; accumulator += activeNoteDelta
                          M         ; accumulators are 4 bytes wide, activeNoteDeltas are 2 bytes wide
000F32 51CD               M         movf    oscDeltas                       + (2          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, w
000F34 27D9               M         addwf   accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
000F36 51CE               M         movf    oscDeltas                       + (2          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, w  
000F38 23DA               M         addwfc  accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
000F3A 0E00               M         movlw   0
000F3C 23DB               M         addwfc  accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
000F3E 23DC               M         addwfc  accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                          M         
000F40                    M zeroAcc
                          M         ; we're done with oscResetFlags flag so ensure that it's clear
000F40 942A               M         bcf             oscResetFlags, 2,          ACCESS
                          M         
                          M         ;**** start procedure: handle Pitch Wheel (SINE/SQUARE/SAMPLE) ****
                          M         ; accumulator += pitchWheel
000F42 5019               M         movf    pitchWheel                                                                              
                                                                            + 0, w, ACCESS
000F44 27D9               M         addwf   accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
000F46 501A               M         movf    pitchWheel                                                                              
                                                                            + 1, w, ACCESS
000F48 23DA               M         addwfc  accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
000F4A 501B               M         movf    pitchWheel                                                                              
                                                                            + 2, w, ACCESS
000F4C 23DB               M         addwfc  accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
000F4E 501C               M         movf    pitchWheel                                                                              
                                                                            + 3, w, ACCESS
000F50 23DC               M         addwfc  accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                          M         
                          M         ;**** start procedure: if SAMPLE waveshape then load next read address  (SAMPLE ONLY) ****
                          M         ; branch to waveform specific table address load
000F52 0E02               M         movlw   SAMPLE
000F54 621E               M         cpfseq  waveShape, ACCESS
000F56 D???               M         bra             waveIsNotSample
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 160


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000F58                    M waveIsSample
                          M 
                          M         ; if samplesLoaded flag is set then load next EEPROM read address
                          M         ; checking this here as opposed to before accumulator update will, in the event of the mainline 
                            not…
                          M         ; being able to load the samples in time, cause audio chopping rather than detuning
000F58 A217               M         btfss   eepromFlags, samplesLoaded, ACCESS
000F5A D???               M         bra             macroDone
                          M         
                          M         ; check for note transition
                          M         ; keyPressed flag is set every time a MIDI Note On message is received
                          M         ; when a sample is playing back in POLY or SUSTAIN modes, we want the sample to restart from the
                             beginning...
                          M         ; whenever a Note On message is received.
000F5C AA10               M         btfss   midiFlags, keyPressed, ACCESS
000F5E D???               M         bra             noTransition
                          M         ; is modeLevel == POLY
000F60 0E00               M         movlw   POLY
000F62 1820               M         xorwf   modeLevel, w, ACCESS
                          M         ; mode is POLY so reset accumulator to restart sample from beginning
000F64 E0??               M         bz              clrSampleAcc
                          M 
000F66                    M noTransition    
                          M         ; nextSampleAddress = ((accumulator >> 8) & 0xffff)
                          M         ; reset accumulator if nextSampleAddress value will exceed sampleEndAddress
                          M         ; is waveTableIndex > sampleEndAddress?
000F66 51DA               M         movf    accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, w
000F68 5C13               M         subwf   sampleEndAddress, w, ACCESS
000F6A 51DB               M         movf    accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, w
000F6C 5814               M         subwfb  sampleEndAddress + 1, w, ACCESS
                          M         ; result is positive so waveTableIndex is within valid range
000F6E E2??               M         bc              addressOk
                          M         ; ((accumulator >> 8) & 0xffff) is out of valid sample range so restart sample from beginning
                          M         ; reset accumulator
000F70                    M clrSampleAcc
000F70 6BD9               M         clrf    accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0
000F72 6BDA               M         clrf    accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1
000F74 6BDB               M         clrf    accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2
000F76 6BDC               M         clrf    accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3
000F78                    M addressOk
                          M         
                          M         ; do nextSampleAddress = ((accumulator >> 8) & 0xffff)
000F78 C0DA F0B5          M         movff   accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, nextSampleAddresses + (2          * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 0
000F7C C0DB F0B6          M         movff   accumulators            + (2          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, nextSampleAddresses + (2          * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 1
                          M         
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 161


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000F80 D???               M         bra             macroDone
                          M         
000F82                    M waveIsNotSample
                          M         ;**** start procedure: waveshape is SINE or SQUARE so read Program Memory table  (SINE/SQUARE ON
                            LY) ****
                          M         ; branch to waveform specific table address load
000F82 0E00               M         movlw   SINE
000F84 621E               M         cpfseq  waveShape, ACCESS
000F86 D???               M         bra             waveIsSquare
                          M 
000F88                    M waveIsSine      
                          M         ; 
                          M         ; load address of SINE table read
                          M         ; offset = ((accumulator >> 8) & 0xff)
000F88 51DA               M         movf    accumulators + (2          * ACCUMULATORS_ELEMENT_SIZE) + 1, w
000F8A 2424               M         addwf   sineTableBaseAddress + 0, w
000F8C 6EF6               M         movwf   TBLPTRL, ACCESS
000F8E 5025               M         movf    sineTableBaseAddress + 1, w
000F90 B0D8               M         btfsc   STATUS, C, ACCESS
000F92 0F01               M         addlw   1
000F94 6EF7               M         movwf   TBLPTRH, ACCESS
000F96 5026               M         movf    sineTableBaseAddress + 2, w
000F98 B0D8               M         btfsc   STATUS, C, ACCESS
000F9A 0F01               M         addlw   1
000F9C 6EF8               M         movwf   TBLPTRU, ACCESS
000F9E D???               M         bra             tableAddressLoaded
                          M 
000FA0                    M waveIsSquare
                          M         ; load address of SQUARE table read
                          M         ; offset = ((accumulator >> 8) & 0xff)
000FA0 51DA               M         movf    accumulators + (2          * ACCUMULATORS_ELEMENT_SIZE) + 1, w
000FA2 2427               M         addwf   squareTableBaseAddress + 0, w
000FA4 6EF6               M         movwf   TBLPTRL, ACCESS
000FA6 5028               M         movf    squareTableBaseAddress + 1, w
000FA8 B0D8               M         btfsc   STATUS, C, ACCESS
000FAA 0F01               M         addlw   1
000FAC 6EF7               M         movwf   TBLPTRH, ACCESS
000FAE 5029               M         movf    squareTableBaseAddress + 2, w
000FB0 B0D8               M         btfsc   STATUS, C, ACCESS
000FB2 0F01               M         addlw   1
000FB4 6EF8               M         movwf   TBLPTRU, ACCESS
                          M 
000FB6                    M tableAddressLoaded
                          M         ; read value from program memory
000FB6 0008               M         tblrd*
000FB8 CFF5 F0E3          M         movff   TABLAT, activeOutputValues + (2          * ACTIVE_OUTPUT_VALUES_EL_SIZE) + 0
000FBC D???               M         bra             macroDone
                          M         
000FBE                    M resetOscillator
                          M         ; set oscillator reset flag
000FBE 842A               M         bsf             oscResetFlags, 2,          ACCESS
000FC0 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
000FC2 6FE3               M         movwf   activeOutputValues + (2          * ACTIVE_OUTPUT_VALUES_EL_SIZE)
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 162


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000FC4 6BCD               M         clrf    oscDeltas + (2          * OSC_DELTAS_ELEMENT_SIZE) + 0
000FC6 6BCE               M         clrf    oscDeltas + (2          * OSC_DELTAS_ELEMENT_SIZE) + 1
000FC8 6BD9               M         clrf    accumulators + (2          * ACCUMULATORS_ELEMENT_SIZE) + 0
000FCA 6BDA               M         clrf    accumulators + (2          * ACCUMULATORS_ELEMENT_SIZE) + 1
000FCC 6BDB               M         clrf    accumulators + (2          * ACCUMULATORS_ELEMENT_SIZE) + 2
000FCE 6BDC               M         clrf    accumulators + (2          * ACCUMULATORS_ELEMENT_SIZE) + 3
                          M 
000FD0                    M macroDone
                          M 
                      01275         OSC_STATE_BLOCK 3
  0000                    M         local   checkDelegating, oscCheckActive, zeroAcc, oscActive, waveIsSample, noTransition, oscChec
                            kNotSine
  0000                    M         local   clrSampleAcc, addressOk, waveIsNotSample, waveIsSine, waveIsSquare, tableAddressLoaded, 
                            resetOscillator, macroDone
                          M                 
                          M         ; if oscillator is locked for sustain then leave it alone
000FD0 B62B               M         btfsc   sustainFlags, 3,          ACCESS
000FD2 D???               M         bra             oscActive
                          M                         
000FD4                    M checkDelegating
                          M         ; don't update if delegator is busy because delegatedDelta value is volatile
000FD4 B018               M         btfsc   soundGenFlags, delegatorBusy, ACCESS
                          M         ; delegator is busy so just keep spinning
000FD6 D???               M         bra             oscCheckActive
                          M         
                          M         ; THRESHOLD METHOD WORKS WELL
000FD8 0E00               M         movlw   SINE
000FDA 621E               M         cpfseq waveShape, ACCESS
000FDC D???               M         bra             oscCheckNotSine
                          M         ; calculate absolute offset between PWM_IDLE_OUTPUT_VALUE and current activeOutputValue
000FDE 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
000FE0 5DE4               M         subwf   activeOutputValues + 3,          w
                          M         ; invert if negative
000FE2 A0D8               M         btfss   STATUS, C, ACCESS
000FE4 6CE8               M         negf    WREG, ACCESS
                          M         ; check if offset is below threshold value
                          M         ; do (WREG = OSC_OUTPUT_GATE_THRESHOLD - WREG)
000FE6 0804               M         sublw   OSC_TRANSITION_OUTPUT_THRESHOLD
                          M         ; if result is positive then activeOutputValue offset from IDLE is <= THRESHOLD so allow changes
000FE8 E3??               M         bnc             oscCheckActive
                          M 
000FEA                    M oscCheckNotSine
                          M 
                          M         ; delegator is idle and oscillator is enabled so copy delegated delta as internal
000FEA C0C7 F0CF          M         movff   delegatedDeltas + (3          * DELEGATED_DELTAS_ELEMENT_SIZE) + 0, oscDeltas + (3      
                                * OSC_DELTAS_ELEMENT_SIZE) + 0
000FEE C0C8 F0D0          M         movff   delegatedDeltas + (3          * DELEGATED_DELTAS_ELEMENT_SIZE) + 1, oscDeltas + (3      
                                * OSC_DELTAS_ELEMENT_SIZE) + 1
                          M 
000FF2                    M oscCheckActive
                          M         ; if oscDeltas[OSC_NUMBER] == 0x00 then oscillator is not really active so reset
                          M         ; this check is required in event that (activeOutput == 0 && delegatorBusy == TRUE && oscDelta =
                            = 0)
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 163


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000FF2 53CF               M         movf    oscDeltas                       + (3          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, f
000FF4 E1??               M         bnz             oscActive
000FF6 53D0               M         movf    oscDeltas                       + (3          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, f
000FF8 E0??               M         bz              resetOscillator
                          M         
000FFA                    M oscActive
                          M         ; if oscillator is starting from reset state then begin with 0x0000 accumulator
000FFA B62A               M         btfsc   oscResetFlags, 3,          ACCESS
000FFC D???               M         bra             zeroAcc
                          M 
                          M         ;**** start procedure: step Accumulator (SINE/SQUARE/SAMPLE) ****
                          M         ; accumulator += activeNoteDelta
                          M         ; accumulators are 4 bytes wide, activeNoteDeltas are 2 bytes wide
000FFE 51CF               M         movf    oscDeltas                       + (3          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, w
001000 27DD               M         addwf   accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
001002 51D0               M         movf    oscDeltas                       + (3          * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, w  
001004 23DE               M         addwfc  accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
001006 0E00               M         movlw   0
001008 23DF               M         addwfc  accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
00100A 23E0               M         addwfc  accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                          M         
00100C                    M zeroAcc
                          M         ; we're done with oscResetFlags flag so ensure that it's clear
00100C 962A               M         bcf             oscResetFlags, 3,          ACCESS
                          M         
                          M         ;**** start procedure: handle Pitch Wheel (SINE/SQUARE/SAMPLE) ****
                          M         ; accumulator += pitchWheel
00100E 5019               M         movf    pitchWheel                                                                              
                                                                            + 0, w, ACCESS
001010 27DD               M         addwf   accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
001012 501A               M         movf    pitchWheel                                                                              
                                                                            + 1, w, ACCESS
001014 23DE               M         addwfc  accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
001016 501B               M         movf    pitchWheel                                                                              
                                                                            + 2, w, ACCESS
001018 23DF               M         addwfc  accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
00101A 501C               M         movf    pitchWheel                                                                              
                                                                            + 3, w, ACCESS
00101C 23E0               M         addwfc  accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                          M         
                          M         ;**** start procedure: if SAMPLE waveshape then load next read address  (SAMPLE ONLY) ****
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 164


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         ; branch to waveform specific table address load
00101E 0E02               M         movlw   SAMPLE
001020 621E               M         cpfseq  waveShape, ACCESS
001022 D???               M         bra             waveIsNotSample
001024                    M waveIsSample
                          M 
                          M         ; if samplesLoaded flag is set then load next EEPROM read address
                          M         ; checking this here as opposed to before accumulator update will, in the event of the mainline 
                            not…
                          M         ; being able to load the samples in time, cause audio chopping rather than detuning
001024 A217               M         btfss   eepromFlags, samplesLoaded, ACCESS
001026 D???               M         bra             macroDone
                          M         
                          M         ; check for note transition
                          M         ; keyPressed flag is set every time a MIDI Note On message is received
                          M         ; when a sample is playing back in POLY or SUSTAIN modes, we want the sample to restart from the
                             beginning...
                          M         ; whenever a Note On message is received.
001028 AA10               M         btfss   midiFlags, keyPressed, ACCESS
00102A D???               M         bra             noTransition
                          M         ; is modeLevel == POLY
00102C 0E00               M         movlw   POLY
00102E 1820               M         xorwf   modeLevel, w, ACCESS
                          M         ; mode is POLY so reset accumulator to restart sample from beginning
001030 E0??               M         bz              clrSampleAcc
                          M 
001032                    M noTransition    
                          M         ; nextSampleAddress = ((accumulator >> 8) & 0xffff)
                          M         ; reset accumulator if nextSampleAddress value will exceed sampleEndAddress
                          M         ; is waveTableIndex > sampleEndAddress?
001032 51DE               M         movf    accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, w
001034 5C13               M         subwf   sampleEndAddress, w, ACCESS
001036 51DF               M         movf    accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, w
001038 5814               M         subwfb  sampleEndAddress + 1, w, ACCESS
                          M         ; result is positive so waveTableIndex is within valid range
00103A E2??               M         bc              addressOk
                          M         ; ((accumulator >> 8) & 0xffff) is out of valid sample range so restart sample from beginning
                          M         ; reset accumulator
00103C                    M clrSampleAcc
00103C 6BDD               M         clrf    accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0
00103E 6BDE               M         clrf    accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1
001040 6BDF               M         clrf    accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2
001042 6BE0               M         clrf    accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3
001044                    M addressOk
                          M         
                          M         ; do nextSampleAddress = ((accumulator >> 8) & 0xffff)
001044 C0DE F0B7          M         movff   accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 165


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            + 1, nextSampleAddresses + (3          * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 0
001048 C0DF F0B8          M         movff   accumulators            + (3          * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, nextSampleAddresses + (3          * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 1
                          M         
00104C D???               M         bra             macroDone
                          M         
00104E                    M waveIsNotSample
                          M         ;**** start procedure: waveshape is SINE or SQUARE so read Program Memory table  (SINE/SQUARE ON
                            LY) ****
                          M         ; branch to waveform specific table address load
00104E 0E00               M         movlw   SINE
001050 621E               M         cpfseq  waveShape, ACCESS
001052 D???               M         bra             waveIsSquare
                          M 
001054                    M waveIsSine      
                          M         ; 
                          M         ; load address of SINE table read
                          M         ; offset = ((accumulator >> 8) & 0xff)
001054 51DE               M         movf    accumulators + (3          * ACCUMULATORS_ELEMENT_SIZE) + 1, w
001056 2424               M         addwf   sineTableBaseAddress + 0, w
001058 6EF6               M         movwf   TBLPTRL, ACCESS
00105A 5025               M         movf    sineTableBaseAddress + 1, w
00105C B0D8               M         btfsc   STATUS, C, ACCESS
00105E 0F01               M         addlw   1
001060 6EF7               M         movwf   TBLPTRH, ACCESS
001062 5026               M         movf    sineTableBaseAddress + 2, w
001064 B0D8               M         btfsc   STATUS, C, ACCESS
001066 0F01               M         addlw   1
001068 6EF8               M         movwf   TBLPTRU, ACCESS
00106A D???               M         bra             tableAddressLoaded
                          M 
00106C                    M waveIsSquare
                          M         ; load address of SQUARE table read
                          M         ; offset = ((accumulator >> 8) & 0xff)
00106C 51DE               M         movf    accumulators + (3          * ACCUMULATORS_ELEMENT_SIZE) + 1, w
00106E 2427               M         addwf   squareTableBaseAddress + 0, w
001070 6EF6               M         movwf   TBLPTRL, ACCESS
001072 5028               M         movf    squareTableBaseAddress + 1, w
001074 B0D8               M         btfsc   STATUS, C, ACCESS
001076 0F01               M         addlw   1
001078 6EF7               M         movwf   TBLPTRH, ACCESS
00107A 5029               M         movf    squareTableBaseAddress + 2, w
00107C B0D8               M         btfsc   STATUS, C, ACCESS
00107E 0F01               M         addlw   1
001080 6EF8               M         movwf   TBLPTRU, ACCESS
                          M 
001082                    M tableAddressLoaded
                          M         ; read value from program memory
001082 0008               M         tblrd*
001084 CFF5 F0E4          M         movff   TABLAT, activeOutputValues + (3          * ACTIVE_OUTPUT_VALUES_EL_SIZE) + 0
001088 D???               M         bra             macroDone
                          M         
00108A                    M resetOscillator
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 166


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         ; set oscillator reset flag
00108A 862A               M         bsf             oscResetFlags, 3,          ACCESS
00108C 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
00108E 6FE4               M         movwf   activeOutputValues + (3          * ACTIVE_OUTPUT_VALUES_EL_SIZE)
001090 6BCF               M         clrf    oscDeltas + (3          * OSC_DELTAS_ELEMENT_SIZE) + 0
001092 6BD0               M         clrf    oscDeltas + (3          * OSC_DELTAS_ELEMENT_SIZE) + 1
001094 6BDD               M         clrf    accumulators + (3          * ACCUMULATORS_ELEMENT_SIZE) + 0
001096 6BDE               M         clrf    accumulators + (3          * ACCUMULATORS_ELEMENT_SIZE) + 1
001098 6BDF               M         clrf    accumulators + (3          * ACCUMULATORS_ELEMENT_SIZE) + 2
00109A 6BE0               M         clrf    accumulators + (3          * ACCUMULATORS_ELEMENT_SIZE) + 3
                          M 
00109C                    M macroDone
                          M 
                      01276         
                      01277         ; keyPressed is handled in OSC_STATE_BLOCK macro so clear flag
                      01278         ; if(samplesLoaded && waveShape == SAMPLE){keyPressed = FALSE;}
                      01279         ; else{keyPressed = FALSE;}
00109C 0E02           01280         movlw   SAMPLE
00109E 181E           01281         xorwf   waveShape, w, ACCESS
                      01282         ; if waveShape != SAMPLE then clear keyPressed flag
0010A0 E1??           01283         bnz             processSoundState_clearTransFlag
                      01284         ; waveShape is == SAMPLE so only clear keyPressed if samplesLoaded == TRUE
0010A2 B217           01285         btfsc   eepromFlags, samplesLoaded, ACCESS
0010A4                01286 processSoundState_clearTransFlag
0010A4 9A10           01287         bcf             midiFlags, keyPressed, ACCESS
                      01288 
                      01289         ; samplesLoaded is handled in OSC_STATE_BLOCK macro so clear if set
0010A6 9217           01290         bcf             eepromFlags, samplesLoaded, ACCESS
                      01291 
                      01292         ;**** start procedure: send data to PWM ****
0010A8                01293 processSoundState_mixer
                      01294         ; **** averaging signal mixer ****      
                      01295         ; average all active output values into mixedOutput             
                      01296         ; init mixedOutput
0010A8 6A2D           01297         clrf    mixedOutputL, ACCESS
0010AA 6A2E           01298         clrf    mixedOutputH, ACCESS
                      01299 
                      01300         ; mix OSC0
                      01301         OSC_MIX 0       
  0000                    M         local   mixDone, mixDoPos, mixDoNeg, mixDoDone
                          M                 
                          M         ; check polarity of current activeOutputValue compared to PWM_IDLE_OUTPUT_VALUE
0010AC 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
0010AE 5DE1               M         subwf   activeOutputValues + 0,          w
0010B0 E3??               M         bnc             mixDoNeg
0010B2                    M mixDoPos
                          M         ; WREG = adsrLimiterRegs/2
0010B2 90D8               M         bcf             STATUS, C, ACCESS
0010B4 3033               M         rrcf    adsrLimiterRegs + 0,          w, ACCESS
0010B6 5DE1               M         subwf   activeOutputValues + 0,          w
0010B8 D???               M         bra             mixDoDone
0010BA                    M mixDoNeg
                          M         ; WREG = adsrLimiterRegs/2
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 167


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0010BA 90D8               M         bcf             STATUS, C, ACCESS
0010BC 3033               M         rrcf    adsrLimiterRegs + 0,          w, ACCESS
0010BE 25E1               M         addwf   activeOutputValues + 0,          w      
0010C0                    M mixDoDone
                          M         ; overflow indicates that last operation toggled bit 7
0010C0 B6D8               M         btfsc   STATUS, OV, ACCESS
0010C2 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
                          M 
0010C4                    M mixDone
                          M         ; add WREG to mixedOutputL/H
0010C4 262D               M         addwf   mixedOutputL, f, ACCESS
0010C6 B0D8               M         btfsc   STATUS, C, ACCESS
0010C8 2A2E               M         incf    mixedOutputH, f, ACCESS
                          M         
                      01302         
                      01303         ; mix OSC1
                      01304         OSC_MIX 1
  0000                    M         local   mixDone, mixDoPos, mixDoNeg, mixDoDone
                          M                 
                          M         ; check polarity of current activeOutputValue compared to PWM_IDLE_OUTPUT_VALUE
0010CA 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
0010CC 5DE2               M         subwf   activeOutputValues + 1,          w
0010CE E3??               M         bnc             mixDoNeg
0010D0                    M mixDoPos
                          M         ; WREG = adsrLimiterRegs/2
0010D0 90D8               M         bcf             STATUS, C, ACCESS
0010D2 3034               M         rrcf    adsrLimiterRegs + 1,          w, ACCESS
0010D4 5DE2               M         subwf   activeOutputValues + 1,          w
0010D6 D???               M         bra             mixDoDone
0010D8                    M mixDoNeg
                          M         ; WREG = adsrLimiterRegs/2
0010D8 90D8               M         bcf             STATUS, C, ACCESS
0010DA 3034               M         rrcf    adsrLimiterRegs + 1,          w, ACCESS
0010DC 25E2               M         addwf   activeOutputValues + 1,          w      
0010DE                    M mixDoDone
                          M         ; overflow indicates that last operation toggled bit 7
0010DE B6D8               M         btfsc   STATUS, OV, ACCESS
0010E0 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
                          M 
0010E2                    M mixDone
                          M         ; add WREG to mixedOutputL/H
0010E2 262D               M         addwf   mixedOutputL, f, ACCESS
0010E4 B0D8               M         btfsc   STATUS, C, ACCESS
0010E6 2A2E               M         incf    mixedOutputH, f, ACCESS
                          M         
                      01305         
                      01306         ; mix OSC2
                      01307         OSC_MIX 2
  0000                    M         local   mixDone, mixDoPos, mixDoNeg, mixDoDone
                          M                 
                          M         ; check polarity of current activeOutputValue compared to PWM_IDLE_OUTPUT_VALUE
0010E8 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
0010EA 5DE3               M         subwf   activeOutputValues + 2,          w
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 168


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0010EC E3??               M         bnc             mixDoNeg
0010EE                    M mixDoPos
                          M         ; WREG = adsrLimiterRegs/2
0010EE 90D8               M         bcf             STATUS, C, ACCESS
0010F0 3035               M         rrcf    adsrLimiterRegs + 2,          w, ACCESS
0010F2 5DE3               M         subwf   activeOutputValues + 2,          w
0010F4 D???               M         bra             mixDoDone
0010F6                    M mixDoNeg
                          M         ; WREG = adsrLimiterRegs/2
0010F6 90D8               M         bcf             STATUS, C, ACCESS
0010F8 3035               M         rrcf    adsrLimiterRegs + 2,          w, ACCESS
0010FA 25E3               M         addwf   activeOutputValues + 2,          w      
0010FC                    M mixDoDone
                          M         ; overflow indicates that last operation toggled bit 7
0010FC B6D8               M         btfsc   STATUS, OV, ACCESS
0010FE 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
                          M 
001100                    M mixDone
                          M         ; add WREG to mixedOutputL/H
001100 262D               M         addwf   mixedOutputL, f, ACCESS
001102 B0D8               M         btfsc   STATUS, C, ACCESS
001104 2A2E               M         incf    mixedOutputH, f, ACCESS
                          M         
                      01308         
                      01309         ; mix OSC3
                      01310         OSC_MIX 3
  0000                    M         local   mixDone, mixDoPos, mixDoNeg, mixDoDone
                          M                 
                          M         ; check polarity of current activeOutputValue compared to PWM_IDLE_OUTPUT_VALUE
001106 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
001108 5DE4               M         subwf   activeOutputValues + 3,          w
00110A E3??               M         bnc             mixDoNeg
00110C                    M mixDoPos
                          M         ; WREG = adsrLimiterRegs/2
00110C 90D8               M         bcf             STATUS, C, ACCESS
00110E 3036               M         rrcf    adsrLimiterRegs + 3,          w, ACCESS
001110 5DE4               M         subwf   activeOutputValues + 3,          w
001112 D???               M         bra             mixDoDone
001114                    M mixDoNeg
                          M         ; WREG = adsrLimiterRegs/2
001114 90D8               M         bcf             STATUS, C, ACCESS
001116 3036               M         rrcf    adsrLimiterRegs + 3,          w, ACCESS
001118 25E4               M         addwf   activeOutputValues + 3,          w      
00111A                    M mixDoDone
                          M         ; overflow indicates that last operation toggled bit 7
00111A B6D8               M         btfsc   STATUS, OV, ACCESS
00111C 0E80               M         movlw   PWM_IDLE_OUTPUT_VALUE
                          M 
00111E                    M mixDone
                          M         ; add WREG to mixedOutputL/H
00111E 262D               M         addwf   mixedOutputL, f, ACCESS
001120 B0D8               M         btfsc   STATUS, C, ACCESS
001122 2A2E               M         incf    mixedOutputH, f, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 169


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         
                      01311                 
                      01312         ; do (mixedOutput /= 4) to evenly mix all oscillators
001124 90D8           01313         bcf             STATUS, C, ACCESS
001126 322E           01314         rrcf    mixedOutputH, f, ACCESS
001128 322D           01315         rrcf    mixedOutputL, f, ACCESS
00112A 90D8           01316         bcf             STATUS, C, ACCESS
00112C 322E           01317         rrcf    mixedOutputH, f, ACCESS
00112E 322D           01318         rrcf    mixedOutputL, f, ACCESS
                      01319 
                      01320         ; send final mixed signal to PWM!
001130 C02D FFBE      01321         movff   mixedOutputL, CCPR1L
                      01322 
001134                01323 processSoundState_soundOnDone
                      01324         
001134                01325 processSoundState_exit
                      01326         ; push working regs onto software stack
                      01327         POP_R   PRODH
001134 CFDC FFF4          M         movff   softwareStackPointerPREINC, PRODH       ; ++softwareStackPointerINDF = regName
                      01328         POP_R   PRODL
001138 CFDC FFF3          M         movff   softwareStackPointerPREINC, PRODL       ; ++softwareStackPointerINDF = regName
                      01329         POP_R   TABLAT
00113C CFDC FFF5          M         movff   softwareStackPointerPREINC, TABLAT      ; ++softwareStackPointerINDF = regName
                      01330         POP_R   TBLPTRU
001140 CFDC FFF8          M         movff   softwareStackPointerPREINC, TBLPTRU     ; ++softwareStackPointerINDF = regName
                      01331         POP_R   TBLPTRH
001144 CFDC FFF7          M         movff   softwareStackPointerPREINC, TBLPTRH     ; ++softwareStackPointerINDF = regName
                      01332         POP_R   TBLPTRL
001148 CFDC FFF6          M         movff   softwareStackPointerPREINC, TBLPTRL     ; ++softwareStackPointerINDF = regName
                      01333         POP_R   FSR1H
00114C CFDC FFE2          M         movff   softwareStackPointerPREINC, FSR1H       ; ++softwareStackPointerINDF = regName
                      01334         POP_R   FSR1L
001150 CFDC FFE1          M         movff   softwareStackPointerPREINC, FSR1L       ; ++softwareStackPointerINDF = regName
                      01335         POP_R   FSR0H
001154 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      01336         POP_R   FSR0L   
001158 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      01337 
                      01338         ; FSRs all undefined locally in functions
                      01339                 
00115C 0012           01340         return          
                      01341         
                      01342 
                      01343         ; ***********************************************************************
                      01344         ; Function: void processSoundState(void)
                      01345         ; ***********************************************************************
00115E                01346 serviceADSR     
                      01347         ; test prescale counter to determine if it's time to service adsr
                      01348         ; perform (adsrPrescaleCounter - ADSR_PRESCALE)
                      01349         ; if result is positive, then (adsrPrescaleCounter >= ADSR_PRESCALE) == TRUE
                      01350 
                      01351         PUSH_R  r0
00115E C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 170


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01352         PUSH_R  r1
001162 C004 FFDD          M         movff   r1,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01353         PUSH_R  r2
001166 C005 FFDD          M         movff   r2,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01354         PUSH_R  FSR0L
00116A CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01355         PUSH_R  FSR0H
00116E CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01356 
                      01357         #define oscNumber r0
                      01358         #define oscNumberMask r1
                      01359         #define tmpValue r2
                      01360                 
                      01361         ; do subtract
001172 0E62           01362         movlw   low(ADSR_PRESCALE)
001174 5C39           01363         subwf   adsrPrescaleCounter + 0, w, ACCESS
001176 0E02           01364         movlw   high(ADSR_PRESCALE)
001178 583A           01365         subwfb adsrPrescaleCounter + 1, w, ACCESS
                      01366         ; if result is positive then service adsr
00117A A0D8           01367         btfss   STATUS, C, ACCESS       
                      01368         ; result was negative so exit
00117C D???           01369         bra             serviceADSR_exit
                      01370         
                      01371         ; reset adsrPrescaleCounter
00117E 6A39           01372         clrf    adsrPrescaleCounter + 0, ACCESS
001180 6A3A           01373         clrf    adsrPrescaleCounter + 1, ACCESS
                      01374         
001182 6A03           01375         clrf    oscNumber, ACCESS
001184 0E01           01376         movlw   1
001186 6E04           01377         movwf   oscNumberMask, ACCESS
001188                01378 serviceADSRLoop
                      01379         ; ignore advance if oscillator is sustained
001188 5004           01380         movf    oscNumberMask, w, ACCESS
00118A 142B           01381         andwf   sustainFlags, w, ACCESS
00118C E1??           01382         bnz             serviceADSR_oscDone
                      01383         
00118E EE00 F02F      01384         lfsr    FSR0, oscStateFlags
001192 5003           01385         movf    oscNumber, w, ACCESS
001194 B6EB           01386         btfsc   PLUSW0, attack, ACCESS
001196 D???           01387         bra             doAttack
001198 B0EB           01388         btfsc   PLUSW0, release, ACCESS
00119A D???           01389         bra             doRelease
00119C D???           01390         bra             serviceADSR_oscDone
                      01391         
00119E                01392 doAttack
                      01393         ; osc is attacking
                      01394 
                      01395         ; test condition ((adsrLimiterRegs -= ADSR_ATTACK_RATE) <=0)
00119E EE00 F033      01396         lfsr    FSR0, adsrLimiterRegs
0011A2 5003           01397         movf    oscNumber, w, ACCESS
                      01398         ; tmpValue = (*(adsrLimiterRegs + OSC_NUMBER))
0011A4 CFEB F005      01399         movff   PLUSW0, tmpValue
0011A8 5037           01400         movf    adsrAttackRate, w, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 171


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0011AA 5C05           01401         subwf   tmpValue, w, ACCESS
0011AC E3??           01402         bnc             attackDone
0011AE E0??           01403         bz              attackDone
                      01404 
                      01405         ; condition is FALSE so do the subtraction and exit
                      01406         ; (adsrLimiterRegs -= ADSR_ATTACK_RATE)
0011B0 5003           01407         movf    oscNumber, w, ACCESS
                      01408         ; tmpValue = (*(adsrLimiterRegs + OSC_NUMBER))
0011B2 CFEB F005      01409         movff   PLUSW0, tmpValue
0011B6 5037           01410         movf    adsrAttackRate, w, ACCESS
0011B8 5E05           01411         subwf   tmpValue, f, ACCESS
0011BA 5003           01412         movf    oscNumber, w, ACCESS
0011BC C005 FFEB      01413         movff   tmpValue, PLUSW0
0011C0 D???           01414         bra             serviceADSR_oscDone
                      01415 
0011C2                01416 attackDone
0011C2 EE00 F02F      01417         lfsr    FSR0, oscStateFlags
0011C6 5003           01418         movf    oscNumber, w, ACCESS
                      01419         ; clear attack flag
0011C8 96EB           01420         bcf             PLUSW0, attack, ACCESS
0011CA EE00 F033      01421         lfsr    FSR0, adsrLimiterRegs
                      01422         ; WREG still == oscNumber
0011CE 6AEB           01423         clrf    PLUSW0, ACCESS
0011D0 D???           01424         bra     serviceADSR_oscDone
                      01425 
0011D2                01426 doRelease
                      01427         ; osc is releasing
                      01428 
                      01429         ; test condition: ((adsrLimiterRegs + ADSR_RELEASE_RATE) >= 255)
0011D2 EE00 F033      01430         lfsr    FSR0, adsrLimiterRegs
0011D6 5003           01431         movf    oscNumber, w, ACCESS
                      01432         ; tmpValue = (*(adsrLimiterRegs + OSC_NUMBER))
0011D8 CFEB F005      01433         movff   PLUSW0, tmpValue
0011DC 5038           01434         movf    adsrReleaseRate, w, ACCESS
0011DE 2405           01435         addwf   tmpValue, w, ACCESS
                      01436         ; condition is TRUE so skip the addition and leave adsrLimiterRegs at its current value
0011E0 E2??           01437         bc              releaseDone
0011E2 1CE8           01438         comf    WREG, w, ACCESS
                      01439         ; condition is TRUE so skip the addition and leave adsrLimiterRegs at its current value
0011E4 E0??           01440         bz              releaseDone
                      01441 
                      01442         ; condition is FALSE so do the addition and exit
                      01443         ; do (adsrLimiterRegs += ADSR_RELEASE_RATE)     
                      01444         ; FSR0 still == adsrLimiterRegs
0011E6 5003           01445         movf    oscNumber, w, ACCESS
                      01446         ; tmpValue = (*(adsrLimiterRegs + OSC_NUMBER))
0011E8 CFEB F005      01447         movff   PLUSW0, tmpValue
0011EC 5038           01448         movf    adsrReleaseRate, w, ACCESS
0011EE 2605           01449         addwf   tmpValue, f, ACCESS
0011F0 5003           01450         movf    oscNumber, w, ACCESS
0011F2 C005 FFEB      01451         movff   tmpValue, PLUSW0        
0011F6 D???           01452         bra             serviceADSR_oscDone
                      01453         
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 172


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0011F8                01454 releaseDone
                      01455         ; clear release flag
0011F8 EE00 F02F      01456         lfsr    FSR0, oscStateFlags
0011FC 5003           01457         movf    oscNumber, w, ACCESS
0011FE 90EB           01458         bcf             PLUSW0, release, ACCESS
                      01459         ; set limit reg to max
001200 EE00 F033      01460         lfsr    FSR0, adsrLimiterRegs
                      01461         ; WREG still == oscNumber
001204 68EB           01462         setf    PLUSW0, ACCESS
                      01463         ; clear oscillator's delegatedDelta
001206 EE00 F0C1      01464         lfsr    FSR0, delegatedDeltas
00120A 90D8           01465         bcf             STATUS, C, ACCESS
00120C 3403           01466         rlcf    oscNumber, w, ACCESS
00120E 6AEB           01467         clrf    PLUSW0;
001210 0F01           01468         addlw   1
001212 6AEB           01469         clrf    PLUSW0; 
                      01470 
001214                01471 serviceADSR_oscDone
                      01472         ; increment oscNumber mask
001214 90D8           01473         bcf             STATUS, C, ACCESS
001216 3604           01474         rlcf    oscNumberMask, f, ACCESS
                      01475         ; increment oscNumber and check if done
001218 2A03           01476         incf    oscNumber, f, ACCESS
00121A 5023           01477         movf    polyDepth, w, ACCESS
00121C 6203           01478         cpfseq oscNumber, ACCESS
                      01479         ; not done so continue
00121E D???           01480         bra             serviceADSRLoop
                      01481 
001220                01482 serviceADSR_exit
                      01483         #undefine       oscNumber
                      01484         #undefine       oscNumberMask
                      01485         #undefine       tmpValue
                      01486 
                      01487         POP_R   FSR0H
001220 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      01488         POP_R   FSR0L
001224 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      01489         POP_R   r2
001228 CFDC F005          M         movff   softwareStackPointerPREINC, r2          ; ++softwareStackPointerINDF = regName
                      01490         POP_R   r1
00122C CFDC F004          M         movff   softwareStackPointerPREINC, r1          ; ++softwareStackPointerINDF = regName
                      01491         POP_R   r0
001230 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      01492 
001234 0012           01493         return
                      01494 
                      01495         ; ***********************************************************************
                      01496         ; Function: void oscAdsrTriggerAttack(void)
                      01497         ; ***********************************************************************
                      01498         ; This function is called only by theDelegator() for one of the following reasons:
                      01499         ; - An activeNoteDeltas element has just been assigned to an oscillator that satisfies one of th
                            e following conditions:
                      01500         ;   -- The oscillator's delegatedDelta value == 0 and has no match in activeNoteDeltas[] (oscill
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 173


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            ator is idle)
                      01501         ;   -- The oscillator's delegatedDelta value does not match any element in activeNoteDeltas (may
                             be releasing)
                      01502         ; - An oscillator's delegatedDelta matches an element in activeNoteDeltas, and the oscillator is
                             releasing
                      01503         ;
001236                01504 oscAdsrTriggerAttack
                      01505 ; oscillator number passed in WREG
                      01506 
                      01507         ; push working regs onto software stack
                      01508         PUSH_R  r0
001236 C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01509         PUSH_R  FSR0L
00123A CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01510         PUSH_R  FSR0H
00123E CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01511         
                      01512         ; r0 = oscillator #
001242 6E03           01513         movwf           r0, ACCESS
                      01514         
                      01515         ; load fsr to first deal with adsrLimiterRegs
001244 EE00 F033      01516         lfsr    FSR0, adsrLimiterRegs
                      01517 
                      01518         ; if adsrAttackRate == 64 then attack is disabled
001248 0E40           01519         movlw           64
00124A 6237           01520         cpfseq  adsrAttackRate, ACCESS
00124C D???           01521         bra                     oscAdsrTriggerAttackActive
                      01522 
                      01523         ; ADSR IS DISABLED
                      01524         ; WREG = oscillator #
00124E 5003           01525         movf    r0, w, ACCESS
                      01526         ; clear limiterReg to ensure that waveform amplitude is not attenuated
001250 6AEB           01527         clrf    PLUSW0, ACCESS
                      01528         ; load fsr to modify adsr flags
001252 EE00 F02F      01529         lfsr    FSR0, oscStateFlags
                      01530         ; clear attack flag
001256 96EB           01531         bcf     PLUSW0, attack, ACCESS  
                      01532         ; clear attack flag
001258 90EB           01533         bcf     PLUSW0, release, ACCESS 
                      01534 
00125A D???           01535         bra             oscAdsrTriggerAttackExit
                      01536         
                      01537         ; ADSR IS ACTIVE
00125C                01538 oscAdsrTriggerAttackActive
                      01539         ; if release is disabled, set limiterReg to start with full-attenuation of waveform amplitude
                      01540         ; otherwise, leave it alone to reduce reattack popping
00125C 0E40           01541         movlw   64
00125E 1838           01542         xorwf   adsrReleaseRate, w, ACCESS
001260 E1??           01543         bnz             oscAdsrTriggerAttackNoReAttack
                      01544         ; set adsrLimiterReg to 0xff on attack if releaseRate == 64 (releaseTime == 0)
                      01545         ; WREG = oscillator #
001262 5003           01546         movf    r0, w, ACCESS
001264 68EB           01547         setf    PLUSW0, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 174


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01548 
001266                01549 oscAdsrTriggerAttackNoReAttack
                      01550 
                      01551         ; load fsr to modify adsr flags
001266 EE00 F02F      01552         lfsr    FSR0, oscStateFlags
                      01553         ; WREG = oscillator #
00126A 5003           01554         movf    r0, w, ACCESS
                      01555         ; set attack flag
00126C 86EB           01556         bsf     PLUSW0, attack, ACCESS
                      01557         ; clear release flag
00126E 90EB           01558         bcf     PLUSW0, release, ACCESS
                      01559                 
001270                01560 oscAdsrTriggerAttackExit
                      01561         ; restore working regs from stack
                      01562         POP_R   FSR0H
001270 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      01563         POP_R   FSR0L
001274 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      01564         POP_R   r0
001278 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      01565         
00127C 0012           01566         return
                      01567         
                      01568 
                      01569         ; ***********************************************************************
                      01570         ; Function: void oscAdsrTriggerRelease(void)
                      01571         ; ***********************************************************************
                      01572         ; This function is called only by theDelegator() for the following reason:
                      01573         ; - An oscillator's delegatedDelta != 0 and does not match any element in activeNoteDeltas
                      01574         ; Note, that theDelegator does not currently check whether the oscillator is already releasing b
                            efore call
00127E                01575 oscAdsrTriggerRelease
                      01576 ; oscillator number passed in WREG
                      01577 
                      01578         ; push working regs onto software stack
                      01579         PUSH_R  r0
00127E C003 FFDD          M         movff   r0,      softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01580         PUSH_R  FSR0L
001282 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01581         PUSH_R  FSR0H
001286 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      01582         
                      01583         ; r0 = oscillator #
00128A 6E03           01584         movwf           r0, ACCESS
                      01585 
                      01586         ; if adsrReleaseRate == 64 then leave limiterReg where it is and clear delegatedDeltas to signal
                             stop to delegator
00128C 0E40           01587         movlw   64
                      01588         ; if adsrReleaseRate == 64 then release is disabled
00128E 6238           01589         cpfseq  adsrReleaseRate, ACCESS
001290 D???           01590         bra             oscAdsrTriggerReleaseActive
                      01591 
                      01592         ; RELEASE IS DISABLED
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 175


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01593         ; load fsr to modify adsr flag
001292 EE00 F02F      01594         lfsr    FSR0, oscStateFlags
                      01595         ; WREG = oscillator #
001296 5003           01596         movf    r0, w, ACCESS
                      01597         ; clear release flag
001298 90EB           01598         bcf     PLUSW0, release, ACCESS
                      01599         ; clear attack flag
00129A 96EB           01600         bcf     PLUSW0, attack, ACCESS
                      01601 
                      01602         ; clear oscillator's delegatedDelta
                      01603         ; load fsr with base address of delegatedDeltas array
00129C EE00 F0C1      01604         lfsr    FSR0, delegatedDeltas
                      01605         ; add oscillator offset to fsr
                      01606         ; delegatedDeltas are two-bytes wide so WREG = r0*2
0012A0 90D8           01607         bcf     STATUS, C, ACCESS
0012A2 3403           01608         rlcf    r0, w, ACCESS
                      01609         ; add offset to low byte of FSR
0012A4 26E9           01610         addwf FSR0L, f, ACCESS
                      01611         ; increment high byte of FSR if CARRY is set
0012A6 B0D8           01612         btfsc   STATUS, C, ACCESS
0012A8 2AEA           01613         incf    FSR0H, f, ACCESS
                      01614         ; clear low byte
0012AA 6AEE           01615         clrf    POSTINC0, ACCESS
                      01616         ; clear high byte
0012AC 6AEF           01617         clrf    INDF0, ACCESS
                      01618 
0012AE D???           01619         bra             oscAdsrTriggerReleaseExit
                      01620         
                      01621         ; RELEASE IS ACTIVE
0012B0                01622 oscAdsrTriggerReleaseActive
                      01623         ; load fsr to modify adsr flag
0012B0 EE00 F02F      01624         lfsr    FSR0, oscStateFlags
                      01625         ; WREG = oscillator #
0012B4 5003           01626         movf    r0, w, ACCESS
                      01627         ; set release flag
0012B6 80EB           01628         bsf     PLUSW0, release, ACCESS
                      01629         ; clear attack flag
0012B8 96EB           01630         bcf     PLUSW0, attack, ACCESS
                      01631                 
0012BA                01632 oscAdsrTriggerReleaseExit
                      01633         ; restore working regs from stack
                      01634         POP_R   FSR0H
0012BA CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      01635         POP_R   FSR0L
0012BE CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
                      01636         POP_R   r0
0012C2 CFDC F003          M         movff   softwareStackPointerPREINC, r0          ; ++softwareStackPointerINDF = regName
                      01637 
0012C6 0012           01638         return
                      00309         #include        "../source/userInterface.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 176


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      userInterface.asm                                 *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021         
                      00022 ;**********************************************************************
                      00023 ; INCLUDES
                      00024 ;**********************************************************************
                      00025 
                      00026 ;**********************************************************************
                      00027 ; DEFINITIONS
                      00028 ;**********************************************************************
                      00029 
                      00030 ;**********************************************************************
                      00031 ; LOCAL VARIABLES
                      00032 ;**********************************************************************
                      00033 
                      00034         CBLOCK
  0000003C            00035                 ledBlinkRate:1
  0000003D            00036                 ledBlinkCounter:1
  0000003E            00037                 ledOnOffFlags:1
                      00038         ENDC
                      00039 
                      00040 
                      00041 ;**********************************************************************
                      00042 ; LOCAL FUNCTIONS
                      00043 ;**********************************************************************
                      00044 
                      00045 ;**********************************************************************
                      00046 ; Function: void initUserInterface(void)
                      00047 ;**********************************************************************
                      00048 
0012C8                00049 initUserInterface:
                      00050 
                      00051                 ; init with steady state LED
0012C8 6A3C           00052                 clrf    ledBlinkRate, ACCESS
0012CA 6A3D           00053                 clrf    ledBlinkCounter, ACCESS
                      00054         
0012CC 0012           00055         return
                      00056         
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 177


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00057 
                      00058 ;**********************************************************************
                      00059 ; Function: void userInterface_incMode(void)
                      00060 ;**********************************************************************
0012CE                00061 userInterface_incMode
                      00062         ; mode is changing so set needDelgator flag
0012CE 8418           00063         bsf             soundGenFlags, needRefresh, ACCESS
                      00064         
                      00065         ; increment modeLevel, reset if > MAX_MODE_LEVEL
0012D0 2A20           00066         incf    modeLevel, f, ACCESS
0012D2 0E03           00067         movlw   MAX_MODE_LEVEL + 1
                      00068         ; skip if modeLevel < MAX_MODE_LEVEL + 1
0012D4 6020           00069         cpfslt  modeLevel, ACCESS
0012D6 6A20           00070         clrf    modeLevel, ACCESS
                      00071         
                      00072         ; if(modeLevel == POLY)
                      00073         ; {
                      00074         ;   polyDepth = MAX_POLY_DEPTH
                      00075         ;   ledBlinkRate = LEVEL_POLY_LED_BLINK_RATE
                      00076         ;   ledBlinkCounter = LEVEL_POLY_LED_BLINK_RATE
                      00077         ;       sustainFlags = 0
                      00078         ; }
0012D8 0E00           00079         movlw   POLY
0012DA 6220           00080         cpfseq  modeLevel, ACCESS
0012DC D???           00081         bra             userInterface_incModeCheckSustain
0012DE 0E04           00082         movlw   MAX_POLY_DEPTH
0012E0 6E23           00083         movwf   polyDepth, ACCESS
                      00084         ; set LED blink rate
0012E2 0E00           00085         movlw   LEVEL_POLY_LED_BLINK_RATE
0012E4 6E3C           00086         movwf   ledBlinkRate
0012E6 6E3D           00087         movwf   ledBlinkCounter
                      00088         ; clear sustain flags
                      00089         DISABLE_SUSTAIN
0012E8 6A2B               M         clrf    sustainFlags, ACCESS
0012EA D???           00090         bra             userInterface_incModeDone
                      00091 
Warning[208]: Label truncated at 32 characters. (userInterface_incModeCheckSustain)
0012EC                00092 userInterface_incModeCheckSustain
                      00093         ; if(modeLevel == SUSTAIN)
                      00094         ; {
                      00095         ;   polyDepth = MAX_POLY_DEPTH
                      00096         ;   ledBlinkRate = LEVEL_SUSTAIN_LED_BLINK_RATE
                      00097         ;   ledBlinkCounter = LEVEL_SUSTAIN_LED_BLINK_RATE
                      00098         ;       sustainFlags = (~oscResetFlags) & 0x0f
                      00099         ; }
0012EC 0E01           00100         movlw   SUSTAIN
0012EE 6220           00101         cpfseq  modeLevel, ACCESS
0012F0 D???           00102         bra             userInterface_incModeDoMono
0012F2 0E04           00103         movlw   MAX_POLY_DEPTH
0012F4 6E23           00104         movwf   polyDepth, ACCESS
0012F6 0E02           00105         movlw   LEVEL_SUSTAIN_LED_BLINK_RATE
0012F8 6E3C           00106         movwf   ledBlinkRate
0012FA 6E3D           00107         movwf   ledBlinkCounter
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 178


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00108         ; set sustain lock flags for all active oscillators
                      00109         ENABLE_SUSTAIN
0012FC 1C2A               M         comf    oscResetFlags, w, ACCESS
0012FE 0B0F               M         andlw   0x0f
001300 6E2B               M         movwf   sustainFlags, ACCESS
001302 D???           00110         bra             userInterface_incModeDone       
                      00111         
001304                00112 userInterface_incModeDoMono
                      00113         ; if(modeLevel == MONO)
                      00114         ; {
                      00115         ;   polyDepth = 1
                      00116         ;   ledBlinkRate = LEVEL_MONO_LED_BLINK_RATE
                      00117         ;   ledBlinkCounter = LEVEL_MONO_LED_BLINK_RATE
                      00118         ;       sustainFlags = 0
                      00119         ; }
001304 0E01           00120         movlw   1
001306 6E23           00121         movwf   polyDepth, ACCESS
                      00122         ; set LED blink rate
001308 0E01           00123         movlw   LEVEL_MONO_LED_BLINK_RATE
00130A 6E3C           00124         movwf   ledBlinkRate
00130C 6E3D           00125         movwf   ledBlinkCounter
                      00126         ; clear sustain flags
                      00127         DISABLE_SUSTAIN
00130E 6A2B               M         clrf    sustainFlags, ACCESS
001310                00128 userInterface_incModeDone
001310 0012           00129         return
                      00130 
                      00131 
                      00132 ;**********************************************************************
                      00133 ; Function: void userInterface_incWaveform(void)
                      00134 ;**********************************************************************
001312                00135 userInterface_incWaveform
                      00136         ; waveShape is changing so set needDelgator flag
001312 8418           00137         bsf             soundGenFlags, needRefresh, ACCESS
                      00138 
                      00139         ; check if decrement is being request from MIDI Program Change
001314 A218           00140         btfss   soundGenFlags, pgDec, ACCESS
001316 D???           00141         bra             userInterface_incWaveformInc
                      00142         ; clear Program Change decrement flag
001318 9218           00143         bcf             soundGenFlags, pgDec, ACCESS    
00131A 061E           00144         decf    waveShape, f, ACCESS
                      00145         ; branch if result was positive
00131C E2??           00146         bc              userInterface_incWaveformDone
                      00147         ; result was negative so set to SAMPLE
00131E 0E02           00148         movlw   SAMPLE
001320 6E1E           00149         movwf   waveShape, ACCESS
001322 D???           00150         bra             userInterface_incWaveformDone
                      00151 
001324                00152 userInterface_incWaveformInc
                      00153         ;       if(++waveShape > SAMPLE)
                      00154         ;               waveShape = SINE;
001324 2A1E           00155         incf    waveShape, f, ACCESS
001326 0E02           00156         movlw   SAMPLE
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 179


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001328 641E           00157         cpfsgt  waveShape, ACCESS
00132A D???           00158         bra             userInterface_incWaveformDone
00132C 0E00           00159         movlw   SINE
00132E 6E1E           00160         movwf   waveShape, ACCESS
001330                00161 userInterface_incWaveformDone
001330 0012           00162         return
                      00163         
                      00164 
                      00165 
                      00166 
                      00167 
                      00310 
                      00311 ;**********************************************************************
                      00312 
                      00313         ; include CBLOCK defines for arrays here to ensure that smaller variables are within ACCESS memo
                            ry
                      00314         CBLOCK
                      00315                 ; visual marker of allocated memory when viewing file registers in debug
  0000003F            00316                 endOfVariables:1
                      00317                 ; from midi.asm
  00000040            00318                 midiRxMessage:          MAX_MIDI_MESSAGE_SIZE
  00000058            00319                 activeNoteTable:        ACTIVE_NOTE_TABLE_SIZE
                      00320                 ; from eeprom.asm
  00000071            00321                 sampleDataBuffer:       SAMPLE_DATA_BUFFER_SIZE
  000000B1            00322                 nextSampleAddresses:MAX_POLY_DEPTH * NEXT_SAMPLE_ADDRESSES_EL_SIZE
                      00323                 ; from soundGen.asm
  000000B9            00324                 activeNoteDeltas:               ACTIVE_NOTE_DELTAS_SIZE
  000000C1            00325                 delegatedDeltas:                DELEGATED_DELTAS_SIZE
  000000C9            00326                 oscDeltas:                              OSC_DELTAS_SIZE
  000000D1            00327                 accumulators:                   ACCUMULATORS_SIZE
  000000E1            00328                 activeOutputValues:             ACTIVE_OUTPUT_VALUES_SIZE
                      00329         ENDC
                      00330 
                      00331         ; set stack base address as last data mem address
                      00332         CBLOCK 0x2ff
  000002FF            00333                 softwareStackBaseAddress:1
                      00334         ENDC
                      00335                 
                      00336         #include        "../include/noteDeltaTables.inc"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      noteDeltaTables.inc                               *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 180


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 ; **** MIDI Note Delta Tables ****
                      00022 ;
                      00023 ; These tables define the "activeNoteDelta" values for all possible
                      00024 ; MIDI notes, 0 - 127 (in that order).  Defining sample values
                      00025 ; separately to save cycles 
                      00026 
001332                00027 midiNoteDeltaTable
001332 0022           00028         dw      34
001334 0024           00029         dw      36
001336 0026           00030         dw      38
001338 0029           00031         dw      41
00133A 002B           00032         dw      43
00133C 002E           00033         dw      46
00133E 0030           00034         dw      48
001340 0033           00035         dw      51
001342 0036           00036         dw      54
001344 003A           00037         dw      58
001346 003D           00038         dw      61
001348 0041           00039         dw      65
00134A 0045           00040         dw      69
00134C 0049           00041         dw      73
00134E 004D           00042         dw      77
001350 0052           00043         dw      82
001352 0056           00044         dw      86
001354 005C           00045         dw      92
001356 0061           00046         dw      97
001358 0067           00047         dw      103
00135A 006D           00048         dw      109
00135C 0073           00049         dw      115
00135E 007A           00050         dw      122
001360 0081           00051         dw      129
001362 0089           00052         dw      137
001364 0091           00053         dw      145
001366 009A           00054         dw      154
001368 00A3           00055         dw      163
00136A 00AD           00056         dw      173
00136C 00B7           00057         dw      183
00136E 00C2           00058         dw      194
001370 00CE           00059         dw      206
001372 00DA           00060         dw      218
001374 00E7           00061         dw      231
001376 00F4           00062         dw      244
001378 0103           00063         dw      259
00137A 0112           00064         dw      274
00137C 0123           00065         dw      291
00137E 0134           00066         dw      308
001380 0146           00067         dw      326
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 181


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001382 015A           00068         dw      346
001384 016E           00069         dw      366
001386 0184           00070         dw      388
001388 019B           00071         dw      411
00138A 01B3           00072         dw      435
00138C 01CD           00073         dw      461
00138E 01E9           00074         dw      489
001390 0206           00075         dw      518
001392 0225           00076         dw      549
001394 0245           00077         dw      581
001396 0268           00078         dw      616
001398 028C           00079         dw      652
00139A 02B3           00080         dw      691
00139C 02DC           00081         dw      732
00139E 0308           00082         dw      776
0013A0 0336           00083         dw      822
0013A2 0367           00084         dw      871
0013A4 039B           00085         dw      923
0013A6 03D2           00086         dw      978
0013A8 040C           00087         dw      1036
0013AA 0449           00088         dw      1097
0013AC 048B           00089         dw      1163
0013AE 04D0           00090         dw      1232
0013B0 0519           00091         dw      1305
0013B2 0567           00092         dw      1383
0013B4 05B9           00093         dw      1465
0013B6 0610           00094         dw      1552
0013B8 066C           00095         dw      1644
0013BA 06CE           00096         dw      1742
0013BC 0735           00097         dw      1845
0013BE 07A3           00098         dw      1955
0013C0 0817           00099         dw      2071
0013C2 0893           00100         dw      2195
0013C4 0915           00101         dw      2325
0013C6 099F           00102         dw      2463
0013C8 0A32           00103         dw      2610
0013CA 0ACD           00104         dw      2765
0013CC 0B72           00105         dw      2930
0013CE 0C20           00106         dw      3104
0013D0 0CD8           00107         dw      3288
0013D2 0D9C           00108         dw      3484
0013D4 0E6B           00109         dw      3691
0013D6 0F46           00110         dw      3910
0013D8 102F           00111         dw      4143
0013DA 1125           00112         dw      4389
0013DC 122A           00113         dw      4650
0013DE 133F           00114         dw      4927
0013E0 1464           00115         dw      5220
0013E2 159A           00116         dw      5530
0013E4 16E3           00117         dw      5859
0013E6 183F           00118         dw      6207
0013E8 19B1           00119         dw      6577
0013EA 1B38           00120         dw      6968
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 182


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0013EC 1CD6           00121         dw      7382
0013EE 1E8D           00122         dw      7821
0013F0 205E           00123         dw      8286
0013F2 224B           00124         dw      8779
0013F4 2455           00125         dw      9301
0013F6 267E           00126         dw      9854
0013F8 28C8           00127         dw      10440
0013FA 2B34           00128         dw      11060
0013FC 2DC6           00129         dw      11718
0013FE 307F           00130         dw      12415
001400 3361           00131         dw      13153
001402 366F           00132         dw      13935
001404 39AC           00133         dw      14764
001406 3D1A           00134         dw      15642
001408 40BC           00135         dw      16572
00140A 4495           00136         dw      17557
00140C 48A9           00137         dw      18601
00140E 4CFC           00138         dw      19708
001410 518F           00139         dw      20879
001412 5669           00140         dw      22121
001414 5B8C           00141         dw      23436
001416 60FE           00142         dw      24830
001418 66C2           00143         dw      26306
00141A 6CDF           00144         dw      27871
00141C 7358           00145         dw      29528
00141E 7A34           00146         dw      31284
001420 8178           00147         dw      33144
001422 892B           00148         dw      35115
001424 9153           00149         dw      37203
001426 99F7           00150         dw      39415
001428 A31F           00151         dw      41759
00142A ACD2           00152         dw      44242
00142C B719           00153         dw      46873
00142E C1FC           00154         dw      49660
001430 CD85           00155         dw      52613
                      00156 
001432                00157 sampleMidiNoteDeltaTable
001432 0008           00158         dw      8
001434 0008           00159         dw      8
001436 0009           00160         dw      9
001438 000A           00161         dw      10
00143A 000A           00162         dw      10
00143C 000B           00163         dw      11
00143E 000B           00164         dw      11
001440 000C           00165         dw      12
001442 000D           00166         dw      13
001444 000D           00167         dw      13
001446 000E           00168         dw      14
001448 000F           00169         dw      15
00144A 0010           00170         dw      16
00144C 0011           00171         dw      17
00144E 0012           00172         dw      18
001450 0013           00173         dw      19
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 183


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001452 0014           00174         dw      20
001454 0015           00175         dw      21
001456 0017           00176         dw      23
001458 0018           00177         dw      24
00145A 0019           00178         dw      25
00145C 001B           00179         dw      27
00145E 001D           00180         dw      29
001460 001E           00181         dw      30
001462 0020           00182         dw      32
001464 0022           00183         dw      34
001466 0024           00184         dw      36
001468 0026           00185         dw      38
00146A 0028           00186         dw      40
00146C 002B           00187         dw      43
00146E 002D           00188         dw      45
001470 0030           00189         dw      48
001472 0033           00190         dw      51
001474 0036           00191         dw      54
001476 0039           00192         dw      57
001478 003C           00193         dw      60
00147A 0040           00194         dw      64
00147C 0044           00195         dw      68
00147E 0048           00196         dw      72
001480 004C           00197         dw      76
001482 0051           00198         dw      81
001484 0055           00199         dw      85
001486 005B           00200         dw      91
001488 0060           00201         dw      96
00148A 0066           00202         dw      102
00148C 006C           00203         dw      108
00148E 0072           00204         dw      114
001490 0079           00205         dw      121
001492 0080           00206         dw      128
001494 0088           00207         dw      136
001496 0090           00208         dw      144
001498 0098           00209         dw      152
00149A 00A1           00210         dw      161
00149C 00AB           00211         dw      171
00149E 00B5           00212         dw      181
0014A0 00C0           00213         dw      192
0014A2 00CB           00214         dw      203
0014A4 00D7           00215         dw      215
0014A6 00E4           00216         dw      228
0014A8 00F2           00217         dw      242
0014AA 0100           00218         dw      256
0014AC 010F           00219         dw      271
0014AE 011F           00220         dw      287
0014B0 0130           00221         dw      304
0014B2 0143           00222         dw      323
0014B4 0156           00223         dw      342
0014B6 016A           00224         dw      362
0014B8 0180           00225         dw      384
0014BA 0196           00226         dw      406
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 184


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0014BC 01AF           00227         dw      431
0014BE 01C8           00228         dw      456
0014C0 01E3           00229         dw      483
0014C2 0200           00230         dw      512
0014C4 021E           00231         dw      542
0014C6 023F           00232         dw      575
0014C8 0261           00233         dw      609
0014CA 0285           00234         dw      645
0014CC 02AB           00235         dw      683
0014CE 02D4           00236         dw      724
0014D0 02FF           00237         dw      767
0014D2 032D           00238         dw      813
0014D4 035D           00239         dw      861
0014D6 0390           00240         dw      912
0014D8 03C7           00241         dw      967
0014DA 0400           00242         dw      1024
0014DC 043D           00243         dw      1085
0014DE 047D           00244         dw      1149
0014E0 04C2           00245         dw      1218
0014E2 050A           00246         dw      1290
0014E4 0557           00247         dw      1367
0014E6 05A8           00248         dw      1448
0014E8 05FE           00249         dw      1534
0014EA 0659           00250         dw      1625
0014EC 06BA           00251         dw      1722
0014EE 0721           00252         dw      1825
0014F0 078D           00253         dw      1933
0014F2 0800           00254         dw      2048
0014F4 087A           00255         dw      2170
0014F6 08FB           00256         dw      2299
0014F8 0983           00257         dw      2435
0014FA 0A14           00258         dw      2580
0014FC 0AAE           00259         dw      2734
0014FE 0B50           00260         dw      2896
001500 0BFD           00261         dw      3069
001502 0CB3           00262         dw      3251
001504 0D74           00263         dw      3444
001506 0E41           00264         dw      3649
001508 0F1A           00265         dw      3866
00150A 1000           00266         dw      4096
00150C 10F4           00267         dw      4340
00150E 11F6           00268         dw      4598
001510 1307           00269         dw      4871
001512 1429           00270         dw      5161
001514 155C           00271         dw      5468
001516 16A1           00272         dw      5793
001518 17F9           00273         dw      6137
00151A 1966           00274         dw      6502
00151C 1AE9           00275         dw      6889
00151E 1C82           00276         dw      7298
001520 1E34           00277         dw      7732
001522 2000           00278         dw      8192
001524 21E7           00279         dw      8679
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 185


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001526 23EB           00280         dw      9195
001528 260E           00281         dw      9742
00152A 2851           00282         dw      10321
00152C 2AB7           00283         dw      10935
00152E 2D41           00284         dw      11585
001530 2FF2           00285         dw      12274
                      00286         
                      00337         #include        "../include/waveTables.inc"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      waveTables.inc                                    *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 ; **** Sine and Square Wave Tables ****
                      00022 
001532                00023 squareTable
001532 0000           00024         db 0,0
001534 0000           00025         db 0,0
001536 0000           00026         db 0,0
001538 0000           00027         db 0,0
00153A 0000           00028         db 0,0
00153C 0000           00029         db 0,0
00153E 0000           00030         db 0,0
001540 0000           00031         db 0,0
001542 0000           00032         db 0,0
001544 0000           00033         db 0,0
001546 0000           00034         db 0,0
001548 0000           00035         db 0,0
00154A 0000           00036         db 0,0
00154C 0000           00037         db 0,0
00154E 0000           00038         db 0,0
001550 0000           00039         db 0,0
001552 0000           00040         db 0,0
001554 0000           00041         db 0,0
001556 0000           00042         db 0,0
001558 0000           00043         db 0,0
00155A 0000           00044         db 0,0
00155C 0000           00045         db 0,0
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 186


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00155E 0000           00046         db 0,0
001560 0000           00047         db 0,0
001562 0000           00048         db 0,0
001564 0000           00049         db 0,0
001566 0000           00050         db 0,0
001568 0000           00051         db 0,0
00156A 0000           00052         db 0,0
00156C 0000           00053         db 0,0
00156E 0000           00054         db 0,0
001570 FFFF           00055         db 255,255
001572 FFFF           00056         db 255,255
001574 FFFF           00057         db 255,255
001576 FFFF           00058         db 255,255
001578 FFFF           00059         db 255,255
00157A FFFF           00060         db 255,255
00157C FFFF           00061         db 255,255
00157E FFFF           00062         db 255,255
001580 FFFF           00063         db 255,255
001582 FFFF           00064         db 255,255
001584 FFFF           00065         db 255,255
001586 FFFF           00066         db 255,255
001588 FFFF           00067         db 255,255
00158A FFFF           00068         db 255,255
00158C FFFF           00069         db 255,255
00158E FFFF           00070         db 255,255
001590 FFFF           00071         db 255,255
001592 FFFF           00072         db 255,255
001594 FFFF           00073         db 255,255
001596 FFFF           00074         db 255,255
001598 FFFF           00075         db 255,255
00159A FFFF           00076         db 255,255
00159C FFFF           00077         db 255,255
00159E FFFF           00078         db 255,255
0015A0 FFFF           00079         db 255,255
0015A2 FFFF           00080         db 255,255
0015A4 FFFF           00081         db 255,255
0015A6 FFFF           00082         db 255,255
0015A8 FFFF           00083         db 255,255
0015AA FFFF           00084         db 255,255
0015AC FFFF           00085         db 255,255
0015AE FFFF           00086         db 255,255
0015B0 FFFF           00087         db 255,255
0015B2 FFFF           00088         db 255,255
0015B4 FFFF           00089         db 255,255
0015B6 FFFF           00090         db 255,255
0015B8 FFFF           00091         db 255,255
0015BA FFFF           00092         db 255,255
0015BC FFFF           00093         db 255,255
0015BE FFFF           00094         db 255,255
0015C0 FFFF           00095         db 255,255
0015C2 FFFF           00096         db 255,255
0015C4 FFFF           00097         db 255,255
0015C6 FFFF           00098         db 255,255
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 187


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0015C8 FFFF           00099         db 255,255
0015CA FFFF           00100         db 255,255
0015CC FFFF           00101         db 255,255
0015CE FFFF           00102         db 255,255
0015D0 FFFF           00103         db 255,255
0015D2 FFFF           00104         db 255,255
0015D4 FFFF           00105         db 255,255
0015D6 FFFF           00106         db 255,255
0015D8 FFFF           00107         db 255,255
0015DA FFFF           00108         db 255,255
0015DC FFFF           00109         db 255,255
0015DE FFFF           00110         db 255,255
0015E0 FFFF           00111         db 255,255
0015E2 FFFF           00112         db 255,255
0015E4 FFFF           00113         db 255,255
0015E6 FFFF           00114         db 255,255
0015E8 FFFF           00115         db 255,255
0015EA FFFF           00116         db 255,255
0015EC FFFF           00117         db 255,255
0015EE FFFF           00118         db 255,255
0015F0 0000           00119         db 0,0
0015F2 0000           00120         db 0,0
0015F4 0000           00121         db 0,0
0015F6 0000           00122         db 0,0
0015F8 0000           00123         db 0,0
0015FA 0000           00124         db 0,0
0015FC 0000           00125         db 0,0
0015FE 0000           00126         db 0,0
001600 0000           00127         db 0,0
001602 0000           00128         db 0,0
001604 0000           00129         db 0,0
001606 0000           00130         db 0,0
001608 0000           00131         db 0,0
00160A 0000           00132         db 0,0
00160C 0000           00133         db 0,0
00160E 0000           00134         db 0,0
001610 0000           00135         db 0,0
001612 0000           00136         db 0,0
001614 0000           00137         db 0,0
001616 0000           00138         db 0,0
001618 0000           00139         db 0,0
00161A 0000           00140         db 0,0
00161C 0000           00141         db 0,0
00161E 0000           00142         db 0,0
001620 0000           00143         db 0,0
001622 0000           00144         db 0,0
001624 0000           00145         db 0,0
001626 0000           00146         db 0,0
001628 0000           00147         db 0,0
00162A 0000           00148         db 0,0
00162C 0000           00149         db 0,0
00162E 0000           00150         db 0,0
001630 0000           00151         db 0,0
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 188


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00152 
001632                00153 modulationBlendTable
001632 FFFF           00154         dw      0xffff
001634 8080           00155         dw      0x8080
001636 4040           00156         dw      0x4040
001638 2020           00157         dw      0x2020
00163A 1010           00158         dw      0x1010
00163C 0808           00159         dw      0x0808
00163E 0404           00160         dw      0x0404
001640 0202           00161         dw      0x0202
001642 FFFF           00162         dw      0xffff
001644 8080           00163         dw      0x8080
001646 4040           00164         dw      0x4040
001648 2020           00165         dw      0x2020
00164A 1010           00166         dw      0x1010
00164C 0808           00167         dw      0x0808
00164E 0404           00168         dw      0x0404
001650 0202           00169         dw      0x0202
001652 FFFF           00170         dw      0xffff
001654 8080           00171         dw      0x8080
001656 4040           00172         dw      0x4040
001658 2020           00173         dw      0x2020
00165A 1010           00174         dw      0x1010
00165C 0808           00175         dw      0x0808
00165E 0404           00176         dw      0x0404
001660 0202           00177         dw      0x0202
001662 FFFF           00178         dw      0xffff
001664 8080           00179         dw      0x8080
001666 4040           00180         dw      0x4040
001668 2020           00181         dw      0x2020
00166A 1010           00182         dw      0x1010
00166C 0808           00183         dw      0x0808
00166E 0404           00184         dw      0x0404
001670 0202           00185         dw      0x0202
001672 FFFF           00186         dw      0xffff
001674 8080           00187         dw      0x8080
001676 4040           00188         dw      0x4040
001678 2020           00189         dw      0x2020
00167A 1010           00190         dw      0x1010
00167C 0808           00191         dw      0x0808
00167E 0404           00192         dw      0x0404
001680 0202           00193         dw      0x0202
001682 FFFF           00194         dw      0xffff
001684 8080           00195         dw      0x8080
001686 4040           00196         dw      0x4040
001688 2020           00197         dw      0x2020
00168A 1010           00198         dw      0x1010
00168C 0808           00199         dw      0x0808
00168E 0404           00200         dw      0x0404
001690 0202           00201         dw      0x0202
001692 FFFF           00202         dw      0xffff
001694 8080           00203         dw      0x8080
001696 4040           00204         dw      0x4040
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 189


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001698 2020           00205         dw      0x2020
00169A 1010           00206         dw      0x1010
00169C 0808           00207         dw      0x0808
00169E 0404           00208         dw      0x0404
0016A0 0202           00209         dw      0x0202
0016A2 FFFF           00210         dw      0xffff
0016A4 8080           00211         dw      0x8080
0016A6 4040           00212         dw      0x4040
0016A8 2020           00213         dw      0x2020
0016AA 1010           00214         dw      0x1010
0016AC 0808           00215         dw      0x0808
0016AE 0404           00216         dw      0x0404
0016B0 0202           00217         dw      0x0202
                      00218                 
0016B2                00219 sineTable
0016B2 8380           00220         db 128,131
0016B4 8986           00221         db 134,137
0016B6 8F8C           00222         db 140,143
0016B8 9592           00223         db 146,149
0016BA 9B98           00224         db 152,155
0016BC A29E           00225         db 158,162
0016BE A7A5           00226         db 165,167
0016C0 ADAA           00227         db 170,173
0016C2 B3B0           00228         db 176,179
0016C4 B9B6           00229         db 182,185
0016C6 BEBC           00230         db 188,190
0016C8 C4C1           00231         db 193,196
0016CA C9C6           00232         db 198,201
0016CC CECB           00233         db 203,206
0016CE D3D0           00234         db 208,211
0016D0 D7D5           00235         db 213,215
0016D2 DCDA           00236         db 218,220
0016D4 E0DE           00237         db 222,224
0016D6 E4E2           00238         db 226,228
0016D8 E8E6           00239         db 230,232
0016DA EBEA           00240         db 234,235
0016DC EEED           00241         db 237,238
0016DE F1F0           00242         db 240,241
0016E0 F4F3           00243         db 243,244
0016E2 F6F5           00244         db 245,246
0016E4 F9F8           00245         db 248,249
0016E6 FAFA           00246         db 250,250
0016E8 FCFB           00247         db 251,252
0016EA FDFD           00248         db 253,253
0016EC FEFE           00249         db 254,254
0016EE FFFE           00250         db 254,255
0016F0 FFFF           00251         db 255,255
0016F2 FFFF           00252         db 255,255
0016F4 FFFF           00253         db 255,255
0016F6 FEFE           00254         db 254,254
0016F8 FDFE           00255         db 254,253
0016FA FCFD           00256         db 253,252
0016FC FAFB           00257         db 251,250
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 190


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0016FE F9FA           00258         db 250,249
001700 F6F8           00259         db 248,246
001702 F4F5           00260         db 245,244
001704 F1F3           00261         db 243,241
001706 EEF0           00262         db 240,238
001708 EBED           00263         db 237,235
00170A E8EA           00264         db 234,232
00170C E4E6           00265         db 230,228
00170E E0E2           00266         db 226,224
001710 DCDE           00267         db 222,220
001712 D7DA           00268         db 218,215
001714 D3D5           00269         db 213,211
001716 CED0           00270         db 208,206
001718 C9CB           00271         db 203,201
00171A C4C6           00272         db 198,196
00171C BEC1           00273         db 193,190
00171E B9BC           00274         db 188,185
001720 B3B6           00275         db 182,179
001722 ADB0           00276         db 176,173
001724 A7AA           00277         db 170,167
001726 A2A5           00278         db 165,162
001728 9B9E           00279         db 158,155
00172A 9598           00280         db 152,149
00172C 8F92           00281         db 146,143
00172E 898C           00282         db 140,137
001730 8386           00283         db 134,131
001732 7C80           00284         db 128,124
001734 7679           00285         db 121,118
001736 7073           00286         db 115,112
001738 6A6D           00287         db 109,106
00173A 6467           00288         db 103,100
00173C 5D61           00289         db 97,93
00173E 585A           00290         db 90,88
001740 5255           00291         db 85,82
001742 4C4F           00292         db 79,76
001744 4649           00293         db 73,70
001746 4143           00294         db 67,65
001748 3B3E           00295         db 62,59
00174A 3639           00296         db 57,54
00174C 3134           00297         db 52,49
00174E 2C2F           00298         db 47,44
001750 282A           00299         db 42,40
001752 2325           00300         db 37,35
001754 1F21           00301         db 33,31
001756 1B1D           00302         db 29,27
001758 1719           00303         db 25,23
00175A 1415           00304         db 21,20
00175C 1112           00305         db 18,17
00175E 0E0F           00306         db 15,14
001760 0B0C           00307         db 12,11
001762 090A           00308         db 10,9
001764 0607           00309         db 7,6
001766 0505           00310         db 5,5
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 191


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001768 0304           00311         db 4,3
00176A 0202           00312         db 2,2
00176C 0101           00313         db 1,1
00176E 0001           00314         db 1,0
001770 0000           00315         db 0,0
001772 0000           00316         db 0,0
001774 0000           00317         db 0,0
001776 0101           00318         db 1,1
001778 0201           00319         db 1,2
00177A 0302           00320         db 2,3
00177C 0504           00321         db 4,5
00177E 0605           00322         db 5,6
001780 0907           00323         db 7,9
001782 0B0A           00324         db 10,11
001784 0E0C           00325         db 12,14
001786 110F           00326         db 15,17
001788 1412           00327         db 18,20
00178A 1715           00328         db 21,23
00178C 1B19           00329         db 25,27
00178E 1F1D           00330         db 29,31
001790 2321           00331         db 33,35
001792 2825           00332         db 37,40
001794 2C2A           00333         db 42,44
001796 312F           00334         db 47,49
001798 3634           00335         db 52,54
00179A 3B39           00336         db 57,59
00179C 413E           00337         db 62,65
00179E 4643           00338         db 67,70
0017A0 4C49           00339         db 73,76
0017A2 524F           00340         db 79,82
0017A4 5855           00341         db 85,88
0017A6 5D5A           00342         db 90,93
0017A8 6461           00343         db 97,100
0017AA 6A67           00344         db 103,106
0017AC 706D           00345         db 109,112
0017AE 7673           00346         db 115,118
0017B0 7C79           00347         db 121,124
                      00348 
                      00349         
                      00338 
                      00339         ; ensure that bootLoader reads/writes all program mem from USER_CODE_START_ADDRESS to bootloader
                      00340         ORG             0x17FE
Warning[208]: Label truncated at 32 characters. (lastApplicationProgramMemoryAddress)
0017FE                00341 lastApplicationProgramMemoryAddress
0017FE 0000           00342         nop
                      00343 
                      00344         ORG             0x1800  ; 1024 word (2048-byte) boot block
                      00345         #include        "../source/mootLoader.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      mootLoader.asm                                    *
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 192


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 
                      00015 
                      00016 ;**********************************************************************
                      00017 ; INCLUDE FILES
                      00018 ;**********************************************************************
                      00019         
                      00020         #include        "../header/mootloader.h"
                      00001 ;**********************************************************************
                      00002 ;                                                                     *
                      00003 ;    Project:       deMIDulator                                       *
                      00004 ;    Filename:      eeprom.h                                          *
                      00005 ;    Date:                                                            *
                      00006 ;    File Version:                                                    *
                      00007 ;                                                                     *
                      00008 ;    Author:        Derek Enos                                        *
                      00009 ;    Company:                                                         *
                      00010 ;                                                                     * 
                      00011 ;                                                                     *
                      00012 ;**********************************************************************
                      00013 ;                                                                     *
                      00014 ;    Files required:                                                  *
                      00015 ;                                                                     *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;**********************************************************************
                      00019 
                      00020 #ifndef _MOOTLOADERH_
                      00021 #define _MOOTLOADERH_
                      00022 
                      00023 
                      00024 ; ******************* MOOTLOADER TRANSACTION DEFINES ***********************
                      00025 
                      00026 #define ML_BLOCK_ERASE_BYTE_SIZE                        64      ; must be multiple of ML_DATA_PAYLOAD_BY
                            TE_SIZE
                      00027 #define ML_DATA_PACKET_PAYLOAD_BYTE_SIZE        8
                      00028 
                      00029 #define ML_BLOCK_ERASE_IDLE_TIME_MS                     8
                      00030 #define ML_WRITE_IDLE_TIME_MS                           8
                      00031 #define ML_TRANS_SYNC_IDLE_TIME_MS                      32
                      00032 
                      00033 
                      00034 ; ******************* MOOTLOADER COMMAND BYTE DEFINES ***********************
                      00035 
                      00036 #define MIDI_VENDOR_ID                                          0x77
                      00037 #define MIDI_DEVICE_ID                                          0x1D
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 193


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00038 
                      00039 #define ML_COMMAND_WRITE_PROGRAM_MEMORY         0x03
                      00040 #define ML_COMMAND_DATA_PAYLOAD                         0x01
                      00041 #define ML_COMMAND_DATA_PAYLOAD_COMPLETE        0x02
                      00042 #define ML_TRANSMITTER_RESETTING                        0x10
                      00043 #define ML_RECEIVER_RESET                                       0x11
                      00044 
                      00045 
                      00046 ; ******************* MOOTLOADER PACKET DEFINES ***********************
                      00047 
                      00048 #define ML_LARGE_PACKET_BYTE_SIZE               22
                      00049 
                      00050 
                      00051 ; ******************* mlFlags BIT DEFINES ***********************
                      00052 
                      00053 #define mlRxTransSyncFlag                                       0
                      00054 #define mlRxChecksumOk                                          1
                      00055 
                      00056 
                      00057 ;**********************************************************************
                      00058 ; MACROS
                      00059 ;**********************************************************************
                      00060 
                      00061 SEND_SYSEX_INTRO_NO_CHECK       MACRO
                      00062         movlw   0xF0
                      00063         call    mootLoader_sendByte
                      00064         movlw   MIDI_VENDOR_ID
                      00065         call    mootLoader_sendByte
                      00066         movlw   MIDI_DEVICE_ID
                      00067         call    mootLoader_sendByte
                      00068         ENDM
                      00069 
                      00070 SEND_BYTE_START_CHECKSUM        MACRO
                      00071         movwf   mlChecksum, ACCESS
                      00072         call    mootLoader_sendByte
                      00073         ENDM
                      00074 
                      00075 SEND_BYTE_DO_CHECKSUM           MACRO
                      00076         xorwf   mlChecksum, f, ACCESS
                      00077         call    mootLoader_sendByte
                      00078         ENDM
                      00079 
                      00080 SPLIT_BYTE_THEN_SEND_DO_CHECKSUM        MACRO
                      00081         xorwf   mlChecksum, f, ACCESS
                      00082         call    mootLoader_sendAsNybbles
                      00083         ENDM
                      00084 
                      00085 SEND_CHECKSUM_CLEAR_RUN         MACRO
                      00086         movf    mlChecksum, w, ACCESS
                      00087         ; ensure that bit 7 is clear
                      00088         andlw   0x7f
                      00089         clrf    mlRunningChecksum, ACCESS
                      00090         call    mootLoader_sendByte
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 194


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00091         ENDM
                      00092         
                      00093 SEND_CHECKSUM_DO_RUN            MACRO
                      00094         movf    mlChecksum, w, ACCESS
                      00095         ; ensure that bit 7 is clear
                      00096         andlw   0x7f
                      00097         xorwf   mlRunningChecksum, f, ACCESS
                      00098         call    mootLoader_sendByte
                      00099         ENDM
                      00100 
                      00101 SEND_RUNNING_CHECKSUM           MACRO
                      00102         movf    mlRunningChecksum, w, ACCESS
                      00103         ; ensure that bit 7 is clear
                      00104         andlw   0x7f
                      00105         call    mootLoader_sendByte
                      00106         ENDM
                      00107 
                      00108 IDLE_BLOCK_ERASE                        MACRO
                      00109         movlw   ML_BLOCK_ERASE_IDLE_TIME_MS
                      00110         call    mootLoader_wait
                      00111         ENDM
                      00112 
                      00113 IDLE_WRITE_WAIT                         MACRO
                      00114         movlw   ML_WRITE_IDLE_TIME_MS
                      00115         call    mootLoader_wait
                      00116         ENDM
                      00117 
                      00118         
                      00119 #endif
                      00120 
                      00021 
                      00022         
                      00023 ;**********************************************************************
                      00024 ; LOCAL VARIABLES
                      00025 ;**********************************************************************
                      00026 
                      00027         CBLOCK 0
                      00028 
                      00029                 ; global
  00000000            00030                 mlButtonState:1
  00000001            00031                 mlChecksum:1
  00000002            00032                 mlRunningChecksum:1
  00000003            00033                 mlStartAddress:4
  00000007            00034                 mlPayloadLength:4
  0000000B            00035                 mlDataPayloadBuffer:ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
  00000013            00036                 mlCount:2
  00000015            00037                 mlFlags:1
                      00038                 ; sendNybble()
  00000016            00039                 mlNybbleSplitTmp:1
                      00040                 ; sendByte()
  00000017            00041                 mlCurrentTxByte:1
                      00042                 ; writeProgramMemory()
  00000018            00043                 mlBlockEraseBytesRemaining:1
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 195


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00044                 ; sendDataPayloadPacket()
  00000019            00045                 mlDatPackIntByteCount:1
                      00046                 ; rxListenForPrelude()
  0000001A            00047                 mlPerfectPreludeCount:1
                      00048                 ; mootLoader_rxReceiveNextPacket()
  0000001B            00049                 mlRxReceivedPacket:ML_LARGE_PACKET_BYTE_SIZE
  00000031            00050                 mlRxReceivedPacketByteCount:1
                      00051                 ; rxReceiveNextByte()
  00000032            00052                 mlRxReceivedByte:1
                      00053                 ; rxReceiveNextSymbol()
  00000033            00054                 mlRxPreviousSymbolBucket:1
  00000034            00055                 mlConsecutiveSymbolCount:1
                      00056                 ; convertPeriodToSymbol()
  00000035            00057                 mlRxSymbolBucket:1
  00000036            00058                 mlPeriodBucketLowLimit:1
  00000037            00059                 mlPeriodBucketHighLimit:1
  00000038            00060                 mlSymbolBucketCount:1
                      00061                 ; measureInputCyclePeriod()
  00000039            00062                 mlRA4CompareReg:1
  0000003A            00063                 mlRxCyclePeriodL:1
  0000003B            00064                 mlRxCyclePeriodH:1
  0000003C            00065                 mlSchmittReadValue:1
  0000003D            00066                 mlTransitionCount:1
                      00067                 ; rxDecodeReceivedSymbol()
  0000003E            00068                 mlDecodedNybble:1
                      00069                 ; debug
  0000003F            00070                 mlEepromAddress:1
  00000040            00071                 mlEepromByteCount:1
                      00072                 
                      00073         ENDC
                      00074 
                      00075 
                      00076 ;**********************************************************************
                      00077 ; LOCAL DEFINES
                      00078 ;**********************************************************************
                      00079 
                      00080 ;#define        DEBUG_TOGGLE_SQUARE_ON_SAMPLE
                      00081 ;#define        DEBUG_TOGGLE_SQUARE_ON_EDGE_DETECT
                      00082 ;#define        DEBUG_SQUARE_FOLLOWS_SCHMITT_VALUE
                      00083 ;#define        DEBUG_TOGGLE_SQUARE_ON_MEASURE_BOUNDS
                      00084 ;#define        DEBUG_TOGGLE_SQUARE_ON_NEW_SYMBOL_DETECT
                      00085 
                      00086 
                      00087 ;**********************************************************************
                      00088 ; mootLoader BEGIN
                      00089 ;**********************************************************************
                      00090 
001800                00091 mootLoader
                      00092         
001800 EC?? F???      00093         call    mootLoader_initCore
                      00094         
                      00095         ; use BANK0
001804 0100           00096         BANKSEL 0
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 196


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00097                 
                      00098         ; turn on all LEDs
                      00099         LED_ALL_ON
                          M         LED_SINE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
001806 868B               M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
001808 888B               M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
00180A 8A89               M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
                      00100 
                      00101         ; check if boot action is being requested
                      00102         ; enter mootLoader Trasmitter mode if waveform(RC0) & record(RC1) switches held for 2 second
                      00103         ; enter mootLoader Receiver mode if record(RC1) & mode(RC2) switches held for 2 second
                      00104         ; enter Flash restore from EEPROM mode if waveform(RC0), record(RC1) & mode(RC2) switches held f
                            or 2 second
                      00105 
                      00106         ;**** start procedure: check button state ****
                      00107         ; if any buttons (RC0 - RC2) are pressed then wait for button state to remain unchanged for 2 se
                            conds
00180C 1C82           00108         comf    PORTC, w, ACCESS
00180E 0B07           00109         andlw   0x07
                      00110         ; no buttons are active so exit
001810 E0??           00111         bz              mootLoader_exit
                      00112         ; at least one button is active so wait to make sure that state doesn't change for 2 seconds
                      00113         ; mlTmpValue = compliment of initial RC2:0 value
001812 6E00           00114         movwf   mlButtonState, ACCESS
001814 6ACC           00115         clrf    TMR2, ACCESS
001816 0E24           00116         movlw   0x24
001818 6E13           00117         movwf   mlCount, ACCESS
00181A 0EF4           00118         movlw   0xf4
00181C 6E14           00119         movwf   mlCount + 1, ACCESS
00181E                00120 mootLoader_stateWaitLp
00181E 1C82           00121         comf    PORTC, w, ACCESS
001820 0B07           00122         andlw   0x07
001822 6200           00123         cpfseq  mlButtonState, ACCESS
                      00124         ; button state has changed before timer expiration so exit mootLoader
001824 D???           00125         bra             mootLoader_exit
                      00126         ; state has not changed so wait for timer overflow
001826 929E           00127         bcf             PIR1, TMR2IF, ACCESS    
001828                00128 mootLoader_stateWaitOvLp
001828 A29E           00129         btfss   PIR1, TMR2IF, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 197


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00182A D???           00130         bra             mootLoader_stateWaitOvLp        
                      00131         ; timer has overflowed so decrement overflow counter
00182C 0613           00132         decf    mlCount, f, ACCESS
00182E A0D8           00133         btfss   STATUS, C, ACCESS
001830 0614           00134         decf    mlCount + 1, f, ACCESS
001832 5213           00135         movf    mlCount, f, ACCESS
                      00136         ; count != so continue loop
001834 E1??           00137         bnz             mootLoader_stateWaitLp
001836 5214           00138         movf    mlCount + 1, f, ACCESS
                      00139         ; count != so continue loop
001838 E1??           00140         bnz             mootLoader_stateWaitLp
                      00141 
                      00142         ; button state remained unchanged for 2 seconds. yay
                      00143 
                      00144         ;**** start procedure: check button combo value ****
                      00145         ; remeber, mlButtonState is reversed logic
00183A 0E03           00146         movlw   0<<RC2 ^ 1<<RC1 ^ 1<<RC0
00183C 6200           00147         cpfseq  mlButtonState, ACCESS
00183E D???           00148         bra             mootLoader_checkReceive
001840 D???           00149         bra             mootLoader_transmitter          
001842                00150 mootLoader_checkReceive
001842 0E06           00151         movlw   1<<RC2 ^ 1<<RC1 ^ 0<<RC0
001844 6200           00152         cpfseq  mlButtonState, ACCESS
001846 D???           00153         bra             mootLoader_checkRestore
001848 D???           00154         bra             mootLoader_receiver
00184A                00155 mootLoader_checkRestore
00184A 0E07           00156         movlw   1<<RC2 ^ 1<<RC1 ^ 1<<RC0
00184C 6200           00157         cpfseq  mlButtonState, ACCESS
00184E D???           00158         bra             mootLoader_exit
001850 D???           00159         bra             mootLoader_restore
                      00160 
001852                00161 mootLoader_exit
001852 EF?? F???      00162         goto    main_redirect
                      00163                         
                      00164         ; include code for mootLoader functions
                      00165         #include        "mootLoader_init.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      mootLoader_init_v0_2.asm                          *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 198


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 ;**********************************************************************
                      00022 ; INCLUDE FILES
                      00023 ;**********************************************************************
                      00024 
                      00025 ;**********************************************************************
                      00026 ; LOCAL FUNCTIONS
                      00027 ;**********************************************************************
                      00028 
                      00029 ;**********************************************************************
                      00030 ; Function: void mootLoader_initCore()
                      00031 ;**********************************************************************
                      00032 
001856                00033 mootLoader_initCore
001856 EC?? F???      00034         call mootLoader_initOsc
00185A EC?? F???      00035         call mootLoader_initIO
00185E EC?? F???      00036         call mootLoader_initUART
001862 EC?? F???      00037         call mootLoader_initTimer0
001866 EC?? F???      00038         call mootLoader_initTimer1
00186A EC?? F???      00039         call mootLoader_initTimer2
00186E EC?? F???      00040         call mootLoader_initCCP
001872 EC?? F???      00041         call mootLoader_initSPI
001876 EC?? F???      00042         call mootLoader_initADC
00187A EC?? F???      00043         call mootLoader_initInterrupts
00187E EC?? F???      00044         call mootLoader_initRAM
001882 EC?? F???      00045         call mootLoader_initHeap
001886 0012           00046         return
                      00047                 
                      00048         
                      00049 ;**********************************************************************
                      00050 ; Function: void mootLoader_initOsc()
                      00051 ;**********************************************************************
                      00052 
001888                00053 mootLoader_initOsc
                      00054         ; configure for internal clock at 8Mhz & 4x PLL = 32Mhz
                      00055         ; primary clock determined by FOSC<3:0>
                      00056         ; confirgure internal osc for 8Mhz
001888 8CD3           00057         bsf             OSCCON, IRCF2, ACCESS
00188A 8AD3           00058         bsf             OSCCON, IRCF1, ACCESS
00188C 98D3           00059         bcf             OSCCON, IRCF0, ACCESS
00188E                00060 mootLoader_initOsc_lp1
                      00061         ; wait for internal high freq osc to stabilize
Error[113]  : Symbol not previously defined (IOFS)
00188E A0D3           00062         btfss   OSCCON, IOFS, ACCESS
001890 D???           00063         bra             mootLoader_initOsc_lp1
                      00064 
                      00065         ; enable PLL
Error[113]  : Symbol not previously defined (SPLLEN)
001892 809B           00066         bsf             OSCTUNE, SPLLEN, ACCESS
                      00067 
001894 0012           00068         return
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 199


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00069 
                      00070 
                      00071 ;**********************************************************************
                      00072 ; Function: void mootLoader_initIO()
                      00073 ;**********************************************************************
                      00074 
001896                00075 mootLoader_initIO
                      00076         ; IO Summary
                      00077         ; 
                      00078         ; (organized by pin #)
                      00079         ; Pin   Port    Assignment
                      00080         ; ---  ----     ----------
                      00081         ; 1             VDD             VDD
                      00082         ; 2             RA5             LED (Sine)
                      00083         ; 3             RA4             Audio In
                      00084         ; 4             RA3             ICSP
                      00085         ; 5             RC5             Audio Out
                      00086         ; 6             RC4             LED (Square)
                      00087         ; 7             RC3             LED (Sample)
                      00088         ; 8             RC6             EEPROM Chip Select
                      00089         ; 9             RC7             EEPROM Slave In
                      00090         ; 10    RB7             [Not Connected]
                      00091         ; 11    RB6             EEPROM Clock
                      00092         ; 12    RB5             MIDI In
                      00093         ; 13    RB4             EEPROM Slave Out
                      00094         ; 14    RC2             Switch (MIDI Record / Playback)
                      00095         ; 15    RC1             Switch (Voice Through / Record)
                      00096         ; 16    RC0             Switch (Waveform)
                      00097         ; 17    VUSB    [Not Connected]
                      00098         ; 18    RA1             ICSP
                      00099         ; 19    RA0             ICSP
                      00100         ; 20    VSS             VSS
                      00101         ;
                      00102         ; [PORT A]
                      00103         ; Pin   Port    Assignment                                                      Direction
                      00104         ; ---  ----             ----------                                                      --------
                            -
                      00105         ; 19    RA0             ICSP                                                            IN
                      00106         ; 18    RA1             ICSP                                                            IN
                      00107         ; 4             RA3             ICSP                                                            
                            IN
                      00108         ; 3             RA4             Audio In                                                        
                            IN
                      00109         ; 2             RA5             LED (Sine)                                                      
                            OUT
                      00110 
001896 8A89           00111         bsf             LATA, RA5, ACCESS       ; LED is off
001898 0EDF           00112         movlw   0xff ^ 1<<RA5
00189A 6E92           00113         movwf   TRISA, ACCESS
                      00114 
                      00115         ; [PORT B]
                      00116         ; Pin   Port    Assignment                                                      Direction
                      00117         ; ---  ----             ----------                                                      --------
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 200


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            -
                      00118         ; 13    RB4             EEPROM Slave Out                                        IN
                      00119         ; 12    RB5             MIDI In                                                         IN
                      00120         ; 11    RB6             EEPROM Clock                                            OUT
                      00121         ; 10    RB7             [Not Connected]                                         IN
                      00122 
00189C 0EBF           00123         movlw   0xff ^ 1<<RB6   ; EEPROM clock is LOW
00189E 6E8A           00124         movwf   LATB, ACCESS
0018A0 0EBF           00125         movlw   0xff ^ 1<<RB6
0018A2 6E93           00126         movwf   TRISB, ACCESS
                      00127         
                      00128         ; [PORT C]
                      00129         ; Pin   Port    Assignment                                                      Direction
                      00130         ; ---  ----             ----------                                                      --------
                            -
                      00131         ; 16    RC0             Switch (Waveform)                                       IN
                      00132         ; 15    RC1             Switch (Voice Through / Record)         IN
                      00133         ; 14    RC2             Switch (MIDI Record / Playback)         IN
                      00134         ; 7             RC3             LED (Sample)                                            OUT
                      00135         ; 6             RC4             LED (Square)                                            OUT
                      00136         ; 5             RC5             Audio Out                                                       
                            OUT
                      00137         ; 8             RC6             EEPROM Chip Select                                      OUT
                      00138         ; 9             RC7             EEPROM Slave In                                         OUT
                      00139         
0018A4 868B           00140         bsf             LATC, RC3, ACCESS       ; LED is off
0018A6 888B           00141         bsf             LATC, RC4, ACCESS       ; LED is off
0018A8 9A8B           00142         bcf             LATC, RC5, ACCESS       ; Audio out is low
0018AA 8C8B           00143         bsf             LATC, RC6, ACCESS       ; Chip select is idle
0018AC 0E07           00144         movlw   0x07
0018AE 6E94           00145         movwf   TRISC, ACCESS
                      00146         
                      00147         ; [General IO]
0018B0 9EF1           00148         bcf             INTCON2, NOT_RABPU, ACCESS      ; enable PORT A & B pullups per WPU registers
0018B2 0E08           00149         movlw   1<<ANS3 ; ANS3 = RA4(Audio In)
0018B4 6E7E           00150         movwf   ANSEL, ACCESS   ; enable digital input buffers for all non-analog inputs
0018B6 6A7F           00151         clrf    ANSELH, ACCESS  ; enable digital input buffers for all non-analog inputs        
0018B8 0012           00152         return
                      00153         
                      00154         
                      00155 ;**********************************************************************
                      00156 ; Function: void mootLoader_initUART()
                      00157 ;**********************************************************************
                      00158 
0018BA                00159 mootLoader_initUART
0018BA 0E0F           00160         movlw   15      ; 31.25K baud rate @ 32Mhz clock
0018BC 6EAF           00161         movwf   SPBRG, ACCESS
                      00162         ; Enable serial port
                      00163         ; Enable reception
0018BE 8EAB           00164         bsf             RCSTA, SPEN, ACCESS
0018C0 88AB           00165         bsf             RCSTA, CREN, ACCESS
                      00166         ; Enable transmission
0018C2 8AAC           00167         bsf             TXSTA, TXEN, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 201


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0018C4 0012           00168         return
                      00169 
                      00170 
                      00171 ;**********************************************************************
                      00172 ; Function: void mootLoader_initTimer0()
                      00173 ;**********************************************************************
                      00174 
0018C6                00175 mootLoader_initTimer0
                      00176         ; timer is on
                      00177         ; 16-bit mode
0018C6 9CD5           00178         bcf     T0CON, T08BIT, ACCESS
                      00179         ; clock = internal
0018C8 9AD5           00180         bcf             T0CON, T0CS, ACCESS
                      00181         ; timer0 using prescaler
                      00182         ; prescale = 1:8
                      00183         ; Fosc = 32Mhz. 1/((32Mhz/4)/ 8) * overflowValue(==65536) = overflow every 65.536mS)
0018CA 96D5           00184         bcf             T0CON, PSA, ACCESS
0018CC 94D5           00185         bcf             T0CON, T0PS2, ACCESS
0018CE 90D5           00186         bcf             T0CON, T0PS0, ACCESS    
0018D0 0012           00187         return
                      00188 
                      00189 
                      00190 ;**********************************************************************
                      00191 ; Function: void mootLoader_initTimer1()
                      00192 ;**********************************************************************
                      00193 
0018D2                00194 mootLoader_initTimer1
                      00195         ; DO NOT ENABLE TIMER1 OR SDO WILL NOT WORK!
0018D2 0012           00196         return
                      00197 
                      00198 
                      00199 ;**********************************************************************
                      00200 ; Function: void mootLoader_initTimer2()
                      00201 ;**********************************************************************
                      00202 
0018D4                00203 mootLoader_initTimer2
                      00204 
                      00205         ; Prescale 1:1
                      00206         ; Turn on Timer2
0018D4 84CA           00207         bsf             T2CON, TMR2ON, ACCESS
                      00208         ; Reset and interrupt on match value
0018D6 0EFF           00209         movlw   255
0018D8 6ECB           00210         movwf   PR2, ACCESS
0018DA 0012           00211         return
                      00212         
                      00213 
                      00214 ;**********************************************************************
                      00215 ; Function: void mootLoader_initCCP()
                      00216 ;**********************************************************************
                      00217 
0018DC                00218 mootLoader_initCCP
                      00219         ; PWM single output
                      00220         ; PWM mode; P1A, P1C active-high; P1B, P1D active-high
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 202


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00221         ; 10-bit PWM bits [1:0] = 0b11
0018DC 86BD           00222         bsf             CCP1CON, CCP1M3, ACCESS
0018DE 84BD           00223         bsf             CCP1CON, CCP1M2, ACCESS
                      00224 
0018E0 6ABE           00225         clrf    CCPR1L, ACCESS  
0018E2 0012           00226         return
                      00227 
                      00228 
                      00229 ;**********************************************************************
                      00230 ; Function: void mootLoader_initSPI()
                      00231 ;**********************************************************************
                      00232 
0018E4                00233 mootLoader_initSPI
                      00234         ; serial port enabled
                      00235         ; idle clock is LOW
                      00236         ; mode is SPI master, clock = Fosc/4 = 8MHz
0018E4 8AC6           00237         bsf             SSPCON1, SSPEN, ACCESS
                      00238 
                      00239         ; input data latched on idle->active
                      00240         ; output data latched on active->idle clock
0018E6 8CC7           00241         bsf             SSPSTAT, CKE, ACCESS
0018E8 0012           00242         return
                      00243         
                      00244 
                      00245 ;**********************************************************************
                      00246 ; Function: void mootLoader_initADC()
                      00247 ;**********************************************************************
                      00248 
0018EA                00249 mootLoader_initADC
                      00250         ; channel = AN3
                      00251         ; ADC is on
0018EA 86C2           00252         bsf             ADCON0, CHS1, ACCESS    
0018EC 84C2           00253         bsf             ADCON0, CHS0, ACCESS    
0018EE 80C2           00254         bsf             ADCON0, ADON, ACCESS    
                      00255         
                      00256         ; positive reference is internal VDD
                      00257         ; negative reference is internal VSS
                      00258 
                      00259         ; left justify result
                      00260         ; acquisition time = 4 tad
                      00261         ; clock source = Fosc/32 = 32Mhz/32 = 1Mhz, TAD = 1uS
0018F0 88C0           00262         bsf             ADCON2, ACQT1, ACCESS
0018F2 82C0           00263         bsf             ADCON2, ADCS1, ACCESS
0018F4 0012           00264         return
                      00265 
                      00266 
                      00267 ;**********************************************************************
                      00268 ; Function: void mootLoader_initInterrupts()
                      00269 ;**********************************************************************
                      00270 
0018F6                00271 mootLoader_initInterrupts
                      00272         ; Enable interrupt priorities           
0018F6 8ED0           00273         bsf             RCON, IPEN, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 203


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00274         
                      00275         ; unmask peripheral interrupts
                      00276         ; enable timer0 interrupts
                      00277         ; enable INT0 interrupts
                      00278         ; clear timer0 int flag
                      00279         ; clear INT0 int flag
0018F8 8CF2           00280         bsf             INTCON, PEIE, ACCESS
0018FA 8AF2           00281         bsf             INTCON, TMR0IE, ACCESS
0018FC 88F2           00282         bsf             INTCON, INT0IE, ACCESS
0018FE 94F2           00283         bcf             INTCON, TMR0IF, ACCESS
001900 92F2           00284         bcf             INTCON, INT0IF, ACCESS
                      00285         
                      00286         ; INT0 interrupt on falling edge
                      00287         ; INT1 interrupt on falling edge
                      00288         ; INT2 interrupt on falling edge
                      00289         ; Interrupt priority is low
001902 9CF1           00290         bcf             INTCON2, INTEDG0, ACCESS
001904 9AF1           00291         bcf             INTCON2, INTEDG1, ACCESS
001906 98F1           00292         bcf             INTCON2, INTEDG2, ACCESS
001908 94F1           00293         bcf             INTCON2, TMR0IP, ACCESS
                      00294                 
                      00295         ; INT2 is low Priority interrupt
                      00296         ; INT1 is low Priority interrupt
                      00297         ; enable INT2 interrupts
                      00298         ; enable INT1 interrupts
                      00299         ; clear INT2 int flag
                      00300         ; clear INT1 int flag
00190A 9EF0           00301         bcf             INTCON3, INT2IP, ACCESS
00190C 9CF0           00302         bcf             INTCON3, INT1IP, ACCESS
00190E 88F0           00303         bsf             INTCON3, INT2IE, ACCESS
001910 86F0           00304         bsf             INTCON3, INT1IE, ACCESS
001912 92F0           00305         bcf             INTCON3, INT2IF, ACCESS
001914 90F0           00306         bcf             INTCON3, INT1IF, ACCESS
                      00307                         
                      00308         ; UART RX is low priority interrupt     
001916 9A9F           00309         bcf             IPR1, RCIP, ACCESS
                      00310         
                      00311         ; clear timer2 int flag
001918 929E           00312         bcf             PIR1, TMR2IF, ACCESS            
                      00313         
                      00314         ; enable UART rx ints
                      00315         ; enable timer2 interrupts
00191A 8A9D           00316         bsf             PIE1, RCIE, ACCESS
00191C 829D           00317         bsf             PIE1, TMR2IE, ACCESS
00191E 0012           00318         return
                      00319         
                      00320 
                      00321 ;**********************************************************************
                      00322 ; Function: void mootLoader_initRAM()
                      00323 ;**********************************************************************
001920                00324 mootLoader_initRAM
                      00325         ; clear all general purpose RAM locations to 0x00
001920                00326 mootLoader_initRAM_bank0
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 204


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00327         ; mootLoader_init pointer to start of BANK0
001920 6AE9           00328         clrf    FSR0L, ACCESS
001922 6AEA           00329         clrf    FSR0H, ACCESS
001924                00330 mootLoader_initRAM_bank0Lp
001924 6AEE           00331         clrf    POSTINC0, ACCESS
                      00332         ; BANK0 is done when FSR0 == 0x0100
001926 0E01           00333         movlw   1
001928 62EA           00334         cpfseq  FSR0H, ACCESS
00192A D???           00335         bra             mootLoader_initRAM_bank0Lp
                      00336 
00192C                00337 mootLoader_initRAM_bank1
                      00338         ; PIC18LF13K50 does not implement BANK1 so skip it
                      00339 
00192C                00340 mootLoader_initRAM_bank2
                      00341         ; mootLoader_init pointer to start of BANK2
00192C 6AE9           00342         clrf    FSR0L, ACCESS
00192E 0E02           00343         movlw   0x02
001930 6EEA           00344         movwf   FSR0H, ACCESS
001932                00345 mootLoader_initRAM_bank2Lp
001932 6AEE           00346         clrf    POSTINC0, ACCESS
                      00347         ; BANK2 is done when FSR0 == 0x0300
001934 0E03           00348         movlw   3
001936 62EA           00349         cpfseq  FSR0H, ACCESS
001938 D???           00350         bra             mootLoader_initRAM_bank2Lp
                      00351 
                      00352         ; reset fsr address
00193A 6AE9           00353         clrf    FSR0L, ACCESS   
00193C 6AEA           00354         clrf    FSR0H, ACCESS   
00193E 0012           00355         return
                      00356 
                      00357 ;**********************************************************************
                      00358 ; Function: void mootLoader_initHeap()
                      00359 ;**********************************************************************
                      00360 
001940                00361 mootLoader_initHeap
001940 EE22 F0FF      00362         lfsr    softwareStackPointerFSR, softwareStackBaseAddress
001944 0012           00363         return
                      00364         
                      00365 
                      00366         
                      00166         #include        "mootLoader_TX.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      mootLoader_TX_v0_2.asm                            *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 205


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00013 ;**********************************************************************
                      00014 
                      00015 
                      00016 ;**********************************************************************
                      00017 ; INCLUDE FILES
                      00018 ;**********************************************************************
                      00019         
                      00020         #include        "../header/mootloader.h"
                      00121 ;**********************************************************************
                      00122 ;                                                                     *
                      00123 ;    Project:       deMIDulator                                       *
                      00124 ;    Filename:      eeprom.h                                          *
                      00125 ;    Date:                                                            *
                      00126 ;    File Version:                                                    *
                      00127 ;                                                                     *
                      00128 ;    Author:        Derek Enos                                        *
                      00129 ;    Company:                                                         *
                      00130 ;                                                                     * 
                      00131 ;                                                                     *
                      00132 ;**********************************************************************
                      00133 ;                                                                     *
                      00134 ;    Files required:                                                  *
                      00135 ;                                                                     *
                      00136 ;                                                                     *
                      00137 ;                                                                     *
                      00138 ;**********************************************************************
                      00139 
                      00140 #ifndef _MOOTLOADERH_
                      00141 #define _MOOTLOADERH_
                      00142 
                      00143 
                      00144 ; ******************* MOOTLOADER TRANSACTION DEFINES ***********************
                      00145 
                      00146 #define ML_BLOCK_ERASE_BYTE_SIZE                        64      ; must be multiple of ML_DATA_PAYLOAD_BY
                            TE_SIZE
                      00147 #define ML_DATA_PACKET_PAYLOAD_BYTE_SIZE        8
                      00148 
                      00149 #define ML_BLOCK_ERASE_IDLE_TIME_MS                     8
                      00150 #define ML_WRITE_IDLE_TIME_MS                           8
                      00151 #define ML_TRANS_SYNC_IDLE_TIME_MS                      32
                      00152 
                      00153 
                      00154 ; ******************* MOOTLOADER COMMAND BYTE DEFINES ***********************
                      00155 
                      00156 #define MIDI_VENDOR_ID                                          0x77
                      00157 #define MIDI_DEVICE_ID                                          0x1D
                      00158 
                      00159 #define ML_COMMAND_WRITE_PROGRAM_MEMORY         0x03
                      00160 #define ML_COMMAND_DATA_PAYLOAD                         0x01
                      00161 #define ML_COMMAND_DATA_PAYLOAD_COMPLETE        0x02
                      00162 #define ML_TRANSMITTER_RESETTING                        0x10
                      00163 #define ML_RECEIVER_RESET                                       0x11
                      00164 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 206


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00165 
                      00166 ; ******************* MOOTLOADER PACKET DEFINES ***********************
                      00167 
                      00168 #define ML_LARGE_PACKET_BYTE_SIZE               22
                      00169 
                      00170 
                      00171 ; ******************* mlFlags BIT DEFINES ***********************
                      00172 
                      00173 #define mlRxTransSyncFlag                                       0
                      00174 #define mlRxChecksumOk                                          1
                      00175 
                      00176 
                      00177 ;**********************************************************************
                      00178 ; MACROS
                      00179 ;**********************************************************************
                      00180 
                      00181 SEND_SYSEX_INTRO_NO_CHECK       MACRO
                      00182         movlw   0xF0
                      00183         call    mootLoader_sendByte
                      00184         movlw   MIDI_VENDOR_ID
                      00185         call    mootLoader_sendByte
                      00186         movlw   MIDI_DEVICE_ID
                      00187         call    mootLoader_sendByte
                      00188         ENDM
                      00189 
                      00190 SEND_BYTE_START_CHECKSUM        MACRO
                      00191         movwf   mlChecksum, ACCESS
                      00192         call    mootLoader_sendByte
                      00193         ENDM
                      00194 
                      00195 SEND_BYTE_DO_CHECKSUM           MACRO
                      00196         xorwf   mlChecksum, f, ACCESS
                      00197         call    mootLoader_sendByte
                      00198         ENDM
                      00199 
                      00200 SPLIT_BYTE_THEN_SEND_DO_CHECKSUM        MACRO
                      00201         xorwf   mlChecksum, f, ACCESS
                      00202         call    mootLoader_sendAsNybbles
                      00203         ENDM
                      00204 
                      00205 SEND_CHECKSUM_CLEAR_RUN         MACRO
                      00206         movf    mlChecksum, w, ACCESS
                      00207         ; ensure that bit 7 is clear
                      00208         andlw   0x7f
                      00209         clrf    mlRunningChecksum, ACCESS
                      00210         call    mootLoader_sendByte
                      00211         ENDM
                      00212         
                      00213 SEND_CHECKSUM_DO_RUN            MACRO
                      00214         movf    mlChecksum, w, ACCESS
                      00215         ; ensure that bit 7 is clear
                      00216         andlw   0x7f
                      00217         xorwf   mlRunningChecksum, f, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 207


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00218         call    mootLoader_sendByte
                      00219         ENDM
                      00220 
                      00221 SEND_RUNNING_CHECKSUM           MACRO
                      00222         movf    mlRunningChecksum, w, ACCESS
                      00223         ; ensure that bit 7 is clear
                      00224         andlw   0x7f
                      00225         call    mootLoader_sendByte
                      00226         ENDM
                      00227 
                      00228 IDLE_BLOCK_ERASE                        MACRO
                      00229         movlw   ML_BLOCK_ERASE_IDLE_TIME_MS
                      00230         call    mootLoader_wait
                      00231         ENDM
                      00232 
                      00233 IDLE_WRITE_WAIT                         MACRO
                      00234         movlw   ML_WRITE_IDLE_TIME_MS
                      00235         call    mootLoader_wait
                      00236         ENDM
                      00237 
                      00238         
                      00239 #endif
                      00240 
                      00021 
                      00022         
                      00023 ;**********************************************************************
                      00024 ; LOCAL VARIABLES
                      00025 ;**********************************************************************
                      00026 
                      00027 ; all variables defined in mootLoader.asm
                      00028 
                      00029 
                      00030 ;**********************************************************************
                      00031 ; mootLoader Trasmitter Code Begin
                      00032 ;**********************************************************************
                      00033 
001946                00034 mootLoader_transmitter
                      00035         ; shut off sine LED leaving square and sample LEDs illuminated to communicate current mode to us
                            er
                      00036         LED_SINE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
001946 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                      00037 
                      00038         ; start program memory broadcast from address USER_CODE_START_ADDRESS
                      00039         ; bootloader is not allowed to touch first 64-byte block to ensure that user will not
                      00040         ; corrupt jump to bootloader on reset
001948 0E40           00041         movlw   USER_CODE_START_ADDRESS
00194A 6E03           00042         movwf   mlStartAddress + 0, ACCESS
00194C 6A04           00043         clrf    mlStartAddress + 1, ACCESS
00194E 6A05           00044         clrf    mlStartAddress + 2, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 208


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001950 6A06           00045         clrf    mlStartAddress + 3, ACCESS
                      00046 
                      00047         ; requesting full user application code Program Memory so...
                      00048         ; length = (lastApplicationProgramMemoryAddress - USER_CODE_START_ADDRESS) aligned to 64-byte bo
                            undary
001952 0E40           00049         movlw   USER_CODE_START_ADDRESS
                      00050         ; WREG = low(lastApplicationProgramMemoryAddress) - USER_CODE_START_ADDRESS
001954 08??           00051         sublw   low(lastApplicationProgramMemoryAddress)
001956 6E07           00052         movwf   mlPayloadLength + 0, ACCESS
                      00053         
001958 0E??           00054         movlw   high(lastApplicationProgramMemoryAddress)
00195A 6E08           00055         movwf   mlPayloadLength + 1, ACCESS
                      00056         ; if result of low(lastApplicationProgramMemoryAddress) - USER_CODE_START_ADDRESS <0 then decrem
                            ent
00195C A0D8           00057         btfss   STATUS, C, ACCESS
00195E 0608           00058         decf    mlPayloadLength + 1, f, ACCESS
                      00059         
001960 0E??           00060         movlw   upper(lastApplicationProgramMemoryAddress)
001962 6E09           00061         movwf   mlPayloadLength + 2, ACCESS
                      00062         ; if result of (decf    mlPayloadLength + 1, f, ACCESS) <0 then decrement
001964 A0D8           00063         btfss   STATUS, C, ACCESS
001966 0609           00064         decf    mlPayloadLength + 2, f, ACCESS
001968 6A0A           00065         clrf    mlPayloadLength + 3, ACCESS
                      00066 
                      00067         ; if mlPayloadLength is not 64-byte aligned then align it
00196A 0E3F           00068         movlw   0x3f
00196C 1407           00069         andwf   mlPayloadLength + 0, w, ACCESS
                      00070         ; it's aligned to skip alignment
00196E E0??           00071         bz              mootLoader_xmitStartWrite
                      00072         ; clear 6 least significant bits
001970 0EC0           00073         movlw   0xC0
001972 1607           00074         andwf   mlPayloadLength + 0, f, ACCESS
                      00075         ; add 64 to mlPayloadLength
001974 0E40           00076         movlw   0x40
001976 2607           00077         addwf   mlPayloadLength + 0, f, ACCESS
001978 0E00           00078         movlw   0
00197A 2208           00079         addwfc  mlPayloadLength + 1, f, ACCESS
00197C 2209           00080         addwfc  mlPayloadLength + 2, f, ACCESS
00197E 220A           00081         addwfc  mlPayloadLength + 3, f, ACCESS
                      00082 
001980                00083 mootLoader_xmitStartWrite
001980 EC?? F???      00084         call    mootLoader_xmitWriteProgramMemory
001984 EF?? F???      00085         goto    mootLoader_exit 
                      00086 
                      00087 
                      00088 ;**********************************************************************
                      00089 ; mootLoader Trasmitter: Write Program Memory
                      00090 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitWriteProgramMemory)
001988                00091 mootLoader_xmitWriteProgramMemory
                      00092         PUSH_R  FSR0L
001988 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00093         PUSH_R  FSR0H
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 209


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00198C CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00094 
                      00095         ;****************************************
                      00096         ; send Write Program Memory packet
001990 EC?? F???      00097         call    mootLoader_xmitSendWpmPacket
                      00098         ;****************************************
                      00099 
                      00100         ;****************************************
                      00101         ; send Complete Data Payload
                      00102         ; init table pointer with program memory start address
001994 C003 FFF6      00103         movff   mlStartAddress + 0, TBLPTRL
001998 C004 FFF7      00104         movff   mlStartAddress + 1, TBLPTRH
00199C C005 FFF8      00105         movff   mlStartAddress + 2, TBLPTRU
                      00106 
0019A0                00107 mootLoader_xmitWpmBlockErase
                      00108         IDLE_BLOCK_ERASE        
0019A0 0E08               M         movlw   ML_BLOCK_ERASE_IDLE_TIME_MS
0019A2 EC?? F???          M         call    mootLoader_wait
                      00109         ; load erase block size counter
0019A6 0E40           00110         movlw   ML_BLOCK_ERASE_BYTE_SIZE
0019A8 6E18           00111         movwf   mlBlockEraseBytesRemaining, ACCESS
                      00112 
0019AA                00113 mootLoader_xmitWpmNextPayload
                      00114         ;****************************************
                      00115         ; send single Data Payload packet
                      00116         ; load mlDataPayloadBuffer with bytes to send
0019AA EE00 F00B      00117         lfsr    FSR0, mlDataPayloadBuffer
                      00118         ; load counter with num of bytes remaining in payload packet
0019AE 0E08           00119         movlw   ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
0019B0 6E13           00120         movwf   mlCount, ACCESS
0019B2                00121 mootLoader_xmitWpmByteLp
                      00122         ; read program memory location and increment
0019B2 0009           00123         tblrd*+
                      00124         ; save value to mlDataPayloadBuffer
0019B4 CFF5 FFEE      00125         movff   TABLAT, POSTINC0
                      00126         ; check if mlDataPayloadBuffer is ready to go
0019B8 0613           00127         decf    mlCount, f, ACCESS
0019BA E1??           00128         bnz             mootLoader_xmitWpmByteLp
                      00129         ; send the packet
0019BC EC?? F???      00130         call    mootLoader_xmitSendDataPayloadPacket
                      00131         ;****************************************
                      00132 
                      00133         ; do write wait after every packet transfer
                      00134         IDLE_WRITE_WAIT
0019C0 0E08               M         movlw   ML_WRITE_IDLE_TIME_MS
0019C2 EC?? F???          M         call    mootLoader_wait
                      00135         
                      00136         ; check if entire payload has been transferred
                      00137         ; do (mlPayloadLength -= ML_DATA_PACKET_PAYLOAD_BYTE_SIZE)
0019C6 0E08           00138         movlw   ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
0019C8 5E07           00139         subwf   mlPayloadLength + 0, f, ACCESS
0019CA 0E00           00140         movlw   0
0019CC 5A08           00141         subwfb  mlPayloadLength + 1, f, ACCESS  
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 210


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0019CE 5A09           00142         subwfb  mlPayloadLength + 2, f, ACCESS  
0019D0 5A0A           00143         subwfb  mlPayloadLength + 3, f, ACCESS
                      00144         ; if mlPayloadLength == 0 then entire payload has been transferred
                      00145         ; if mlPayloadLength != 0 then check if we have to wait for another block erase
0019D2 5207           00146         movf    mlPayloadLength + 0, f, ACCESS
0019D4 E1??           00147         bnz             mootLoader_xmitWpmCheckBlockErase
0019D6 5208           00148         movf    mlPayloadLength + 1, f, ACCESS
0019D8 E1??           00149         bnz             mootLoader_xmitWpmCheckBlockErase
0019DA 5209           00150         movf    mlPayloadLength + 2, f, ACCESS
0019DC E1??           00151         bnz             mootLoader_xmitWpmCheckBlockErase
0019DE 520A           00152         movf    mlPayloadLength + 3, f, ACCESS
0019E0 E1??           00153         bnz             mootLoader_xmitWpmCheckBlockErase
0019E2 D???           00154         bra             mootLoader_xmitWpmSendPayloadComplete
                      00155 
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitWpmCheckBlockErase)
0019E4                00156 mootLoader_xmitWpmCheckBlockErase
                      00157         ; check if we need to wait for a block erase
                      00158         ; do (mlBlockEraseBytesRemaining - ML_DATA_PACKET_PAYLOAD_BYTE_SIZE)
0019E4 0E08           00159         movlw   ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
0019E6 5E18           00160         subwf   mlBlockEraseBytesRemaining, f, ACCESS
                      00161         ; if 0 then delay for block erase
0019E8 E0??           00162         bz              mootLoader_xmitWpmBlockErase
0019EA D???           00163         bra             mootLoader_xmitWpmNextPayload
                      00164         
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitWpmSendPayloadComplete)
0019EC                00165 mootLoader_xmitWpmSendPayloadComplete
                      00166         ; mlPayloadLength == 0 so send Data Payload Complete packet
                      00167         ;****************************************
                      00168         ; send Data Payload Complete packet
0019EC EC?? F???      00169         call    mootLoader_xmitSendDataPayloadCompletePacket
                      00170         ;****************************************
                      00171 
                      00172         ; transaction complete
                      00173         POP_R   FSR0H
0019F0 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00174         POP_R   FSR0L
0019F4 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
0019F8 0012           00175         return
                      00176                 
                      00177                         
                      00178 ;**********************************************************************
                      00179 ; mootLoader Trasmitter: send Write Program Memory packet
                      00180 ;**********************************************************************
0019FA                00181 mootLoader_xmitSendWpmPacket
                      00182 
                      00183         ;****************************************
                      00184         ; send SysEx intro (0xF0, vendorID, deviceID)
                      00185         SEND_SYSEX_INTRO_NO_CHECK
0019FA 0EF0               M         movlw   0xF0
0019FC EC?? F???          M         call    mootLoader_sendByte
001A00 0E77               M         movlw   MIDI_VENDOR_ID
001A02 EC?? F???          M         call    mootLoader_sendByte
001A06 0E1D               M         movlw   MIDI_DEVICE_ID
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 211


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001A08 EC?? F???          M         call    mootLoader_sendByte
                      00186         ;****************************************
                      00187         
                      00188         ;****************************************
                      00189         ; send COMMAND
001A0C 0E03           00190         movlw   ML_COMMAND_WRITE_PROGRAM_MEMORY
                      00191         SEND_BYTE_START_CHECKSUM
001A0E 6E01               M         movwf   mlChecksum, ACCESS
001A10 EC?? F???          M         call    mootLoader_sendByte
                      00192         ;****************************************
                      00193 
                      00194         ;****************************************
                      00195         ; send START ADDRESS
001A14 5003           00196         movf    mlStartAddress + 0, w, ACCESS
                      00197         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001A16 1A01               M         xorwf   mlChecksum, f, ACCESS
001A18 EC?? F???          M         call    mootLoader_sendAsNybbles
001A1C 5004           00198         movf    mlStartAddress + 1, w, ACCESS
                      00199         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001A1E 1A01               M         xorwf   mlChecksum, f, ACCESS
001A20 EC?? F???          M         call    mootLoader_sendAsNybbles
001A24 5005           00200         movf    mlStartAddress + 2, w, ACCESS
                      00201         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001A26 1A01               M         xorwf   mlChecksum, f, ACCESS
001A28 EC?? F???          M         call    mootLoader_sendAsNybbles
001A2C 5006           00202         movf    mlStartAddress + 3, w, ACCESS
                      00203         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001A2E 1A01               M         xorwf   mlChecksum, f, ACCESS
001A30 EC?? F???          M         call    mootLoader_sendAsNybbles
                      00204         ;****************************************
                      00205 
                      00206         ;****************************************
                      00207         ; send PAYLOAD LENGTH
001A34 5007           00208         movf    mlPayloadLength + 0, w, ACCESS
                      00209         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001A36 1A01               M         xorwf   mlChecksum, f, ACCESS
001A38 EC?? F???          M         call    mootLoader_sendAsNybbles
001A3C 5008           00210         movf    mlPayloadLength + 1, w, ACCESS
                      00211         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001A3E 1A01               M         xorwf   mlChecksum, f, ACCESS
001A40 EC?? F???          M         call    mootLoader_sendAsNybbles
001A44 5009           00212         movf    mlPayloadLength + 2, w, ACCESS
                      00213         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001A46 1A01               M         xorwf   mlChecksum, f, ACCESS
001A48 EC?? F???          M         call    mootLoader_sendAsNybbles
001A4C 500A           00214         movf    mlPayloadLength + 3, w, ACCESS
                      00215         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001A4E 1A01               M         xorwf   mlChecksum, f, ACCESS
001A50 EC?? F???          M         call    mootLoader_sendAsNybbles
                      00216         ;****************************************
                      00217         
                      00218         ;****************************************
                      00219         ; send CHECKSUM
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 212


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00220         SEND_CHECKSUM_CLEAR_RUN
001A54 5001               M         movf    mlChecksum, w, ACCESS
                          M         ; ensure that bit 7 is clear
001A56 0B7F               M         andlw   0x7f
001A58 6A02               M         clrf    mlRunningChecksum, ACCESS
001A5A EC?? F???          M         call    mootLoader_sendByte
                      00221         ;****************************************
                      00222 
                      00223         ;****************************************
                      00224         ; send End of SysEx
001A5E 0EF7           00225         movlw   0xF7
001A60 EC?? F???      00226         call    mootLoader_sendByte
                      00227         ;****************************************
                      00228         
001A64 0012           00229         return  
                      00230         
                      00231         
                      00232 ;**********************************************************************
                      00233 ; mootLoader Trasmitter: send Data Payload Packet
                      00234 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitSendDataPayloadPacket)
001A66                00235 mootLoader_xmitSendDataPayloadPacket
                      00236 
                      00237         PUSH_R  FSR0L
001A66 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00238         PUSH_R  FSR0H
001A6A CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
001A6E EE00 F00B      00239         lfsr    FSR0, mlDataPayloadBuffer
                      00240                 
                      00241         ;****************************************
                      00242         ; send SysEx intro (0xF0, vendorID, deviceID)
                      00243         SEND_SYSEX_INTRO_NO_CHECK
001A72 0EF0               M         movlw   0xF0
001A74 EC?? F???          M         call    mootLoader_sendByte
001A78 0E77               M         movlw   MIDI_VENDOR_ID
001A7A EC?? F???          M         call    mootLoader_sendByte
001A7E 0E1D               M         movlw   MIDI_DEVICE_ID
001A80 EC?? F???          M         call    mootLoader_sendByte
                      00244         ;****************************************
                      00245         
                      00246         ;****************************************
                      00247         ; send COMMAND
001A84 0E01           00248         movlw   ML_COMMAND_DATA_PAYLOAD
                      00249         SEND_BYTE_START_CHECKSUM
001A86 6E01               M         movwf   mlChecksum, ACCESS
001A88 EC?? F???          M         call    mootLoader_sendByte
                      00250         ;****************************************
                      00251 
                      00252         ;****************************************
                      00253         ; send PAYLOAD bytes
001A8C 0E08           00254         movlw   ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
001A8E 6E19           00255         movwf   mlDatPackIntByteCount, ACCESS
001A90                00256 mootLoader_xmitSdppLp
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 213


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00257         ; read byte
001A90 50EF           00258         movf    INDF0, w, ACCESS
                      00259         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001A92 1A01               M         xorwf   mlChecksum, f, ACCESS
001A94 EC?? F???          M         call    mootLoader_sendAsNybbles
                      00260         ; increment pointer
001A98 50EE           00261         movf    POSTINC0, w, ACCESS
                      00262         ; check if Data Payload packet is complete
001A9A 0619           00263         decf    mlDatPackIntByteCount, f, ACCESS
001A9C E1??           00264         bnz             mootLoader_xmitSdppLp
                      00265         ;****************************************
                      00266 
                      00267         ;****************************************
                      00268         ; send CHECKSUM
                      00269         SEND_CHECKSUM_DO_RUN
001A9E 5001               M         movf    mlChecksum, w, ACCESS
                          M         ; ensure that bit 7 is clear
001AA0 0B7F               M         andlw   0x7f
001AA2 1A02               M         xorwf   mlRunningChecksum, f, ACCESS
001AA4 EC?? F???          M         call    mootLoader_sendByte
                      00270         ;****************************************
                      00271 
                      00272         ;****************************************
                      00273         ; send End of SysEx
001AA8 0EF7           00274         movlw   0xF7
001AAA EC?? F???      00275         call    mootLoader_sendByte
                      00276         ;****************************************
                      00277 
                      00278         POP_R   FSR0H
001AAE CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00279         POP_R   FSR0L
001AB2 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
001AB6 0012           00280         return
                      00281 
                      00282 
                      00283 ;**********************************************************************
                      00284 ; mootLoader Trasmitter: send Data Payload Complete Packet
                      00285 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitSendDataPayloadCompletePacket)
001AB8                00286 mootLoader_xmitSendDataPayloadCompletePacket
                      00287         ;****************************************
                      00288         ; send SysEx intro (0xF0, vendorID, deviceID)
                      00289         SEND_SYSEX_INTRO_NO_CHECK
001AB8 0EF0               M         movlw   0xF0
001ABA EC?? F???          M         call    mootLoader_sendByte
001ABE 0E77               M         movlw   MIDI_VENDOR_ID
001AC0 EC?? F???          M         call    mootLoader_sendByte
001AC4 0E1D               M         movlw   MIDI_DEVICE_ID
001AC6 EC?? F???          M         call    mootLoader_sendByte
                      00290         ;****************************************
                      00291         
                      00292         ;****************************************
                      00293         ; send COMMAND
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 214


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001ACA 0E02           00294         movlw   ML_COMMAND_DATA_PAYLOAD_COMPLETE
                      00295         SEND_BYTE_START_CHECKSUM
001ACC 6E01               M         movwf   mlChecksum, ACCESS
001ACE EC?? F???          M         call    mootLoader_sendByte
                      00296         ;****************************************
                      00297 
001AD2 0E00           00298         movlw   0x00
                      00299         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001AD4 1A01               M         xorwf   mlChecksum, f, ACCESS
001AD6 EC?? F???          M         call    mootLoader_sendAsNybbles
001ADA 0E00           00300         movlw   0x00
                      00301         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001ADC 1A01               M         xorwf   mlChecksum, f, ACCESS
001ADE EC?? F???          M         call    mootLoader_sendAsNybbles
001AE2 0E00           00302         movlw   0x00
                      00303         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001AE4 1A01               M         xorwf   mlChecksum, f, ACCESS
001AE6 EC?? F???          M         call    mootLoader_sendAsNybbles
001AEA 0E00           00304         movlw   0x00
                      00305         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001AEC 1A01               M         xorwf   mlChecksum, f, ACCESS
001AEE EC?? F???          M         call    mootLoader_sendAsNybbles
001AF2 0E00           00306         movlw   0x00
                      00307         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001AF4 1A01               M         xorwf   mlChecksum, f, ACCESS
001AF6 EC?? F???          M         call    mootLoader_sendAsNybbles
001AFA 0E00           00308         movlw   0x00
                      00309         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001AFC 1A01               M         xorwf   mlChecksum, f, ACCESS
001AFE EC?? F???          M         call    mootLoader_sendAsNybbles
001B02 0E00           00310         movlw   0x00
                      00311         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001B04 1A01               M         xorwf   mlChecksum, f, ACCESS
001B06 EC?? F???          M         call    mootLoader_sendAsNybbles
001B0A 0E00           00312         movlw   0x00
                      00313         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001B0C 1A01               M         xorwf   mlChecksum, f, ACCESS
001B0E EC?? F???          M         call    mootLoader_sendAsNybbles
                      00314         SEND_RUNNING_CHECKSUM
001B12 5002               M         movf    mlRunningChecksum, w, ACCESS
                          M         ; ensure that bit 7 is clear
001B14 0B7F               M         andlw   0x7f
001B16 EC?? F???          M         call    mootLoader_sendByte
                      00315 
                      00316         ;****************************************
                      00317         ; send End of SysEx
001B1A 0EF7           00318         movlw   0xF7
001B1C EC?? F???      00319         call    mootLoader_sendByte
                      00320         ;****************************************       
                      00321         
001B20 0012           00322         return
                      00323         
                      00324 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 215


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00325 ;**********************************************************************
                      00326 ; Local Function: void mootLoader_sendAsNybbles(WREG)
                      00327 ;**********************************************************************
001B22                00328 mootLoader_sendAsNybbles
                      00329         ; save to tmp variable
001B22 6E16           00330         movwf   mlNybbleSplitTmp, ACCESS
                      00331         ; mask out low nybble and send
001B24 0B0F           00332         andlw   0x0F
001B26 EC?? F???      00333         call    mootLoader_sendByte
                      00334         ; swap nybbles, mask out low nybble then send
001B2A 3816           00335         swapf   mlNybbleSplitTmp, w, ACCESS
001B2C 0B0F           00336         andlw   0x0F
001B2E EC?? F???      00337         call    mootLoader_sendByte     
001B32 0012           00338         return
                      00339 
                      00340 
                      00341 ;**********************************************************************
                      00342 ; Local Function: void mootLoader_sendByte(WREG)
                      00343 ;**********************************************************************
001B34                00344 mootLoader_sendByte
                      00345         ; check if TXREG is clear, wait if not
001B34 A89E           00346         btfss   PIR1, TXIF, ACCESS
001B36 D???           00347         bra             mootLoader_sendByte
001B38 6EAD           00348         movwf   TXREG, ACCESS
001B3A 0012           00349         return
                      00350 
                      00351 
                      00352 ;**********************************************************************
                      00353 ; mootLoader Trasmitter: Wait(WREG = WAIT_TIME_MS)
                      00354 ;**********************************************************************
001B3C                00355 mootLoader_wait
                      00356         ; exit if delay time request is 0
001B3C 52E8           00357         movf    WREG, f, ACCESS
001B3E E0??           00358         bz              mootLoader_waitExit
                      00359         
                      00360         ; TMR2 overflow period (32uS) * 32 = 1.024mS
                      00361         ; so do PRODH:L = WREG * 32
001B40 6EF3           00362         movwf   PRODL, ACCESS
001B42 0E20           00363         movlw   32
001B44 02F3           00364         mulwf   PRODL, ACCESS
                      00365 
                      00366         ; reset timer
001B46 6ACC           00367         clrf    TMR2, ACCESS
001B48                00368 mootLoader_waitLp
                      00369         ; clear interrupt flag and wait for timer overflow
001B48 929E           00370         bcf             PIR1, TMR2IF, ACCESS    
001B4A                00371 mootLoader_waitIntLp
001B4A A29E           00372         btfss   PIR1, TMR2IF, ACCESS
001B4C D???           00373         bra             mootLoader_waitIntLp
                      00374         ; unintelligently decrement PRODH:L counter
001B4E 06F3           00375         decf    PRODL, f, ACCESS
                      00376         ; skip if result was positive
001B50 A0D8           00377         btfss   STATUS, C, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 216


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001B52 06F4           00378         decf    PRODH, f, ACCESS
                      00379         ; test PRODH:L, exit if 0
001B54 52F3           00380         movf    PRODL, f, ACCESS
001B56 E1??           00381         bnz             mootLoader_waitLp
001B58 52F4           00382         movf    PRODH, f, ACCESS
001B5A E1??           00383         bnz             mootLoader_waitLp
001B5C                00384 mootLoader_waitExit     
001B5C 0012           00385         return
                      00386 
                      00387 
                      00167         #include        "mootLoader_RX.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      mootLoader_RX_v0_2.asm                            *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 
                      00015 
                      00016 ;**********************************************************************
                      00017 ; INCLUDE FILES
                      00018 ;**********************************************************************
                      00019         
                      00020         #include        "../header/mootloader.h"
                      00241 ;**********************************************************************
                      00242 ;                                                                     *
                      00243 ;    Project:       deMIDulator                                       *
                      00244 ;    Filename:      eeprom.h                                          *
                      00245 ;    Date:                                                            *
                      00246 ;    File Version:                                                    *
                      00247 ;                                                                     *
                      00248 ;    Author:        Derek Enos                                        *
                      00249 ;    Company:                                                         *
                      00250 ;                                                                     * 
                      00251 ;                                                                     *
                      00252 ;**********************************************************************
                      00253 ;                                                                     *
                      00254 ;    Files required:                                                  *
                      00255 ;                                                                     *
                      00256 ;                                                                     *
                      00257 ;                                                                     *
                      00258 ;**********************************************************************
                      00259 
                      00260 #ifndef _MOOTLOADERH_
                      00261 #define _MOOTLOADERH_
                      00262 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 217


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00263 
                      00264 ; ******************* MOOTLOADER TRANSACTION DEFINES ***********************
                      00265 
                      00266 #define ML_BLOCK_ERASE_BYTE_SIZE                        64      ; must be multiple of ML_DATA_PAYLOAD_BY
                            TE_SIZE
                      00267 #define ML_DATA_PACKET_PAYLOAD_BYTE_SIZE        8
                      00268 
                      00269 #define ML_BLOCK_ERASE_IDLE_TIME_MS                     8
                      00270 #define ML_WRITE_IDLE_TIME_MS                           8
                      00271 #define ML_TRANS_SYNC_IDLE_TIME_MS                      32
                      00272 
                      00273 
                      00274 ; ******************* MOOTLOADER COMMAND BYTE DEFINES ***********************
                      00275 
                      00276 #define MIDI_VENDOR_ID                                          0x77
                      00277 #define MIDI_DEVICE_ID                                          0x1D
                      00278 
                      00279 #define ML_COMMAND_WRITE_PROGRAM_MEMORY         0x03
                      00280 #define ML_COMMAND_DATA_PAYLOAD                         0x01
                      00281 #define ML_COMMAND_DATA_PAYLOAD_COMPLETE        0x02
                      00282 #define ML_TRANSMITTER_RESETTING                        0x10
                      00283 #define ML_RECEIVER_RESET                                       0x11
                      00284 
                      00285 
                      00286 ; ******************* MOOTLOADER PACKET DEFINES ***********************
                      00287 
                      00288 #define ML_LARGE_PACKET_BYTE_SIZE               22
                      00289 
                      00290 
                      00291 ; ******************* mlFlags BIT DEFINES ***********************
                      00292 
                      00293 #define mlRxTransSyncFlag                                       0
                      00294 #define mlRxChecksumOk                                          1
                      00295 
                      00296 
                      00297 ;**********************************************************************
                      00298 ; MACROS
                      00299 ;**********************************************************************
                      00300 
                      00301 SEND_SYSEX_INTRO_NO_CHECK       MACRO
                      00302         movlw   0xF0
                      00303         call    mootLoader_sendByte
                      00304         movlw   MIDI_VENDOR_ID
                      00305         call    mootLoader_sendByte
                      00306         movlw   MIDI_DEVICE_ID
                      00307         call    mootLoader_sendByte
                      00308         ENDM
                      00309 
                      00310 SEND_BYTE_START_CHECKSUM        MACRO
                      00311         movwf   mlChecksum, ACCESS
                      00312         call    mootLoader_sendByte
                      00313         ENDM
                      00314 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 218


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00315 SEND_BYTE_DO_CHECKSUM           MACRO
                      00316         xorwf   mlChecksum, f, ACCESS
                      00317         call    mootLoader_sendByte
                      00318         ENDM
                      00319 
                      00320 SPLIT_BYTE_THEN_SEND_DO_CHECKSUM        MACRO
                      00321         xorwf   mlChecksum, f, ACCESS
                      00322         call    mootLoader_sendAsNybbles
                      00323         ENDM
                      00324 
                      00325 SEND_CHECKSUM_CLEAR_RUN         MACRO
                      00326         movf    mlChecksum, w, ACCESS
                      00327         ; ensure that bit 7 is clear
                      00328         andlw   0x7f
                      00329         clrf    mlRunningChecksum, ACCESS
                      00330         call    mootLoader_sendByte
                      00331         ENDM
                      00332         
                      00333 SEND_CHECKSUM_DO_RUN            MACRO
                      00334         movf    mlChecksum, w, ACCESS
                      00335         ; ensure that bit 7 is clear
                      00336         andlw   0x7f
                      00337         xorwf   mlRunningChecksum, f, ACCESS
                      00338         call    mootLoader_sendByte
                      00339         ENDM
                      00340 
                      00341 SEND_RUNNING_CHECKSUM           MACRO
                      00342         movf    mlRunningChecksum, w, ACCESS
                      00343         ; ensure that bit 7 is clear
                      00344         andlw   0x7f
                      00345         call    mootLoader_sendByte
                      00346         ENDM
                      00347 
                      00348 IDLE_BLOCK_ERASE                        MACRO
                      00349         movlw   ML_BLOCK_ERASE_IDLE_TIME_MS
                      00350         call    mootLoader_wait
                      00351         ENDM
                      00352 
                      00353 IDLE_WRITE_WAIT                         MACRO
                      00354         movlw   ML_WRITE_IDLE_TIME_MS
                      00355         call    mootLoader_wait
                      00356         ENDM
                      00357 
                      00358         
                      00359 #endif
                      00360 
                      00021 
                      00022         
                      00023 ;**********************************************************************
                      00024 ; LOCAL VARIABLES
                      00025 ;**********************************************************************
                      00026 
                      00027 ; all variables defined in mootLoader_v0_2.asm
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 219


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00028 
                      00029 
                      00030 ;**********************************************************************
                      00031 ; mootLoader Receiver Code Begin
                      00032 ;**********************************************************************
001B5E                00033 mootLoader_receiver
                      00034         ; communicate mode to user
                      00035         ; shut off sample LED leaving sine and square LEDs illuminated to communicate current mode to us
                            er
                      00036         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
001B5E 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
                      00037 
Warning[208]: Label truncated at 32 characters. (mootLoader_receiverListenForTrans)
001B60                00038 mootLoader_receiverListenForTrans
001B60 EC?? F???      00039         call    mootLoader_rxReceiveNextPacket
                      00040         ; jump to command handler
001B64 0E03           00041         movlw   ML_COMMAND_WRITE_PROGRAM_MEMORY
001B66 181E           00042         xorwf   mlRxReceivedPacket + 3, w, ACCESS
001B68 E0??           00043         bz              mootLoader_rxWriteProgramMemoryHandler
001B6A 0E11           00044         movlw   ML_RECEIVER_RESET
001B6C 181E           00045         xorwf   mlRxReceivedPacket + 3, w, ACCESS
001B6E EF?? F???      00046         goto    mootLoader_rxReceiverResetHandler
                      00047         ; unhandled command so listen for next trans sync
001B72 D???           00048         bra             mootLoader_receiverListenForTrans
                      00049                 
001B74 EF?? F???      00050         goto    mootLoader_exit
                      00051 
                      00052 
                      00053 ;**********************************************************************
                      00054 ; Local Function: void mootLoader_rxWriteProgramMemoryHandler()
                      00055 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_rxWriteProgramMemoryHandler)
001B78                00056 mootLoader_rxWriteProgramMemoryHandler
                      00057         ; save write start address
001B78 C01F F003      00058         movff   mlRxReceivedPacket + 4, mlStartAddress + 0
001B7C C021 F004      00059         movff   mlRxReceivedPacket + 6, mlStartAddress + 1
001B80 C023 F005      00060         movff   mlRxReceivedPacket + 8, mlStartAddress + 2
001B84 C025 F006      00061         movff   mlRxReceivedPacket + 10, mlStartAddress + 3
                      00062         ; save payload length
001B88 C027 F007      00063         movff   mlRxReceivedPacket + 12, mlPayloadLength + 0
001B8C C029 F008      00064         movff   mlRxReceivedPacket + 14, mlPayloadLength + 1
001B90 C02B F009      00065         movff   mlRxReceivedPacket + 16, mlPayloadLength + 2
001B94 C02D F00A      00066         movff   mlRxReceivedPacket + 18, mlPayloadLength + 3
                      00067         ; test checksum, exit if bad
001B98 EC?? F???      00068         call    mootloader_rxTestSinglePacketChecksum
001B9C A215           00069         btfss   mlFlags, mlRxChecksumOk, ACCESS
001B9E D???           00070         bra             mootLoader_signalErrorA
                      00071         
                      00072         ; load table pointer with start address
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 220


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001BA0 C003 FFF6      00073         movff   mlStartAddress + 0, TBLPTRL
001BA4 C004 FFF7      00074         movff   mlStartAddress + 1, TBLPTRH
001BA8 C005 FFF8      00075         movff   mlStartAddress + 2, TBLPTRU
                      00076 
001BAC                00077 mootLoader_rxWpmhBlockErase
                      00078         ; point to Flash Program Memory
001BAC 8EA6           00079         bsf             EECON1, EEPGD, ACCESS
                      00080         ; access Flash Program Memory
001BAE 9CA6           00081         bcf             EECON1, CFGS, ACCESS
                      00082         ; enable write to memory
001BB0 84A6           00083         bsf             EECON1, WREN, ACCESS
                      00084         ; enable erase operation
001BB2 88A6           00085         bsf             EECON1, FREE, ACCESS
                      00086         ; do require sequence
001BB4 0E55           00087         movlw   0x55
001BB6 6EA7           00088         movwf   EECON2, ACCESS
001BB8 0EAA           00089         movlw   0xAA
001BBA 6EA7           00090         movwf   EECON2, ACCESS
                      00091         ; start write, CPU will stall
001BBC 82A6           00092         bsf             EECON1, WR, ACCESS
                      00093         ; dummy read decrement to reset TBLPTR. Don't know why this is necessary but sure enough...
                      00094         ; without it all my writes were off by one address. Is included in datasheet example code
001BBE 000A           00095         tblrd*-
                      00096                 
                      00097         ; get next packet
001BC0                00098 mootLoader_rxWpmhGetNextPacket
001BC0 EC?? F???      00099         call    mootLoader_rxReceiveNextPacket
                      00100         
                      00101         ; toggle all LEDs to indicate activity
                      00102         LED_ALL_TOGGLE
                          M         LED_SINE_TOGGLE
001BC4 768B               M         btg             LATC, RC3, ACCESS       ; SINE LED
                          M         LED_SQUARE_TOGGLE
001BC6 788B               M         btg             LATC, RC4, ACCESS       ; SQUARE LED
                          M         LED_SAMPLE_TOGGLE
001BC8 7A89               M         btg             LATA, RA5, ACCESS       ; SAMPLE LED
                      00103         
                      00104         ; if data payload complete then reset device
001BCA 0E02           00105         movlw   ML_COMMAND_DATA_PAYLOAD_COMPLETE
001BCC 181E           00106         xorwf   mlRxReceivedPacket + 3, w, ACCESS
001BCE E0??           00107         bz              mootLoader_rxReceiverResetHandler
                      00108         ; if data payload then confirm checksum and then write data
001BD0 0E01           00109         movlw   ML_COMMAND_DATA_PAYLOAD
001BD2 181E           00110         xorwf   mlRxReceivedPacket + 3, w, ACCESS
                      00111         ; if not data payload then exit with error
001BD4 E1??           00112         bnz             mootLoader_signalErrorB
                      00113         ; is data payload so test checksum
001BD6 EC?? F???      00114         call    mootloader_rxTestSinglePacketChecksum
001BDA A215           00115         btfss   mlFlags, mlRxChecksumOk, ACCESS
                      00116         ; checksum bad so exit with error
001BDC D???           00117         bra             mootLoader_signalErrorC
                      00118         ; everything is ok so write the payload
                      00119         
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 221


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00120         ; write payload to holding registers
001BDE C01F FFF5      00121         movff   mlRxReceivedPacket + 4, TABLAT
001BE2 000F           00122         tblwt+*
001BE4 C021 FFF5      00123         movff   mlRxReceivedPacket + 6, TABLAT
001BE8 000F           00124         tblwt+*
001BEA C023 FFF5      00125         movff   mlRxReceivedPacket + 8, TABLAT
001BEE 000F           00126         tblwt+*
001BF0 C025 FFF5      00127         movff   mlRxReceivedPacket + 10, TABLAT
001BF4 000F           00128         tblwt+*
001BF6 C027 FFF5      00129         movff   mlRxReceivedPacket + 12, TABLAT
001BFA 000F           00130         tblwt+*
001BFC C029 FFF5      00131         movff   mlRxReceivedPacket + 14, TABLAT
001C00 000F           00132         tblwt+*
001C02 C02B FFF5      00133         movff   mlRxReceivedPacket + 16, TABLAT
001C06 000F           00134         tblwt+*
001C08 C02D FFF5      00135         movff   mlRxReceivedPacket + 18, TABLAT
001C0C 000F           00136         tblwt+*
                      00137                 
                      00138         ; write holding register to flash memory
                      00139         ; point to Flash Program Memory
001C0E 8EA6           00140         bsf             EECON1, EEPGD, ACCESS
                      00141         ; access Flash Program Memory
001C10 9CA6           00142         bcf             EECON1, CFGS, ACCESS
                      00143         ; enable write to memory
001C12 84A6           00144         bsf             EECON1, WREN, ACCESS
                      00145         ; do require sequence
001C14 0E55           00146         movlw   0x55
001C16 6EA7           00147         movwf   EECON2, ACCESS
001C18 0EAA           00148         movlw   0xAA
001C1A 6EA7           00149         movwf   EECON2, ACCESS
                      00150         ; start write, CPU will stall
001C1C 82A6           00151         bsf             EECON1, WR, ACCESS      
                      00152         
                      00153 ; DEBUG
                      00154 ;       movlw   0
                      00155 ;       call    mootloader_rxWriteRxPacketToEE
                      00156 ;       bra             mootLoader_rxWpmhExit
                      00157 
                      00158         ; do block erase on every 64-byte boundary
                      00159         ; if(!(TBLPTRL & 0x3f)){doBlockErase();}
001C1E 0E3F           00160         movlw   0x3f
001C20 14F6           00161         andwf   TBLPTRL, w, ACCESS
001C22 E0??           00162         bz              mootLoader_rxWpmhBlockErase
001C24 D???           00163         bra             mootLoader_rxWpmhGetNextPacket
                      00164         
001C26                00165 mootLoader_rxWpmhExit
001C26 EF?? F???      00166         goto    mootLoader_exit
                      00167 
                      00168 
                      00169 ;**********************************************************************
                      00170 ; Local Function: void mootLoader_signalErrorA()
                      00171 ;**********************************************************************
001C2A                00172 mootLoader_signalErrorA
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 222


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00173         LED_SINE_TOGGLE_OTHERS_OFF
                          M         LED_SINE_TOGGLE
001C2A 768B               M         btg             LATC, RC3, ACCESS       ; SINE LED
                          M         LED_SQUARE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
001C2C 988B               M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
001C2E 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
001C30 6A13           00174         clrf    mlCount, ACCESS
001C32 0E10           00175         movlw   0x10
001C34 6E14           00176         movwf   mlCount + 1, ACCESS
001C36                00177 mootLoader_signalErrorALp1
                      00178         ; clear interrupt flag
001C36 929E           00179         bcf             PIR1, TMR2IF, ACCESS    
001C38                00180 mootLoader_signalErrorALp2
                      00181         ; wait for timer2 overflow
001C38 A29E           00182         btfss   PIR1, TMR2IF, ACCESS
001C3A D???           00183         bra             mootLoader_signalErrorALp2
001C3C 0613           00184         decf    mlCount, f, ACCESS
001C3E B4D8           00185         btfsc   STATUS, Z, ACCESS
001C40 2E14           00186         decfsz  mlCount + 1
001C42 D???           00187         bra             mootLoader_signalErrorALp1
                      00188         ; loop forever
001C44 D???           00189         bra             mootLoader_signalErrorA
                      00190 ;**********************************************************************
                      00191 ; Local Function: void mootLoader_signalErrorB()
                      00192 ;**********************************************************************
001C46                00193 mootLoader_signalErrorB
                      00194 ; DEBUG - write received packet to eeprom
001C46 EE10 F01B      00195         lfsr    FSR1, mlRxReceivedPacket
001C4A 6A3F           00196         clrf    mlEepromAddress, ACCESS
Warning[208]: Label truncated at 32 characters. (mootLoader_SebWriteReceivedPacketToEEPROMLp)
001C4C                00197 mootLoader_SebWriteReceivedPacketToEEPROMLp
                      00198         WRITE_INTERNAL_EEPROM_FROM_REGS mlEepromAddress, POSTINC1
  0000                    M         local   writeIntEE_loop
                          M         
                          M         ; load address
001C4C C03F FFA9          M         movff   mlEepromAddress, EEADR
                          M         ; load value
001C50 CFE6 FFA8          M         movff   POSTINC1, EEDATA
                          M         ; configure eeprom
                          M         ; point to EEPROM DATA memory
001C54 9EA6               M         bcf             EECON1, EEPGD, ACCESS
                          M         ; Access EEPROM/Program
001C56 9CA6               M         bcf             EECON1, CFGS, ACCESS    
                          M         ; Enable writes
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 223


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C58 84A6               M         bsf             EECON1, WREN, ACCESS
                          M 
                          M         ; don't have to disable interrupts because I'm only calling this
                          M         ; from within the high-priority ISR
                          M 
                          M         ; required write enable sequence
001C5A 0E55               M         movlw   0x55
001C5C 6EA7               M         movwf   EECON2, ACCESS
001C5E 0EAA               M         movlw   0xAA
001C60 6EA7               M         movwf   EECON2, ACCESS
                          M 
                          M         ; set WR bit to begin write
001C62 82A6               M         bsf             EECON1, WR, ACCESS
001C64                    M writeIntEE_loop
                          M         ; wait for write to complete
001C64 B2A6               M         btfsc   EECON1, WR, ACCESS
001C66 D???               M         bra             writeIntEE_loop
                          M         ; disable writes
001C68 94A6               M         bcf             EECON1, WREN, ACCESS
                          M 
                          M         ; point to Program memory
001C6A 8EA6               M         bsf             EECON1, EEPGD, ACCESS
                          M 
                      00199         ; write data
001C6C 2A3F           00200         incf    mlEepromAddress, f, ACCESS
001C6E 0E16           00201         movlw   ML_LARGE_PACKET_BYTE_SIZE
001C70 623F           00202         cpfseq  mlEepromAddress, ACCESS
001C72 D???           00203         bra             mootLoader_SebWriteReceivedPacketToEEPROMLp
                      00204 
001C74                00205 mootLoader_signalErrorBLp0
                      00206         LED_SQUARE_TOGGLE_OTHERS_OFF
                          M         LED_SINE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
001C74 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_TOGGLE
001C76 788B               M         btg             LATC, RC4, ACCESS       ; SQUARE LED
                          M         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
001C78 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
001C7A 6A13           00207         clrf    mlCount, ACCESS
001C7C 0E10           00208         movlw   0x10
001C7E 6E14           00209         movwf   mlCount + 1, ACCESS
001C80                00210 mootLoader_signalErrorBLp1
                      00211         ; clear interrupt flag
001C80 929E           00212         bcf             PIR1, TMR2IF, ACCESS    
001C82                00213 mootLoader_signalErrorBLp2
                      00214         ; wait for timer2 overflow
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 224


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C82 A29E           00215         btfss   PIR1, TMR2IF, ACCESS
001C84 D???           00216         bra             mootLoader_signalErrorBLp2
001C86 0613           00217         decf    mlCount, f, ACCESS
001C88 B4D8           00218         btfsc   STATUS, Z, ACCESS
001C8A 2E14           00219         decfsz  mlCount + 1
001C8C D???           00220         bra             mootLoader_signalErrorBLp1
                      00221         ; loop forever
001C8E D???           00222         bra             mootLoader_signalErrorBLp0
                      00223 ;**********************************************************************
                      00224 ; Local Function: void mootLoader_signalErrorC()
                      00225 ;**********************************************************************
001C90                00226 mootLoader_signalErrorC
                      00227         LED_SAMPLE_TOGGLE_OTHERS_OFF
                          M         LED_SINE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
001C90 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
001C92 988B               M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_TOGGLE
001C94 7A89               M         btg             LATA, RA5, ACCESS       ; SAMPLE LED
001C96 6A13           00228         clrf    mlCount, ACCESS
001C98 0E10           00229         movlw   0x10
001C9A 6E14           00230         movwf   mlCount + 1, ACCESS
001C9C                00231 mootLoader_signalErrorCLp1
                      00232         ; clear interrupt flag
001C9C 929E           00233         bcf             PIR1, TMR2IF, ACCESS    
001C9E                00234 mootLoader_signalErrorCLp2
                      00235         ; wait for timer2 overflow
001C9E A29E           00236         btfss   PIR1, TMR2IF, ACCESS
001CA0 D???           00237         bra             mootLoader_signalErrorCLp2
001CA2 0613           00238         decf    mlCount, f, ACCESS
001CA4 B4D8           00239         btfsc   STATUS, Z, ACCESS
001CA6 2E14           00240         decfsz  mlCount + 1
001CA8 D???           00241         bra             mootLoader_signalErrorCLp1
                      00242         ; loop forever
001CAA D???           00243         bra             mootLoader_signalErrorC
                      00244         
                      00245 
                      00246 ;**********************************************************************
                      00247 ; Local Function: void mootLoader_rxReceiverResetHandler()
                      00248 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_rxReceiverResetHandler)
001CAC                00249 mootLoader_rxReceiverResetHandler
                      00250         ; received bytes are forwarded to UART output for chaining devices so
                      00251         ; make sure that you don't reset until last byte is transmitted 
001CAC A89E           00252         btfss   PIR1, TXIF, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 225


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001CAE D???           00253         bra             mootLoader_rxReceiverResetHandler
001CB0 00FF           00254         reset
                      00255 
                      00256 
                      00257 ;**********************************************************************
                      00258 ; Local Function: void mootloader_rxTestSinglePacketChecksum()
                      00259 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootloader_rxTestSinglePacketChecksum)
001CB2                00260 mootloader_rxTestSinglePacketChecksum
                      00261         ; pre-clear checksumOk flag
001CB2 9215           00262         bcf             mlFlags, mlRxChecksumOk, ACCESS
                      00263         ; calculate checksum for single packet
001CB4 501E           00264         movf    mlRxReceivedPacket + 3, w, ACCESS
001CB6 181F           00265         xorwf   mlRxReceivedPacket + 4, w, ACCESS
001CB8 1821           00266         xorwf   mlRxReceivedPacket + 6, w, ACCESS
001CBA 1823           00267         xorwf   mlRxReceivedPacket + 8, w, ACCESS
001CBC 1825           00268         xorwf   mlRxReceivedPacket + 10, w, ACCESS
001CBE 1827           00269         xorwf   mlRxReceivedPacket + 12, w, ACCESS
001CC0 1829           00270         xorwf   mlRxReceivedPacket + 14, w, ACCESS
001CC2 182B           00271         xorwf   mlRxReceivedPacket + 16, w, ACCESS
001CC4 182D           00272         xorwf   mlRxReceivedPacket + 18, w, ACCESS
                      00273         ; xor mlRxReceivedPacket[8:0] with checksum in mlRxReceivedPacket[9]
001CC6 0B7F           00274         andlw   0x7F
001CC8 182F           00275         xorwf   mlRxReceivedPacket + 20, w, ACCESS
                      00276         ; if result is 0 then checksum if NOT ok so skip
001CCA B4D8           00277         btfsc   STATUS, Z, ACCESS
001CCC 8215           00278         bsf             mlFlags, mlRxChecksumOk, ACCESS
001CCE 0012           00279         return
                      00280 
                      00281 
                      00282 ;**********************************************************************
                      00283 ; Local Function: void mootLoader_rxReceiveNextPacket()
                      00284 ;**********************************************************************
001CD0                00285 mootLoader_rxReceiveNextPacket
                      00286         PUSH_R  FSR0L
001CD0 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00287         PUSH_R  FSR0H   
001CD4 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
001CD8 EE00 F01B      00288         lfsr    FSR0, mlRxReceivedPacket
                      00289 
001CDC 6A31           00290         clrf    mlRxReceivedPacketByteCount, ACCESS
                      00291         
                      00292         ; get next SysEx packet
                      00293 
                      00294         ; mootloader only responds to SysEx so wait for start value of 0xF0
Warning[208]: Label truncated at 32 characters. (mootLoader_rxReceiveNextPacketWaitF0)
001CDE                00295 mootLoader_rxReceiveNextPacketWaitF0
001CDE EC?? F???      00296         call    mootLoader_rxReceiveNextByte
001CE2 0EF0           00297         movlw   0xF0
001CE4 6232           00298         cpfseq  mlRxReceivedByte, ACCESS
001CE6 D???           00299         bra             mootLoader_rxReceiveNextPacketWaitF0
                      00300         ; received 0xF0 so continue
001CE8 C032 FFEE      00301         movff   mlRxReceivedByte, POSTINC0
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 226


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00302         
                      00303         ; continue receiving balance of ML_LARGE_PACKET_BYTE_SIZE number of bytes
                      00304         ; init count
001CEC 0E15           00305         movlw   ML_LARGE_PACKET_BYTE_SIZE - 1
001CEE 6E31           00306         movwf   mlRxReceivedPacketByteCount, ACCESS
001CF0                00307 mootLoader_rxRnpPayloadLp
001CF0 EC?? F???      00308         call    mootLoader_rxReceiveNextByte
001CF4 C032 FFEE      00309         movff   mlRxReceivedByte, POSTINC0
001CF8 2E31           00310         decfsz  mlRxReceivedPacketByteCount, f, ACCESS
001CFA D???           00311         bra             mootLoader_rxRnpPayloadLp
                      00312 
                      00313         ; make each data payload nybble index equal to reconstituted byte value
                      00314         ; point to start of data payload
001CFC EE00 F01F      00315         lfsr    FSR0, mlRxReceivedPacket + 4
                      00316         ; load count to de-nybble 8 bytes
001D00 0E08           00317         movlw   8
001D02 6E31           00318         movwf   mlRxReceivedPacketByteCount, ACCESS
Warning[208]: Label truncated at 32 characters. (mootLoader_rxRnpPayloadDe_nybbleLp)
001D04                00319 mootLoader_rxRnpPayloadDe_nybbleLp
                      00320         ; swap and read high nybble into WREG
001D04 0E01           00321         movlw   1
001D06 38EB           00322         swapf   PLUSW0, w, ACCESS
                      00323         ; or high nybble and low nybble, save in WREG
001D08 10EF           00324         iorwf   INDF0, w, ACCESS
                      00325         ; save complete value in low nybble location and postinc to high nybble
001D0A 6EEE           00326         movwf   POSTINC0, ACCESS
                      00327         ; save complete value in high nybble location and postinc to next low nybble
001D0C 6EEE           00328         movwf   POSTINC0, ACCESS
001D0E 2E31           00329         decfsz  mlRxReceivedPacketByteCount, f, ACCESS
001D10 D???           00330         bra             mootLoader_rxRnpPayloadDe_nybbleLp      
                      00331         
                      00332         POP_R   FSR0H   
001D12 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00333         POP_R   FSR0L
001D16 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
001D1A 0012           00334         return
                      00335         
                      00336 
                      00337 ;**********************************************************************
                      00338 ; Local Function: void mootloader_rxReceiveNextByte()
                      00339 ;**********************************************************************
001D1C                00340 mootLoader_rxReceiveNextByte
                      00341         ; skip if receive flag is set
001D1C AA9E           00342         btfss   PIR1, RCIF, ACCESS
001D1E D???           00343         bra             mootLoader_rxReceiveNextByte
                      00344         
Warning[208]: Label truncated at 32 characters. (mootLoader_rxReceiveNextByteReadFIFO)
001D20                00345 mootLoader_rxReceiveNextByteReadFIFO
                      00346         ; skip if framing error occurred for top unread char in rx FIFO
001D20 A4AB           00347         btfss   RCSTA, FERR, ACCESS
                      00348         ; no framing error so read the character
001D22 D???           00349         bra             mootLoader_rxReceiveNextByteGO
                      00350         ; framing error occurred
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 227


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00351         ; read incorrectly framed character out of FIFO
001D24 50AE           00352         movf    RCREG, w, ACCESS
                      00353         ; skip if rx FIFO is empty
001D26 BA9E           00354         btfsc   PIR1, RCIF, ACCESS
                      00355         ; FIFO is not empty so try next character
001D28 D???           00356         bra             mootLoader_rxReceiveNextByteReadFIFO
                      00357         ; all characters in FIFO were incorrectly framed, no data to process
                      00358         ; attempt to remedy: reset UART receiver by toggling Continous Receive Enable bit
001D2A 98AB           00359         bcf             RCSTA, CREN, ACCESS
001D2C 88AB           00360         bsf             RCSTA, CREN, ACCESS
                      00361         ; need to receive a good data so try again
001D2E EF?? F???      00362         goto    mootLoader_rxReceiveNextByte
001D32                00363 mootLoader_rxReceiveNextByteGO
                      00364         ; read the byte
001D32 CFAE F032      00365         movff   RCREG, mlRxReceivedByte
                      00366 
                      00367         ; echo received byte to UART output
001D36 C032 FFAD      00368         movff   mlRxReceivedByte, TXREG
                      00369 
001D3A 0012           00370         return
                      00371 
                      00372         
001D3C                00168 mootLoader_restore
001D3C EF?? F???      00169         goto    mootLoader_exit
                      00170         
                      00346 
                      00347         END
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 228


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
ABDEN                             00000000
ABDOVF                            00000007
ACCESS                            00000000
ACCUMULATORS_ELEMENT_SIZE         4
ACCUMULATORS_SIZE                 MAX_POLY_DEPTH * ACCUMULATORS_ELEMENT_SIZE
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
ACTIVE_NOTE_DELTAS_ELEMENT_SIZE   2
ACTIVE_NOTE_DELTAS_SIZE           MAX_POLY_DEPTH * ACTIVE_NOTE_DELTAS_ELEMENT_SIZE
ACTIVE_NOTE_TABLE_SIZE            25
ACTIVE_OUTPUT_VALUES_EL_SIZE      1
ACTIVE_OUTPUT_VALUES_SIZE         MAX_POLY_DEPTH * ACTIVE_OUTPUT_VALUES_EL_SIZE
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCON2                            00000FC0
ADCS0                             00000000
ADCS1                             00000001
ADCS2                             00000002
ADDEN                             00000003
ADEN                              00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADON                              00000000
ADRES                             00000FC3
ADRESH                            00000FC4
ADRESL                            00000FC3
ADSR_ATTACK_RATE                  63
ADSR_PRESCALE                     610
ADSR_RELEASE_RATE                 16
AFTERTOUCH_COMPLETE               DATA_BYTE1
ALL_NOTES_OFF                     123
ALL_SOUND_OFF                     120
AN0                               00000000
AN1                               00000001
AN10                              00000004
AN11                              00000005
AN2                               00000002
AN3                               00000004
AN4                               00000000
AN5                               00000001
AN6                               00000002
AN7                               00000003
AN8                               00000006
AN9                               00000007
ANS0                              00000000
ANS1                              00000001
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 229


SYMBOL TABLE
  LABEL                             VALUE 

ANS10                             00000002
ANS11                             00000003
ANS2                              00000002
ANS3                              00000003
ANS4                              00000004
ANS5                              00000005
ANS6                              00000006
ANS7                              00000007
ANS8                              00000000
ANS9                              00000001
ANSEL                             00000F7E
ANSEL0                            00000000
ANSEL1                            00000001
ANSEL10                           00000002
ANSEL11                           00000003
ANSEL2                            00000002
ANSEL3                            00000003
ANSEL4                            00000004
ANSEL5                            00000005
ANSEL6                            00000006
ANSEL7                            00000007
ANSEL8                            00000000
ANSEL9                            00000001
ANSELH                            00000F7F
ASSERT_SS                         
BALANCE_LSB                       40
BALANCE_MSB                       8
BANKED                            00000001
BANK_SELECT_LSB                   32
BANK_SELECT_MSB                   0
BAUDCON                           00000FB8
BAUDCTL                           00000FB8
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BF                                00000000
BOR                               00000000
BP0                               2
BP1                               3
BREATH_CONTROLLER_LSB             34
BREATH_CONTROLLER_MSB             2
BRG16                             00000003
BRGH                              00000002
BSR                               00000FE0
C                                 00000000
C12IN0M                           00000001
C12IN1M                           00000001
C12IN2M                           00000002
C12IN3M                           00000003
C12INP                            00000000
C12OUT                            00000004
C1CH0                             00000000
C1CH1                             00000001
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 230


SYMBOL TABLE
  LABEL                             VALUE 

C1HYS                             00000003
C1IE                              00000006
C1IF                              00000006
C1INP                             00000000
C1IP                              00000006
C1OE                              00000005
C1ON                              00000007
C1OUT_CM1CON0                     00000006
C1OUT_PORTA                       00000002
C1POL                             00000004
C1R                               00000002
C1RSEL                            00000005
C1SP                              00000003
C1SYNC                            00000001
C2CH0                             00000000
C2CH1                             00000001
C2HYS                             00000002
C2IE                              00000005
C2IF                              00000005
C2INP                             00000000
C2IP                              00000005
C2OE                              00000005
C2ON                              00000007
C2OUT_CM2CON0                     00000006
C2OUT_PORTC                       00000004
C2POL                             00000004
C2R                               00000002
C2RSEL                            00000004
C2SP                              00000003
C2SYNC                            00000000
CCP1                              00000005
CCP1CON                           00000FBD
CCP1IE                            00000002
CCP1IF                            00000002
CCP1IP                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCPR1                             00000FBE
CCPR1H                            00000FBF
CCPR1L                            00000FBE
CFGS                              00000006
CHANNEL                           0x00
CHANNEL_PRESSURE                  0xD0
CHANNEL_PRESSURE_MESSAGE_LENGTH   2
CHANNEL_VOLUME_LSB                39
CHANNEL_VOLUME_MSB                7
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CK                                00000007
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 231


SYMBOL TABLE
  LABEL                             VALUE 

CKE                               00000006
CKP                               00000004
CKTXP                             00000004
CLEAR_ACCUMULATORS                
CLKIN                             00000005
CLKOUT                            00000004
CM1CON0                           00000F6D
CM2CON0                           00000F6B
CM2CON1                           00000F6C
CONFIG_INC                        
CONTROL_CHANGE                    0xB0
CONTROL_CHANGE_COMPLETE           DATA_BYTE1
CONTROL_CHANGE_MESSAGE_LENGTH     3
CREN                              00000004
CSRC                              00000007
CVREF                             00000000
D                                 00000005
D1EN                              00000007
D1LPS                             00000006
D1NSS                             00000000
D1NSS0                            00000000
D1PSS0                            00000002
D1PSS1                            00000003
DAC1OE                            00000005
DAC1R0                            00000000
DAC1R1                            00000001
DAC1R2                            00000002
DAC1R3                            00000003
DAC1R4                            00000004
DATA_BYTE0                        0x01
DATA_BYTE1                        0x02
DATA_DECREMENT                    97
DATA_ENTRY_LSB                    38
DATA_ENTRY_MSB                    6
DATA_INCREMENT                    96
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DDRA                              TRISA
DDRB                              TRISB
DDRC                              TRISC
DDRD                              TRISD
DDRE                              TRISE
DEASSERT_SS                       
DELEGATED_DELTAS_ELEMENT_SIZE     2
DELEGATED_DELTAS_SIZE             MAX_POLY_DEPTH * DELEGATED_DELTAS_ELEMENT_SIZE
DEVICE_ID                         0x1D
DISABLE_SUSTAIN                   
DONE                              00000001
DTRXP                             00000005
D_A                               00000005
D_NOT_A                           00000005
ECCP1AS                           00000FB6
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 232


SYMBOL TABLE
  LABEL                             VALUE 

ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
EEADR                             00000FA9
EEADR0                            00000000
EEADR1                            00000001
EEADR2                            00000002
EEADR3                            00000003
EEADR4                            00000004
EEADR5                            00000005
EEADR6                            00000006
EEADR7                            00000007
EECON1                            00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEIE                              00000004
EEIF                              00000004
EEIP                              00000004
EEPGD                             00000007
EEPROM_SIZE_BITS                  128000
EE_DISABLE_INTS                   
EE_RDSR                           B'00000101'
EE_READ                           B'00000011'
EE_RESTORE_INTS                   
EE_WRDI                           B'00000100'
EE_WREN                           B'00000110'
EE_WRITE                          B'00000010'
EE_WRSR                           B'00000001'
EFFECTS_1_DEPTH_DEFAULT_REVERB_S  91
EFFECTS_2_DEPTH_DEFAULT_TREMOLO_  92
EFFECTS_3_DEPTH_DEFAULT_CHORUS_S  93
EFFECTS_4_DEPTH_DEFAULT_CELESTE_  94
EFFECTS_5_DEPTH_DEFAULT_PHASER_D  95
EFFECT_CONTROL_1_LSB              44
EFFECT_CONTROL_1_MSB              12
EFFECT_CONTROL_2_LSB              45
EFFECT_CONTROL_2_MSB              13
ENABLE_SUSTAIN                    
EOX                               0xF7
EXPRESSION_LSB                    43
EXPRESSION_MSB                    11
FAST                              00000001
FERR                              00000002
FLTS                              00000002
FOOT_CONTROLLER_LSB               36
FOOT_CONTROLLER_MSB               4
FREE                              00000004
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
FSR1H                             00000FE2
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 233


SYMBOL TABLE
  LABEL                             VALUE 

FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
FVR1EN                            00000007
FVR1S0                            00000004
FVR1S1                            00000005
FVR1ST                            00000006
GCEN                              00000007
GENERAL_INFORMATION               0x06
GENERAL_PURPOSE_CONTROLLER_1_LSB  48
GENERAL_PURPOSE_CONTROLLER_1_MSB  16
GENERAL_PURPOSE_CONTROLLER_2_LSB  49
GENERAL_PURPOSE_CONTROLLER_2_MSB  17
GENERAL_PURPOSE_CONTROLLER_3_LSB  50
GENERAL_PURPOSE_CONTROLLER_3_MSB  18
GENERAL_PURPOSE_CONTROLLER_4_LSB  51
GENERAL_PURPOSE_CONTROLLER_4_MSB  19
GENERAL_PURPOSE_CONTROLLER_5      80
GENERAL_PURPOSE_CONTROLLER_6      81
GENERAL_PURPOSE_CONTROLLER_7      82
GENERAL_PURPOSE_CONTROLLER_8      83
GIE                               00000007
GIEH                              00000007
GIEL                              00000006
GIE_GIEH                          00000007
GO                                00000001
GO_DONE                           00000001
GO_NOT_DONE                       00000001
HFIOFL                            00000001
HFIOFS                            00000002
HOLD_2                            69
IDENTITY_REPLY                    0x02
IDENTITY_REQUEST                  0x01
IDLEN                             00000007
IDLE_BLOCK_ERASE                  
IDLE_WRITE_WAIT                   
INC_PRESCALE_COUNTERS             
INDF0                             00000FEF
INDF1                             00000FE7
INDF2                             00000FDF
INT0                              00000000
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1                              00000001
INT1E                             00000003
INT1F                             00000000
INT1IE                            00000003
INT1IF                            00000000
INT1IP                            00000006
INT1P                             00000006
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 234


SYMBOL TABLE
  LABEL                             VALUE 

INT2                              00000002
INT2E                             00000004
INT2F                             00000001
INT2IE                            00000004
INT2IF                            00000001
INT2IP                            00000007
INT2P                             00000007
INTCON                            00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
INTSRC                            00000007
IOCA                              00000F79
IOCA0                             00000000
IOCA1                             00000001
IOCA2                             00000002
IOCA3                             00000003
IOCA4                             00000004
IOCA5                             00000005
IOCB                              00000F7A
IOCB4                             00000004
IOCB5                             00000005
IOCB6                             00000006
IOCB7                             00000007
IPEN                              00000007
IPR1                              00000F9F
IPR2                              00000FA2
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
KEY_PRESSURE                      0xA0
KEY_PRESSURE_MESSAGE_LENGTH       3
LATA                              00000F89
LATA0                             00000000
LATA1                             00000001
LATA2                             00000002
LATA4                             00000004
LATA5                             00000005
LATB                              00000F8A
LATB4                             00000004
LATB5                             00000005
LATB6                             00000006
LATB7                             00000007
LATC                              00000F8B
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LATC6                             00000006
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 235


SYMBOL TABLE
  LABEL                             VALUE 

LATC7                             00000007
LED_ALL_OFF                       
LED_ALL_ON                        
LED_ALL_TOGGLE                    
LED_BLINK_RATE_VOICE_RECORD       6
LED_BLINK_RATE_VOICE_THROUGH      20
LED_ONLY_SAMPLE_ON                
LED_ONLY_SINE_ON                  
LED_ONLY_SQUARE_ON                
LED_POLARITY_REVERSED             
LED_SAMPLE_OFF                    
LED_SAMPLE_ON                     
LED_SAMPLE_TOGGLE                 
LED_SAMPLE_TOGGLE_OTHERS_OFF      
LED_SINE_OFF                      
LED_SINE_ON                       
LED_SINE_TOGGLE                   
LED_SINE_TOGGLE_OTHERS_OFF        
LED_SQUARE_OFF                    
LED_SQUARE_ON                     
LED_SQUARE_TOGGLE                 
LED_SQUARE_TOGGLE_OTHERS_OFF      
LEGATO_FOOTSWITCH                 68
LEVEL_MONO_LED_BLINK_RATE         1
LEVEL_POLY_LED_BLINK_RATE         0
LEVEL_SUSTAIN_LED_BLINK_RATE      2
LFIOFS                            00000000
LOCAL_CONTROL_ONOFF               122
MAX_MIDI_MESSAGE_SIZE             24
MAX_MODE_LEVEL                    MONO
MAX_POLY_DEPTH                    4
MC1OUT                            00000007
MC2OUT                            00000006
MCLR                              00000003
MESSAGE_COMPLETE                  0xFF
MIDI_DEVICE_ID                    0x1D
MIDI_VENDOR_ID                    0x77
ML_BLOCK_ERASE_BYTE_SIZE          64
ML_BLOCK_ERASE_IDLE_TIME_MS       8
ML_COMMAND_DATA_PAYLOAD           0x01
ML_COMMAND_DATA_PAYLOAD_COMPLETE  0x02
ML_COMMAND_WRITE_PROGRAM_MEMORY   0x03
ML_DATA_PACKET_PAYLOAD_BYTE_SIZE  8
ML_LARGE_PACKET_BYTE_SIZE         22
ML_RECEIVER_RESET                 0x11
ML_TRANSMITTER_RESETTING          0x10
ML_TRANS_SYNC_IDLE_TIME_MS        32
ML_WRITE_IDLE_TIME_MS             8
MODULATION_WHEEL_LSB              33
MODULATION_WHEEL_MSB              1
MONO                              2
MSK0                              00000000
MSK1                              00000001
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 236


SYMBOL TABLE
  LABEL                             VALUE 

MSK2                              00000002
MSK3                              00000003
MSK4                              00000004
MSK5                              00000005
MSK6                              00000006
MSK7                              00000007
N                                 00000004
NEXT_SAMPLE_ADDRESSES_EL_SIZE     2
NON_REAL_TIME                     0x7E
NON_REG_PARAMETER_NUMBER_LSB      98
NON_REG_PARAMETER_NUMBER_MSB      99
NOTE_COMPLETE                     DATA_BYTE1
NOTE_OFF                          0x80
NOTE_OFF_MESSAGE_LENGTH           3
NOTE_ON                           0x90
NOTE_ON_MESSAGE_LENGTH            3
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_DONE                          00000001
NOT_MCLR                          00000003
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RABPU                         00000007
NOT_RBPU                          00000007
NOT_RDY                           0
NOT_RI                            00000004
NOT_SS                            00000006
NOT_T1SYNC                        00000002
NOT_T3SYNC                        00000002
NOT_TO                            00000003
NOT_W                             00000002
NOT_WRITE                         00000002
NVCFG0                            00000000
NVCFG1                            00000001
OERR                              00000001
OMNI_MODE_OFF                     124
OMNI_MODE_ON                      125
OSC1                              00000005
OSC2                              00000004
OSCCON                            00000FD3
OSCCON2                           00000FD2
OSCFIE                            00000007
OSCFIF                            00000007
OSCFIP                            00000007
OSCTUNE                           00000F9B
OSC_ADVANCE_ADSR                  
OSC_DELTAS_ELEMENT_SIZE           2
OSC_DELTAS_SIZE                   MAX_POLY_DEPTH * OSC_DELTAS_ELEMENT_SIZE
OSC_MIX                           
OSC_READ_ADSR_FLAG                
OSC_STATE_BLOCK                   
OSC_TRANSITION_OUTPUT_THRESHOLD   0x04
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 237


SYMBOL TABLE
  LABEL                             VALUE 

OSTS                              00000003
OV                                00000003
P                                 00000004
P1A                               00000005
P1B                               00000004
P1C                               00000003
P1D                               00000002
P1M0                              00000006
P1M1                              00000007
PAN_LSB                           42
PAN_MSB                           10
PC                                00000FF9
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PD                                00000002
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PEIE_GIEL                         00000006
PEN                               00000002
PGC                               00000001
PGD                               00000000
PGM                               00000003
PIC18LF14K22                      
PIE1                              00000F9D
PIE2                              00000FA0
PIR1                              00000F9E
PIR2                              00000FA1
PITCH_WHEEL                       0xE0
PITCH_WHEEL_COMPLETE              DATA_BYTE1
PITCH_WHEEL_MESSAGE_LENGTH        3
PLAYBACK                          2
PLLEN                             00000006
PLUSW0                            00000FEB
PLUSW1                            00000FE3
PLUSW2                            00000FDB
POLY                              0
POLY_MODE_OFF                     126
POLY_MODE_ON                      127
POP_R                             
POR                               00000001
PORTA                             00000F80
PORTAMENTO_CONTROL                84
PORTAMENTO_ONOFF                  65
PORTAMENTO_TIME                   5
PORTAMENTO_TIME_LSB               37
PORTB                             00000F81
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 238


SYMBOL TABLE
  LABEL                             VALUE 

PORTC                             00000F82
POSTDEC0                          00000FED
POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PR2                               00000FCB
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PRI_SD                            00000002
PROD                              00000FF3
PRODH                             00000FF4
PRODL                             00000FF3
PROGRAM_CHANGE                    0xC0
PROGRAM_CHANGE_COMPLETE           DATA_BYTE0
PROGRAM_CHANGE_MESSAGE_LENGTH     2
PRSEN                             00000007
PSA                               00000003
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
PSTRCON                           00000FB9
PUSH_R                            
PVCFG0                            00000002
PVCFG1                            00000003
PWM1CON                           00000FB7
PWM_IDLE_OUTPUT_VALUE             0x80
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RABIE                             00000003
RABIF                             00000000
RABIP                             00000000
RABPU                             00000007
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RBIP                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 239


SYMBOL TABLE
  LABEL                             VALUE 

RC5                               00000005
RC6                               00000006
RC7                               00000007
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCON                              00000FD0
RCREG                             00000FAE
RCSTA                             00000FAB
RD                                00000000
RD16                              00000007
RECORD                            1
RECORD_BUTTON_RELEASE_WAIT_TIME   26
REFCON0                           00000FBA
REFCON1                           00000FBB
REFCON2                           00000FBC
REGISTERED_PARAMETER_NUMBERMSB    101
REGISTERED_PARAMETER_NUMBER_LSB   100
RESET_ALL_CONTROLLERS             121
REVERSE_SAMPLE_IF_MOD_OVER_63     
RI                                00000004
RSEN                              00000001
RX                                00000005
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SAMPLE                            2
SAMPLE_DATA_BUFFER_SIZE           64
SAMPLE_DC_OFFSET                  (PWM_IDLE_OUTPUT_VALUE - 74)
SAMPLE_PRESCALE                   6
SBOREN                            00000006
SCK                               00000006
SCKP                              00000004
SCL                               00000006
SCS0                              00000000
SCS1                              00000001
SDA                               00000004
SDI                               00000004
SDO                               00000007
SEN                               00000000
SENDB                             00000003
SEND_BYTE_DO_CHECKSUM             
SEND_BYTE_START_CHECKSUM          
SEND_CHECKSUM_CLEAR_RUN           
SEND_CHECKSUM_DO_RUN              
SEND_RUNNING_CHECKSUM             
SEND_SYSEX_INTRO_NO_CHECK         
SINE                              0
SLRA                              00000000
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 240


SYMBOL TABLE
  LABEL                             VALUE 

SLRB                              00000001
SLRC                              00000002
SLRCON                            00000F76
SMP                               00000007
SOFTWARESTACK_H                   
SOFT_PEDAL                        67
SOSTENUTO                         66
SOUND_CONTROLLER_10_GM2_DEFAULT_  79
SOUND_CONTROLLER_1_DEFAULT_SOUND  70
SOUND_CONTROLLER_2_DEFAULT_TIMBR  71
SOUND_CONTROLLER_3_DEFAULT_RELEA  72
SOUND_CONTROLLER_4_DEFAULT_ATTAC  73
SOUND_CONTROLLER_5_DEFAULT_BRIGH  74
SOUND_CONTROLLER_6_GM2_DEFAULT_D  75
SOUND_CONTROLLER_7_GM2_DEFAULT_V  76
SOUND_CONTROLLER_8_GM2_DEFAULT_V  77
SOUND_CONTROLLER_9_GM2_DEFAULT_V  78
SP0                               00000000
SP1                               00000001
SP2                               00000002
SP3                               00000003
SP4                               00000004
SPBRG                             00000FAF
SPBRGH                            00000FB0
SPEN                              00000007
SPLIT_BYTE_THEN_SEND_DO_CHECKSUM  
SQUARE                            1
SRCLK0                            00000004
SRCLK1                            00000005
SRCLK2                            00000006
SRCON0                            00000F68
SRCON1                            00000F69
SREN                              00000005
SRLEN                             00000007
SRNQEN                            00000002
SRPR                              00000000
SRPS                              00000001
SRQ                               00000002
SRQEN                             00000003
SRRC1E                            00000000
SRRC2E                            00000001
SRRCKE                            00000002
SRRPE                             00000003
SRSC1E                            00000004
SRSC2E                            00000005
SRSCKE                            00000006
SRSPE                             00000007
SS                                00000006
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON1                           00000FC6
SSPCON2                           00000FC5
SSPEN                             00000005
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 241


SYMBOL TABLE
  LABEL                             VALUE 

SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPMSK                            00000F6F
SSPOV                             00000006
SSPSTAT                           00000FC7
STATUS                            00000FD8
STKFUL                            00000007
STKOVF                            00000007
STKPTR                            00000FFC
STKUNF                            00000006
STRA                              00000000
STRB                              00000001
STRC                              00000002
STRD                              00000003
STRSYNC                           00000004
SUSTAIN                           1
SUSTAIN_PEDAL                     64
SWDTE                             00000000
SWDTEN                            00000000
SYNC                              00000004
SYSEX                             0xF0
T08BIT                            00000006
T0CKI                             00000002
T0CON                             00000FD5
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
T0SE                              00000004
T13CKI                            00000005
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000FCD
T1OSCEN                           00000003
T1RUN                             00000006
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FCA
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T3CCP1                            00000003
T3CKPS0                           00000004
T3CKPS1                           00000005
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 242


SYMBOL TABLE
  LABEL                             VALUE 

T3CON                             00000FB1
T3SYNC                            00000002
TABLAT                            00000FF5
TBLPTR                            00000FF6
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
TERMINAL_PACKET_COMMAND_VALUE     0x1E
THROUGH_HOLE_PCB                  
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
TMR0ON                            00000007
TMR1CS                            00000001
TMR1H                             00000FCF
TMR1IE                            00000000
TMR1IF                            00000000
TMR1IP                            00000000
TMR1L                             00000FCE
TMR1ON                            00000000
TMR2                              00000FCC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2ON                            00000002
TMR3CS                            00000001
TMR3H                             00000FB3
TMR3IE                            00000001
TMR3IF                            00000001
TMR3IP                            00000001
TMR3L                             00000FB2
TMR3ON                            00000000
TO                                00000003
TOS                               00000FFD
TOSH                              00000FFE
TOSL                              00000FFD
TOSU                              00000FFF
TRISA                             00000F92
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000F93
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000F94
TRISC0                            00000000
TRISC1                            00000001
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 243


SYMBOL TABLE
  LABEL                             VALUE 

TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRMT                              00000001
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TUN5                              00000005
TX                                00000007
TX9                               00000006
TX9D                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXIP                              00000004
TXREG                             00000FAD
TXSTA                             00000FAC
UA                                00000001
UNDEFINED_003                     3
UNDEFINED_014                     14
UNDEFINED_015                     15
UNDEFINED_020                     20
UNDEFINED_021                     21
UNDEFINED_022                     22
UNDEFINED_023                     23
UNDEFINED_024                     24
UNDEFINED_025                     25
UNDEFINED_026                     26
UNDEFINED_027                     27
UNDEFINED_028                     28
UNDEFINED_029                     29
UNDEFINED_030                     30
UNDEFINED_031                     31
UNDEFINED_035                     35
UNDEFINED_041                     41
UNDEFINED_046                     46
UNDEFINED_047                     47
UNDEFINED_052                     52
UNDEFINED_053                     53
UNDEFINED_054                     54
UNDEFINED_055                     55
UNDEFINED_056                     56
UNDEFINED_057                     57
UNDEFINED_058                     58
UNDEFINED_059                     59
UNDEFINED_060                     60
UNDEFINED_061                     61
UNDEFINED_062                     62
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 244


SYMBOL TABLE
  LABEL                             VALUE 

UNDEFINED_063                     63
UNDEFINED_102                     102
UNDEFINED_103                     103
UNDEFINED_104                     104
UNDEFINED_105                     105
UNDEFINED_106                     106
UNDEFINED_107                     107
UNDEFINED_108                     108
UNDEFINED_109                     109
UNDEFINED_110                     110
UNDEFINED_111                     111
UNDEFINED_112                     112
UNDEFINED_113                     113
UNDEFINED_114                     114
UNDEFINED_115                     115
UNDEFINED_116                     116
UNDEFINED_117                     117
UNDEFINED_118                     118
UNDEFINED_119                     119
UNDEFINED_85                      85
UNDEFINED_86                      86
UNDEFINED_87                      87
UNDEFINED_88                      88
UNDEFINED_89                      89
UNDEFINED_90                      90
UNDEFINED_MSB                     9
USER_CODE_START_ADDRESS           0x0040
VENDOR_ID                         0x77
VOICE_THROUGH                     0
VPP                               00000003
VREFCON0                          00000FBA
VREFCON1                          00000FBB
VREFCON2                          00000FBC
VREFM                             00000000
VREFP                             00000001
W                                 00000000
WAVE_PRESCALE                     2
WCOL                              00000007
WDTCON                            00000FD1
WEL                               1
WPEN                              7
WPUA                              00000F77
WPUA0                             00000000
WPUA1                             00000001
WPUA2                             00000002
WPUA3                             00000003
WPUA4                             00000004
WPUA5                             00000005
WPUB                              00000F78
WPUB4                             00000004
WPUB5                             00000005
WPUB6                             00000006
WPUB7                             00000007
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 245


SYMBOL TABLE
  LABEL                             VALUE 

WR                                00000001
WREG                              00000FE8
WREN                              00000002
WRERR                             00000003
WRITE_INTERNAL_EEPROM             
WRITE_INTERNAL_EEPROM_FROM_REGS   
WUE                               00000001
Z                                 00000002
_BBSIZ_OFF_4L                     000000F7
_BBSIZ_ON_4L                      000000FF
_BOREN_NOSLP_2L                   000000FD
_BOREN_OFF_2L                     000000F9
_BOREN_ON_2L                      000000FB
_BOREN_SBORDIS_2L                 000000FF
_BORV_19_2L                       000000FF
_BORV_22_2L                       000000F7
_BORV_27_2L                       000000EF
_BORV_30_2L                       000000E7
_CONFIG1H                         00300001
_CONFIG2H                         00300003
_CONFIG2L                         00300002
_CONFIG3H                         00300005
_CONFIG4L                         00300006
_CONFIG5H                         00300009
_CONFIG5L                         00300008
_CONFIG6H                         0030000B
_CONFIG6L                         0030000A
_CONFIG7H                         0030000D
_CONFIG7L                         0030000C
_CP0_OFF_5L                       000000FF
_CP0_ON_5L                        000000FE
_CP1_OFF_5L                       000000FF
_CP1_ON_5L                        000000FD
_CPB_OFF_5H                       000000FF
_CPB_ON_5H                        000000BF
_CPD_OFF_5H                       000000FF
_CPD_ON_5H                        0000007F
_DEBUG_OFF_4L                     000000FF
_DEBUG_ON_4L                      0000007F
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
_EBTR0_OFF_7L                     000000FF
_EBTR0_ON_7L                      000000FE
_EBTR1_OFF_7L                     000000FF
_EBTR1_ON_7L                      000000FD
_EBTRB_OFF_7H                     000000FF
_EBTRB_ON_7H                      000000BF
_EEPROMH_                         
_FCMEN_OFF_1H                     000000BF
_FCMEN_ON_1H                      000000FF
_FOSC_ECCLKOUTH_1H                000000F4
_FOSC_ECCLKOUTL_1H                000000FC
_FOSC_ECCLKOUTM_1H                000000FA
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 246


SYMBOL TABLE
  LABEL                             VALUE 

_FOSC_ECH_1H                      000000F5
_FOSC_ECL_1H                      000000FD
_FOSC_ECM_1H                      000000FB
_FOSC_ERCCLKOUT_1H                000000F3
_FOSC_ERC_1H                      000000F7
_FOSC_HS_1H                       000000F2
_FOSC_IRCCLKOUT_1H                000000F9
_FOSC_IRC_1H                      000000F8
_FOSC_LP_1H                       000000F0
_FOSC_XT_1H                       000000F1
_HFOFST_OFF_3H                    000000F7
_HFOFST_ON_3H                     000000FF
_IDLOC0                           00200000
_IDLOC1                           00200001
_IDLOC2                           00200002
_IDLOC3                           00200003
_IDLOC4                           00200004
_IDLOC5                           00200005
_IDLOC6                           00200006
_IDLOC7                           00200007
_IESO_OFF_1H                      0000007F
_IESO_ON_1H                       000000FF
_LVP_OFF_4L                       000000FB
_LVP_ON_4L                        000000FF
_MCLRE_OFF_3H                     0000007F
_MCLRE_ON_3H                      000000FF
_MIDIH_                           
_MOOTLOADERH_                     
_PCLKEN_OFF_1H                    000000DF
_PCLKEN_ON_1H                     000000FF
_PLLEN_OFF_1H                     000000EF
_PLLEN_ON_1H                      000000FF
_PWRTEN_OFF_2L                    000000FF
_PWRTEN_ON_2L                     000000FE
_SOUNDGENH_                       
_STVREN_OFF_4L                    000000FE
_STVREN_ON_4L                     000000FF
_USERINTERFACEH_                  
_WDTEN_OFF_2H                     000000FE
_WDTEN_ON_2H                      000000FF
_WDTPS_1024_2H                    000000F5
_WDTPS_128_2H                     000000EF
_WDTPS_16384_2H                   000000FD
_WDTPS_16_2H                      000000E9
_WDTPS_1_2H                       000000E1
_WDTPS_2048_2H                    000000F7
_WDTPS_256_2H                     000000F1
_WDTPS_2_2H                       000000E3
_WDTPS_32768_2H                   000000FF
_WDTPS_32_2H                      000000EB
_WDTPS_4096_2H                    000000F9
_WDTPS_4_2H                       000000E5
_WDTPS_512_2H                     000000F3
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 247


SYMBOL TABLE
  LABEL                             VALUE 

_WDTPS_64_2H                      000000ED
_WDTPS_8192_2H                    000000FB
_WDTPS_8_2H                       000000E7
_WRT0_OFF_6L                      000000FF
_WRT0_ON_6L                       000000FE
_WRT1_OFF_6L                      000000FF
_WRT1_ON_6L                       000000FD
_WRTB_OFF_6H                      000000FF
_WRTB_ON_6H                       000000BF
_WRTC_OFF_6H                      000000FF
_WRTC_ON_6H                       000000DF
_WRTD_OFF_6H                      000000FF
_WRTD_ON_6H                       0000007F
_XINST_OFF_4L                     000000BF
_XINST_ON_4L                      000000FF
__18LF13K50                       00000001
accumulators                      000000D1
activeNoteDeltas                  000000B9
activeNoteTable                   00000058
activeNoteTableAdd                000008A8
activeNoteTableAdd_exit           000008DA
activeNoteTableAdd_lp1            000008C6
activeNoteTableRemove             000008F6
activeNoteTableRemove_bubbleCont  00000956
activeNoteTableRemove_bubbleLoop  00000938
activeNoteTableRemove_lp1         00000916
activeNoteTableRemove_lp1Jmp1     00000926
activeNoteTableRemove_lp1Wipe     00000922
activeNoteTableRemove_sortDone    00000960
activeNoteTableRemove_sortLoop    00000930
activeOutputValues                000000E1
adsrAttackRate                    00000037
adsrLimiterRegs                   00000033
adsrPrescaleCounter               00000039
adsrReleaseRate                   00000038
attack                            3
attackDone                        000011C2
bsrTmp                            00000002
controllerNumber                  noteNumberByte
controllerValue                   velocityByte
count                             sample
decay                             2
delegatedDeltas                   000000C1
delegatorBusy                     0
doAttack                          0000119E
doRelease                         000011D2
dummy_endOfVariables              000001A0
eepromFlags                       00000017
eepromInternalRead                000007CE
eepromReadSingleByte              0000072A
eepromReadSingleByte_lp1          0000073C
eepromReadStatusReg               000006F4
eepromReadStatusReg_doLp1         000006F6
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 248


SYMBOL TABLE
  LABEL                             VALUE 

eepromWrite64                     00000768
eepromWrite64_sendBuffer          0000079E
eepromWriteEnable                 000006E4
eepromWriteEnable_lp              000006E6
eepromWriteStatusReg              0000070A
eepromWriteStatusReg_doLp1        00000712
eepromXferSingleByte              00000694
eepromXferSingleByte_exit         000006B6
eepromXferSingleByte_lp           000006B0
endOfVariables                    0000003F
getActiveNoteDeltas               0000099A
getActiveNoteDeltas_exit          00000A3C
getActiveNoteDeltas_loadSampleDe  000009EE
getActiveNoteDeltas_loop          000009C8
getActiveNoteDeltas_next          00000A34
getActiveNoteDeltas_readTableAnd  00000A1E
getActiveNoteDeltas_zeroDelta     00000A0E
highPriorityISR                   0000004C
highPriorityISRTimer2_prescaleNo  00000070
highPriorityISRTimer2_prescaleOK  00000078
highPriorityISRTimer2_skipStep    00000098
highPriorityISR_INT0Done          000000C0
highPriorityISR_Timer2Done        000000AE
highPriorityISR_redirect          00000044
initADC                           0000032A
initCCP                           0000031C
initCore                          00000294
initExternalEEPROM                000006BC
initHeap                          00000380
initIO                            000002D4
initInternalEEPROM                000007C8
initInterrupts                    00000336
initMIDI                          00000386
initMIDI_lp                       000003AC
initOsc                           000002C6
initOsc_lp1                       000002CC
initRAM                           00000360
initRAM_bank0                     00000360
initRAM_bank0Lp                   00000364
initRAM_bank1                     0000036C
initRAM_bank2                     0000036C
initRAM_bank2Lp                   00000372
initSPI                           00000324
initSoundGen                      000007DA
initSoundGen_lp1                  0000085A
initSoundGen_lp2                  00000868
initSoundGen_lp3                  00000876
initSoundGen_lp4                  00000886
initSoundGen_lp5                  00000894
initTimer0                        00000304
initTimer1                        00000312
initTimer2                        00000314
initUART                          000002F8
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 249


SYMBOL TABLE
  LABEL                             VALUE 

initUserInterface                 000012C8
intState                          2
keyPressed                        5
lastApplicationProgramMemoryAddr  000017FE
ledBlinkCounter                   0000003D
ledBlinkRate                      0000003C
ledOnOffFlags                     0000003E
lowPriorityISR                    000000CA
lowPriorityISR_INT1Done           000000FA
lowPriorityISR_INT2Done           0000010C
lowPriorityISR_TMR0AllOn          00000126
lowPriorityISR_TMR0Done           0000018E
lowPriorityISR_TMR0NotAllOn       0000012E
lowPriorityISR_TMR0SaBlink        0000017E
lowPriorityISR_TMR0SiBlink        00000140
lowPriorityISR_TMR0SqBlink        00000162
lowPriorityISR_TMR0TrySa          00000172
lowPriorityISR_TMR0TrySq          00000150
lowPriorityISR_redirect           00000048
main                              0000019E
mainCheckPlayback                 000001D0
mainCheckSampleWaveshape          000001DE
mainEepromReady                   000001FA
mainLoop                          000001BE
mainLoop_noRefresh                0000028C
mainNotSample                     00000282
mainSampleMono                    00000280
main_redirect                     00000040
midiFlags                         00000010
midiLastProgramValue              0000000F
midiMessageMapper                 000004DC
midiMessageMapper_doPanic         00000580
midiMessageMapper_exit            0000067A
midiMessageMapper_notAttack       00000626
midiMessageMapper_notControlChan  0000063A
midiMessageMapper_notControllerR  00000590
midiMessageMapper_notMod          00000612
midiMessageMapper_notNoteOff      00000536
midiMessageMapper_notNoteOn       00000528
midiMessageMapper_notNoteOnWithZ  0000051A
midiMessageMapper_notPG           0000065C
midiMessageMapper_notPanic        00000588
midiMessageMapper_notPitchWheel   0000056E
midiMessageMapper_notPolyOff      000005C0
midiMessageMapper_notPolyOn       000005D0
midiMessageMapper_notRelease      0000063A
midiMessageMapper_notSustain      000005B0
midiMessageMapper_notSysEx        0000067A
midiMessageMapper_pgCompare       0000064E
midiMessageMapper_pgDone          00000658
midiMessageMapper_pitchPos        00000568
midiMessageMapper_sustainOff      000005A6
midiNoteDeltaTable                00001332
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 250


SYMBOL TABLE
  LABEL                             VALUE 

midiRxMessage                     00000040
midiRxMessage_length              0000000E
midiState_lastLength              0000000C
midiState_lastStatus              0000000B
midiState_messageNeedsMapping     1
midiThruModeEnabled               2
mixedOutputH                      0000002E
mixedOutputL                      0000002D
mlBlockEraseBytesRemaining        00000018
mlButtonState                     00000000
mlChecksum                        00000001
mlConsecutiveSymbolCount          00000034
mlCount                           00000013
mlCurrentTxByte                   00000017
mlDatPackIntByteCount             00000019
mlDataPayloadBuffer               0000000B
mlDecodedNybble                   0000003E
mlEepromAddress                   0000003F
mlEepromByteCount                 00000040
mlFlags                           00000015
mlNybbleSplitTmp                  00000016
mlPayloadLength                   00000007
mlPerfectPreludeCount             0000001A
mlPeriodBucketHighLimit           00000037
mlPeriodBucketLowLimit            00000036
mlRA4CompareReg                   00000039
mlRunningChecksum                 00000002
mlRxChecksumOk                    1
mlRxCyclePeriodH                  0000003B
mlRxCyclePeriodL                  0000003A
mlRxPreviousSymbolBucket          00000033
mlRxReceivedByte                  00000032
mlRxReceivedPacket                0000001B
mlRxReceivedPacketByteCount       00000031
mlRxSymbolBucket                  00000035
mlRxTransSyncFlag                 0
mlSchmittReadValue                0000003C
mlStartAddress                    00000003
mlSymbolBucketCount               00000038
mlTransitionCount                 0000003D
modeLevel                         00000020
modulation                        0000001D
modulationBlendTable              00001632
mootLoader                        00001800
mootLoader_SebWriteReceivedPacke  00001C4C
mootLoader_checkReceive           00001842
mootLoader_checkRestore           0000184A
mootLoader_exit                   00001852
mootLoader_initADC                000018EA
mootLoader_initCCP                000018DC
mootLoader_initCore               00001856
mootLoader_initHeap               00001940
mootLoader_initIO                 00001896
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 251


SYMBOL TABLE
  LABEL                             VALUE 

mootLoader_initInterrupts         000018F6
mootLoader_initOsc                00001888
mootLoader_initOsc_lp1            0000188E
mootLoader_initRAM                00001920
mootLoader_initRAM_bank0          00001920
mootLoader_initRAM_bank0Lp        00001924
mootLoader_initRAM_bank1          0000192C
mootLoader_initRAM_bank2          0000192C
mootLoader_initRAM_bank2Lp        00001932
mootLoader_initSPI                000018E4
mootLoader_initTimer0             000018C6
mootLoader_initTimer1             000018D2
mootLoader_initTimer2             000018D4
mootLoader_initUART               000018BA
mootLoader_receiver               00001B5E
mootLoader_receiverListenForTran  00001B60
mootLoader_restore                00001D3C
mootLoader_rxReceiveNextByte      00001D1C
mootLoader_rxReceiveNextByteGO    00001D32
mootLoader_rxReceiveNextByteRead  00001D20
mootLoader_rxReceiveNextPacket    00001CD0
mootLoader_rxReceiveNextPacketWa  00001CDE
mootLoader_rxReceiverResetHandle  00001CAC
mootLoader_rxRnpPayloadDe_nybble  00001D04
mootLoader_rxRnpPayloadLp         00001CF0
mootLoader_rxWpmhBlockErase       00001BAC
mootLoader_rxWpmhExit             00001C26
mootLoader_rxWpmhGetNextPacket    00001BC0
mootLoader_rxWriteProgramMemoryH  00001B78
mootLoader_sendAsNybbles          00001B22
mootLoader_sendByte               00001B34
mootLoader_signalErrorA           00001C2A
mootLoader_signalErrorALp1        00001C36
mootLoader_signalErrorALp2        00001C38
mootLoader_signalErrorB           00001C46
mootLoader_signalErrorBLp0        00001C74
mootLoader_signalErrorBLp1        00001C80
mootLoader_signalErrorBLp2        00001C82
mootLoader_signalErrorC           00001C90
mootLoader_signalErrorCLp1        00001C9C
mootLoader_signalErrorCLp2        00001C9E
mootLoader_stateWaitLp            0000181E
mootLoader_stateWaitOvLp          00001828
mootLoader_transmitter            00001946
mootLoader_wait                   00001B3C
mootLoader_waitExit               00001B5C
mootLoader_waitIntLp              00001B4A
mootLoader_waitLp                 00001B48
mootLoader_xmitSdppLp             00001A90
mootLoader_xmitSendDataPayloadCo  00001AB8
mootLoader_xmitSendDataPayloadPa  00001A66
mootLoader_xmitSendWpmPacket      000019FA
mootLoader_xmitStartWrite         00001980
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 252


SYMBOL TABLE
  LABEL                             VALUE 

mootLoader_xmitWpmBlockErase      000019A0
mootLoader_xmitWpmByteLp          000019B2
mootLoader_xmitWpmCheckBlockEras  000019E4
mootLoader_xmitWpmNextPayload     000019AA
mootLoader_xmitWpmSendPayloadCom  000019EC
mootLoader_xmitWriteProgramMemor  00001988
mootloader_rxTestSinglePacketChe  00001CB2
needRefresh                       2
nextSampleAddress                 00000015
nextSampleAddresses               000000B1
osc0                              0
osc1                              1
osc2                              2
osc3                              3
oscAdsrTriggerAttack              00001236
oscAdsrTriggerAttackActive        0000125C
oscAdsrTriggerAttackExit          00001270
oscAdsrTriggerAttackNoReAttack    00001266
oscAdsrTriggerRelease             0000127E
oscAdsrTriggerReleaseActive       000012B0
oscAdsrTriggerReleaseExit         000012BA
oscDeltas                         000000C9
oscResetFlags                     0000002A
oscStateFlags                     0000002F
pgDec                             1
pitchWheel                        00000019
polyDepth                         00000023
processRxAsMIDI                   000003C0
processRxAsMIDI_Exit              000004CA
processRxAsMIDI_RxHandlingDone    000004C4
processRxAsMIDI_checkEOX          0000049A
processRxAsMIDI_checkRxFIFO       000004C4
processRxAsMIDI_getLength         00000404
processRxAsMIDI_getLengthDone     00000450
processRxAsMIDI_lengthIs2         0000041A
processRxAsMIDI_lengthIs3         00000440
processRxAsMIDI_lengthIsNot2      00000420
processRxAsMIDI_lengthIsNot3      00000446
processRxAsMIDI_messageComplete   000004A0
processRxAsMIDI_noErrors          000003F8
processRxAsMIDI_notStatusContinu  00000484
processRxAsMIDI_notStatusOrIsEOX  0000046E
processRxAsMIDI_readFIFO          000003D4
processRxAsMIDI_readGO            000003E6
processRxAsMIDI_resetUartState    00000468
processRxAsMIDI_rxInProgress      0000047A
processRxAsMIDI_tryRunningStatus  000004AC
processSoundState                 00000C0A
processSoundState_ADCWait         00000C48
processSoundState_Playback        00000D5E
processSoundState_SoundOn         00000D6C
processSoundState_StartADC        00000C46
processSoundState_cancelVoiceThr  00000C92
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 253


SYMBOL TABLE
  LABEL                             VALUE 

processSoundState_clearTransFlag  000010A4
processSoundState_exit            00001134
processSoundState_mixer           000010A8
processSoundState_recordGo        00000C9E
processSoundState_recordGoForRea  00000CA8
processSoundState_sampAmpExit     00000C74
processSoundState_sampAmpNeg      00000C68
processSoundState_soundOnDone     00001134
processSoundState_stopRecording   00000CD2
programValue                      noteNumberByte
r0                                00000003
r1                                00000004
r2                                00000005
r3                                00000006
r4                                00000007
r5                                00000008
r6                                00000009
r7                                0000000A
ready                             3
recordOrPlayback                  0000001F
recordWaitCountdown               0000003B
refreshActiveNoteState            0000097E
refreshActiveNoteState_active     00000988
refreshActiveNoteState_exit       00000996
refreshActiveNoteState_soundIsOf  00000992
release                           0
releaseDone                       000011F8
sample                            0000002C
sampleChunkCount                  00000012
sampleChunkReady                  0
sampleDataBuffer                  00000071
sampleDataBufferIndex             00000011
sampleEndAddress                  00000013
sampleMidiNoteDeltaTable          00001432
samplePrescaleCounter             00000021
samplesLoaded                     1
serviceADSR                       0000115E
serviceADSRLoop                   00001188
serviceADSR_exit                  00001220
serviceADSR_oscDone               00001214
sineTable                         000016B2
sineTableBaseAddress              00000024
softwareStackBaseAddress          000002FF
softwareStackPointerFSR           FSR2
softwareStackPointerINDF          INDF2
softwareStackPointerPLUSW         PLUSW2
softwareStackPointerPOSTDEC       POSTDEC2
softwareStackPointerPOSTINC       POSTINC2
softwareStackPointerPREINC        PREINC2
soundGenFlags                     00000018
soundOn                           6
squareTable                       00001532
squareTableBaseAddress            00000027
MPASM  5.42                ../SOURCE/MAIN.ASM   9-7-2011  12:48:20         PAGE 254


SYMBOL TABLE
  LABEL                             VALUE 

statusTmp                         00000001
sustain                           1
sustainFlags                      0000002B
theDelegatOr                      00000A66
theDelegatOr_andNotZero           00000B4E
theDelegatOr_delInLp              00000B56
theDelegatOr_delInLpAssignOsc     00000B70
theDelegatOr_delInLpForceAssign   00000B6A
theDelegatOr_delInLpInit          00000B50
theDelegatOr_delInLpNext          00000BA2
theDelegatOr_delOutLp             00000B3A
theDelegatOr_delOutLpNext         00000BB6
theDelegatOr_done                 00000BDA
theDelegatOr_undelAndLoopDone     00000B22
theDelegatOr_undelDdNonZero       00000ABC
theDelegatOr_undelInLp            00000AC2
theDelegatOr_undelNextAnd         00000B16
theDelegatOr_undelNextDD          00000B28
theDelegatOr_undelOutLp           00000AAC
theDelgatOr_doMono                00000BC4
turnSoundOff                      4
turnSoundOn                       3
uartState_currentRxIndex          0000000D
uartState_rxInProgress            0
userInterface_incMode             000012CE
userInterface_incModeCheckSustai  000012EC
userInterface_incModeDoMono       00001304
userInterface_incModeDone         00001310
userInterface_incWaveform         00001312
userInterface_incWaveformDone     00001330
userInterface_incWaveformInc      00001324
wTmp                              00000000
wavePrescaleCounter               00000022
waveShape                         0000001E

Errors   :     4
Warnings :    28 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

