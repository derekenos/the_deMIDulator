MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      main.asm                                          *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 ; Software Stack uses FSR2 so hands off!
                      00022 
                      00023 ;**********************************************************************
                      00024 ; ENVIRONMENTAL DEFINES
                      00025 ;**********************************************************************
                      00026 
                      00027         list            p=18lf13k50                                     ; list directive to define proce
                            ssor
                      00028         list            r=dec                                           ; set default radix to decimal
                      00029 
                      00030         #define         USER_CODE_START_ADDRESS         0x0040  ; address must be aligned to 64-byte bou
                            ndary
                      00031 
                      00032 ;**********************************************************************
                      00033 ; CONDITIONAL ASSEMBLY DEFINES
                      00034 ;**********************************************************************
                      00035 
                      00036 ; THROUGH_HOLE_PCB option swaps Sine/Square switch and LED assignments
                      00037         #define THROUGH_HOLE_PCB
                      00038 
                      00039 ; LED_POLARITY_REVERSED option reverses logic polarity for LEDs
                      00040         #define LED_POLARITY_REVERSED
                      00041         
                      00042 ; LED_STEADY_STATE_DISABLED option saves 4mA per LED but introduces high frequency noise during playback
                      00043 ;       #define LED_STEADY_STATE_DISABLED
                      00044 
                      00045         
                      00046 ;**********************************************************************
                      00047 ; INCLUDE FILES
                      00048 ;**********************************************************************
                      00049 
                      00050         #include        <p18lf13k50.inc>                        ; processor specific variable definition
                            s
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC18LF13K50 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2011 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      01517         LIST
                      00051         
                      00052         #include        "../include/config.inc"         ; configuration bit options copied from p18lf13k
                            50.inc
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      config.inc                                        *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef CONFIG_INC
                      00022 #define CONFIG_INC
                      00023 
                      00024 ;==========================================================================
                      00025 ;
                      00026 ;   IMPORTANT: For the PIC18 devices, the __CONFIG directive has been
                      00027 ;              superseded by the CONFIG directive.  The following settings
                      00028 ;              are available for this device.
                      00029 ;
                      00030 ;   CPU System Clock Selection bit:
                      00031 ;     CPUDIV = NOCLKDIV    No CPU System Clock divide
                      00032 ;     CPUDIV = CLKDIV2     CPU System Clock divided by 2
                      00033 ;     CPUDIV = CLKDIV3     CPU System Clock divided by 3
                      00034 ;     CPUDIV = CLKDIV4     CPU System Clock divided by 4
                      00035         CONFIG CPUDIV = NOCLKDIV
                      00036 
                      00037 ;
                      00038 ;   USB Clock Selection bit:
                      00039 ;     USBDIV = OFF         USB Clock comes directly from the OSC1/OSC2 oscillator block; no divide
                      00040 ;     USBDIV = ON          USB clock comes from the OSC1/OSC2 divided by 2
                      00041         CONFIG USBDIV = OFF
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00042 
                      00043 ;
                      00044 ;   Oscillator Selection bits:
                      00045 ;     FOSC = LP            LP oscillator
                      00046 ;     FOSC = XT            XT oscillator
                      00047 ;     FOSC = HS            HS oscillator
                      00048 ;     FOSC = ERCCLKOUT     External RC oscillator, CLKOUT function on OSC2
                      00049 ;     FOSC = ECCLKOUTH     EC, CLKOUT function on OSC2 (high)
                      00050 ;     FOSC = ECH           EC (high)
                      00051 ;     FOSC = ERC           External RC oscillator
                      00052 ;     FOSC = IRC           Internal RC oscillator
                      00053 ;     FOSC = IRCCLKOUT     Internal RC oscillator, CLKOUT function on OSC2
                      00054 ;     FOSC = ECCLKOUTM     EC, CLKOUT function on OSC2 (medium)
                      00055 ;     FOSC = ECM           EC (medium)
                      00056 ;     FOSC = ECCLKOUTL     EC, CLKOUT function on OSC2 (low)
                      00057 ;     FOSC = ECL           EC (low)
                      00058         CONFIG FOSC = IRC
                      00059 
                      00060 ;
                      00061 ;   4 X PLL Enable bit:
                      00062 ;     PLLEN = OFF          PLL is under software control
                      00063 ;     PLLEN = ON           Oscillator multiplied by 4
                      00064         CONFIG PLLEN = OFF
                      00065 
                      00066 ;
                      00067 ;   Primary Clock Enable Bit:
                      00068 ;     PCLKEN = OFF         Primary clock is under software control
                      00069 ;     PCLKEN = ON          Primary clock enabled
                      00070         CONFIG PCLKEN = ON
                      00071 
                      00072 ;
                      00073 ;   Fail-Safe Clock Monitor Enable bit:
                      00074 ;     FCMEN = OFF          Fail-Safe Clock Monitor disabled
                      00075 ;     FCMEN = ON           Fail-Safe Clock Monitor enabled
                      00076         CONFIG FCMEN = OFF
                      00077 
                      00078 ;
                      00079 ;   Internal/External Oscillator Switchover bit:
                      00080 ;     IESO = OFF           Oscillator Switchover mode disabled
                      00081 ;     IESO = ON            Oscillator Switchover mode enabled
                      00082         CONFIG IESO = ON
                      00083 
                      00084 ;
                      00085 ;   Power-up Timer Enable bit:
                      00086 ;     PWRTEN = ON          PWRT enabled
                      00087 ;     PWRTEN = OFF         PWRT disabled
                      00088         CONFIG PWRTEN = ON
                      00089 
                      00090 ;
                      00091 ;   Brown-out Reset Enable bits:
                      00092 ;     BOREN = OFF          Brown-out Reset disabled in hardware and software
                      00093 ;     BOREN = ON           Brown-out Reset enabled and controlled by software (SBOREN is enabled)
                      00094 ;     BOREN = NOSLP        Brown-out Reset enabled in hardware only and disabled in Sleep mode (SBOREN i
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            s disabled)
                      00095 ;     BOREN = SBORDIS      Brown-out Reset enabled in hardware only (SBOREN is disabled)
                      00096         CONFIG BOREN = ON
                      00097 
                      00098 ;
                      00099 ;   Brown Out Voltage:
                      00100 ;     BORV = 30            VBOR set to 3.0 V nominal
                      00101 ;     BORV = 27            VBOR set to 2.7 V nominal
                      00102 ;     BORV = 22            VBOR set to 2.2 V nominal
                      00103 ;     BORV = 19            VBOR set to 1.9 V nominal
                      00104         CONFIG BORV = 19
                      00105 
                      00106 ;
                      00107 ;   Watchdog Timer Enable bit:
                      00108 ;     WDTEN = OFF          WDT is controlled by SWDTEN bit of the WDTCON register
                      00109 ;     WDTEN = ON           WDT is always enabled. SWDTEN bit has no effect.
                      00110         CONFIG WDTEN = OFF
                      00111 
                      00112 ;
                      00113 ;   Watchdog Timer Postscale Select bits:
                      00114 ;     WDTPS = 1            1:1
                      00115 ;     WDTPS = 2            1:2
                      00116 ;     WDTPS = 4            1:4
                      00117 ;     WDTPS = 8            1:8
                      00118 ;     WDTPS = 16           1:16
                      00119 ;     WDTPS = 32           1:32
                      00120 ;     WDTPS = 64           1:64
                      00121 ;     WDTPS = 128          1:128
                      00122 ;     WDTPS = 256          1:256
                      00123 ;     WDTPS = 512          1:512
                      00124 ;     WDTPS = 1024         1:1024
                      00125 ;     WDTPS = 2048         1:2048
                      00126 ;     WDTPS = 4096         1:4096
                      00127 ;     WDTPS = 8192         1:8192
                      00128 ;     WDTPS = 16384        1:16384
                      00129 ;     WDTPS = 32768        1:32768
                      00130         CONFIG WDTPS = 1
                      00131 
                      00132 ;
                      00133 ;   MCLR Pin Enable bit:
                      00134 ;     MCLRE = OFF          RE3 input pin enabled; MCLR disabled
                      00135 ;     MCLRE = ON           MCLR pin enabled, RE3 input pin disabled
                      00136         CONFIG MCLRE = OFF
                      00137 
                      00138 ;
                      00139 ;   HFINTOSC Fast Start-up bit:
                      00140 ;     HFOFST = OFF         The system clock is held off until the HFINTOSC is stable.
                      00141 ;     HFOFST = ON          HFINTOSC starts clocking the CPU without waiting for the oscillator to stabli
                            ze.
                      00142         CONFIG HFOFST = OFF
                      00143 
                      00144 ;
                      00145 ;   Stack Full/Underflow Reset Enable bit:
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00146 ;     STVREN = OFF         Stack full/underflow will not cause Reset
                      00147 ;     STVREN = ON          Stack full/underflow will cause Reset
                      00148         CONFIG STVREN = ON
                      00149 
                      00150 ;
                      00151 ;   Single-Supply ICSP Enable bit:
                      00152 ;     LVP = OFF            Single-Supply ICSP disabled
                      00153 ;     LVP = ON             Single-Supply ICSP enabled
                      00154         CONFIG LVP = OFF
                      00155 
                      00156 ;
                      00157 ;   Boot Block Size Select Bit:
                      00158 ;     BBSIZ = OFF          512W boot block size
                      00159 ;     BBSIZ = ON           1kW boot block size
                      00160         CONFIG BBSIZ = ON
                      00161 
                      00162 ;
                      00163 ;   Extended Instruction Set Enable bit:
                      00164 ;     XINST = OFF          Instruction set extension and Indexed Addressing mode disabled (Legacy mode)
                      00165 ;     XINST = ON           Instruction set extension and Indexed Addressing mode enabled
                      00166         CONFIG XINST = OFF
                      00167 
                      00168 ;
                      00169 ;   Code Protection bit:
                      00170 ;     CP0 = ON             Block 0 code-protected
                      00171 ;     CP0 = OFF            Block 0 not code-protected
                      00172         CONFIG CP0 = OFF
                      00173 
                      00174 ;
                      00175 ;   Code Protection bit:
                      00176 ;     CP1 = ON             Block 1 code-protected
                      00177 ;     CP1 = OFF            Block 1 not code-protected
                      00178         CONFIG CP1 = OFF
                      00179         
                      00180 ;
                      00181 ;   Boot Block Code Protection bit:
                      00182 ;     CPB = ON             Boot block code-protected
                      00183 ;     CPB = OFF            Boot block not code-protected
                      00184         CONFIG CPB = OFF
                      00185 
                      00186 ;
                      00187 ;   Data EEPROM Code Protection bit:
                      00188 ;     CPD = ON             Data EEPROM code-protected
                      00189 ;     CPD = OFF            Data EEPROM not code-protected
                      00190         CONFIG CPD = OFF
                      00191 
                      00192 ;
                      00193 ;   Write Protection bit:
                      00194 ;     WRT0 = ON            Block 0 write-protected
                      00195 ;     WRT0 = OFF           Block 0 not write-protected
                      00196         CONFIG WRT0 = OFF
                      00197         
                      00198 ;
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00199 ;   Write Protection bit:
                      00200 ;     WRT1 = ON            Block 1 write-protected
                      00201 ;     WRT1 = OFF           Block 1 not write-protected
                      00202         CONFIG WRT1 = OFF
                      00203 
                      00204 ;
                      00205 ;   Boot Block Write Protection bit:
                      00206 ;     WRTB = ON            Boot block write-protected
                      00207 ;     WRTB = OFF           Boot block not write-protected
                      00208         CONFIG WRTB = OFF
                      00209 
                      00210 ;
                      00211 ;   Configuration Register Write Protection bit:
                      00212 ;     WRTC = ON            Configuration registers write-protected
                      00213 ;     WRTC = OFF           Configuration registers not write-protected
                      00214         CONFIG WRTC = OFF
                      00215 
                      00216 ;
                      00217 ;   Data EEPROM Write Protection bit:
                      00218 ;     WRTD = ON            Data EEPROM write-protected
                      00219 ;     WRTD = OFF           Data EEPROM not write-protected
                      00220         CONFIG WRTD = OFF
                      00221 
                      00222 ;
                      00223 ;   Table Read Protection bit:
                      00224 ;     EBTR0 = ON           Block 0 protected from table reads executed in other blocks
                      00225 ;     EBTR0 = OFF          Block 0 not protected from table reads executed in other blocks
                      00226         CONFIG EBTR0 = OFF
                      00227 
                      00228 ;
                      00229 ;   Table Read Protection bit:
                      00230 ;     EBTR1 = ON           Block 1 protected from table reads executed in other blocks
                      00231 ;     EBTR1 = OFF          Block 1 not protected from table reads executed in other blocks
                      00232         CONFIG EBTR1 = OFF
                      00233 
                      00234 ;
                      00235 ;   Boot Block Table Read Protection bit:
                      00236 ;     EBTRB = ON           Boot block protected from table reads executed in other blocks
                      00237 ;     EBTRB = OFF          Boot block not protected from table reads executed in other blocks
                      00238         CONFIG EBTRB = OFF
                      00239 
                      00240 ;
                      00241 ;==========================================================================
                      00242 
                      00243 #endif
                      00053                                                                                                         
                                                                            ; and uncommented as appropriate
                      00054         #include        "../header/eeprom.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      eeprom.h                                          *
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef _EEPROMH_
                      00022 #define _EEPROMH_
                      00023 
                      00024 ; ******************* FLAG VARIABLE DEFINITIONS ***********************
                      00025 
                      00026 ; eepromFlags
                      00027 #define sampleChunkReady        0
                      00028 #define samplesLoaded                   1
                      00029 #define intState                        2
                      00030 
                      00031 ; ******************* COMMAND DEFINES ***********************
                      00032 #define EE_WREN         B'00000110'     ; Enable Write Operations
                      00033 #define EE_WRDI         B'00000100'     ; Disable Write Operations
                      00034 #define EE_RDSR         B'00000101'     ; Read Status Register
                      00035 #define EE_WRSR         B'00000001'     ; Write Status Register
                      00036 #define EE_READ         B'00000011'     ; Read Data from Memory
                      00037 #define EE_WRITE        B'00000010'     ; Write Data to Memory
                      00038 
                      00039 ; ******************* GENERAL DEFINES ***********************
                      00040 #define SAMPLE_DATA_BUFFER_SIZE 64
                      00041 #define EEPROM_SIZE_BITS 128000
                      00042 #define NEXT_SAMPLE_ADDRESSES_EL_SIZE   2
                      00043 
                      00044 ;**********************************************************************
                      00045 ; MACROS
                      00046 ;**********************************************************************
                      00047 
                      00048 
                      00049 ;**********************************************************************
                      00050 ASSERT_SS       MACRO
                      00051         bcf             LATC, RC6, ACCESS       ; Chip select is active
                      00052         ENDM
                      00053 
                      00054 ;**********************************************************************
                      00055 DEASSERT_SS     MACRO
                      00056         bsf             LATC, RC6, ACCESS       ; Chip select is idle
                      00057         ENDM
                      00058 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00059 ;**********************************************************************
                      00060 EE_DISABLE_INTS MACRO
                      00061         bcf             eepromFlags, intState, ACCESS
                      00062         btfsc   INTCON, GIE, ACCESS
                      00063         bsf             eepromFlags, intState, ACCESS
                      00064         bcf             INTCON, GIE, ACCESS
                      00065         ENDM
                      00066 
                      00067 ;**********************************************************************
                      00068 EE_RESTORE_INTS MACRO
                      00069         btfsc   eepromFlags, intState, ACCESS
                      00070         bsf             INTCON, GIE, ACCESS
                      00071         ENDM
                      00072 
                      00073 ;**********************************************************************
                      00074 WRITE_INTERNAL_EEPROM   MACRO   literal_address, register_value
                      00075         local   writeIntEE_loop
                      00076         
                      00077         ; load address
                      00078         movlw   literal_address
                      00079         movwf   EEADR, ACCESS
                      00080         ; load value
                      00081         movff   register_value, EEDATA
                      00082         ; configure eeprom
                      00083         ; point to EEPROM DATA memory
                      00084         bcf             EECON1, EEPGD, ACCESS
                      00085         ; Access EEPROM/Program
                      00086         bcf             EECON1, CFGS, ACCESS    
                      00087         ; Enable writes
                      00088         bsf             EECON1, WREN, ACCESS
                      00089 
                      00090         ; don't have to disable interrupts because I'm only calling this
                      00091         ; from within the high-priority ISR
                      00092 
                      00093         ; required write enable sequence
                      00094         movlw   0x55
                      00095         movwf   EECON2, ACCESS
                      00096         movlw   0xAA
                      00097         movwf   EECON2, ACCESS
                      00098 
                      00099         ; set WR bit to begin write
                      00100         bsf             EECON1, WR, ACCESS
                      00101 writeIntEE_loop
                      00102         ; wait for write to complete
                      00103         btfsc   EECON1, WR, ACCESS
                      00104         bra             writeIntEE_loop
                      00105         ; disable writes
                      00106         bcf             EECON1, WREN, ACCESS
                      00107 
                      00108         ; point to Program memory
                      00109         bsf             EECON1, EEPGD, ACCESS
                      00110 
                      00111         ENDM
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00112 
                      00113 ;**********************************************************************
                      00114 WRITE_INTERNAL_EEPROM_FROM_REGS MACRO   address, data
                      00115         local   writeIntEE_loop
                      00116         
                      00117         ; load address
                      00118         movff   address, EEADR
                      00119         ; load value
                      00120         movff   data, EEDATA
                      00121         ; configure eeprom
                      00122         ; point to EEPROM DATA memory
                      00123         bcf             EECON1, EEPGD, ACCESS
                      00124         ; Access EEPROM/Program
                      00125         bcf             EECON1, CFGS, ACCESS    
                      00126         ; Enable writes
                      00127         bsf             EECON1, WREN, ACCESS
                      00128 
                      00129         ; don't have to disable interrupts because I'm only calling this
                      00130         ; from within the high-priority ISR
                      00131 
                      00132         ; required write enable sequence
                      00133         movlw   0x55
                      00134         movwf   EECON2, ACCESS
                      00135         movlw   0xAA
                      00136         movwf   EECON2, ACCESS
                      00137 
                      00138         ; set WR bit to begin write
                      00139         bsf             EECON1, WR, ACCESS
                      00140 writeIntEE_loop
                      00141         ; wait for write to complete
                      00142         btfsc   EECON1, WR, ACCESS
                      00143         bra             writeIntEE_loop
                      00144         ; disable writes
                      00145         bcf             EECON1, WREN, ACCESS
                      00146 
                      00147         ; point to Program memory
                      00148         bsf             EECON1, EEPGD, ACCESS
                      00149 
                      00150         ENDM
                      00151 
                      00152 ;;**********************************************************************
                      00153 ;;SPI_TX_LITERAL_RX_IN_WREG     MACRO   value
                      00154 ;       local   waitLoop
                      00155 ;
                      00156 ;; routine as recommended in Microchip PIC18F2458/2553/4458/4553 errata
                      00157 ;
                      00158 ;       ; clear interrupt flag
                      00159 ;       bcf             PIR1, SSPIF, ACCESS
                      00160 ;
                      00161 ;       ; perform read, even if the data in SSPBUF is not important 
                      00162 ;       movf    SSPBUF, w, ACCESS
                      00163 ;
                      00164 ;       ; SSPBUF = value
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00165 ;       movlw   value
                      00166 ;       movwf   SSPBUF, ACCESS
                      00167 ;
                      00168 ;       ; wait fro transfer to complete
                      00169 ;waitLoop
                      00170 ;       btfss   PIR1, SSPIF, ACCESS
                      00171 ;       bra             waitLoop
                      00172 ;
                      00173 ;       ; the data received should be valid
                      00174 ;       movf    SSPBUF, w, ACCESS
                      00175 ;
                      00176 ;       ENDM
                      00177                                                 
                      00178 ;;**********************************************************************
                      00179 ;SPI_TX_WREG_RX_IN_WREG MACRO
                      00180 ;       local   waitLoop
                      00181 ;
                      00182 ;       ; save WREG to software stack
                      00183 ;       PUSH_R  WREG
                      00184 ;       
                      00185 ;; routine as recommended in Microchip PIC18F2458/2553/4458/4553 errata
                      00186 ;       ; clear interrupt flag
                      00187 ;       bcf             PIR1, SSPIF, ACCESS
                      00188 ;
                      00189 ;       ; perform read, even if the data in SSPBUF is not important 
                      00190 ;       movf    SSPBUF, w, ACCESS
                      00191 ;
                      00192 ;       ; SSPBUF = restored WREG from software stack
                      00193 ;       POP_R   WREG
                      00194 ;       movwf   SSPBUF, ACCESS
                      00195 ;
                      00196 ;       ; wait for transfer to complete
                      00197 ;waitLoop
                      00198 ;       btfss   PIR1, SSPIF, ACCESS
                      00199 ;       bra             waitLoop
                      00200 ;
                      00201 ;       ; the data received should be valid
                      00202 ;       movf    SSPBUF, w, ACCESS
                      00203 ;
                      00204 ;       ENDM
                      00205 
                      00206 #endif
                      00055         #include        "../header/midi.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      midi.h                                            *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef _MIDIH_
                      00022 #define _MIDIH_
                      00023 
                      00024 
                      00025 ; ******************* MIDI SYSEX DEFINES ***********************
                      00026 #define         VENDOR_ID       0x77
                      00027 #define         DEVICE_ID       0x1D
                      00028 #define         TERMINAL_PACKET_COMMAND_VALUE   0x1E
                      00029 
                      00030 ; ******************* MIDI BUFFER SIZES ***********************
                      00031 
                      00032 #define         MAX_MIDI_MESSAGE_SIZE   24
                      00033 #define         ACTIVE_NOTE_TABLE_SIZE  25
                      00034 
                      00035 
                      00036 ; ******************* STATUS BYTE DEFINITONS ***********************
                      00037 
                      00038 ; Note that lower nybble (channel) should be masked out for comparison
                      00039 ;------------------------
                      00040 #define         NOTE_OFF                                0x80
                      00041 #define         NOTE_ON                                 0x90
                      00042 #define         KEY_PRESSURE                    0xA0
                      00043 #define         CONTROL_CHANGE                  0xB0
                      00044 #define         PROGRAM_CHANGE                  0xC0
                      00045 #define         CHANNEL_PRESSURE                0xD0
                      00046 #define         PITCH_WHEEL                             0xE0
                      00047 
                      00048 ; Sysex Status Byte Definitions
                      00049 #define         SYSEX                                   0xF0
                      00050 #define         EOX                                             0xF7
                      00051 
                      00052 #define         NOTE_OFF_MESSAGE_LENGTH                         3
                      00053 #define         NOTE_ON_MESSAGE_LENGTH                          3
                      00054 #define         KEY_PRESSURE_MESSAGE_LENGTH                     3
                      00055 #define         CONTROL_CHANGE_MESSAGE_LENGTH           3
                      00056 #define         PROGRAM_CHANGE_MESSAGE_LENGTH           2
                      00057 #define         CHANNEL_PRESSURE_MESSAGE_LENGTH         2
                      00058 #define         PITCH_WHEEL_MESSAGE_LENGTH                      3
                      00059 
                      00060 ; SysEx Sub Types
                      00061 ;----------------------------
                      00062 #define         NON_REAL_TIME                                           0x7E
                      00063 #define         GENERAL_INFORMATION                                     0x06
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00064 #define         IDENTITY_REQUEST                                        0x01
                      00065 #define         IDENTITY_REPLY                                          0x02
                      00066 
                      00067 ; Control Change Data Types
                      00068 ;----------------------------
                      00069 #define         BANK_SELECT_MSB                                         0
                      00070 #define         MODULATION_WHEEL_MSB                            1
                      00071 #define         BREATH_CONTROLLER_MSB                           2
                      00072 #define         UNDEFINED_003                                           3
                      00073 #define         FOOT_CONTROLLER_MSB                                     4
                      00074 #define         PORTAMENTO_TIME                                         5
                      00075 #define         DATA_ENTRY_MSB                                          6
                      00076 #define         CHANNEL_VOLUME_MSB                                      7
                      00077 #define         BALANCE_MSB                                                     8
                      00078 #define         UNDEFINED_MSB                                           9
                      00079 #define         PAN_MSB                                                         10
                      00080 #define         EXPRESSION_MSB                                          11
                      00081 #define         EFFECT_CONTROL_1_MSB                            12
                      00082 #define         EFFECT_CONTROL_2_MSB                            13
                      00083 #define         UNDEFINED_014                                           14
                      00084 #define         UNDEFINED_015                                           15
                      00085 #define         GENERAL_PURPOSE_CONTROLLER_1_MSB        16
                      00086 #define         GENERAL_PURPOSE_CONTROLLER_2_MSB        17
                      00087 #define         GENERAL_PURPOSE_CONTROLLER_3_MSB        18
                      00088 #define         GENERAL_PURPOSE_CONTROLLER_4_MSB        19
                      00089 #define         UNDEFINED_020                                           20
                      00090 #define         UNDEFINED_021                                           21
                      00091 #define         UNDEFINED_022                                           22
                      00092 #define         UNDEFINED_023                                           23
                      00093 #define         UNDEFINED_024                                           24
                      00094 #define         UNDEFINED_025                                           25
                      00095 #define         UNDEFINED_026                                           26
                      00096 #define         UNDEFINED_027                                           27
                      00097 #define         UNDEFINED_028                                           28
                      00098 #define         UNDEFINED_029                                           29
                      00099 #define         UNDEFINED_030                                           30
                      00100 #define         UNDEFINED_031                                           31
                      00101 #define         BANK_SELECT_LSB                                         32
                      00102 #define         MODULATION_WHEEL_LSB                            33
                      00103 #define         BREATH_CONTROLLER_LSB                           34
                      00104 #define         UNDEFINED_035                                           35
                      00105 #define         FOOT_CONTROLLER_LSB                                     36
                      00106 #define         PORTAMENTO_TIME_LSB                                     37
                      00107 #define         DATA_ENTRY_LSB                                          38
                      00108 #define         CHANNEL_VOLUME_LSB                                      39
                      00109 #define         BALANCE_LSB                                                     40
                      00110 #define         UNDEFINED_041                                           41
                      00111 #define         PAN_LSB                                                         42
                      00112 #define         EXPRESSION_LSB                                          43
                      00113 #define         EFFECT_CONTROL_1_LSB                            44
                      00114 #define         EFFECT_CONTROL_2_LSB                            45
                      00115 #define         UNDEFINED_046                                           46
                      00116 #define         UNDEFINED_047                                           47
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00117 #define         GENERAL_PURPOSE_CONTROLLER_1_LSB        48
                      00118 #define         GENERAL_PURPOSE_CONTROLLER_2_LSB        49
                      00119 #define         GENERAL_PURPOSE_CONTROLLER_3_LSB        50
                      00120 #define         GENERAL_PURPOSE_CONTROLLER_4_LSB        51
                      00121 #define         UNDEFINED_052                                           52
                      00122 #define         UNDEFINED_053                                           53
                      00123 #define         UNDEFINED_054                                           54
                      00124 #define         UNDEFINED_055                                           55
                      00125 #define         UNDEFINED_056                                           56
                      00126 #define         UNDEFINED_057                                           57
                      00127 #define         UNDEFINED_058                                           58
                      00128 #define         UNDEFINED_059                                           59
                      00129 #define         UNDEFINED_060                                           60
                      00130 #define         UNDEFINED_061                                           61
                      00131 #define         UNDEFINED_062                                           62
                      00132 #define         UNDEFINED_063                                           63
                      00133 #define         SUSTAIN_PEDAL                                           64
                      00134 #define         PORTAMENTO_ONOFF                                        65
                      00135 #define         SOSTENUTO                                                       66
                      00136 #define         SOFT_PEDAL                                                      67
                      00137 #define         LEGATO_FOOTSWITCH                                       68
                      00138 #define         HOLD_2                                                          69
                      00139 #define         SOUND_CONTROLLER_1_DEFAULT_SOUND_VARIATION                              70
                      00140 #define         SOUND_CONTROLLER_2_DEFAULT_TIMBRE_HARMONIC_QUALITY              71
                      00141 #define         SOUND_CONTROLLER_3_DEFAULT_RELEASE_TIME                                 72
                      00142 #define         SOUND_CONTROLLER_4_DEFAULT_ATTACK_TIME                                  73
                      00143 #define         SOUND_CONTROLLER_5_DEFAULT_BRIGHTNESS                                   74
                      00144 #define         SOUND_CONTROLLER_6_GM2_DEFAULT_DECAY_TIME                               75
                      00145 #define         SOUND_CONTROLLER_7_GM2_DEFAULT_VIBRATO_RATE                             76
                      00146 #define         SOUND_CONTROLLER_8_GM2_DEFAULT_VIBRATO_DEPTH                    77
                      00147 #define         SOUND_CONTROLLER_9_GM2_DEFAULT_VIBRATO_DELAY                    78
                      00148 #define         SOUND_CONTROLLER_10_GM2_DEFAULT_UNDEFINED                               79
                      00149 #define         GENERAL_PURPOSE_CONTROLLER_5                                                    80
                      00150 #define         GENERAL_PURPOSE_CONTROLLER_6                                                    81
                      00151 #define         GENERAL_PURPOSE_CONTROLLER_7                                                    82
                      00152 #define         GENERAL_PURPOSE_CONTROLLER_8                                                    83
                      00153 #define         PORTAMENTO_CONTROL                                                                      
                                    84
                      00154 #define         UNDEFINED_85                                                                    85
                      00155 #define         UNDEFINED_86                                                                    86
                      00156 #define         UNDEFINED_87                                                                    87
                      00157 #define         UNDEFINED_88                                                                    88
                      00158 #define         UNDEFINED_89                                                                    89
                      00159 #define         UNDEFINED_90                                                                    90
                      00160 #define         EFFECTS_1_DEPTH_DEFAULT_REVERB_SEND                             91
                      00161 #define         EFFECTS_2_DEPTH_DEFAULT_TREMOLO_DEPTH                   92
                      00162 #define         EFFECTS_3_DEPTH_DEFAULT_CHORUS_SEND                             93
                      00163 #define         EFFECTS_4_DEPTH_DEFAULT_CELESTE_[DETUNE]_DEPTH  94
                      00164 #define         EFFECTS_5_DEPTH_DEFAULT_PHASER_DEPTH                    95
                      00165 #define         DATA_INCREMENT                                                                  96
                      00166 #define         DATA_DECREMENT                                                                  97
                      00167 #define         NON_REG_PARAMETER_NUMBER_LSB                            98
                      00168 #define         NON_REG_PARAMETER_NUMBER_MSB                            99
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00169 #define         REGISTERED_PARAMETER_NUMBER_LSB                                 100
                      00170 #define         REGISTERED_PARAMETER_NUMBERMSB                                  101
                      00171 #define         UNDEFINED_102                                           102
                      00172 #define         UNDEFINED_103                                           103
                      00173 #define         UNDEFINED_104                                           104
                      00174 #define         UNDEFINED_105                                           105
                      00175 #define         UNDEFINED_106                                           106
                      00176 #define         UNDEFINED_107                                           107
                      00177 #define         UNDEFINED_108                                           108
                      00178 #define         UNDEFINED_109                                           109
                      00179 #define         UNDEFINED_110                                           110
                      00180 #define         UNDEFINED_111                                           111
                      00181 #define         UNDEFINED_112                                           112
                      00182 #define         UNDEFINED_113                                           113
                      00183 #define         UNDEFINED_114                                           114
                      00184 #define         UNDEFINED_115                                           115
                      00185 #define         UNDEFINED_116                                           116
                      00186 #define         UNDEFINED_117                                           117
                      00187 #define         UNDEFINED_118                                           118
                      00188 #define         UNDEFINED_119                                           119
                      00189 #define         ALL_SOUND_OFF                                           120
                      00190 #define         RESET_ALL_CONTROLLERS                           121
                      00191 #define         LOCAL_CONTROL_ONOFF                                     122
                      00192 #define         ALL_NOTES_OFF                                           123
                      00193 #define         OMNI_MODE_OFF                                           124
                      00194 #define         OMNI_MODE_ON                                            125
                      00195 #define         POLY_MODE_OFF                                           126
                      00196 #define         POLY_MODE_ON                                            127
                      00197 
                      00198 
                      00199 ; ******************* MIDI MESSAGE STATES ***********************
                      00200 
                      00201 #define CHANNEL                                         0x00
                      00202 #define DATA_BYTE0                                      0x01
                      00203 #define DATA_BYTE1                                      0x02
                      00204 #define MESSAGE_COMPLETE                        0xFF
                      00205 
                      00206 #define NOTE_COMPLETE                           DATA_BYTE1
                      00207 #define AFTERTOUCH_COMPLETE                     DATA_BYTE1
                      00208 #define CONTROL_CHANGE_COMPLETE         DATA_BYTE1
                      00209 #define PROGRAM_CHANGE_COMPLETE         DATA_BYTE0
                      00210 #define PITCH_WHEEL_COMPLETE            DATA_BYTE1
                      00211 
                      00212 
                      00213 ; ******************* FLAG VARIABLE DEFINITIONS ***********************
                      00214 
                      00215 ; midiFlags (bits 3:7 free for use by other modules)
                      00216 #define uartState_rxInProgress                  0
                      00217 #define midiState_messageNeedsMapping   1
                      00218 #define midiThruModeEnabled                             2
                      00219 
                      00220 
                      00221 #endif
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00056         #include        "../header/softwareStack.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      softwareStack.h                                   *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef SOFTWARESTACK_H
                      00022 #define SOFTWARESTACK_H
                      00023 
                      00024         #define softwareStackPointerFSR         FSR2
                      00025         #define softwareStackPointerINDF        INDF2
                      00026         #define softwareStackPointerPOSTINC     POSTINC2
                      00027         #define softwareStackPointerPOSTDEC     POSTDEC2
                      00028         #define softwareStackPointerPREINC      PREINC2 
                      00029         #define softwareStackPointerPLUSW       PLUSW2  
                      00030 
                      00031 ; **** MACRO: PUSH_R    regName
                      00032 PUSH_R  MACRO   regName
                      00033         movff   regName, softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00034                 ENDM
                      00035                 
                      00036 ; **** MACRO: POP_R     regName
                      00037 POP_R   MACRO   regName
                      00038         movff   softwareStackPointerPREINC, regName     ; ++softwareStackPointerINDF = regName
                      00039                 ENDM
                      00040 
                      00041 #endif
                      00057         #include        "../header/soundGen.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      soundGen.h                                        *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef _SOUNDGENH_
                      00022 #define _SOUNDGENH_
                      00023 
                      00024 ;**********************************************************************
                      00025 ; GENERAL
                      00026 ;**********************************************************************
                      00027 
                      00028 ; Current code structure requires that MAX_POLY_DEPTH be set to 4!
                      00029 #define MAX_POLY_DEPTH                                  4       
                      00030 
                      00031 #define ACTIVE_NOTE_DELTAS_ELEMENT_SIZE 2
                      00032 #define ACTIVE_NOTE_DELTAS_SIZE                 MAX_POLY_DEPTH * ACTIVE_NOTE_DELTAS_ELEMENT_SIZE
                      00033 
                      00034 #define DELEGATED_DELTAS_ELEMENT_SIZE   2
                      00035 #define DELEGATED_DELTAS_SIZE                   MAX_POLY_DEPTH * DELEGATED_DELTAS_ELEMENT_SIZE
                      00036 
                      00037 #define OSC_DELTAS_ELEMENT_SIZE                 2
                      00038 #define OSC_DELTAS_SIZE                                 MAX_POLY_DEPTH * OSC_DELTAS_ELEMENT_SIZE
                      00039 
                      00040 #define ACCUMULATORS_ELEMENT_SIZE               4
                      00041 #define ACCUMULATORS_SIZE                               MAX_POLY_DEPTH * ACCUMULATORS_ELEMENT_SIZE
                      00042 
                      00043 #define ACTIVE_OUTPUT_VALUES_EL_SIZE    1
                      00044 #define ACTIVE_OUTPUT_VALUES_SIZE               MAX_POLY_DEPTH * ACTIVE_OUTPUT_VALUES_EL_SIZE
                      00045 
                      00046 #define LED_BLINK_RATE_VOICE_THROUGH    20
                      00047 #define LED_BLINK_RATE_VOICE_RECORD             6
                      00048 
                      00049 ; set soundGen timebase prescales for wave and sample modes
                      00050 ; Timer2 interrupt period is currently 32uS
                      00051 ; set sample timebase period to 192uS (5208 Hz)
                      00052 #define SAMPLE_PRESCALE 6
                      00053 ; wave sine/square timebase period to 64uS (15.625 kHz)
                      00054 #define WAVE_PRESCALE   2
                      00055 
                      00056 #define MAX_MODE_LEVEL  MONO
                      00057 
                      00058 #define ADSR_ATTACK_RATE        64
                      00059 #define ADSR_RELEASE_RATE       16
                      00060 ; set adsr prescale target to increment adsrLimiterRegs value every 19.52mS
                      00061 ; 19.52mS gives a max individual attack/release time of 4.99712 Seconds
                      00062 ; the "increment" value is set by adsrAttackRate and adsrReleaseRate
                      00063 #define ADSR_PRESCALE 610
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00064 
                      00065 ;**********************************************************************
                      00066 ; ENUM TYPE DEFINITIONS
                      00067 ;**********************************************************************
                      00068 
                      00069 ; waveShape
                      00070 #define SINE 0
                      00071 #define SQUARE 1
                      00072 #define SAMPLE 2
                      00073 
                      00074 ; recordOrPlayback
                      00075 #define VOICE_THROUGH 0
                      00076 #define RECORD 1
                      00077 #define PLAYBACK 2
                      00078 
                      00079 ; modeLevels
                      00080 #define POLY 0
                      00081 #define SUSTAIN 1
                      00082 #define MONO 2
                      00083 
                      00084 
                      00085 ;**********************************************************************
                      00086 ; FLAG VARIABLE DEFINITIONS
                      00087 ;**********************************************************************
                      00088 
                      00089 ; midiFlags
                      00090 #define turnSoundOn 3
                      00091 #define turnSoundOff 4
                      00092 #define noteTransition 5
                      00093 #define soundOn 6
                      00094 
                      00095 ; soundGenFlags
                      00096 #define delegatorBusy 0
                      00097 #define pgDec 1
                      00098 #define needRefresh 2
                      00099 
                      00100 ; oscEnabledFlags
                      00101 ; oscResetFlags
                      00102 #define osc0    0
                      00103 #define osc1    1
                      00104 #define osc2    2
                      00105 #define osc3    3
                      00106 
                      00107 ; adsrFlags
                      00108 #define attack 3
                      00109 #define decay 2
                      00110 #define sustain 1
                      00111 #define release 0
                      00112 
                      00113 
                      00114 ;**********************************************************************
                      00115 ; MACROS
                      00116 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00117 
                      00118 ;**********************************************************************
                      00119 CLEAR_ACCUMULATORS      MACRO
                      00120         local   loop
                      00121 
                      00122         ; init local variables
                      00123         PUSH_R  r0
                      00124         PUSH_R  FSR0L
                      00125         PUSH_R  FSR0H
                      00126         
                      00127         ; load fsr
                      00128         lfsr    FSR0, accumulators
                      00129 
                      00130         ; init count
                      00131         movf    polyDepth, w, ACCESS
                      00132         movwf   r0, ACCESS
                      00133 loop    
                      00134         ; each accumulator is 4 bytes wide
                      00135         clrf    POSTINC0, ACCESS        
                      00136         clrf    POSTINC0, ACCESS        
                      00137         clrf    POSTINC0, ACCESS        
                      00138         clrf    POSTINC0, ACCESS        
                      00139         ; decrement count, skip if done
                      00140         decfsz  r0, f, ACCESS
                      00141         bra             loop
                      00142 
                      00143         ; restore variables
                      00144         POP_R   FSR0H
                      00145         POP_R   FSR0L
                      00146         POP_R   r0
                      00147         
                      00148         ENDM
                      00149         
                      00150 
                      00151 ;**********************************************************************
                      00152 ENABLE_SUSTAIN  MACRO
                      00153         comf    oscResetFlags, w, ACCESS
                      00154         andlw   0x0f
                      00155         movwf   sustainFlags, ACCESS
                      00156         ENDM
                      00157         
                      00158 ;**********************************************************************
                      00159 DISABLE_SUSTAIN MACRO
                      00160         clrf    sustainFlags, ACCESS
                      00161         ENDM
                      00162 
                      00163 ;**********************************************************************
                      00164 REVERSE_SAMPLE_IF_MOD_OVER_63   MACRO
                      00165         local exitMacro
                      00166         ; if modulation > 63 then reverse sample
                      00167         movlw   63
                      00168         cpfsgt  modulation, ACCESS
                      00169         bra             exitMacro
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00170         ; modulation > 63 so do nextSampleAddress = (sampleEndAddress - nextSampleAddress)
                      00171         movf    nextSampleAddress, w
                      00172         subwf   sampleEndAddress, w
                      00173         movwf   nextSampleAddress
                      00174         movf    nextSampleAddress + 1, w
                      00175         subwfb  sampleEndAddress + 1, w
                      00176         movwf   nextSampleAddress + 1
                      00177 exitMacro
                      00178         ENDM
                      00179 
                      00180 ;**********************************************************************
                      00181 OSC_ADVANCE_ADSR        MACRO   OSC_NUMBER
                      00182         local   macroDone, doAttack, attackDone, doRelease, releaseDone
                      00183 
                      00184         ; ignore advance if oscillator is sustained
                      00185         btfsc   sustainFlags, OSC_NUMBER, ACCESS
                      00186         bra             macroDone
                      00187         
                      00188         btfsc   adsrFlags + OSC_NUMBER, attack, ACCESS
                      00189         bra             doAttack
                      00190         btfsc   adsrFlags + OSC_NUMBER, release, ACCESS
                      00191         bra             doRelease
                      00192         bra             macroDone
                      00193         
                      00194 doAttack
                      00195         ; osc is attacking
                      00196 
                      00197         ; if adsrAttackRate == 64 (correlating to midiAttackTime value of 0) then ignore adsr
                      00198         movlw   64
                      00199         xorwf   adsrAttackRate, w, ACCESS
                      00200         bz      attackDone
                      00201 
                      00202         ; if((adsrLimiterRegs -= ADSR_ATTACK_RATE) <=0)
                      00203         movf    adsrAttackRate, w, ACCESS
                      00204         subwf   adsrLimiterRegs + OSC_NUMBER, f, ACCESS
                      00205         bnc             attackDone
                      00206         bz              attackDone
                      00207         bra             macroDone
                      00208 attackDone
                      00209         ; {
                      00210         ;   adsrLimiterRegs = 0x00;     // init for release
                      00211         clrf    adsrLimiterRegs + OSC_NUMBER, ACCESS
                      00212         ;   adsrFlags ^= 1<<attack;
                      00213         bcf             adsrFlags + OSC_NUMBER, attack, ACCESS
                      00214         ; }
                      00215         bra     macroDone
                      00216 
                      00217 doRelease
                      00218         ; osc is releasing
                      00219 
                      00220         ; if adsrReleaseRate == 64 (correlating to midiReleaseTime value of 0) then ignore adsr
                      00221         movlw   64
                      00222         xorwf   adsrReleaseRate, w, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00223         bz      releaseDone
                      00224 
                      00225         ; if((adsrLimiterRegs += ADSR_ATTACK_RATE) >= 255)
                      00226         movf    adsrReleaseRate, w, ACCESS
                      00227         addwf   adsrLimiterRegs + OSC_NUMBER, f, ACCESS
                      00228         bc              releaseDone
                      00229         comf    adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00230         bz              releaseDone
                      00231         bra             macroDone
                      00232 releaseDone
                      00233         ; {
                      00234         ;   adsrLimiterRegs = 0xff;     // init for attack
                      00235         setf    adsrLimiterRegs + OSC_NUMBER, ACCESS
                      00236         ;   adsrFlags ^= 1<<release;
                      00237         bcf             adsrFlags + OSC_NUMBER, release, ACCESS
                      00238         ;               delegatedDeltas[OSC_NUMBER] = delegatedDeltas[OSC_NUMBER + 1] = 0;
                      00239         clrf    delegatedDeltas + OSC_NUMBER * 2;
                      00240         clrf    delegatedDeltas + (OSC_NUMBER * 2) + 1;
                      00241         ; }
                      00242         bra     macroDone
                      00243         
                      00244 macroDone
                      00245         ENDM
                      00246         
                      00247 ;**********************************************************************
                      00248 OSC_MIX MACRO   OSC_NUMBER
                      00249         local   adsrDone
                      00250 
                      00251         movf    adsrLimiterRegs + OSC_NUMBER, w, ACCESS
                      00252         subwf   activeOutputValues + OSC_NUMBER, w
                      00253         bc              adsrDone
                      00254         movlw   0
                      00255         
                      00256 adsrDone
                      00257         ; add WREG to mixedOutputL/H
                      00258         addwf   mixedOutputL, f, ACCESS
                      00259         btfsc   STATUS, C, ACCESS
                      00260         incf    mixedOutputH, f, ACCESS
                      00261         
                      00262         ENDM
                      00263 
                      00264 ;**********************************************************************
                      00265 OSC_READ_ADSR_FLAG      MACRO   FLAG
                      00266 ; oscillator number passed in WREG
                      00267 ; boolean value is returned in WREG and ZERO flag is set accordingly
                      00268 
                      00269         ; push working regs onto software stack
                      00270         PUSH_R  FSR0L
                      00271         PUSH_R  FSR0H
                      00272         
                      00273         ; load fsr
                      00274         lfsr    FSR0, adsrFlags
                      00275         ; read the register into WREG
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00276         movf    PLUSW0, w, ACCESS
                      00277         andlw   1<<FLAG
                      00278         
                      00279         ; restore working regs from stack
                      00280         POP_R   FSR0H
                      00281         POP_R   FSR0L   
                      00282         
                      00283         ENDM
                      00284 
                      00285 ;**********************************************************************
                      00286 OSC_SET_ADSR_FLAG       MACRO   FLAG
                      00287 ; oscillator number passed in WREG
                      00288 
                      00289         ; push working regs onto software stack
                      00290         PUSH_R  FSR0L
                      00291         PUSH_R  FSR0H
                      00292         
                      00293         ; load fsr
                      00294         lfsr    FSR0, adsrFlags
                      00295         bsf     PLUSW0, FLAG, ACCESS
                      00296         
                      00297         ; restore working regs from stack
                      00298         POP_R   FSR0H
                      00299         POP_R   FSR0L   
                      00300         
                      00301         ENDM
                      00302         
                      00303 ;**********************************************************************
                      00304 OSC_CLR_ADSR_FLAG       MACRO   FLAG
                      00305 ; oscillator number passed in WREG
                      00306 
                      00307         ; push working regs onto software stack
                      00308         PUSH_R  FSR0L
                      00309         PUSH_R  FSR0H
                      00310         
                      00311         ; load fsr
                      00312         lfsr    FSR0, adsrFlags
                      00313         bcf     PLUSW0, FLAG, ACCESS
                      00314         
                      00315         ; restore working regs from stack
                      00316         POP_R   FSR0H
                      00317         POP_R   FSR0L   
                      00318         
                      00319         ENDM
                      00320 
                      00321 ;**********************************************************************
                      00322 OSC_ADSR_ATTACK MACRO
                      00323 ; oscillator number passed in WREG
                      00324 
                      00325         ; push working regs onto software stack
                      00326         PUSH_R  FSR0L
                      00327         PUSH_R  FSR0H
                      00328         
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00329         ; load fsr
                      00330         lfsr    FSR0, adsrFlags
                      00331         ; set flags
                      00332         bcf     PLUSW0, release, ACCESS
                      00333         bsf     PLUSW0, attack, ACCESS
                      00334 
                      00335         ; load fsr
                      00336         lfsr    FSR0, adsrLimiterRegs
                      00337         ; set limiter
                      00338         setf    PLUSW0, ACCESS
                      00339                 
                      00340         ; restore working regs from stack
                      00341         POP_R   FSR0H
                      00342         POP_R   FSR0L   
                      00343         
                      00344         ENDM
                      00345         
                      00346 ;**********************************************************************
                      00347 OSC_STATE_BLOCK MACRO   OSC_NUMBER
                      00348         local   checkDelegating, oscCheckActive, zeroAcc, oscActive, waveIsSample, noTransition
                      00349         local   clrSampleAcc, addressOk, waveIsNotSample, waveIsSine, waveIsSquare, tableAddressLoaded, 
                            resetOscillator, macroDone
                      00350                 
                      00351         ; if oscillator is locked for sustain then leave it alone
                      00352         btfsc   sustainFlags, OSC_NUMBER, ACCESS
                      00353         bra             oscActive
                      00354         
                      00355         ; if mode is SINE or SQUARE then only allow oscillator state changes when activeOutputValue is 0
                      00356         movlw   SAMPLE
                      00357         xorwf   waveShape, w, ACCESS
                      00358         ; mode is SAMPLE so skip zero check
                      00359         bz              checkDelegating
                      00360         
                      00361         ; mode is SINE or SQUARE so check for zero output
                      00362         movf    activeOutputValues + (OSC_NUMBER * ACTIVE_OUTPUT_VALUES_EL_SIZE), w
                      00363         ; not 0 so just keep spinning
                      00364         bnz             oscCheckActive
                      00365         
                      00366 checkDelegating
                      00367         ; don't update if delegator is busy because delegatedDelta value is volatile
                      00368         ; so is oscEnabledFlags. For an oscillator turning on; flag is set after delegator writes delega
                            tedDelta value so this is ok
                      00369         btfsc   soundGenFlags, delegatorBusy, ACCESS
                      00370         ; delegator is busy so just keep spinning
                      00371         bra             oscCheckActive
                      00372         
                      00373         ; check if oscillator is enabled
                      00374         btfss   oscEnabledFlags, OSC_NUMBER, ACCESS
                      00375         ; oscillator is either still disabled or was just disabled by delegator so reset oscillator
                      00376         bra             resetOscillator
                      00377 
                      00378         ; delegator is idle and oscillator is enabled so copy delegated delta as internal
                      00379         movff   delegatedDeltas + (OSC_NUMBER * DELEGATED_DELTAS_ELEMENT_SIZE) + 0, oscDeltas + (OSC_NUM
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            BER * OSC_DELTAS_ELEMENT_SIZE) + 0
                      00380         movff   delegatedDeltas + (OSC_NUMBER * DELEGATED_DELTAS_ELEMENT_SIZE) + 1, oscDeltas + (OSC_NUM
                            BER * OSC_DELTAS_ELEMENT_SIZE) + 1
                      00381 
                      00382 oscCheckActive
                      00383         ; if oscDeltas[OSC_NUMBER] == 0x00 then oscillator is not really active so reset
                      00384         ; this check is required in event that (activeOutput == 0 && delegatorBusy == TRUE && oscDelta =
                            = 0)
                      00385         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, f
                      00386         bnz             oscActive
                      00387         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, f
                      00388         bz              resetOscillator
                      00389         
                      00390 oscActive
                      00391         ; if oscillator is starting from reset state then begin with 0x0000 accumulator
                      00392         btfsc   oscResetFlags, OSC_NUMBER, ACCESS
                      00393         bra             zeroAcc
                      00394 
                      00395         ;**** start procedure: step Accumulator (SINE/SQUARE/SAMPLE) ****
                      00396         ; accumulator += activeNoteDelta
                      00397         ; accumulators are 4 bytes wide, activeNoteDeltas are 2 bytes wide
                      00398         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 0, w
                      00399         addwf   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
                      00400         movf    oscDeltas                       + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE)                
                                    + 1, w  
                      00401         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
                      00402         movlw   0
                      00403         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
                      00404         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                      00405         
                      00406 zeroAcc
                      00407         ; we're done with oscResetFlags flag so ensure that it's clear
                      00408         bcf             oscResetFlags, OSC_NUMBER, ACCESS
                      00409         
                      00410         ;**** start procedure: handle Pitch Wheel (SINE/SQUARE/SAMPLE) ****
                      00411         ; accumulator += pitchWheel
                      00412         movf    pitchWheel                                                                              
                                                                            + 0, w, ACCESS
                      00413         addwf   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0, f
                      00414         movf    pitchWheel                                                                              
                                                                            + 1, w, ACCESS
                      00415         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, f
                      00416         movf    pitchWheel                                                                              
                                                                            + 2, w, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00417         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, f
                      00418         movf    pitchWheel                                                                              
                                                                            + 3, w, ACCESS
                      00419         addwfc  accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3, f
                      00420         
                      00421         ;**** start procedure: if SAMPLE waveshape then load next read address  (SAMPLE ONLY) ****
                      00422         ; branch to waveform specific table address load
                      00423         movlw   SAMPLE
                      00424         cpfseq  waveShape, ACCESS
                      00425         bra             waveIsNotSample
                      00426 waveIsSample
                      00427 
                      00428         ; if samplesLoaded flag is set then load next EEPROM read address
                      00429         ; checking this here as opposed to before accumulator update will, in the event of the mainline 
                            not…
                      00430         ; being able to load the samples in time, cause audio chopping rather than detuning
                      00431         btfss   eepromFlags, samplesLoaded, ACCESS
                      00432         bra             macroDone
                      00433         
                      00434         ; check for note transition
                      00435         ; noteTransition flag is set any time the active MIDI note changes during active sound generatio
                            n
                      00436         ; when a sample is playing back in POLY or SUSTAIN modes, we want the sample to restart from the
                             beginning...
                      00437         ; whenever a Note On message is received.
                      00438         btfss   midiFlags, noteTransition, ACCESS
                      00439         bra             noTransition
                      00440         ; is modeLevel == POLY
                      00441         movlw   POLY
                      00442         xorwf   modeLevel, w, ACCESS
                      00443         ; mode is POLY so reset accumulator to restart sample from beginning
                      00444         bz              clrSampleAcc
                      00445 
                      00446 noTransition    
                      00447         ; nextSampleAddress = ((accumulator >> 8) & 0xffff)
                      00448         ; reset accumulator if nextSampleAddress value will exceed sampleEndAddress
                      00449         ; is waveTableIndex > sampleEndAddress?
                      00450         movf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, w
                      00451         subwf   sampleEndAddress, w, ACCESS
                      00452         movf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, w
                      00453         subwfb  sampleEndAddress + 1, w, ACCESS
                      00454         ; result is positive so waveTableIndex is within valid range
                      00455         bc              addressOk
                      00456         ; ((accumulator >> 8) & 0xffff) is out of valid sample range so restart sample from beginning
                      00457         ; reset accumulator
                      00458 clrSampleAcc
                      00459         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 0
                      00460         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            + 1
                      00461         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2
                      00462         clrf    accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 3
                      00463 addressOk
                      00464         
                      00465         ; do nextSampleAddress = ((accumulator >> 8) & 0xffff)
                      00466         movff   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 1, nextSampleAddresses + (OSC_NUMBER * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 0
                      00467         movff   accumulators            + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE)                      
                            + 2, nextSampleAddresses + (OSC_NUMBER * NEXT_SAMPLE_ADDRESSES_EL_SIZE) + 1
                      00468         
                      00469         bra             macroDone
                      00470         
                      00471 waveIsNotSample
                      00472         ;**** start procedure: waveshape is SINE or SQUARE so read Program Memory table  (SINE/SQUARE ON
                            LY) ****
                      00473         ; branch to waveform specific table address load
                      00474         movlw   SINE
                      00475         cpfseq  waveShape, ACCESS
                      00476         bra             waveIsSquare
                      00477 
                      00478 waveIsSine      
                      00479         ; 
                      00480         ; load address of SINE table read
                      00481         ; offset = ((accumulator >> 8) & 0xff)
                      00482         movf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1, w
                      00483         addwf   sineTableBaseAddress + 0, w
                      00484         movwf   TBLPTRL, ACCESS
                      00485         movf    sineTableBaseAddress + 1, w
                      00486         btfsc   STATUS, C, ACCESS
                      00487         addlw   1
                      00488         movwf   TBLPTRH, ACCESS
                      00489         movf    sineTableBaseAddress + 2, w
                      00490         btfsc   STATUS, C, ACCESS
                      00491         addlw   1
                      00492         movwf   TBLPTRU, ACCESS
                      00493         bra             tableAddressLoaded
                      00494 
                      00495 waveIsSquare
                      00496         ; load address of SQUARE table read
                      00497         ; offset = ((accumulator >> 8) & 0xff)
                      00498         movf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1, w
                      00499         addwf   squareTableBaseAddress + 0, w
                      00500         movwf   TBLPTRL, ACCESS
                      00501         movf    squareTableBaseAddress + 1, w
                      00502         btfsc   STATUS, C, ACCESS
                      00503         addlw   1
                      00504         movwf   TBLPTRH, ACCESS
                      00505         movf    squareTableBaseAddress + 2, w
                      00506         btfsc   STATUS, C, ACCESS
                      00507         addlw   1
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00508         movwf   TBLPTRU, ACCESS
                      00509 
                      00510 tableAddressLoaded
                      00511         ; read value from program memory
                      00512         tblrd*
                      00513         movff   TABLAT, activeOutputValues + (OSC_NUMBER * ACTIVE_OUTPUT_VALUES_EL_SIZE) + 0
                      00514         bra             macroDone
                      00515         
                      00516 resetOscillator
                      00517         ; set oscillator reset flag
                      00518         bsf             oscResetFlags, OSC_NUMBER, ACCESS
                      00519         clrf    activeOutputValues + (OSC_NUMBER * ACTIVE_OUTPUT_VALUES_EL_SIZE)
                      00520         clrf    oscDeltas + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE) + 0
                      00521         clrf    oscDeltas + (OSC_NUMBER * OSC_DELTAS_ELEMENT_SIZE) + 1
                      00522         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 0
                      00523         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 1
                      00524         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 2
                      00525         clrf    accumulators + (OSC_NUMBER * ACCUMULATORS_ELEMENT_SIZE) + 3
                      00526 
                      00527 macroDone
                      00528 
                      00529         ENDM
                      00530         
                      00531         
                      00532 #endif
                      00533 
                      00534 
                      00058         #include        "../header/userInterface.h"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      userinterface.h                                   *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 #ifndef _USERINTERFACEH_
                      00022 #define _USERINTERFACEH_
                      00023 
                      00024 #define LEVEL_POLY_LED_BLINK_RATE               0
                      00025 #define LEVEL_SUSTAIN_LED_BLINK_RATE    2
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00026 #define LEVEL_MONO_LED_BLINK_RATE               1
                      00027 
                      00028 ;**********************************************************************
                      00029 ; MACROS
                      00030 ;**********************************************************************
                      00031                                                         
                      00032 #ifndef THROUGH_HOLE_PCB
                      00033 
                      00034 #ifdef  LED_STEADY_STATE_DISABLED
                      00035 
                      00036 LED_SINE_ON     MACRO
                      00037 #ifndef LED_POLARITY_REVERSED
                      00038         bcf             ledOnOffFlags, RA5, ACCESS      ; LED is on
                      00039 #else
                      00040         bsf             ledOnOffFlags, RA5, ACCESS      ; LED is on
                      00041 #endif
                      00042         ENDM
                      00043 
                      00044 LED_SQUARE_ON   MACRO
                      00045 #ifndef LED_POLARITY_REVERSED
                      00046         bcf             ledOnOffFlags, RC4, ACCESS      ; LED is on
                      00047 #else
                      00048         bsf             ledOnOffFlags, RC4, ACCESS      ; LED is on
                      00049 #endif
                      00050         ENDM
                      00051 
                      00052 LED_SAMPLE_ON   MACRO
                      00053 #ifndef LED_POLARITY_REVERSED
                      00054         bcf             ledOnOffFlags, RC3, ACCESS      ; LED is on
                      00055 #else
                      00056         bsf             ledOnOffFlags, RC3, ACCESS      ; LED is on
                      00057 #endif
                      00058         ENDM
                      00059 
                      00060 LED_SINE_OFF    MACRO
                      00061 #ifndef LED_POLARITY_REVERSED
                      00062         bsf             ledOnOffFlags, RA5, ACCESS      ; LED is off
                      00063 #else
                      00064         bcf             ledOnOffFlags, RA5, ACCESS      ; LED is off
                      00065 #endif
                      00066         ENDM
                      00067 
                      00068 LED_SQUARE_OFF  MACRO
                      00069 #ifndef LED_POLARITY_REVERSED
                      00070         bsf             ledOnOffFlags, RC4, ACCESS      ; LED is off
                      00071 #else
                      00072         bcf             ledOnOffFlags, RC4, ACCESS      ; LED is off
                      00073 #endif
                      00074         ENDM
                      00075 
                      00076 LED_SAMPLE_OFF  MACRO
                      00077 #ifndef LED_POLARITY_REVERSED
                      00078         bsf             ledOnOffFlags, RC3, ACCESS      ; LED is off
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00079 #else
                      00080         bcf             ledOnOffFlags, RC3, ACCESS      ; LED is off
                      00081 #endif
                      00082         ENDM
                      00083 
                      00084 LED_SINE_TOGGLE MACRO
                      00085         btg             ledOnOffFlags, RA5, ACCESS      ; LED is toggled
                      00086         ENDM
                      00087 
                      00088 LED_SQUARE_TOGGLE       MACRO
                      00089         btg             ledOnOffFlags, RC4, ACCESS      ; LED is toggled
                      00090         ENDM
                      00091 
                      00092 LED_SAMPLE_TOGGLE       MACRO
                      00093         btg             ledOnOffFlags, RC3, ACCESS      ; LED is toggled
                      00094         ENDM
                      00095 
                      00096 #else   ; #ifdef LED_STEADY_STATE_DISABLED
                      00097 
                      00098 LED_SINE_ON     MACRO
                      00099 #ifndef LED_POLARITY_REVERSED
                      00100         bcf             LATA, RA5, ACCESS       ; LED is on
                      00101 #else
                      00102         bsf             LATA, RA5, ACCESS       ; LED is on
                      00103 #endif
                      00104         ENDM
                      00105 
                      00106 LED_SQUARE_ON   MACRO
                      00107 #ifndef LED_POLARITY_REVERSED
                      00108         bcf             LATC, RC4, ACCESS       ; LED is on
                      00109 #else
                      00110         bsf             LATC, RC4, ACCESS       ; LED is on
                      00111 #endif
                      00112         ENDM
                      00113 
                      00114 LED_SAMPLE_ON   MACRO
                      00115 #ifndef LED_POLARITY_REVERSED
                      00116         bcf             LATC, RC3, ACCESS       ; LED is on
                      00117 #else
                      00118         bsf             LATC, RC3, ACCESS       ; LED is on
                      00119 #endif
                      00120         ENDM
                      00121 
                      00122 LED_SINE_OFF    MACRO
                      00123 #ifndef LED_POLARITY_REVERSED
                      00124         bsf             LATA, RA5, ACCESS       ; LED is off
                      00125 #else
                      00126         bcf             LATA, RA5, ACCESS       ; LED is off
                      00127 #endif
                      00128         ENDM
                      00129 
                      00130 LED_SQUARE_OFF  MACRO
                      00131 #ifndef LED_POLARITY_REVERSED
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00132         bsf             LATC, RC4, ACCESS       ; LED is off
                      00133 #else
                      00134         bcf             LATC, RC4, ACCESS       ; LED is off
                      00135 #endif
                      00136         ENDM
                      00137 
                      00138 LED_SAMPLE_OFF  MACRO
                      00139 #ifndef LED_POLARITY_REVERSED
                      00140         bsf             LATC, RC3, ACCESS       ; LED is off
                      00141 #else
                      00142         bcf             LATC, RC3, ACCESS       ; LED is off
                      00143 #endif
                      00144         ENDM
                      00145 
                      00146 LED_SINE_TOGGLE MACRO
                      00147         btg             LATA, RA5, ACCESS       ; LED is toggled
                      00148         ENDM
                      00149 
                      00150 LED_SQUARE_TOGGLE       MACRO
                      00151         btg             LATC, RC4, ACCESS       ; LED is toggled
                      00152         ENDM
                      00153 
                      00154 LED_SAMPLE_TOGGLE       MACRO
                      00155         btg             LATC, RC3, ACCESS       ; LED is toggled
                      00156         ENDM
                      00157 
                      00158 #endif  ; #ifdef LED_STEADY_STATE_DISABLED
                      00159 
                      00160 #else   ; #ifndef THROUGH_HOLE_PCB
                      00161 
                      00162 #ifdef  LED_STEADY_STATE_DISABLED
                      00163 
                      00164 LED_SINE_ON     MACRO
                      00165 #ifndef LED_POLARITY_REVERSED
                      00166         bcf             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00167 #else
                      00168         bsf             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00169 #endif
                      00170         ENDM
                      00171 
                      00172 LED_SQUARE_ON   MACRO
                      00173 #ifndef LED_POLARITY_REVERSED
                      00174         bcf             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00175 #else
                      00176         bsf             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00177 #endif
                      00178         ENDM
                      00179 
                      00180 LED_SAMPLE_ON   MACRO
                      00181 #ifndef LED_POLARITY_REVERSED
                      00182         bcf             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00183 #else
                      00184         bsf             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00185 #endif
                      00186         ENDM
                      00187 
                      00188 LED_SINE_OFF    MACRO
                      00189 #ifndef LED_POLARITY_REVERSED
                      00190         bsf             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00191 #else
                      00192         bcf             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00193 #endif
                      00194         ENDM
                      00195 
                      00196 LED_SQUARE_OFF  MACRO
                      00197 #ifndef LED_POLARITY_REVERSED
                      00198         bsf             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00199 #else
                      00200         bcf             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00201 #endif
                      00202         ENDM
                      00203 
                      00204 LED_SAMPLE_OFF  MACRO
                      00205 #ifndef LED_POLARITY_REVERSED
                      00206         bsf             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00207 #else
                      00208         bcf             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00209 #endif
                      00210         ENDM
                      00211 
                      00212 LED_SINE_TOGGLE MACRO
                      00213         btg             ledOnOffFlags, RC3, ACCESS      ; SINE LED
                      00214         ENDM
                      00215 
                      00216 LED_SQUARE_TOGGLE       MACRO
                      00217         btg             ledOnOffFlags, RC4, ACCESS      ; SQUARE LED
                      00218         ENDM
                      00219 
                      00220 LED_SAMPLE_TOGGLE       MACRO
                      00221         btg             ledOnOffFlags, RA5, ACCESS      ; SAMPLE LED
                      00222         ENDM
                      00223         
                      00224 #else   ; #ifdef LED_STEADY_STATE_DISABLED
                      00225 
                      00226 LED_SINE_ON     MACRO
                      00227 #ifndef LED_POLARITY_REVERSED
                      00228         bcf             LATC, RC3, ACCESS       ; SINE LED
                      00229 #else
                      00230         bsf             LATC, RC3, ACCESS       ; SINE LED
                      00231 #endif
                      00232         ENDM
                      00233 
                      00234 LED_SQUARE_ON   MACRO
                      00235 #ifndef LED_POLARITY_REVERSED
                      00236         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                      00237 #else
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00238         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                      00239 #endif
                      00240         ENDM
                      00241 
                      00242 LED_SAMPLE_ON   MACRO
                      00243 #ifndef LED_POLARITY_REVERSED
                      00244         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                      00245 #else
                      00246         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                      00247 #endif
                      00248         ENDM
                      00249 
                      00250 LED_SINE_OFF    MACRO
                      00251 #ifndef LED_POLARITY_REVERSED
                      00252         bsf             LATC, RC3, ACCESS       ; SINE LED
                      00253 #else
                      00254         bcf             LATC, RC3, ACCESS       ; SINE LED
                      00255 #endif
                      00256         ENDM
                      00257 
                      00258 LED_SQUARE_OFF  MACRO
                      00259 #ifndef LED_POLARITY_REVERSED
                      00260         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                      00261 #else
                      00262         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                      00263 #endif
                      00264         ENDM
                      00265 
                      00266 LED_SAMPLE_OFF  MACRO
                      00267 #ifndef LED_POLARITY_REVERSED
                      00268         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                      00269 #else
                      00270         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                      00271 #endif
                      00272         ENDM
                      00273 
                      00274 LED_SINE_TOGGLE MACRO
                      00275         btg             LATC, RC3, ACCESS       ; SINE LED
                      00276         ENDM
                      00277 
                      00278 LED_SQUARE_TOGGLE       MACRO
                      00279         btg             LATC, RC4, ACCESS       ; SQUARE LED
                      00280         ENDM
                      00281 
                      00282 LED_SAMPLE_TOGGLE       MACRO
                      00283         btg             LATA, RA5, ACCESS       ; SAMPLE LED
                      00284         ENDM
                      00285 
                      00286 #endif  ; #ifdef LED_STEADY_STATE_DISABLED
                      00287 
                      00288 #endif  ; #ifndef THROUGH_HOLE_PCB
                      00289 
                      00290 LED_SINE_TOGGLE_OTHERS_OFF      MACRO
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00291         LED_SINE_TOGGLE
                      00292         LED_SQUARE_OFF
                      00293         LED_SAMPLE_OFF
                      00294         ENDM
                      00295 
                      00296 LED_SQUARE_TOGGLE_OTHERS_OFF    MACRO
                      00297         LED_SINE_OFF
                      00298         LED_SQUARE_TOGGLE
                      00299         LED_SAMPLE_OFF
                      00300         ENDM
                      00301 
                      00302 LED_SAMPLE_TOGGLE_OTHERS_OFF    MACRO
                      00303         LED_SINE_OFF
                      00304         LED_SQUARE_OFF
                      00305         LED_SAMPLE_TOGGLE
                      00306         ENDM
                      00307 
                      00308 LED_ALL_TOGGLE  MACRO
                      00309         LED_SINE_TOGGLE
                      00310         LED_SQUARE_TOGGLE
                      00311         LED_SAMPLE_TOGGLE
                      00312         ENDM
                      00313 
                      00314 LED_ALL_ON      MACRO
                      00315         LED_SINE_ON
                      00316         LED_SQUARE_ON
                      00317         LED_SAMPLE_ON
                      00318         ENDM
                      00319 
                      00320 LED_ALL_OFF     MACRO
                      00321         LED_SINE_OFF
                      00322         LED_SQUARE_OFF
                      00323         LED_SAMPLE_OFF
                      00324         ENDM
                      00325 
                      00326 LED_ONLY_SINE_ON        MACRO
                      00327         LED_SINE_ON
                      00328         LED_SQUARE_OFF
                      00329         LED_SAMPLE_OFF
                      00330         ENDM
                      00331 
                      00332 LED_ONLY_SQUARE_ON      MACRO
                      00333         LED_SINE_OFF
                      00334         LED_SQUARE_ON
                      00335         LED_SAMPLE_OFF
                      00336         ENDM
                      00337 
                      00338 LED_ONLY_SAMPLE_ON      MACRO
                      00339         LED_SINE_OFF
                      00340         LED_SQUARE_OFF
                      00341         LED_SAMPLE_ON
                      00342         ENDM
                      00343 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00344 #endif  ; #ifndef _USERINTERFACEH_
                      00345 
                      00059                 
                      00060 ;**********************************************************************
                      00061 ; GLOBAL VARIABLES
                      00062 ;**********************************************************************
                      00063         
                      00064         ; set stack base address as last data mem address
                      00065         CBLOCK 0x2ff
  000002FF            00066                 softwareStackBaseAddress:1
                      00067         ENDC
                      00068 
                      00069 ;**********************************************************************
                      00070 ; CODE BEGIN / RESET VECTOR
                      00071 ;**********************************************************************
                      00072 
                      00073         ORG             0x0000                                                  ; processor reset vector
000000 6AFA           00074         clrf    PCLATH                                                  ; ensure page bits are cleared
000002 EF?? F???      00075         goto    mootLoader                                              ; jump to bootloader
                      00076 
                      00077 ;**********************************************************************
                      00078 ; INTERRUPT VECTORS
                      00079 ;**********************************************************************
                      00080 
                      00081         ORG     0x0008                                          ; high-priority interrupt vector
000008 EF?? F???      00082         goto    highPriorityISR_redirect
                      00083 
                      00084         ORG     0x0018                                          ; low-priority interrupt vector
000018 EF?? F???      00085         goto    lowPriorityISR_redirect
                      00086 
                      00087 
                      00088 ;**********************************************************************
                      00089 ; USER-DEFINED MAIN() AND ISR() REDIRECTS
                      00090 ;**********************************************************************
                      00091 ; To prevent the user from rendering the bootloader unusable in the event
                      00092 ; of a failed Program Memory write, the first >=64 bytes of Program Memory
                      00093 ; will not be writable (set via USER_CODE_START_ADDRESS define) via the
                      00094 ; bootloader so must contain no user code.
                      00095 ; The first 64 bytes will contain only:
                      00096 ;
                      00097 ; 0x0000: clrf  PCLATH                                          ; set bank-select bits to Bank0
                      00098 ; 0x0001: goto  mootLoader                                      ; jump to bootloader on reset
                      00099 ; 0x0008: goto  highPriorityISR_redirect        ; jump to high priority ISR redirect in user space
                      00100 ; 0x0018: goto  lowPriorityISR_redirect         ; jump to low priority ISR redirect in user space
                      00101 ;
                      00102 ; since these will not be modifiable without a hardware programmer, these
                      00103 ; redirects will point to the following static addresses:
                      00104 ;
                      00105 ; 0x0040: goto main                             ; jump to main()
                      00106 ; 0x0044: goto highPriorityISR  ; jump to highPriorityISR()
                      00107 ; 0x0048: goto lowPriorityISR   ; jump to lowPriorityISR()
                      00108 ;
                      00109 ; When writing new firmware, the user is responsible for maintaing these 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00110 ; jump instructions at these addresses.  Note that the "goto" instruction
                      00111 ; requires 2 words of Program Memory space.
                      00112 
                      00113         ORG             USER_CODE_START_ADDRESS
000040                00114 main_redirect
000040 EF?? F???      00115         goto    main
000044                00116 highPriorityISR_redirect
000044 EF?? F???      00117         goto    highPriorityISR
000048                00118 lowPriorityISR_redirect
000048 EF?? F???      00119         goto    lowPriorityISR
00004C                00120 highPriorityISR
00004C                00121 lowPriorityISR
00004C                00122 main
00004C 0000           00123         nop
                      00124 
                      00125         ; ensure that bootLoader reads/writes all program mem from USER_CODE_START_ADDRESS to bootloader
                      00126         ORG             0x17FE
Warning[208]: Label truncated at 32 characters. (lastApplicationProgramMemoryAddress)
0017FE                00127 lastApplicationProgramMemoryAddress
0017FE 0000           00128         nop
                      00129         
                      00130         ORG             0x1800  ; 1024 word (2048-byte) boot block
                      00131         #include        "../source/mootLoader.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      mootLoader.asm                                    *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 
                      00015 
                      00016 ;**********************************************************************
                      00017 ; INCLUDE FILES
                      00018 ;**********************************************************************
                      00019         
                      00020         #include        "../header/mootloader.h"
                      00001 ;**********************************************************************
                      00002 ;                                                                     *
                      00003 ;    Project:       deMIDulator                                       *
                      00004 ;    Filename:      eeprom.h                                          *
                      00005 ;    Date:                                                            *
                      00006 ;    File Version:                                                    *
                      00007 ;                                                                     *
                      00008 ;    Author:        Derek Enos                                        *
                      00009 ;    Company:                                                         *
                      00010 ;                                                                     * 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00011 ;                                                                     *
                      00012 ;**********************************************************************
                      00013 ;                                                                     *
                      00014 ;    Files required:                                                  *
                      00015 ;                                                                     *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;**********************************************************************
                      00019 
                      00020 #ifndef _MOOTLOADERH_
                      00021 #define _MOOTLOADERH_
                      00022 
                      00023 
                      00024 ; ******************* MOOTLOADER TRANSACTION DEFINES ***********************
                      00025 
                      00026 #define ML_BLOCK_ERASE_BYTE_SIZE                        64      ; must be multiple of ML_DATA_PAYLOAD_BY
                            TE_SIZE
                      00027 #define ML_DATA_PACKET_PAYLOAD_BYTE_SIZE        8
                      00028 
                      00029 #define ML_BLOCK_ERASE_IDLE_TIME_MS                     8
                      00030 #define ML_WRITE_IDLE_TIME_MS                           8
                      00031 #define ML_TRANS_SYNC_IDLE_TIME_MS                      32
                      00032 
                      00033 
                      00034 ; ******************* MOOTLOADER COMMAND BYTE DEFINES ***********************
                      00035 
                      00036 #define MIDI_VENDOR_ID                                          0x77
                      00037 #define MIDI_DEVICE_ID                                          0x1D
                      00038 
                      00039 #define ML_COMMAND_WRITE_PROGRAM_MEMORY         0x03
                      00040 #define ML_COMMAND_DATA_PAYLOAD                         0x01
                      00041 #define ML_COMMAND_DATA_PAYLOAD_COMPLETE        0x02
                      00042 #define ML_TRANSMITTER_RESETTING                        0x10
                      00043 #define ML_RECEIVER_RESET                                       0x11
                      00044 
                      00045 
                      00046 ; ******************* MOOTLOADER PACKET DEFINES ***********************
                      00047 
                      00048 #define ML_LARGE_PACKET_BYTE_SIZE               22
                      00049 
                      00050 
                      00051 ; ******************* mlFlags BIT DEFINES ***********************
                      00052 
                      00053 #define mlRxTransSyncFlag                                       0
                      00054 #define mlRxChecksumOk                                          1
                      00055 
                      00056 
                      00057 ;**********************************************************************
                      00058 ; MACROS
                      00059 ;**********************************************************************
                      00060 
                      00061 SEND_SYSEX_INTRO_NO_CHECK       MACRO
                      00062         movlw   0xF0
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00063         call    mootLoader_sendByte
                      00064         movlw   MIDI_VENDOR_ID
                      00065         call    mootLoader_sendByte
                      00066         movlw   MIDI_DEVICE_ID
                      00067         call    mootLoader_sendByte
                      00068         ENDM
                      00069 
                      00070 SEND_BYTE_START_CHECKSUM        MACRO
                      00071         movwf   mlChecksum, ACCESS
                      00072         call    mootLoader_sendByte
                      00073         ENDM
                      00074 
                      00075 SEND_BYTE_DO_CHECKSUM           MACRO
                      00076         xorwf   mlChecksum, f, ACCESS
                      00077         call    mootLoader_sendByte
                      00078         ENDM
                      00079 
                      00080 SPLIT_BYTE_THEN_SEND_DO_CHECKSUM        MACRO
                      00081         xorwf   mlChecksum, f, ACCESS
                      00082         call    mootLoader_sendAsNybbles
                      00083         ENDM
                      00084 
                      00085 SEND_CHECKSUM_CLEAR_RUN         MACRO
                      00086         movf    mlChecksum, w, ACCESS
                      00087         ; ensure that bit 7 is clear
                      00088         andlw   0x7f
                      00089         clrf    mlRunningChecksum, ACCESS
                      00090         call    mootLoader_sendByte
                      00091         ENDM
                      00092         
                      00093 SEND_CHECKSUM_DO_RUN            MACRO
                      00094         movf    mlChecksum, w, ACCESS
                      00095         ; ensure that bit 7 is clear
                      00096         andlw   0x7f
                      00097         xorwf   mlRunningChecksum, f, ACCESS
                      00098         call    mootLoader_sendByte
                      00099         ENDM
                      00100 
                      00101 SEND_RUNNING_CHECKSUM           MACRO
                      00102         movf    mlRunningChecksum, w, ACCESS
                      00103         ; ensure that bit 7 is clear
                      00104         andlw   0x7f
                      00105         call    mootLoader_sendByte
                      00106         ENDM
                      00107 
                      00108 IDLE_BLOCK_ERASE                        MACRO
                      00109         movlw   ML_BLOCK_ERASE_IDLE_TIME_MS
                      00110         call    mootLoader_wait
                      00111         ENDM
                      00112 
                      00113 IDLE_WRITE_WAIT                         MACRO
                      00114         movlw   ML_WRITE_IDLE_TIME_MS
                      00115         call    mootLoader_wait
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00116         ENDM
                      00117 
                      00118         
                      00119 #endif
                      00120 
                      00021 
                      00022         
                      00023 ;**********************************************************************
                      00024 ; LOCAL VARIABLES
                      00025 ;**********************************************************************
                      00026 
                      00027         CBLOCK 0
                      00028 
                      00029                 ; global
  00000000            00030                 mlButtonState:1
  00000001            00031                 mlChecksum:1
  00000002            00032                 mlRunningChecksum:1
  00000003            00033                 mlStartAddress:4
  00000007            00034                 mlPayloadLength:4
  0000000B            00035                 mlDataPayloadBuffer:ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
  00000013            00036                 mlCount:2
  00000015            00037                 mlFlags:1
                      00038                 ; sendNybble()
  00000016            00039                 mlNybbleSplitTmp:1
                      00040                 ; sendByte()
  00000017            00041                 mlCurrentTxByte:1
                      00042                 ; writeProgramMemory()
  00000018            00043                 mlBlockEraseBytesRemaining:1
                      00044                 ; sendDataPayloadPacket()
  00000019            00045                 mlDatPackIntByteCount:1
                      00046                 ; rxListenForPrelude()
  0000001A            00047                 mlPerfectPreludeCount:1
                      00048                 ; mootLoader_rxReceiveNextPacket()
  0000001B            00049                 mlRxReceivedPacket:ML_LARGE_PACKET_BYTE_SIZE
  00000031            00050                 mlRxReceivedPacketByteCount:1
                      00051                 ; rxReceiveNextByte()
  00000032            00052                 mlRxReceivedByte:1
                      00053                 ; rxReceiveNextSymbol()
  00000033            00054                 mlRxPreviousSymbolBucket:1
  00000034            00055                 mlConsecutiveSymbolCount:1
                      00056                 ; convertPeriodToSymbol()
  00000035            00057                 mlRxSymbolBucket:1
  00000036            00058                 mlPeriodBucketLowLimit:1
  00000037            00059                 mlPeriodBucketHighLimit:1
  00000038            00060                 mlSymbolBucketCount:1
                      00061                 ; measureInputCyclePeriod()
  00000039            00062                 mlRA4CompareReg:1
  0000003A            00063                 mlRxCyclePeriodL:1
  0000003B            00064                 mlRxCyclePeriodH:1
  0000003C            00065                 mlSchmittReadValue:1
  0000003D            00066                 mlTransitionCount:1
                      00067                 ; rxDecodeReceivedSymbol()
  0000003E            00068                 mlDecodedNybble:1
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00069                 ; debug
  0000003F            00070                 mlEepromAddress:1
  00000040            00071                 mlEepromByteCount:1
                      00072                 
                      00073         ENDC
                      00074 
                      00075 
                      00076 ;**********************************************************************
                      00077 ; LOCAL DEFINES
                      00078 ;**********************************************************************
                      00079 
                      00080 ;#define        DEBUG_TOGGLE_SQUARE_ON_SAMPLE
                      00081 ;#define        DEBUG_TOGGLE_SQUARE_ON_EDGE_DETECT
                      00082 ;#define        DEBUG_SQUARE_FOLLOWS_SCHMITT_VALUE
                      00083 ;#define        DEBUG_TOGGLE_SQUARE_ON_MEASURE_BOUNDS
                      00084 ;#define        DEBUG_TOGGLE_SQUARE_ON_NEW_SYMBOL_DETECT
                      00085 
                      00086 
                      00087 ;**********************************************************************
                      00088 ; mootLoader BEGIN
                      00089 ;**********************************************************************
                      00090 
001800                00091 mootLoader
                      00092         
001800 EC?? F???      00093         call    mootLoader_initCore
                      00094         
                      00095         ; use BANK0
001804 0100           00096         BANKSEL 0
                      00097                 
                      00098         ; turn on all LEDs
                      00099         LED_ALL_ON
                          M         LED_SINE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
001806 868B               M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
001808 888B               M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_ON
                          M #ifndef LED_POLARITY_REVERSED
                          M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
00180A 8A89               M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
                      00100 
                      00101         ; check if boot action is being requested
                      00102         ; enter mootLoader Trasmitter mode if waveform(RC0) & record(RC1) switches held for 2 second
                      00103         ; enter mootLoader Receiver mode if record(RC1) & mode(RC2) switches held for 2 second
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00104         ; enter Flash restore from EEPROM mode if waveform(RC0), record(RC1) & mode(RC2) switches held f
                            or 2 second
                      00105 
                      00106         ;**** start procedure: check button state ****
                      00107         ; if any buttons (RC0 - RC2) are pressed then wait for button state to remain unchanged for 2 se
                            conds
00180C 1C82           00108         comf    PORTC, w, ACCESS
00180E 0B07           00109         andlw   0x07
                      00110         ; no buttons are active so exit
001810 E0??           00111         bz              mootLoader_exit
                      00112         ; at least one button is active so wait to make sure that state doesn't change for 2 seconds
                      00113         ; mlTmpValue = compliment of initial RC2:0 value
001812 6E00           00114         movwf   mlButtonState, ACCESS
001814 6ACC           00115         clrf    TMR2, ACCESS
001816 0E24           00116         movlw   0x24
001818 6E13           00117         movwf   mlCount, ACCESS
00181A 0EF4           00118         movlw   0xf4
00181C 6E14           00119         movwf   mlCount + 1, ACCESS
00181E                00120 mootLoader_stateWaitLp
00181E 1C82           00121         comf    PORTC, w, ACCESS
001820 0B07           00122         andlw   0x07
001822 6200           00123         cpfseq  mlButtonState, ACCESS
                      00124         ; button state has changed before timer expiration so exit mootLoader
001824 D???           00125         bra             mootLoader_exit
                      00126         ; state has not changed so wait for timer overflow
001826 929E           00127         bcf             PIR1, TMR2IF, ACCESS    
001828                00128 mootLoader_stateWaitOvLp
001828 A29E           00129         btfss   PIR1, TMR2IF, ACCESS
00182A D???           00130         bra             mootLoader_stateWaitOvLp        
                      00131         ; timer has overflowed so decrement overflow counter
00182C 0613           00132         decf    mlCount, f, ACCESS
00182E A0D8           00133         btfss   STATUS, C, ACCESS
001830 0614           00134         decf    mlCount + 1, f, ACCESS
001832 5213           00135         movf    mlCount, f, ACCESS
                      00136         ; count != so continue loop
001834 E1??           00137         bnz             mootLoader_stateWaitLp
001836 5214           00138         movf    mlCount + 1, f, ACCESS
                      00139         ; count != so continue loop
001838 E1??           00140         bnz             mootLoader_stateWaitLp
                      00141 
                      00142         ; button state remained unchanged for 2 seconds. yay
                      00143 
                      00144         ;**** start procedure: check button combo value ****
                      00145         ; remeber, mlButtonState is reversed logic
00183A 0E03           00146         movlw   0<<RC2 ^ 1<<RC1 ^ 1<<RC0
00183C 6200           00147         cpfseq  mlButtonState, ACCESS
00183E D???           00148         bra             mootLoader_checkReceive
001840 D???           00149         bra             mootLoader_transmitter          
001842                00150 mootLoader_checkReceive
001842 0E06           00151         movlw   1<<RC2 ^ 1<<RC1 ^ 0<<RC0
001844 6200           00152         cpfseq  mlButtonState, ACCESS
001846 D???           00153         bra             mootLoader_checkRestore
001848 D???           00154         bra             mootLoader_receiver
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00184A                00155 mootLoader_checkRestore
00184A 0E07           00156         movlw   1<<RC2 ^ 1<<RC1 ^ 1<<RC0
00184C 6200           00157         cpfseq  mlButtonState, ACCESS
00184E D???           00158         bra             mootLoader_exit
001850 D???           00159         bra             mootLoader_restore
                      00160 
001852                00161 mootLoader_exit
001852 EF?? F???      00162         goto    main_redirect
                      00163                         
                      00164         ; include code for mootLoader functions
                      00165         #include        "mootLoader_init.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      mootLoader_init_v0_2.asm                          *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 ;                                                                     *
                      00015 ;    Files required:                                                  *
                      00016 ;                                                                     *
                      00017 ;                                                                     *
                      00018 ;                                                                     *
                      00019 ;**********************************************************************
                      00020 
                      00021 ;**********************************************************************
                      00022 ; INCLUDE FILES
                      00023 ;**********************************************************************
                      00024 
                      00025 ;**********************************************************************
                      00026 ; LOCAL FUNCTIONS
                      00027 ;**********************************************************************
                      00028 
                      00029 ;**********************************************************************
                      00030 ; Function: void mootLoader_initCore()
                      00031 ;**********************************************************************
                      00032 
001856                00033 mootLoader_initCore
001856 EC?? F???      00034         call mootLoader_initOsc
00185A EC?? F???      00035         call mootLoader_initIO
00185E EC?? F???      00036         call mootLoader_initUART
001862 EC?? F???      00037         call mootLoader_initTimer0
001866 EC?? F???      00038         call mootLoader_initTimer1
00186A EC?? F???      00039         call mootLoader_initTimer2
00186E EC?? F???      00040         call mootLoader_initCCP
001872 EC?? F???      00041         call mootLoader_initSPI
001876 EC?? F???      00042         call mootLoader_initADC
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00187A EC?? F???      00043         call mootLoader_initInterrupts
00187E EC?? F???      00044         call mootLoader_initRAM
001882 EC?? F???      00045         call mootLoader_initHeap
001886 0012           00046         return
                      00047                 
                      00048         
                      00049 ;**********************************************************************
                      00050 ; Function: void mootLoader_initOsc()
                      00051 ;**********************************************************************
                      00052 
001888                00053 mootLoader_initOsc
                      00054         ; configure for internal clock at 8Mhz & 4x PLL = 32Mhz
                      00055         ; primary clock determined by FOSC<3:0>
                      00056         ; confirgure internal osc for 8Mhz
001888 8CD3           00057         bsf             OSCCON, IRCF2, ACCESS
00188A 8AD3           00058         bsf             OSCCON, IRCF1, ACCESS
00188C 98D3           00059         bcf             OSCCON, IRCF0, ACCESS
00188E                00060 mootLoader_initOsc_lp1
                      00061         ; wait for internal high freq osc to stabilize
00188E A4D3           00062         btfss   OSCCON, IOFS, ACCESS
001890 D???           00063         bra             mootLoader_initOsc_lp1
                      00064 
                      00065         ; enable PLL
001892 8C9B           00066         bsf             OSCTUNE, SPLLEN, ACCESS
                      00067 
001894 0012           00068         return
                      00069 
                      00070 
                      00071 ;**********************************************************************
                      00072 ; Function: void mootLoader_initIO()
                      00073 ;**********************************************************************
                      00074 
001896                00075 mootLoader_initIO
                      00076         ; IO Summary
                      00077         ; 
                      00078         ; (organized by pin #)
                      00079         ; Pin   Port    Assignment
                      00080         ; ---  ----     ----------
                      00081         ; 1             VDD             VDD
                      00082         ; 2             RA5             LED (Sine)
                      00083         ; 3             RA4             Audio In
                      00084         ; 4             RA3             ICSP
                      00085         ; 5             RC5             Audio Out
                      00086         ; 6             RC4             LED (Square)
                      00087         ; 7             RC3             LED (Sample)
                      00088         ; 8             RC6             EEPROM Chip Select
                      00089         ; 9             RC7             EEPROM Slave In
                      00090         ; 10    RB7             [Not Connected]
                      00091         ; 11    RB6             EEPROM Clock
                      00092         ; 12    RB5             MIDI In
                      00093         ; 13    RB4             EEPROM Slave Out
                      00094         ; 14    RC2             Switch (MIDI Record / Playback)
                      00095         ; 15    RC1             Switch (Voice Through / Record)
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00096         ; 16    RC0             Switch (Waveform)
                      00097         ; 17    VUSB    [Not Connected]
                      00098         ; 18    RA1             ICSP
                      00099         ; 19    RA0             ICSP
                      00100         ; 20    VSS             VSS
                      00101         ;
                      00102         ; [PORT A]
                      00103         ; Pin   Port    Assignment                                                      Direction
                      00104         ; ---  ----             ----------                                                      --------
                            -
                      00105         ; 19    RA0             ICSP                                                            IN
                      00106         ; 18    RA1             ICSP                                                            IN
                      00107         ; 4             RA3             ICSP                                                            
                            IN
                      00108         ; 3             RA4             Audio In                                                        
                            IN
                      00109         ; 2             RA5             LED (Sine)                                                      
                            OUT
                      00110 
001896 8A89           00111         bsf             LATA, RA5, ACCESS       ; LED is off
001898 0EDF           00112         movlw   0xff ^ 1<<RA5
00189A 6E92           00113         movwf   TRISA, ACCESS
                      00114 
                      00115         ; [PORT B]
                      00116         ; Pin   Port    Assignment                                                      Direction
                      00117         ; ---  ----             ----------                                                      --------
                            -
                      00118         ; 13    RB4             EEPROM Slave Out                                        IN
                      00119         ; 12    RB5             MIDI In                                                         IN
                      00120         ; 11    RB6             EEPROM Clock                                            OUT
                      00121         ; 10    RB7             [Not Connected]                                         IN
                      00122 
00189C 0EBF           00123         movlw   0xff ^ 1<<RB6   ; EEPROM clock is LOW
00189E 6E8A           00124         movwf   LATB, ACCESS
0018A0 0EBF           00125         movlw   0xff ^ 1<<RB6
0018A2 6E93           00126         movwf   TRISB, ACCESS
                      00127         
                      00128         ; [PORT C]
                      00129         ; Pin   Port    Assignment                                                      Direction
                      00130         ; ---  ----             ----------                                                      --------
                            -
                      00131         ; 16    RC0             Switch (Waveform)                                       IN
                      00132         ; 15    RC1             Switch (Voice Through / Record)         IN
                      00133         ; 14    RC2             Switch (MIDI Record / Playback)         IN
                      00134         ; 7             RC3             LED (Sample)                                            OUT
                      00135         ; 6             RC4             LED (Square)                                            OUT
                      00136         ; 5             RC5             Audio Out                                                       
                            OUT
                      00137         ; 8             RC6             EEPROM Chip Select                                      OUT
                      00138         ; 9             RC7             EEPROM Slave In                                         OUT
                      00139         
0018A4 868B           00140         bsf             LATC, RC3, ACCESS       ; LED is off
0018A6 888B           00141         bsf             LATC, RC4, ACCESS       ; LED is off
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0018A8 9A8B           00142         bcf             LATC, RC5, ACCESS       ; Audio out is low
0018AA 8C8B           00143         bsf             LATC, RC6, ACCESS       ; Chip select is idle
0018AC 0E07           00144         movlw   0x07
0018AE 6E94           00145         movwf   TRISC, ACCESS
                      00146         
                      00147         ; [General IO]
0018B0 9EF1           00148         bcf             INTCON2, NOT_RABPU, ACCESS      ; enable PORT A & B pullups per WPU registers
0018B2 0E08           00149         movlw   1<<ANS3 ; ANS3 = RA4(Audio In)
0018B4 6E7E           00150         movwf   ANSEL, ACCESS   ; enable digital input buffers for all non-analog inputs
0018B6 6A7F           00151         clrf    ANSELH, ACCESS  ; enable digital input buffers for all non-analog inputs        
0018B8 0012           00152         return
                      00153         
                      00154         
                      00155 ;**********************************************************************
                      00156 ; Function: void mootLoader_initUART()
                      00157 ;**********************************************************************
                      00158 
0018BA                00159 mootLoader_initUART
0018BA 0E0F           00160         movlw   15      ; 31.25K baud rate @ 32Mhz clock
0018BC 6EAF           00161         movwf   SPBRG, ACCESS
                      00162         ; Enable serial port
                      00163         ; Enable reception
0018BE 8EAB           00164         bsf             RCSTA, SPEN, ACCESS
0018C0 88AB           00165         bsf             RCSTA, CREN, ACCESS
                      00166         ; Enable transmission
0018C2 8AAC           00167         bsf             TXSTA, TXEN, ACCESS
0018C4 0012           00168         return
                      00169 
                      00170 
                      00171 ;**********************************************************************
                      00172 ; Function: void mootLoader_initTimer0()
                      00173 ;**********************************************************************
                      00174 
0018C6                00175 mootLoader_initTimer0
                      00176         ; timer is on
                      00177         ; 16-bit mode
0018C6 9CD5           00178         bcf     T0CON, T08BIT, ACCESS
                      00179         ; clock = internal
0018C8 9AD5           00180         bcf             T0CON, T0CS, ACCESS
                      00181         ; timer0 using prescaler
                      00182         ; prescale = 1:8
                      00183         ; Fosc = 32Mhz. 1/((32Mhz/4)/ 8) * overflowValue(==65536) = overflow every 65.536mS)
0018CA 96D5           00184         bcf             T0CON, PSA, ACCESS
0018CC 94D5           00185         bcf             T0CON, T0PS2, ACCESS
0018CE 90D5           00186         bcf             T0CON, T0PS0, ACCESS    
0018D0 0012           00187         return
                      00188 
                      00189 
                      00190 ;**********************************************************************
                      00191 ; Function: void mootLoader_initTimer1()
                      00192 ;**********************************************************************
                      00193 
0018D2                00194 mootLoader_initTimer1
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00195         ; DO NOT ENABLE TIMER1 OR SDO WILL NOT WORK!
0018D2 0012           00196         return
                      00197 
                      00198 
                      00199 ;**********************************************************************
                      00200 ; Function: void mootLoader_initTimer2()
                      00201 ;**********************************************************************
                      00202 
0018D4                00203 mootLoader_initTimer2
                      00204 
                      00205         ; Prescale 1:1
                      00206         ; Turn on Timer2
0018D4 84CA           00207         bsf             T2CON, TMR2ON, ACCESS
                      00208         ; Reset and interrupt on match value
0018D6 0EFF           00209         movlw   255
0018D8 6ECB           00210         movwf   PR2, ACCESS
0018DA 0012           00211         return
                      00212         
                      00213 
                      00214 ;**********************************************************************
                      00215 ; Function: void mootLoader_initCCP()
                      00216 ;**********************************************************************
                      00217 
0018DC                00218 mootLoader_initCCP
                      00219         ; PWM single output
                      00220         ; PWM mode; P1A, P1C active-high; P1B, P1D active-high
                      00221         ; 10-bit PWM bits [1:0] = 0b11
0018DC 86BD           00222         bsf             CCP1CON, CCP1M3, ACCESS
0018DE 84BD           00223         bsf             CCP1CON, CCP1M2, ACCESS
                      00224 
0018E0 6ABE           00225         clrf    CCPR1L, ACCESS  
0018E2 0012           00226         return
                      00227 
                      00228 
                      00229 ;**********************************************************************
                      00230 ; Function: void mootLoader_initSPI()
                      00231 ;**********************************************************************
                      00232 
0018E4                00233 mootLoader_initSPI
                      00234         ; serial port enabled
                      00235         ; idle clock is LOW
                      00236         ; mode is SPI master, clock = Fosc/4 = 8MHz
0018E4 8AC6           00237         bsf             SSPCON1, SSPEN, ACCESS
                      00238 
                      00239         ; input data latched on idle->active
                      00240         ; output data latched on active->idle clock
0018E6 8CC7           00241         bsf             SSPSTAT, CKE, ACCESS
0018E8 0012           00242         return
                      00243         
                      00244 
                      00245 ;**********************************************************************
                      00246 ; Function: void mootLoader_initADC()
                      00247 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00248 
0018EA                00249 mootLoader_initADC
                      00250         ; channel = AN3
                      00251         ; ADC is on
0018EA 86C2           00252         bsf             ADCON0, CHS1, ACCESS    
0018EC 84C2           00253         bsf             ADCON0, CHS0, ACCESS    
0018EE 80C2           00254         bsf             ADCON0, ADON, ACCESS    
                      00255         
                      00256         ; positive reference is internal VDD
                      00257         ; negative reference is internal VSS
                      00258 
                      00259         ; left justify result
                      00260         ; acquisition time = 4 tad
                      00261         ; clock source = Fosc/32 = 32Mhz/32 = 1Mhz, TAD = 1uS
0018F0 88C0           00262         bsf             ADCON2, ACQT1, ACCESS
0018F2 82C0           00263         bsf             ADCON2, ADCS1, ACCESS
0018F4 0012           00264         return
                      00265 
                      00266 
                      00267 ;**********************************************************************
                      00268 ; Function: void mootLoader_initInterrupts()
                      00269 ;**********************************************************************
                      00270 
0018F6                00271 mootLoader_initInterrupts
                      00272         ; Enable interrupt priorities           
0018F6 8ED0           00273         bsf             RCON, IPEN, ACCESS
                      00274         
                      00275         ; unmask peripheral interrupts
                      00276         ; enable timer0 interrupts
                      00277         ; enable INT0 interrupts
                      00278         ; clear timer0 int flag
                      00279         ; clear INT0 int flag
0018F8 8CF2           00280         bsf             INTCON, PEIE, ACCESS
0018FA 8AF2           00281         bsf             INTCON, TMR0IE, ACCESS
0018FC 88F2           00282         bsf             INTCON, INT0IE, ACCESS
0018FE 94F2           00283         bcf             INTCON, TMR0IF, ACCESS
001900 92F2           00284         bcf             INTCON, INT0IF, ACCESS
                      00285         
                      00286         ; INT0 interrupt on falling edge
                      00287         ; INT1 interrupt on falling edge
                      00288         ; INT2 interrupt on falling edge
                      00289         ; Interrupt priority is low
001902 9CF1           00290         bcf             INTCON2, INTEDG0, ACCESS
001904 9AF1           00291         bcf             INTCON2, INTEDG1, ACCESS
001906 98F1           00292         bcf             INTCON2, INTEDG2, ACCESS
001908 94F1           00293         bcf             INTCON2, TMR0IP, ACCESS
                      00294                 
                      00295         ; INT2 is low Priority interrupt
                      00296         ; INT1 is low Priority interrupt
                      00297         ; enable INT2 interrupts
                      00298         ; enable INT1 interrupts
                      00299         ; clear INT2 int flag
                      00300         ; clear INT1 int flag
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00190A 9EF0           00301         bcf             INTCON3, INT2IP, ACCESS
00190C 9CF0           00302         bcf             INTCON3, INT1IP, ACCESS
00190E 88F0           00303         bsf             INTCON3, INT2IE, ACCESS
001910 86F0           00304         bsf             INTCON3, INT1IE, ACCESS
001912 92F0           00305         bcf             INTCON3, INT2IF, ACCESS
001914 90F0           00306         bcf             INTCON3, INT1IF, ACCESS
                      00307                         
                      00308         ; UART RX is low priority interrupt     
001916 9A9F           00309         bcf             IPR1, RCIP, ACCESS
                      00310         
                      00311         ; clear timer2 int flag
001918 929E           00312         bcf             PIR1, TMR2IF, ACCESS            
                      00313         
                      00314         ; enable UART rx ints
                      00315         ; enable timer2 interrupts
00191A 8A9D           00316         bsf             PIE1, RCIE, ACCESS
00191C 829D           00317         bsf             PIE1, TMR2IE, ACCESS
00191E 0012           00318         return
                      00319         
                      00320 
                      00321 ;**********************************************************************
                      00322 ; Function: void mootLoader_initRAM()
                      00323 ;**********************************************************************
001920                00324 mootLoader_initRAM
                      00325         ; clear all general purpose RAM locations to 0x00
001920                00326 mootLoader_initRAM_bank0
                      00327         ; mootLoader_init pointer to start of BANK0
001920 6AE9           00328         clrf    FSR0L, ACCESS
001922 6AEA           00329         clrf    FSR0H, ACCESS
001924                00330 mootLoader_initRAM_bank0Lp
001924 6AEE           00331         clrf    POSTINC0, ACCESS
                      00332         ; BANK0 is done when FSR0 == 0x0100
001926 0E01           00333         movlw   1
001928 62EA           00334         cpfseq  FSR0H, ACCESS
00192A D???           00335         bra             mootLoader_initRAM_bank0Lp
                      00336 
00192C                00337 mootLoader_initRAM_bank1
                      00338         ; PIC18LF13K50 does not implement BANK1 so skip it
                      00339 
00192C                00340 mootLoader_initRAM_bank2
                      00341         ; mootLoader_init pointer to start of BANK2
00192C 6AE9           00342         clrf    FSR0L, ACCESS
00192E 0E02           00343         movlw   0x02
001930 6EEA           00344         movwf   FSR0H, ACCESS
001932                00345 mootLoader_initRAM_bank2Lp
001932 6AEE           00346         clrf    POSTINC0, ACCESS
                      00347         ; BANK2 is done when FSR0 == 0x0300
001934 0E03           00348         movlw   3
001936 62EA           00349         cpfseq  FSR0H, ACCESS
001938 D???           00350         bra             mootLoader_initRAM_bank2Lp
                      00351 
                      00352         ; reset fsr address
00193A 6AE9           00353         clrf    FSR0L, ACCESS   
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00193C 6AEA           00354         clrf    FSR0H, ACCESS   
00193E 0012           00355         return
                      00356 
                      00357 ;**********************************************************************
                      00358 ; Function: void mootLoader_initHeap()
                      00359 ;**********************************************************************
                      00360 
001940                00361 mootLoader_initHeap
001940 EE22 F0FF      00362         lfsr    softwareStackPointerFSR, softwareStackBaseAddress
001944 0012           00363         return
                      00364         
                      00365 
                      00366         
                      00166         #include        "mootLoader_TX.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      mootLoader_TX_v0_2.asm                            *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 
                      00015 
                      00016 ;**********************************************************************
                      00017 ; INCLUDE FILES
                      00018 ;**********************************************************************
                      00019         
                      00020         #include        "../header/mootloader.h"
                      00121 ;**********************************************************************
                      00122 ;                                                                     *
                      00123 ;    Project:       deMIDulator                                       *
                      00124 ;    Filename:      eeprom.h                                          *
                      00125 ;    Date:                                                            *
                      00126 ;    File Version:                                                    *
                      00127 ;                                                                     *
                      00128 ;    Author:        Derek Enos                                        *
                      00129 ;    Company:                                                         *
                      00130 ;                                                                     * 
                      00131 ;                                                                     *
                      00132 ;**********************************************************************
                      00133 ;                                                                     *
                      00134 ;    Files required:                                                  *
                      00135 ;                                                                     *
                      00136 ;                                                                     *
                      00137 ;                                                                     *
                      00138 ;**********************************************************************
                      00139 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00140 #ifndef _MOOTLOADERH_
                      00141 #define _MOOTLOADERH_
                      00142 
                      00143 
                      00144 ; ******************* MOOTLOADER TRANSACTION DEFINES ***********************
                      00145 
                      00146 #define ML_BLOCK_ERASE_BYTE_SIZE                        64      ; must be multiple of ML_DATA_PAYLOAD_BY
                            TE_SIZE
                      00147 #define ML_DATA_PACKET_PAYLOAD_BYTE_SIZE        8
                      00148 
                      00149 #define ML_BLOCK_ERASE_IDLE_TIME_MS                     8
                      00150 #define ML_WRITE_IDLE_TIME_MS                           8
                      00151 #define ML_TRANS_SYNC_IDLE_TIME_MS                      32
                      00152 
                      00153 
                      00154 ; ******************* MOOTLOADER COMMAND BYTE DEFINES ***********************
                      00155 
                      00156 #define MIDI_VENDOR_ID                                          0x77
                      00157 #define MIDI_DEVICE_ID                                          0x1D
                      00158 
                      00159 #define ML_COMMAND_WRITE_PROGRAM_MEMORY         0x03
                      00160 #define ML_COMMAND_DATA_PAYLOAD                         0x01
                      00161 #define ML_COMMAND_DATA_PAYLOAD_COMPLETE        0x02
                      00162 #define ML_TRANSMITTER_RESETTING                        0x10
                      00163 #define ML_RECEIVER_RESET                                       0x11
                      00164 
                      00165 
                      00166 ; ******************* MOOTLOADER PACKET DEFINES ***********************
                      00167 
                      00168 #define ML_LARGE_PACKET_BYTE_SIZE               22
                      00169 
                      00170 
                      00171 ; ******************* mlFlags BIT DEFINES ***********************
                      00172 
                      00173 #define mlRxTransSyncFlag                                       0
                      00174 #define mlRxChecksumOk                                          1
                      00175 
                      00176 
                      00177 ;**********************************************************************
                      00178 ; MACROS
                      00179 ;**********************************************************************
                      00180 
                      00181 SEND_SYSEX_INTRO_NO_CHECK       MACRO
                      00182         movlw   0xF0
                      00183         call    mootLoader_sendByte
                      00184         movlw   MIDI_VENDOR_ID
                      00185         call    mootLoader_sendByte
                      00186         movlw   MIDI_DEVICE_ID
                      00187         call    mootLoader_sendByte
                      00188         ENDM
                      00189 
                      00190 SEND_BYTE_START_CHECKSUM        MACRO
                      00191         movwf   mlChecksum, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00192         call    mootLoader_sendByte
                      00193         ENDM
                      00194 
                      00195 SEND_BYTE_DO_CHECKSUM           MACRO
                      00196         xorwf   mlChecksum, f, ACCESS
                      00197         call    mootLoader_sendByte
                      00198         ENDM
                      00199 
                      00200 SPLIT_BYTE_THEN_SEND_DO_CHECKSUM        MACRO
                      00201         xorwf   mlChecksum, f, ACCESS
                      00202         call    mootLoader_sendAsNybbles
                      00203         ENDM
                      00204 
                      00205 SEND_CHECKSUM_CLEAR_RUN         MACRO
                      00206         movf    mlChecksum, w, ACCESS
                      00207         ; ensure that bit 7 is clear
                      00208         andlw   0x7f
                      00209         clrf    mlRunningChecksum, ACCESS
                      00210         call    mootLoader_sendByte
                      00211         ENDM
                      00212         
                      00213 SEND_CHECKSUM_DO_RUN            MACRO
                      00214         movf    mlChecksum, w, ACCESS
                      00215         ; ensure that bit 7 is clear
                      00216         andlw   0x7f
                      00217         xorwf   mlRunningChecksum, f, ACCESS
                      00218         call    mootLoader_sendByte
                      00219         ENDM
                      00220 
                      00221 SEND_RUNNING_CHECKSUM           MACRO
                      00222         movf    mlRunningChecksum, w, ACCESS
                      00223         ; ensure that bit 7 is clear
                      00224         andlw   0x7f
                      00225         call    mootLoader_sendByte
                      00226         ENDM
                      00227 
                      00228 IDLE_BLOCK_ERASE                        MACRO
                      00229         movlw   ML_BLOCK_ERASE_IDLE_TIME_MS
                      00230         call    mootLoader_wait
                      00231         ENDM
                      00232 
                      00233 IDLE_WRITE_WAIT                         MACRO
                      00234         movlw   ML_WRITE_IDLE_TIME_MS
                      00235         call    mootLoader_wait
                      00236         ENDM
                      00237 
                      00238         
                      00239 #endif
                      00240 
                      00021 
                      00022         
                      00023 ;**********************************************************************
                      00024 ; LOCAL VARIABLES
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00025 ;**********************************************************************
                      00026 
                      00027 ; all variables defined in mootLoader.asm
                      00028 
                      00029 
                      00030 ;**********************************************************************
                      00031 ; mootLoader Trasmitter Code Begin
                      00032 ;**********************************************************************
                      00033 
001946                00034 mootLoader_transmitter
                      00035         ; shut off sine LED leaving square and sample LEDs illuminated to communicate current mode to us
                            er
                      00036         LED_SINE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
001946 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                      00037 
                      00038         ; start program memory broadcast from address USER_CODE_START_ADDRESS
                      00039         ; bootloader is not allowed to touch first 64-byte block to ensure that user will not
                      00040         ; corrupt jump to bootloader on reset
001948 0E40           00041         movlw   USER_CODE_START_ADDRESS
00194A 6E03           00042         movwf   mlStartAddress + 0, ACCESS
00194C 6A04           00043         clrf    mlStartAddress + 1, ACCESS
00194E 6A05           00044         clrf    mlStartAddress + 2, ACCESS
001950 6A06           00045         clrf    mlStartAddress + 3, ACCESS
                      00046 
                      00047         ; requesting full user application code Program Memory so...
                      00048         ; length = (lastApplicationProgramMemoryAddress - USER_CODE_START_ADDRESS) aligned to 64-byte bo
                            undary
001952 0E40           00049         movlw   USER_CODE_START_ADDRESS
                      00050         ; WREG = low(lastApplicationProgramMemoryAddress) - USER_CODE_START_ADDRESS
001954 08??           00051         sublw   low(lastApplicationProgramMemoryAddress)
001956 6E07           00052         movwf   mlPayloadLength + 0, ACCESS
                      00053         
001958 0E??           00054         movlw   high(lastApplicationProgramMemoryAddress)
00195A 6E08           00055         movwf   mlPayloadLength + 1, ACCESS
                      00056         ; if result of low(lastApplicationProgramMemoryAddress) - USER_CODE_START_ADDRESS <0 then decrem
                            ent
00195C A0D8           00057         btfss   STATUS, C, ACCESS
00195E 0608           00058         decf    mlPayloadLength + 1, f, ACCESS
                      00059         
001960 0E??           00060         movlw   upper(lastApplicationProgramMemoryAddress)
001962 6E09           00061         movwf   mlPayloadLength + 2, ACCESS
                      00062         ; if result of (decf    mlPayloadLength + 1, f, ACCESS) <0 then decrement
001964 A0D8           00063         btfss   STATUS, C, ACCESS
001966 0609           00064         decf    mlPayloadLength + 2, f, ACCESS
001968 6A0A           00065         clrf    mlPayloadLength + 3, ACCESS
                      00066 
                      00067         ; if mlPayloadLength is not 64-byte aligned then align it
00196A 0E3F           00068         movlw   0x3f
00196C 1407           00069         andwf   mlPayloadLength + 0, w, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00070         ; it's aligned to skip alignment
00196E E0??           00071         bz              mootLoader_xmitStartWrite
                      00072         ; clear 6 least significant bits
001970 0EC0           00073         movlw   0xC0
001972 1607           00074         andwf   mlPayloadLength + 0, f, ACCESS
                      00075         ; add 64 to mlPayloadLength
001974 0E40           00076         movlw   0x40
001976 2607           00077         addwf   mlPayloadLength + 0, f, ACCESS
001978 0E00           00078         movlw   0
00197A 2208           00079         addwfc  mlPayloadLength + 1, f, ACCESS
00197C 2209           00080         addwfc  mlPayloadLength + 2, f, ACCESS
00197E 220A           00081         addwfc  mlPayloadLength + 3, f, ACCESS
                      00082 
001980                00083 mootLoader_xmitStartWrite
001980 EC?? F???      00084         call    mootLoader_xmitWriteProgramMemory
001984 EF?? F???      00085         goto    mootLoader_exit 
                      00086 
                      00087 
                      00088 ;**********************************************************************
                      00089 ; mootLoader Trasmitter: Write Program Memory
                      00090 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitWriteProgramMemory)
001988                00091 mootLoader_xmitWriteProgramMemory
                      00092         PUSH_R  FSR0L
001988 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00093         PUSH_R  FSR0H
00198C CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00094 
                      00095         ;****************************************
                      00096         ; send Write Program Memory packet
001990 EC?? F???      00097         call    mootLoader_xmitSendWpmPacket
                      00098         ;****************************************
                      00099 
                      00100         ;****************************************
                      00101         ; send Complete Data Payload
                      00102         ; init table pointer with program memory start address
001994 C003 FFF6      00103         movff   mlStartAddress + 0, TBLPTRL
001998 C004 FFF7      00104         movff   mlStartAddress + 1, TBLPTRH
00199C C005 FFF8      00105         movff   mlStartAddress + 2, TBLPTRU
                      00106 
0019A0                00107 mootLoader_xmitWpmBlockErase
                      00108         IDLE_BLOCK_ERASE        
0019A0 0E08               M         movlw   ML_BLOCK_ERASE_IDLE_TIME_MS
0019A2 EC?? F???          M         call    mootLoader_wait
                      00109         ; load erase block size counter
0019A6 0E40           00110         movlw   ML_BLOCK_ERASE_BYTE_SIZE
0019A8 6E18           00111         movwf   mlBlockEraseBytesRemaining, ACCESS
                      00112 
0019AA                00113 mootLoader_xmitWpmNextPayload
                      00114         ;****************************************
                      00115         ; send single Data Payload packet
                      00116         ; load mlDataPayloadBuffer with bytes to send
0019AA EE00 F00B      00117         lfsr    FSR0, mlDataPayloadBuffer
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00118         ; load counter with num of bytes remaining in payload packet
0019AE 0E08           00119         movlw   ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
0019B0 6E13           00120         movwf   mlCount, ACCESS
0019B2                00121 mootLoader_xmitWpmByteLp
                      00122         ; read program memory location and increment
0019B2 0009           00123         tblrd*+
                      00124         ; save value to mlDataPayloadBuffer
0019B4 CFF5 FFEE      00125         movff   TABLAT, POSTINC0
                      00126         ; check if mlDataPayloadBuffer is ready to go
0019B8 0613           00127         decf    mlCount, f, ACCESS
0019BA E1??           00128         bnz             mootLoader_xmitWpmByteLp
                      00129         ; send the packet
0019BC EC?? F???      00130         call    mootLoader_xmitSendDataPayloadPacket
                      00131         ;****************************************
                      00132 
                      00133         ; do write wait after every packet transfer
                      00134         IDLE_WRITE_WAIT
0019C0 0E08               M         movlw   ML_WRITE_IDLE_TIME_MS
0019C2 EC?? F???          M         call    mootLoader_wait
                      00135         
                      00136         ; check if entire payload has been transferred
                      00137         ; do (mlPayloadLength -= ML_DATA_PACKET_PAYLOAD_BYTE_SIZE)
0019C6 0E08           00138         movlw   ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
0019C8 5E07           00139         subwf   mlPayloadLength + 0, f, ACCESS
0019CA 0E00           00140         movlw   0
0019CC 5A08           00141         subwfb  mlPayloadLength + 1, f, ACCESS  
0019CE 5A09           00142         subwfb  mlPayloadLength + 2, f, ACCESS  
0019D0 5A0A           00143         subwfb  mlPayloadLength + 3, f, ACCESS
                      00144         ; if mlPayloadLength == 0 then entire payload has been transferred
                      00145         ; if mlPayloadLength != 0 then check if we have to wait for another block erase
0019D2 5207           00146         movf    mlPayloadLength + 0, f, ACCESS
0019D4 E1??           00147         bnz             mootLoader_xmitWpmCheckBlockErase
0019D6 5208           00148         movf    mlPayloadLength + 1, f, ACCESS
0019D8 E1??           00149         bnz             mootLoader_xmitWpmCheckBlockErase
0019DA 5209           00150         movf    mlPayloadLength + 2, f, ACCESS
0019DC E1??           00151         bnz             mootLoader_xmitWpmCheckBlockErase
0019DE 520A           00152         movf    mlPayloadLength + 3, f, ACCESS
0019E0 E1??           00153         bnz             mootLoader_xmitWpmCheckBlockErase
0019E2 D???           00154         bra             mootLoader_xmitWpmSendPayloadComplete
                      00155 
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitWpmCheckBlockErase)
0019E4                00156 mootLoader_xmitWpmCheckBlockErase
                      00157         ; check if we need to wait for a block erase
                      00158         ; do (mlBlockEraseBytesRemaining - ML_DATA_PACKET_PAYLOAD_BYTE_SIZE)
0019E4 0E08           00159         movlw   ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
0019E6 5E18           00160         subwf   mlBlockEraseBytesRemaining, f, ACCESS
                      00161         ; if 0 then delay for block erase
0019E8 E0??           00162         bz              mootLoader_xmitWpmBlockErase
0019EA D???           00163         bra             mootLoader_xmitWpmNextPayload
                      00164         
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitWpmSendPayloadComplete)
0019EC                00165 mootLoader_xmitWpmSendPayloadComplete
                      00166         ; mlPayloadLength == 0 so send Data Payload Complete packet
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00167         ;****************************************
                      00168         ; send Data Payload Complete packet
0019EC EC?? F???      00169         call    mootLoader_xmitSendDataPayloadCompletePacket
                      00170         ;****************************************
                      00171 
                      00172         ; transaction complete
                      00173         POP_R   FSR0H
0019F0 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00174         POP_R   FSR0L
0019F4 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
0019F8 0012           00175         return
                      00176                 
                      00177                         
                      00178 ;**********************************************************************
                      00179 ; mootLoader Trasmitter: send Write Program Memory packet
                      00180 ;**********************************************************************
0019FA                00181 mootLoader_xmitSendWpmPacket
                      00182 
                      00183         ;****************************************
                      00184         ; send SysEx intro (0xF0, vendorID, deviceID)
                      00185         SEND_SYSEX_INTRO_NO_CHECK
0019FA 0EF0               M         movlw   0xF0
0019FC EC?? F???          M         call    mootLoader_sendByte
001A00 0E77               M         movlw   MIDI_VENDOR_ID
001A02 EC?? F???          M         call    mootLoader_sendByte
001A06 0E1D               M         movlw   MIDI_DEVICE_ID
001A08 EC?? F???          M         call    mootLoader_sendByte
                      00186         ;****************************************
                      00187         
                      00188         ;****************************************
                      00189         ; send COMMAND
001A0C 0E03           00190         movlw   ML_COMMAND_WRITE_PROGRAM_MEMORY
                      00191         SEND_BYTE_START_CHECKSUM
001A0E 6E01               M         movwf   mlChecksum, ACCESS
001A10 EC?? F???          M         call    mootLoader_sendByte
                      00192         ;****************************************
                      00193 
                      00194         ;****************************************
                      00195         ; send START ADDRESS
001A14 5003           00196         movf    mlStartAddress + 0, w, ACCESS
                      00197         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001A16 1A01               M         xorwf   mlChecksum, f, ACCESS
001A18 EC?? F???          M         call    mootLoader_sendAsNybbles
001A1C 5004           00198         movf    mlStartAddress + 1, w, ACCESS
                      00199         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001A1E 1A01               M         xorwf   mlChecksum, f, ACCESS
001A20 EC?? F???          M         call    mootLoader_sendAsNybbles
001A24 5005           00200         movf    mlStartAddress + 2, w, ACCESS
                      00201         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001A26 1A01               M         xorwf   mlChecksum, f, ACCESS
001A28 EC?? F???          M         call    mootLoader_sendAsNybbles
001A2C 5006           00202         movf    mlStartAddress + 3, w, ACCESS
                      00203         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001A2E 1A01               M         xorwf   mlChecksum, f, ACCESS
001A30 EC?? F???          M         call    mootLoader_sendAsNybbles
                      00204         ;****************************************
                      00205 
                      00206         ;****************************************
                      00207         ; send PAYLOAD LENGTH
001A34 5007           00208         movf    mlPayloadLength + 0, w, ACCESS
                      00209         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001A36 1A01               M         xorwf   mlChecksum, f, ACCESS
001A38 EC?? F???          M         call    mootLoader_sendAsNybbles
001A3C 5008           00210         movf    mlPayloadLength + 1, w, ACCESS
                      00211         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001A3E 1A01               M         xorwf   mlChecksum, f, ACCESS
001A40 EC?? F???          M         call    mootLoader_sendAsNybbles
001A44 5009           00212         movf    mlPayloadLength + 2, w, ACCESS
                      00213         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001A46 1A01               M         xorwf   mlChecksum, f, ACCESS
001A48 EC?? F???          M         call    mootLoader_sendAsNybbles
001A4C 500A           00214         movf    mlPayloadLength + 3, w, ACCESS
                      00215         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001A4E 1A01               M         xorwf   mlChecksum, f, ACCESS
001A50 EC?? F???          M         call    mootLoader_sendAsNybbles
                      00216         ;****************************************
                      00217         
                      00218         ;****************************************
                      00219         ; send CHECKSUM
                      00220         SEND_CHECKSUM_CLEAR_RUN
001A54 5001               M         movf    mlChecksum, w, ACCESS
                          M         ; ensure that bit 7 is clear
001A56 0B7F               M         andlw   0x7f
001A58 6A02               M         clrf    mlRunningChecksum, ACCESS
001A5A EC?? F???          M         call    mootLoader_sendByte
                      00221         ;****************************************
                      00222 
                      00223         ;****************************************
                      00224         ; send End of SysEx
001A5E 0EF7           00225         movlw   0xF7
001A60 EC?? F???      00226         call    mootLoader_sendByte
                      00227         ;****************************************
                      00228         
001A64 0012           00229         return  
                      00230         
                      00231         
                      00232 ;**********************************************************************
                      00233 ; mootLoader Trasmitter: send Data Payload Packet
                      00234 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitSendDataPayloadPacket)
001A66                00235 mootLoader_xmitSendDataPayloadPacket
                      00236 
                      00237         PUSH_R  FSR0L
001A66 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00238         PUSH_R  FSR0H
001A6A CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001A6E EE00 F00B      00239         lfsr    FSR0, mlDataPayloadBuffer
                      00240                 
                      00241         ;****************************************
                      00242         ; send SysEx intro (0xF0, vendorID, deviceID)
                      00243         SEND_SYSEX_INTRO_NO_CHECK
001A72 0EF0               M         movlw   0xF0
001A74 EC?? F???          M         call    mootLoader_sendByte
001A78 0E77               M         movlw   MIDI_VENDOR_ID
001A7A EC?? F???          M         call    mootLoader_sendByte
001A7E 0E1D               M         movlw   MIDI_DEVICE_ID
001A80 EC?? F???          M         call    mootLoader_sendByte
                      00244         ;****************************************
                      00245         
                      00246         ;****************************************
                      00247         ; send COMMAND
001A84 0E01           00248         movlw   ML_COMMAND_DATA_PAYLOAD
                      00249         SEND_BYTE_START_CHECKSUM
001A86 6E01               M         movwf   mlChecksum, ACCESS
001A88 EC?? F???          M         call    mootLoader_sendByte
                      00250         ;****************************************
                      00251 
                      00252         ;****************************************
                      00253         ; send PAYLOAD bytes
001A8C 0E08           00254         movlw   ML_DATA_PACKET_PAYLOAD_BYTE_SIZE
001A8E 6E19           00255         movwf   mlDatPackIntByteCount, ACCESS
001A90                00256 mootLoader_xmitSdppLp
                      00257         ; read byte
001A90 50EF           00258         movf    INDF0, w, ACCESS
                      00259         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001A92 1A01               M         xorwf   mlChecksum, f, ACCESS
001A94 EC?? F???          M         call    mootLoader_sendAsNybbles
                      00260         ; increment pointer
001A98 50EE           00261         movf    POSTINC0, w, ACCESS
                      00262         ; check if Data Payload packet is complete
001A9A 0619           00263         decf    mlDatPackIntByteCount, f, ACCESS
001A9C E1??           00264         bnz             mootLoader_xmitSdppLp
                      00265         ;****************************************
                      00266 
                      00267         ;****************************************
                      00268         ; send CHECKSUM
                      00269         SEND_CHECKSUM_DO_RUN
001A9E 5001               M         movf    mlChecksum, w, ACCESS
                          M         ; ensure that bit 7 is clear
001AA0 0B7F               M         andlw   0x7f
001AA2 1A02               M         xorwf   mlRunningChecksum, f, ACCESS
001AA4 EC?? F???          M         call    mootLoader_sendByte
                      00270         ;****************************************
                      00271 
                      00272         ;****************************************
                      00273         ; send End of SysEx
001AA8 0EF7           00274         movlw   0xF7
001AAA EC?? F???      00275         call    mootLoader_sendByte
                      00276         ;****************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00277 
                      00278         POP_R   FSR0H
001AAE CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00279         POP_R   FSR0L
001AB2 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
001AB6 0012           00280         return
                      00281 
                      00282 
                      00283 ;**********************************************************************
                      00284 ; mootLoader Trasmitter: send Data Payload Complete Packet
                      00285 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_xmitSendDataPayloadCompletePacket)
001AB8                00286 mootLoader_xmitSendDataPayloadCompletePacket
                      00287         ;****************************************
                      00288         ; send SysEx intro (0xF0, vendorID, deviceID)
                      00289         SEND_SYSEX_INTRO_NO_CHECK
001AB8 0EF0               M         movlw   0xF0
001ABA EC?? F???          M         call    mootLoader_sendByte
001ABE 0E77               M         movlw   MIDI_VENDOR_ID
001AC0 EC?? F???          M         call    mootLoader_sendByte
001AC4 0E1D               M         movlw   MIDI_DEVICE_ID
001AC6 EC?? F???          M         call    mootLoader_sendByte
                      00290         ;****************************************
                      00291         
                      00292         ;****************************************
                      00293         ; send COMMAND
001ACA 0E02           00294         movlw   ML_COMMAND_DATA_PAYLOAD_COMPLETE
                      00295         SEND_BYTE_START_CHECKSUM
001ACC 6E01               M         movwf   mlChecksum, ACCESS
001ACE EC?? F???          M         call    mootLoader_sendByte
                      00296         ;****************************************
                      00297 
001AD2 0E00           00298         movlw   0x00
                      00299         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001AD4 1A01               M         xorwf   mlChecksum, f, ACCESS
001AD6 EC?? F???          M         call    mootLoader_sendAsNybbles
001ADA 0E00           00300         movlw   0x00
                      00301         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001ADC 1A01               M         xorwf   mlChecksum, f, ACCESS
001ADE EC?? F???          M         call    mootLoader_sendAsNybbles
001AE2 0E00           00302         movlw   0x00
                      00303         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001AE4 1A01               M         xorwf   mlChecksum, f, ACCESS
001AE6 EC?? F???          M         call    mootLoader_sendAsNybbles
001AEA 0E00           00304         movlw   0x00
                      00305         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001AEC 1A01               M         xorwf   mlChecksum, f, ACCESS
001AEE EC?? F???          M         call    mootLoader_sendAsNybbles
001AF2 0E00           00306         movlw   0x00
                      00307         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001AF4 1A01               M         xorwf   mlChecksum, f, ACCESS
001AF6 EC?? F???          M         call    mootLoader_sendAsNybbles
001AFA 0E00           00308         movlw   0x00
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00309         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001AFC 1A01               M         xorwf   mlChecksum, f, ACCESS
001AFE EC?? F???          M         call    mootLoader_sendAsNybbles
001B02 0E00           00310         movlw   0x00
                      00311         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001B04 1A01               M         xorwf   mlChecksum, f, ACCESS
001B06 EC?? F???          M         call    mootLoader_sendAsNybbles
001B0A 0E00           00312         movlw   0x00
                      00313         SPLIT_BYTE_THEN_SEND_DO_CHECKSUM
001B0C 1A01               M         xorwf   mlChecksum, f, ACCESS
001B0E EC?? F???          M         call    mootLoader_sendAsNybbles
                      00314         SEND_RUNNING_CHECKSUM
001B12 5002               M         movf    mlRunningChecksum, w, ACCESS
                          M         ; ensure that bit 7 is clear
001B14 0B7F               M         andlw   0x7f
001B16 EC?? F???          M         call    mootLoader_sendByte
                      00315 
                      00316         ;****************************************
                      00317         ; send End of SysEx
001B1A 0EF7           00318         movlw   0xF7
001B1C EC?? F???      00319         call    mootLoader_sendByte
                      00320         ;****************************************       
                      00321         
001B20 0012           00322         return
                      00323         
                      00324 
                      00325 ;**********************************************************************
                      00326 ; Local Function: void mootLoader_sendAsNybbles(WREG)
                      00327 ;**********************************************************************
001B22                00328 mootLoader_sendAsNybbles
                      00329         ; save to tmp variable
001B22 6E16           00330         movwf   mlNybbleSplitTmp, ACCESS
                      00331         ; mask out low nybble and send
001B24 0B0F           00332         andlw   0x0F
001B26 EC?? F???      00333         call    mootLoader_sendByte
                      00334         ; swap nybbles, mask out low nybble then send
001B2A 3816           00335         swapf   mlNybbleSplitTmp, w, ACCESS
001B2C 0B0F           00336         andlw   0x0F
001B2E EC?? F???      00337         call    mootLoader_sendByte     
001B32 0012           00338         return
                      00339 
                      00340 
                      00341 ;**********************************************************************
                      00342 ; Local Function: void mootLoader_sendByte(WREG)
                      00343 ;**********************************************************************
001B34                00344 mootLoader_sendByte
                      00345         ; check if TXREG is clear, wait if not
001B34 A89E           00346         btfss   PIR1, TXIF, ACCESS
001B36 D???           00347         bra             mootLoader_sendByte
001B38 6EAD           00348         movwf   TXREG, ACCESS
001B3A 0012           00349         return
                      00350 
                      00351 
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00352 ;**********************************************************************
                      00353 ; mootLoader Trasmitter: Wait(WREG = WAIT_TIME_MS)
                      00354 ;**********************************************************************
001B3C                00355 mootLoader_wait
                      00356         ; exit if delay time request is 0
001B3C 52E8           00357         movf    WREG, f, ACCESS
001B3E E0??           00358         bz              mootLoader_waitExit
                      00359         
                      00360         ; TMR2 overflow period (32uS) * 32 = 1.024mS
                      00361         ; so do PRODH:L = WREG * 32
001B40 6EF3           00362         movwf   PRODL, ACCESS
001B42 0E20           00363         movlw   32
001B44 02F3           00364         mulwf   PRODL, ACCESS
                      00365 
                      00366         ; reset timer
001B46 6ACC           00367         clrf    TMR2, ACCESS
001B48                00368 mootLoader_waitLp
                      00369         ; clear interrupt flag and wait for timer overflow
001B48 929E           00370         bcf             PIR1, TMR2IF, ACCESS    
001B4A                00371 mootLoader_waitIntLp
001B4A A29E           00372         btfss   PIR1, TMR2IF, ACCESS
001B4C D???           00373         bra             mootLoader_waitIntLp
                      00374         ; unintelligently decrement PRODH:L counter
001B4E 06F3           00375         decf    PRODL, f, ACCESS
                      00376         ; skip if result was positive
001B50 A0D8           00377         btfss   STATUS, C, ACCESS
001B52 06F4           00378         decf    PRODH, f, ACCESS
                      00379         ; test PRODH:L, exit if 0
001B54 52F3           00380         movf    PRODL, f, ACCESS
001B56 E1??           00381         bnz             mootLoader_waitLp
001B58 52F4           00382         movf    PRODH, f, ACCESS
001B5A E1??           00383         bnz             mootLoader_waitLp
001B5C                00384 mootLoader_waitExit     
001B5C 0012           00385         return
                      00386 
                      00387 
                      00167         #include        "mootLoader_RX.asm"
                      00001 
                      00002 ;**********************************************************************
                      00003 ;                                                                     *
                      00004 ;    Project:       deMIDulator                                       *
                      00005 ;    Filename:      mootLoader_RX_v0_2.asm                            *
                      00006 ;    Date:                                                            *
                      00007 ;    File Version:                                                    *
                      00008 ;                                                                     *
                      00009 ;    Author:        Derek Enos                                        *
                      00010 ;    Company:                                                         *
                      00011 ;                                                                     * 
                      00012 ;                                                                     *
                      00013 ;**********************************************************************
                      00014 
                      00015 
                      00016 ;**********************************************************************
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00017 ; INCLUDE FILES
                      00018 ;**********************************************************************
                      00019         
                      00020         #include        "../header/mootloader.h"
                      00241 ;**********************************************************************
                      00242 ;                                                                     *
                      00243 ;    Project:       deMIDulator                                       *
                      00244 ;    Filename:      eeprom.h                                          *
                      00245 ;    Date:                                                            *
                      00246 ;    File Version:                                                    *
                      00247 ;                                                                     *
                      00248 ;    Author:        Derek Enos                                        *
                      00249 ;    Company:                                                         *
                      00250 ;                                                                     * 
                      00251 ;                                                                     *
                      00252 ;**********************************************************************
                      00253 ;                                                                     *
                      00254 ;    Files required:                                                  *
                      00255 ;                                                                     *
                      00256 ;                                                                     *
                      00257 ;                                                                     *
                      00258 ;**********************************************************************
                      00259 
                      00260 #ifndef _MOOTLOADERH_
                      00261 #define _MOOTLOADERH_
                      00262 
                      00263 
                      00264 ; ******************* MOOTLOADER TRANSACTION DEFINES ***********************
                      00265 
                      00266 #define ML_BLOCK_ERASE_BYTE_SIZE                        64      ; must be multiple of ML_DATA_PAYLOAD_BY
                            TE_SIZE
                      00267 #define ML_DATA_PACKET_PAYLOAD_BYTE_SIZE        8
                      00268 
                      00269 #define ML_BLOCK_ERASE_IDLE_TIME_MS                     8
                      00270 #define ML_WRITE_IDLE_TIME_MS                           8
                      00271 #define ML_TRANS_SYNC_IDLE_TIME_MS                      32
                      00272 
                      00273 
                      00274 ; ******************* MOOTLOADER COMMAND BYTE DEFINES ***********************
                      00275 
                      00276 #define MIDI_VENDOR_ID                                          0x77
                      00277 #define MIDI_DEVICE_ID                                          0x1D
                      00278 
                      00279 #define ML_COMMAND_WRITE_PROGRAM_MEMORY         0x03
                      00280 #define ML_COMMAND_DATA_PAYLOAD                         0x01
                      00281 #define ML_COMMAND_DATA_PAYLOAD_COMPLETE        0x02
                      00282 #define ML_TRANSMITTER_RESETTING                        0x10
                      00283 #define ML_RECEIVER_RESET                                       0x11
                      00284 
                      00285 
                      00286 ; ******************* MOOTLOADER PACKET DEFINES ***********************
                      00287 
                      00288 #define ML_LARGE_PACKET_BYTE_SIZE               22
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00289 
                      00290 
                      00291 ; ******************* mlFlags BIT DEFINES ***********************
                      00292 
                      00293 #define mlRxTransSyncFlag                                       0
                      00294 #define mlRxChecksumOk                                          1
                      00295 
                      00296 
                      00297 ;**********************************************************************
                      00298 ; MACROS
                      00299 ;**********************************************************************
                      00300 
                      00301 SEND_SYSEX_INTRO_NO_CHECK       MACRO
                      00302         movlw   0xF0
                      00303         call    mootLoader_sendByte
                      00304         movlw   MIDI_VENDOR_ID
                      00305         call    mootLoader_sendByte
                      00306         movlw   MIDI_DEVICE_ID
                      00307         call    mootLoader_sendByte
                      00308         ENDM
                      00309 
                      00310 SEND_BYTE_START_CHECKSUM        MACRO
                      00311         movwf   mlChecksum, ACCESS
                      00312         call    mootLoader_sendByte
                      00313         ENDM
                      00314 
                      00315 SEND_BYTE_DO_CHECKSUM           MACRO
                      00316         xorwf   mlChecksum, f, ACCESS
                      00317         call    mootLoader_sendByte
                      00318         ENDM
                      00319 
                      00320 SPLIT_BYTE_THEN_SEND_DO_CHECKSUM        MACRO
                      00321         xorwf   mlChecksum, f, ACCESS
                      00322         call    mootLoader_sendAsNybbles
                      00323         ENDM
                      00324 
                      00325 SEND_CHECKSUM_CLEAR_RUN         MACRO
                      00326         movf    mlChecksum, w, ACCESS
                      00327         ; ensure that bit 7 is clear
                      00328         andlw   0x7f
                      00329         clrf    mlRunningChecksum, ACCESS
                      00330         call    mootLoader_sendByte
                      00331         ENDM
                      00332         
                      00333 SEND_CHECKSUM_DO_RUN            MACRO
                      00334         movf    mlChecksum, w, ACCESS
                      00335         ; ensure that bit 7 is clear
                      00336         andlw   0x7f
                      00337         xorwf   mlRunningChecksum, f, ACCESS
                      00338         call    mootLoader_sendByte
                      00339         ENDM
                      00340 
                      00341 SEND_RUNNING_CHECKSUM           MACRO
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00342         movf    mlRunningChecksum, w, ACCESS
                      00343         ; ensure that bit 7 is clear
                      00344         andlw   0x7f
                      00345         call    mootLoader_sendByte
                      00346         ENDM
                      00347 
                      00348 IDLE_BLOCK_ERASE                        MACRO
                      00349         movlw   ML_BLOCK_ERASE_IDLE_TIME_MS
                      00350         call    mootLoader_wait
                      00351         ENDM
                      00352 
                      00353 IDLE_WRITE_WAIT                         MACRO
                      00354         movlw   ML_WRITE_IDLE_TIME_MS
                      00355         call    mootLoader_wait
                      00356         ENDM
                      00357 
                      00358         
                      00359 #endif
                      00360 
                      00021 
                      00022         
                      00023 ;**********************************************************************
                      00024 ; LOCAL VARIABLES
                      00025 ;**********************************************************************
                      00026 
                      00027 ; all variables defined in mootLoader_v0_2.asm
                      00028 
                      00029 
                      00030 ;**********************************************************************
                      00031 ; mootLoader Receiver Code Begin
                      00032 ;**********************************************************************
001B5E                00033 mootLoader_receiver
                      00034         ; communicate mode to user
                      00035         ; shut off sample LED leaving sine and square LEDs illuminated to communicate current mode to us
                            er
                      00036         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
001B5E 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
                      00037 
Warning[208]: Label truncated at 32 characters. (mootLoader_receiverListenForTrans)
001B60                00038 mootLoader_receiverListenForTrans
001B60 EC?? F???      00039         call    mootLoader_rxReceiveNextPacket
                      00040         ; jump to command handler
001B64 0E03           00041         movlw   ML_COMMAND_WRITE_PROGRAM_MEMORY
001B66 181E           00042         xorwf   mlRxReceivedPacket + 3, w, ACCESS
001B68 E0??           00043         bz              mootLoader_rxWriteProgramMemoryHandler
001B6A 0E11           00044         movlw   ML_RECEIVER_RESET
001B6C 181E           00045         xorwf   mlRxReceivedPacket + 3, w, ACCESS
001B6E EF?? F???      00046         goto    mootLoader_rxReceiverResetHandler
                      00047         ; unhandled command so listen for next trans sync
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001B72 D???           00048         bra             mootLoader_receiverListenForTrans
                      00049                 
001B74 EF?? F???      00050         goto    mootLoader_exit
                      00051 
                      00052 
                      00053 ;**********************************************************************
                      00054 ; Local Function: void mootLoader_rxWriteProgramMemoryHandler()
                      00055 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_rxWriteProgramMemoryHandler)
001B78                00056 mootLoader_rxWriteProgramMemoryHandler
                      00057         ; save write start address
001B78 C01F F003      00058         movff   mlRxReceivedPacket + 4, mlStartAddress + 0
001B7C C021 F004      00059         movff   mlRxReceivedPacket + 6, mlStartAddress + 1
001B80 C023 F005      00060         movff   mlRxReceivedPacket + 8, mlStartAddress + 2
001B84 C025 F006      00061         movff   mlRxReceivedPacket + 10, mlStartAddress + 3
                      00062         ; save payload length
001B88 C027 F007      00063         movff   mlRxReceivedPacket + 12, mlPayloadLength + 0
001B8C C029 F008      00064         movff   mlRxReceivedPacket + 14, mlPayloadLength + 1
001B90 C02B F009      00065         movff   mlRxReceivedPacket + 16, mlPayloadLength + 2
001B94 C02D F00A      00066         movff   mlRxReceivedPacket + 18, mlPayloadLength + 3
                      00067         ; test checksum, exit if bad
001B98 EC?? F???      00068         call    mootloader_rxTestSinglePacketChecksum
001B9C A215           00069         btfss   mlFlags, mlRxChecksumOk, ACCESS
001B9E D???           00070         bra             mootLoader_signalErrorA
                      00071         
                      00072         ; load table pointer with start address
001BA0 C003 FFF6      00073         movff   mlStartAddress + 0, TBLPTRL
001BA4 C004 FFF7      00074         movff   mlStartAddress + 1, TBLPTRH
001BA8 C005 FFF8      00075         movff   mlStartAddress + 2, TBLPTRU
                      00076 
001BAC                00077 mootLoader_rxWpmhBlockErase
                      00078         ; point to Flash Program Memory
001BAC 8EA6           00079         bsf             EECON1, EEPGD, ACCESS
                      00080         ; access Flash Program Memory
001BAE 9CA6           00081         bcf             EECON1, CFGS, ACCESS
                      00082         ; enable write to memory
001BB0 84A6           00083         bsf             EECON1, WREN, ACCESS
                      00084         ; enable erase operation
001BB2 88A6           00085         bsf             EECON1, FREE, ACCESS
                      00086         ; do require sequence
001BB4 0E55           00087         movlw   0x55
001BB6 6EA7           00088         movwf   EECON2, ACCESS
001BB8 0EAA           00089         movlw   0xAA
001BBA 6EA7           00090         movwf   EECON2, ACCESS
                      00091         ; start write, CPU will stall
001BBC 82A6           00092         bsf             EECON1, WR, ACCESS
                      00093         ; dummy read decrement to reset TBLPTR. Don't know why this is necessary but sure enough...
                      00094         ; without it all my writes were off by one address. Is included in datasheet example code
001BBE 000A           00095         tblrd*-
                      00096                 
                      00097         ; get next packet
001BC0                00098 mootLoader_rxWpmhGetNextPacket
001BC0 EC?? F???      00099         call    mootLoader_rxReceiveNextPacket
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00100         
                      00101         ; toggle all LEDs to indicate activity
                      00102         LED_ALL_TOGGLE
                          M         LED_SINE_TOGGLE
001BC4 768B               M         btg             LATC, RC3, ACCESS       ; SINE LED
                          M         LED_SQUARE_TOGGLE
001BC6 788B               M         btg             LATC, RC4, ACCESS       ; SQUARE LED
                          M         LED_SAMPLE_TOGGLE
001BC8 7A89               M         btg             LATA, RA5, ACCESS       ; SAMPLE LED
                      00103         
                      00104         ; if data payload complete then reset device
001BCA 0E02           00105         movlw   ML_COMMAND_DATA_PAYLOAD_COMPLETE
001BCC 181E           00106         xorwf   mlRxReceivedPacket + 3, w, ACCESS
001BCE E0??           00107         bz              mootLoader_rxReceiverResetHandler
                      00108         ; if data payload then confirm checksum and then write data
001BD0 0E01           00109         movlw   ML_COMMAND_DATA_PAYLOAD
001BD2 181E           00110         xorwf   mlRxReceivedPacket + 3, w, ACCESS
                      00111         ; if not data payload then exit with error
001BD4 E1??           00112         bnz             mootLoader_signalErrorB
                      00113         ; is data payload so test checksum
001BD6 EC?? F???      00114         call    mootloader_rxTestSinglePacketChecksum
001BDA A215           00115         btfss   mlFlags, mlRxChecksumOk, ACCESS
                      00116         ; checksum bad so exit with error
001BDC D???           00117         bra             mootLoader_signalErrorC
                      00118         ; everything is ok so write the payload
                      00119         
                      00120         ; write payload to holding registers
001BDE C01F FFF5      00121         movff   mlRxReceivedPacket + 4, TABLAT
001BE2 000F           00122         tblwt+*
001BE4 C021 FFF5      00123         movff   mlRxReceivedPacket + 6, TABLAT
001BE8 000F           00124         tblwt+*
001BEA C023 FFF5      00125         movff   mlRxReceivedPacket + 8, TABLAT
001BEE 000F           00126         tblwt+*
001BF0 C025 FFF5      00127         movff   mlRxReceivedPacket + 10, TABLAT
001BF4 000F           00128         tblwt+*
001BF6 C027 FFF5      00129         movff   mlRxReceivedPacket + 12, TABLAT
001BFA 000F           00130         tblwt+*
001BFC C029 FFF5      00131         movff   mlRxReceivedPacket + 14, TABLAT
001C00 000F           00132         tblwt+*
001C02 C02B FFF5      00133         movff   mlRxReceivedPacket + 16, TABLAT
001C06 000F           00134         tblwt+*
001C08 C02D FFF5      00135         movff   mlRxReceivedPacket + 18, TABLAT
001C0C 000F           00136         tblwt+*
                      00137                 
                      00138         ; write holding register to flash memory
                      00139         ; point to Flash Program Memory
001C0E 8EA6           00140         bsf             EECON1, EEPGD, ACCESS
                      00141         ; access Flash Program Memory
001C10 9CA6           00142         bcf             EECON1, CFGS, ACCESS
                      00143         ; enable write to memory
001C12 84A6           00144         bsf             EECON1, WREN, ACCESS
                      00145         ; do require sequence
001C14 0E55           00146         movlw   0x55
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C16 6EA7           00147         movwf   EECON2, ACCESS
001C18 0EAA           00148         movlw   0xAA
001C1A 6EA7           00149         movwf   EECON2, ACCESS
                      00150         ; start write, CPU will stall
001C1C 82A6           00151         bsf             EECON1, WR, ACCESS      
                      00152         
                      00153 ; DEBUG
                      00154 ;       movlw   0
                      00155 ;       call    mootloader_rxWriteRxPacketToEE
                      00156 ;       bra             mootLoader_rxWpmhExit
                      00157 
                      00158         ; do block erase on every 64-byte boundary
                      00159         ; if(!(TBLPTRL & 0x3f)){doBlockErase();}
001C1E 0E3F           00160         movlw   0x3f
001C20 14F6           00161         andwf   TBLPTRL, w, ACCESS
001C22 E0??           00162         bz              mootLoader_rxWpmhBlockErase
001C24 D???           00163         bra             mootLoader_rxWpmhGetNextPacket
                      00164         
001C26                00165 mootLoader_rxWpmhExit
001C26 EF?? F???      00166         goto    mootLoader_exit
                      00167 
                      00168 
                      00169 ;**********************************************************************
                      00170 ; Local Function: void mootLoader_signalErrorA()
                      00171 ;**********************************************************************
001C2A                00172 mootLoader_signalErrorA
                      00173         LED_SINE_TOGGLE_OTHERS_OFF
                          M         LED_SINE_TOGGLE
001C2A 768B               M         btg             LATC, RC3, ACCESS       ; SINE LED
                          M         LED_SQUARE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
001C2C 988B               M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
001C2E 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
001C30 6A13           00174         clrf    mlCount, ACCESS
001C32 0E10           00175         movlw   0x10
001C34 6E14           00176         movwf   mlCount + 1, ACCESS
001C36                00177 mootLoader_signalErrorALp1
                      00178         ; clear interrupt flag
001C36 929E           00179         bcf             PIR1, TMR2IF, ACCESS    
001C38                00180 mootLoader_signalErrorALp2
                      00181         ; wait for timer2 overflow
001C38 A29E           00182         btfss   PIR1, TMR2IF, ACCESS
001C3A D???           00183         bra             mootLoader_signalErrorALp2
001C3C 0613           00184         decf    mlCount, f, ACCESS
001C3E B4D8           00185         btfsc   STATUS, Z, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C40 2E14           00186         decfsz  mlCount + 1
001C42 D???           00187         bra             mootLoader_signalErrorALp1
                      00188         ; loop forever
001C44 D???           00189         bra             mootLoader_signalErrorA
                      00190 ;**********************************************************************
                      00191 ; Local Function: void mootLoader_signalErrorB()
                      00192 ;**********************************************************************
001C46                00193 mootLoader_signalErrorB
                      00194 ; DEBUG - write received packet to eeprom
001C46 EE10 F01B      00195         lfsr    FSR1, mlRxReceivedPacket
001C4A 6A3F           00196         clrf    mlEepromAddress, ACCESS
Warning[208]: Label truncated at 32 characters. (mootLoader_SebWriteReceivedPacketToEEPROMLp)
001C4C                00197 mootLoader_SebWriteReceivedPacketToEEPROMLp
                      00198         WRITE_INTERNAL_EEPROM_FROM_REGS mlEepromAddress, POSTINC1
  0000                    M         local   writeIntEE_loop
                          M         
                          M         ; load address
001C4C C03F FFA9          M         movff   mlEepromAddress, EEADR
                          M         ; load value
001C50 CFE6 FFA8          M         movff   POSTINC1, EEDATA
                          M         ; configure eeprom
                          M         ; point to EEPROM DATA memory
001C54 9EA6               M         bcf             EECON1, EEPGD, ACCESS
                          M         ; Access EEPROM/Program
001C56 9CA6               M         bcf             EECON1, CFGS, ACCESS    
                          M         ; Enable writes
001C58 84A6               M         bsf             EECON1, WREN, ACCESS
                          M 
                          M         ; don't have to disable interrupts because I'm only calling this
                          M         ; from within the high-priority ISR
                          M 
                          M         ; required write enable sequence
001C5A 0E55               M         movlw   0x55
001C5C 6EA7               M         movwf   EECON2, ACCESS
001C5E 0EAA               M         movlw   0xAA
001C60 6EA7               M         movwf   EECON2, ACCESS
                          M 
                          M         ; set WR bit to begin write
001C62 82A6               M         bsf             EECON1, WR, ACCESS
001C64                    M writeIntEE_loop
                          M         ; wait for write to complete
001C64 B2A6               M         btfsc   EECON1, WR, ACCESS
001C66 D???               M         bra             writeIntEE_loop
                          M         ; disable writes
001C68 94A6               M         bcf             EECON1, WREN, ACCESS
                          M 
                          M         ; point to Program memory
001C6A 8EA6               M         bsf             EECON1, EEPGD, ACCESS
                          M 
                      00199         ; write data
001C6C 2A3F           00200         incf    mlEepromAddress, f, ACCESS
001C6E 0E16           00201         movlw   ML_LARGE_PACKET_BYTE_SIZE
001C70 623F           00202         cpfseq  mlEepromAddress, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C72 D???           00203         bra             mootLoader_SebWriteReceivedPacketToEEPROMLp
                      00204 
001C74                00205 mootLoader_signalErrorBLp0
                      00206         LED_SQUARE_TOGGLE_OTHERS_OFF
                          M         LED_SINE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
001C74 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_TOGGLE
001C76 788B               M         btg             LATC, RC4, ACCESS       ; SQUARE LED
                          M         LED_SAMPLE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #else
001C78 9A89               M         bcf             LATA, RA5, ACCESS       ; SAMPLE LED
                          M #endif
001C7A 6A13           00207         clrf    mlCount, ACCESS
001C7C 0E10           00208         movlw   0x10
001C7E 6E14           00209         movwf   mlCount + 1, ACCESS
001C80                00210 mootLoader_signalErrorBLp1
                      00211         ; clear interrupt flag
001C80 929E           00212         bcf             PIR1, TMR2IF, ACCESS    
001C82                00213 mootLoader_signalErrorBLp2
                      00214         ; wait for timer2 overflow
001C82 A29E           00215         btfss   PIR1, TMR2IF, ACCESS
001C84 D???           00216         bra             mootLoader_signalErrorBLp2
001C86 0613           00217         decf    mlCount, f, ACCESS
001C88 B4D8           00218         btfsc   STATUS, Z, ACCESS
001C8A 2E14           00219         decfsz  mlCount + 1
001C8C D???           00220         bra             mootLoader_signalErrorBLp1
                      00221         ; loop forever
001C8E D???           00222         bra             mootLoader_signalErrorBLp0
                      00223 ;**********************************************************************
                      00224 ; Local Function: void mootLoader_signalErrorC()
                      00225 ;**********************************************************************
001C90                00226 mootLoader_signalErrorC
                      00227         LED_SAMPLE_TOGGLE_OTHERS_OFF
                          M         LED_SINE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC3, ACCESS       ; SINE LED
                          M #else
001C90 968B               M         bcf             LATC, RC3, ACCESS       ; SINE LED
                          M #endif
                          M         LED_SQUARE_OFF
                          M #ifndef LED_POLARITY_REVERSED
                          M         bsf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #else
001C92 988B               M         bcf             LATC, RC4, ACCESS       ; SQUARE LED
                          M #endif
                          M         LED_SAMPLE_TOGGLE
001C94 7A89               M         btg             LATA, RA5, ACCESS       ; SAMPLE LED
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C96 6A13           00228         clrf    mlCount, ACCESS
001C98 0E10           00229         movlw   0x10
001C9A 6E14           00230         movwf   mlCount + 1, ACCESS
001C9C                00231 mootLoader_signalErrorCLp1
                      00232         ; clear interrupt flag
001C9C 929E           00233         bcf             PIR1, TMR2IF, ACCESS    
001C9E                00234 mootLoader_signalErrorCLp2
                      00235         ; wait for timer2 overflow
001C9E A29E           00236         btfss   PIR1, TMR2IF, ACCESS
001CA0 D???           00237         bra             mootLoader_signalErrorCLp2
001CA2 0613           00238         decf    mlCount, f, ACCESS
001CA4 B4D8           00239         btfsc   STATUS, Z, ACCESS
001CA6 2E14           00240         decfsz  mlCount + 1
001CA8 D???           00241         bra             mootLoader_signalErrorCLp1
                      00242         ; loop forever
001CAA D???           00243         bra             mootLoader_signalErrorC
                      00244         
                      00245 
                      00246 ;**********************************************************************
                      00247 ; Local Function: void mootLoader_rxReceiverResetHandler()
                      00248 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootLoader_rxReceiverResetHandler)
001CAC                00249 mootLoader_rxReceiverResetHandler
                      00250         ; received bytes are forwarded to UART output for chaining devices so
                      00251         ; make sure that you don't reset until last byte is transmitted 
001CAC A89E           00252         btfss   PIR1, TXIF, ACCESS
001CAE D???           00253         bra             mootLoader_rxReceiverResetHandler
001CB0 00FF           00254         reset
                      00255 
                      00256 
                      00257 ;**********************************************************************
                      00258 ; Local Function: void mootloader_rxTestSinglePacketChecksum()
                      00259 ;**********************************************************************
Warning[208]: Label truncated at 32 characters. (mootloader_rxTestSinglePacketChecksum)
001CB2                00260 mootloader_rxTestSinglePacketChecksum
                      00261         ; pre-clear checksumOk flag
001CB2 9215           00262         bcf             mlFlags, mlRxChecksumOk, ACCESS
                      00263         ; calculate checksum for single packet
001CB4 501E           00264         movf    mlRxReceivedPacket + 3, w, ACCESS
001CB6 181F           00265         xorwf   mlRxReceivedPacket + 4, w, ACCESS
001CB8 1821           00266         xorwf   mlRxReceivedPacket + 6, w, ACCESS
001CBA 1823           00267         xorwf   mlRxReceivedPacket + 8, w, ACCESS
001CBC 1825           00268         xorwf   mlRxReceivedPacket + 10, w, ACCESS
001CBE 1827           00269         xorwf   mlRxReceivedPacket + 12, w, ACCESS
001CC0 1829           00270         xorwf   mlRxReceivedPacket + 14, w, ACCESS
001CC2 182B           00271         xorwf   mlRxReceivedPacket + 16, w, ACCESS
001CC4 182D           00272         xorwf   mlRxReceivedPacket + 18, w, ACCESS
                      00273         ; xor mlRxReceivedPacket[8:0] with checksum in mlRxReceivedPacket[9]
001CC6 0B7F           00274         andlw   0x7F
001CC8 182F           00275         xorwf   mlRxReceivedPacket + 20, w, ACCESS
                      00276         ; if result is 0 then checksum if NOT ok so skip
001CCA B4D8           00277         btfsc   STATUS, Z, ACCESS
001CCC 8215           00278         bsf             mlFlags, mlRxChecksumOk, ACCESS
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001CCE 0012           00279         return
                      00280 
                      00281 
                      00282 ;**********************************************************************
                      00283 ; Local Function: void mootLoader_rxReceiveNextPacket()
                      00284 ;**********************************************************************
001CD0                00285 mootLoader_rxReceiveNextPacket
                      00286         PUSH_R  FSR0L
001CD0 CFE9 FFDD          M         movff   FSR0L,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
                      00287         PUSH_R  FSR0H   
001CD4 CFEA FFDD          M         movff   FSR0H,   softwareStackPointerPOSTDEC    ; softwareStackPointerINDF-- = regName
001CD8 EE00 F01B      00288         lfsr    FSR0, mlRxReceivedPacket
                      00289 
001CDC 6A31           00290         clrf    mlRxReceivedPacketByteCount, ACCESS
                      00291         
                      00292         ; get next SysEx packet
                      00293 
                      00294         ; mootloader only responds to SysEx so wait for start value of 0xF0
Warning[208]: Label truncated at 32 characters. (mootLoader_rxReceiveNextPacketWaitF0)
001CDE                00295 mootLoader_rxReceiveNextPacketWaitF0
001CDE EC?? F???      00296         call    mootLoader_rxReceiveNextByte
001CE2 0EF0           00297         movlw   0xF0
001CE4 6232           00298         cpfseq  mlRxReceivedByte, ACCESS
001CE6 D???           00299         bra             mootLoader_rxReceiveNextPacketWaitF0
                      00300         ; received 0xF0 so continue
001CE8 C032 FFEE      00301         movff   mlRxReceivedByte, POSTINC0
                      00302         
                      00303         ; continue receiving balance of ML_LARGE_PACKET_BYTE_SIZE number of bytes
                      00304         ; init count
001CEC 0E15           00305         movlw   ML_LARGE_PACKET_BYTE_SIZE - 1
001CEE 6E31           00306         movwf   mlRxReceivedPacketByteCount, ACCESS
001CF0                00307 mootLoader_rxRnpPayloadLp
001CF0 EC?? F???      00308         call    mootLoader_rxReceiveNextByte
001CF4 C032 FFEE      00309         movff   mlRxReceivedByte, POSTINC0
001CF8 2E31           00310         decfsz  mlRxReceivedPacketByteCount, f, ACCESS
001CFA D???           00311         bra             mootLoader_rxRnpPayloadLp
                      00312 
                      00313         ; make each data payload nybble index equal to reconstituted byte value
                      00314         ; point to start of data payload
001CFC EE00 F01F      00315         lfsr    FSR0, mlRxReceivedPacket + 4
                      00316         ; load count to de-nybble 8 bytes
001D00 0E08           00317         movlw   8
001D02 6E31           00318         movwf   mlRxReceivedPacketByteCount, ACCESS
Warning[208]: Label truncated at 32 characters. (mootLoader_rxRnpPayloadDe_nybbleLp)
001D04                00319 mootLoader_rxRnpPayloadDe_nybbleLp
                      00320         ; swap and read high nybble into WREG
001D04 0E01           00321         movlw   1
001D06 38EB           00322         swapf   PLUSW0, w, ACCESS
                      00323         ; or high nybble and low nybble, save in WREG
001D08 10EF           00324         iorwf   INDF0, w, ACCESS
                      00325         ; save complete value in low nybble location and postinc to high nybble
001D0A 6EEE           00326         movwf   POSTINC0, ACCESS
                      00327         ; save complete value in high nybble location and postinc to next low nybble
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001D0C 6EEE           00328         movwf   POSTINC0, ACCESS
001D0E 2E31           00329         decfsz  mlRxReceivedPacketByteCount, f, ACCESS
001D10 D???           00330         bra             mootLoader_rxRnpPayloadDe_nybbleLp      
                      00331         
                      00332         POP_R   FSR0H   
001D12 CFDC FFEA          M         movff   softwareStackPointerPREINC, FSR0H       ; ++softwareStackPointerINDF = regName
                      00333         POP_R   FSR0L
001D16 CFDC FFE9          M         movff   softwareStackPointerPREINC, FSR0L       ; ++softwareStackPointerINDF = regName
001D1A 0012           00334         return
                      00335         
                      00336 
                      00337 ;**********************************************************************
                      00338 ; Local Function: void mootloader_rxReceiveNextByte()
                      00339 ;**********************************************************************
001D1C                00340 mootLoader_rxReceiveNextByte
                      00341         ; skip if receive flag is set
001D1C AA9E           00342         btfss   PIR1, RCIF, ACCESS
001D1E D???           00343         bra             mootLoader_rxReceiveNextByte
                      00344         
Warning[208]: Label truncated at 32 characters. (mootLoader_rxReceiveNextByteReadFIFO)
001D20                00345 mootLoader_rxReceiveNextByteReadFIFO
                      00346         ; skip if framing error occurred for top unread char in rx FIFO
001D20 A4AB           00347         btfss   RCSTA, FERR, ACCESS
                      00348         ; no framing error so read the character
001D22 D???           00349         bra             mootLoader_rxReceiveNextByteGO
                      00350         ; framing error occurred
                      00351         ; read incorrectly framed character out of FIFO
001D24 50AE           00352         movf    RCREG, w, ACCESS
                      00353         ; skip if rx FIFO is empty
001D26 BA9E           00354         btfsc   PIR1, RCIF, ACCESS
                      00355         ; FIFO is not empty so try next character
001D28 D???           00356         bra             mootLoader_rxReceiveNextByteReadFIFO
                      00357         ; all characters in FIFO were incorrectly framed, no data to process
                      00358         ; attempt to remedy: reset UART receiver by toggling Continous Receive Enable bit
001D2A 98AB           00359         bcf             RCSTA, CREN, ACCESS
001D2C 88AB           00360         bsf             RCSTA, CREN, ACCESS
                      00361         ; need to receive a good data so try again
001D2E EF?? F???      00362         goto    mootLoader_rxReceiveNextByte
001D32                00363 mootLoader_rxReceiveNextByteGO
                      00364         ; read the byte
001D32 CFAE F032      00365         movff   RCREG, mlRxReceivedByte
                      00366 
                      00367         ; echo received byte to UART output
001D36 C032 FFAD      00368         movff   mlRxReceivedByte, TXREG
                      00369 
001D3A 0012           00370         return
                      00371 
                      00372         
001D3C                00168 mootLoader_restore
001D3C EF?? F???      00169         goto    mootLoader_exit
                      00170         
                      00132 
                      00133         END
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 70


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
ABDEN                             00000000
ABDOVF                            00000007
ACCESS                            00000000
ACCUMULATORS_ELEMENT_SIZE         4
ACCUMULATORS_SIZE                 MAX_POLY_DEPTH * ACCUMULATORS_ELEMENT_SIZE
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
ACTIVE_NOTE_DELTAS_ELEMENT_SIZE   2
ACTIVE_NOTE_DELTAS_SIZE           MAX_POLY_DEPTH * ACTIVE_NOTE_DELTAS_ELEMENT_SIZE
ACTIVE_NOTE_TABLE_SIZE            25
ACTIVE_OUTPUT_VALUES_EL_SIZE      1
ACTIVE_OUTPUT_VALUES_SIZE         MAX_POLY_DEPTH * ACTIVE_OUTPUT_VALUES_EL_SIZE
ACTVIE                            00000002
ACTVIF                            00000002
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCON2                            00000FC0
ADCS0                             00000000
ADCS1                             00000001
ADCS2                             00000002
ADDEN                             00000003
ADDR0                             00000000
ADDR1                             00000001
ADDR2                             00000002
ADDR3                             00000003
ADDR4                             00000004
ADDR5                             00000005
ADDR6                             00000006
ADEN                              00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADON                              00000000
ADRES                             00000FC3
ADRESH                            00000FC4
ADRESL                            00000FC3
ADSR_ATTACK_RATE                  64
ADSR_PRESCALE                     610
ADSR_RELEASE_RATE                 16
AFTERTOUCH_COMPLETE               DATA_BYTE1
ALL_NOTES_OFF                     123
ALL_SOUND_OFF                     120
AN10                              00000004
AN11                              00000005
AN3                               00000004
AN4                               00000000
AN5                               00000001
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 71


SYMBOL TABLE
  LABEL                             VALUE 

AN6                               00000002
AN7                               00000003
AN8                               00000006
AN9                               00000007
ANS10                             00000002
ANS11                             00000003
ANS3                              00000003
ANS4                              00000004
ANS5                              00000005
ANS6                              00000006
ANS7                              00000007
ANS8                              00000000
ANS9                              00000001
ANSEL                             00000F7E
ANSELH                            00000F7F
ASSERT_SS                         
BALANCE_LSB                       40
BALANCE_MSB                       8
BANKED                            00000001
BANK_SELECT_LSB                   32
BANK_SELECT_MSB                   0
BAUDCON                           00000FB8
BAUDCTL                           00000FB8
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BF                                00000000
BOR                               00000000
BREATH_CONTROLLER_LSB             34
BREATH_CONTROLLER_MSB             2
BRG16                             00000003
BRGH                              00000002
BSR                               00000FE0
BTOEE                             00000004
BTOEF                             00000004
BTSEE                             00000007
BTSEF                             00000007
C                                 00000000
C12IN1M                           00000001
C12IN2M                           00000002
C12IN3M                           00000003
C12INP                            00000000
C12OUT                            00000004
C1CH0                             00000000
C1CH1                             00000001
C1HYS                             00000003
C1IE                              00000006
C1IF                              00000006
C1IP                              00000006
C1OE                              00000005
C1ON                              00000007
C1OUT                             00000006
C1POL                             00000004
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 72


SYMBOL TABLE
  LABEL                             VALUE 

C1R                               00000002
C1RSEL                            00000005
C1SP                              00000003
C1SYNC                            00000001
C2CH0                             00000000
C2CH1                             00000001
C2HYS                             00000002
C2IE                              00000005
C2IF                              00000005
C2IP                              00000005
C2OE                              00000005
C2ON                              00000007
C2OUT                             00000006
C2POL                             00000004
C2R                               00000002
C2RSEL                            00000004
C2SP                              00000003
C2SYNC                            00000000
CCP1                              00000005
CCP1CON                           00000FBD
CCP1IE                            00000002
CCP1IF                            00000002
CCP1IP                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCPR1                             00000FBE
CCPR1H                            00000FBF
CCPR1L                            00000FBE
CFGS                              00000006
CHANNEL                           0x00
CHANNEL_PRESSURE                  0xD0
CHANNEL_PRESSURE_MESSAGE_LENGTH   2
CHANNEL_VOLUME_LSB                39
CHANNEL_VOLUME_MSB                7
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CK                                00000007
CKE                               00000006
CKP                               00000004
CKTXP                             00000004
CLEAR_ACCUMULATORS                
CLKIN                             00000005
CLKOUT                            00000004
CM1CON0                           00000F6D
CM2CON0                           00000F6B
CM2CON1                           00000F6C
CONFIG_INC                        
CONTROL_CHANGE                    0xB0
CONTROL_CHANGE_COMPLETE           DATA_BYTE1
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 73


SYMBOL TABLE
  LABEL                             VALUE 

CONTROL_CHANGE_MESSAGE_LENGTH     3
CRC16EE                           00000002
CRC16EF                           00000002
CRC5EE                            00000001
CRC5EF                            00000001
CREN                              00000004
CSRC                              00000007
CVREF                             00000002
D                                 00000005
D1EN                              00000007
D1LPS                             00000006
D1NSS                             00000000
D1PSS0                            00000002
D1PSS1                            00000003
DAC1OE                            00000005
DAC1R0                            00000000
DAC1R1                            00000001
DAC1R2                            00000002
DAC1R3                            00000003
DAC1R4                            00000004
DATA_BYTE0                        0x01
DATA_BYTE1                        0x02
DATA_DECREMENT                    97
DATA_ENTRY_LSB                    38
DATA_ENTRY_MSB                    6
DATA_INCREMENT                    96
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DDRA                              TRISA
DDRB                              TRISB
DDRC                              TRISC
DDRD                              TRISD
DDRE                              TRISE
DEASSERT_SS                       
DELEGATED_DELTAS_ELEMENT_SIZE     2
DELEGATED_DELTAS_SIZE             MAX_POLY_DEPTH * DELEGATED_DELTAS_ELEMENT_SIZE
DEVICE_ID                         0x1D
DFN8EE                            00000003
DFN8EF                            00000003
DIR                               00000002
DISABLE_SUSTAIN                   
DONE                              00000001
DTRXP                             00000005
D_A                               00000005
D_NOT_A                           00000005
ECCP1AS                           00000FB6
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
EEADR                             00000FA9
EEADR0                            00000000
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 74


SYMBOL TABLE
  LABEL                             VALUE 

EEADR1                            00000001
EEADR2                            00000002
EEADR3                            00000003
EEADR4                            00000004
EEADR5                            00000005
EEADR6                            00000006
EEADR7                            00000007
EECON1                            00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEIE                              00000004
EEIF                              00000004
EEIP                              00000004
EEPGD                             00000007
EEPROM_SIZE_BITS                  128000
EE_DISABLE_INTS                   
EE_RDSR                           B'00000101'
EE_READ                           B'00000011'
EE_RESTORE_INTS                   
EE_WRDI                           B'00000100'
EE_WREN                           B'00000110'
EE_WRITE                          B'00000010'
EE_WRSR                           B'00000001'
EFFECTS_1_DEPTH_DEFAULT_REVERB_S  91
EFFECTS_2_DEPTH_DEFAULT_TREMOLO_  92
EFFECTS_3_DEPTH_DEFAULT_CHORUS_S  93
EFFECTS_4_DEPTH_DEFAULT_CELESTE_  94
EFFECTS_5_DEPTH_DEFAULT_PHASER_D  95
EFFECT_CONTROL_1_LSB              44
EFFECT_CONTROL_1_MSB              12
EFFECT_CONTROL_2_LSB              45
EFFECT_CONTROL_2_MSB              13
ENABLE_SUSTAIN                    
ENDP0                             00000003
ENDP1                             00000004
ENDP2                             00000005
ENDP3                             00000006
EOX                               0xF7
EPCONDIS                          00000003
EPHSHK                            00000004
EPINEN                            00000001
EPOUTEN                           00000002
EPSTALL                           00000000
EXPRESSION_LSB                    43
EXPRESSION_MSB                    11
FAST                              00000001
FERR                              00000002
FOOT_CONTROLLER_LSB               36
FOOT_CONTROLLER_MSB               4
FREE                              00000004
FRM0                              00000000
FRM1                              00000001
FRM10                             00000002
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 75


SYMBOL TABLE
  LABEL                             VALUE 

FRM2                              00000002
FRM3                              00000003
FRM4                              00000004
FRM5                              00000005
FRM6                              00000006
FRM7                              00000007
FRM8                              00000000
FRM9                              00000001
FSEN                              00000002
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
FSR1H                             00000FE2
FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
FVR1EN                            00000007
FVR1S0                            00000004
FVR1S1                            00000005
FVR1ST                            00000006
GCEN                              00000007
GENERAL_INFORMATION               0x06
GENERAL_PURPOSE_CONTROLLER_1_LSB  48
GENERAL_PURPOSE_CONTROLLER_1_MSB  16
GENERAL_PURPOSE_CONTROLLER_2_LSB  49
GENERAL_PURPOSE_CONTROLLER_2_MSB  17
GENERAL_PURPOSE_CONTROLLER_3_LSB  50
GENERAL_PURPOSE_CONTROLLER_3_MSB  18
GENERAL_PURPOSE_CONTROLLER_4_LSB  51
GENERAL_PURPOSE_CONTROLLER_4_MSB  19
GENERAL_PURPOSE_CONTROLLER_5      80
GENERAL_PURPOSE_CONTROLLER_6      81
GENERAL_PURPOSE_CONTROLLER_7      82
GENERAL_PURPOSE_CONTROLLER_8      83
GIE                               00000007
GIEH                              00000007
GIEL                              00000006
GIE_GIEH                          00000007
GO                                00000001
GO_DONE                           00000001
GO_NOT_DONE                       00000001
HFIOFL                            00000001
HOLD_2                            69
IDENTITY_REPLY                    0x02
IDENTITY_REQUEST                  0x01
IDLEIE                            00000004
IDLEIF                            00000004
IDLEN                             00000007
IDLE_BLOCK_ERASE                  
IDLE_WRITE_WAIT                   
INDF0                             00000FEF
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 76


SYMBOL TABLE
  LABEL                             VALUE 

INDF1                             00000FE7
INDF2                             00000FDF
INT0                              00000000
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1                              00000001
INT1E                             00000003
INT1F                             00000000
INT1IE                            00000003
INT1IF                            00000000
INT1IP                            00000006
INT1P                             00000006
INT2                              00000002
INT2E                             00000004
INT2F                             00000001
INT2IE                            00000004
INT2IF                            00000001
INT2IP                            00000007
INT2P                             00000007
INTCON                            00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
INTSRC                            00000007
IOCA                              00000F79
IOCA0                             00000000
IOCA1                             00000001
IOCA3                             00000003
IOCA4                             00000004
IOCA5                             00000005
IOCB                              00000F7A
IOCB4                             00000004
IOCB5                             00000005
IOCB6                             00000006
IOCB7                             00000007
IOFS                              00000002
IPEN                              00000007
IPR1                              00000F9F
IPR2                              00000FA2
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
KEY_PRESSURE                      0xA0
KEY_PRESSURE_MESSAGE_LENGTH       3
LATA                              00000F89
LATA4                             00000004
LATA5                             00000005
LATB                              00000F8A
LATB4                             00000004
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 77


SYMBOL TABLE
  LABEL                             VALUE 

LATB5                             00000005
LATB6                             00000006
LATB7                             00000007
LATC                              00000F8B
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LATC6                             00000006
LATC7                             00000007
LED_ALL_OFF                       
LED_ALL_ON                        
LED_ALL_TOGGLE                    
LED_BLINK_RATE_VOICE_RECORD       6
LED_BLINK_RATE_VOICE_THROUGH      20
LED_ONLY_SAMPLE_ON                
LED_ONLY_SINE_ON                  
LED_ONLY_SQUARE_ON                
LED_POLARITY_REVERSED             
LED_SAMPLE_OFF                    
LED_SAMPLE_ON                     
LED_SAMPLE_TOGGLE                 
LED_SAMPLE_TOGGLE_OTHERS_OFF      
LED_SINE_OFF                      
LED_SINE_ON                       
LED_SINE_TOGGLE                   
LED_SINE_TOGGLE_OTHERS_OFF        
LED_SQUARE_OFF                    
LED_SQUARE_ON                     
LED_SQUARE_TOGGLE                 
LED_SQUARE_TOGGLE_OTHERS_OFF      
LEGATO_FOOTSWITCH                 68
LEVEL_MONO_LED_BLINK_RATE         1
LEVEL_POLY_LED_BLINK_RATE         0
LEVEL_SUSTAIN_LED_BLINK_RATE      2
LFIOFS                            00000000
LOCAL_CONTROL_ONOFF               122
MAX_MIDI_MESSAGE_SIZE             24
MAX_MODE_LEVEL                    MONO
MAX_POLY_DEPTH                    4
MC1OUT                            00000007
MC2OUT                            00000006
MESSAGE_COMPLETE                  0xFF
MIDI_DEVICE_ID                    0x1D
MIDI_VENDOR_ID                    0x77
ML_BLOCK_ERASE_BYTE_SIZE          64
ML_BLOCK_ERASE_IDLE_TIME_MS       8
ML_COMMAND_DATA_PAYLOAD           0x01
ML_COMMAND_DATA_PAYLOAD_COMPLETE  0x02
ML_COMMAND_WRITE_PROGRAM_MEMORY   0x03
ML_DATA_PACKET_PAYLOAD_BYTE_SIZE  8
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 78


SYMBOL TABLE
  LABEL                             VALUE 

ML_LARGE_PACKET_BYTE_SIZE         22
ML_RECEIVER_RESET                 0x11
ML_TRANSMITTER_RESETTING          0x10
ML_TRANS_SYNC_IDLE_TIME_MS        32
ML_WRITE_IDLE_TIME_MS             8
MODULATION_WHEEL_LSB              33
MODULATION_WHEEL_MSB              1
MONO                              2
MSK0                              00000000
MSK1                              00000001
MSK2                              00000002
MSK3                              00000003
MSK4                              00000004
MSK5                              00000005
MSK6                              00000006
MSK7                              00000007
N                                 00000004
NEXT_SAMPLE_ADDRESSES_EL_SIZE     2
NON_REAL_TIME                     0x7E
NON_REG_PARAMETER_NUMBER_LSB      98
NON_REG_PARAMETER_NUMBER_MSB      99
NOTE_COMPLETE                     DATA_BYTE1
NOTE_OFF                          0x80
NOTE_OFF_MESSAGE_LENGTH           3
NOTE_ON                           0x90
NOTE_ON_MESSAGE_LENGTH            3
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_DONE                          00000001
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RABPU                         00000007
NOT_RI                            00000004
NOT_SS                            00000006
NOT_T1SYNC                        00000002
NOT_T3SYNC                        00000002
NOT_TO                            00000003
NOT_W                             00000002
NOT_WRITE                         00000002
NVCFG0                            00000000
NVCFG1                            00000001
OERR                              00000001
OMNI_MODE_OFF                     124
OMNI_MODE_ON                      125
OSC1                              00000005
OSC2                              00000004
OSCCON                            00000FD3
OSCCON2                           00000FD2
OSCFIE                            00000007
OSCFIF                            00000007
OSCFIP                            00000007
OSCTUNE                           00000F9B
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 79


SYMBOL TABLE
  LABEL                             VALUE 

OSC_ADSR_ATTACK                   
OSC_ADVANCE_ADSR                  
OSC_CLR_ADSR_FLAG                 
OSC_DELTAS_ELEMENT_SIZE           2
OSC_DELTAS_SIZE                   MAX_POLY_DEPTH * OSC_DELTAS_ELEMENT_SIZE
OSC_MIX                           
OSC_READ_ADSR_FLAG                
OSC_SET_ADSR_FLAG                 
OSC_STATE_BLOCK                   
OSTS                              00000003
OV                                00000003
P                                 00000004
P1A                               00000005
P1B                               00000004
P1C                               00000003
P1D                               00000002
P1M0                              00000006
P1M1                              00000007
PAN_LSB                           42
PAN_MSB                           10
PC                                00000FF9
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PD                                00000002
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PEIE_GIEL                         00000006
PEN                               00000002
PGM                               00000003
PIDEE                             00000000
PIDEF                             00000000
PIE1                              00000F9D
PIE2                              00000FA0
PIR1                              00000F9E
PIR2                              00000FA1
PITCH_WHEEL                       0xE0
PITCH_WHEEL_COMPLETE              DATA_BYTE1
PITCH_WHEEL_MESSAGE_LENGTH        3
PKTDIS                            00000004
PLAYBACK                          2
PLUSW0                            00000FEB
PLUSW1                            00000FE3
PLUSW2                            00000FDB
POLY                              0
POLY_MODE_OFF                     126
POLY_MODE_ON                      127
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 80


SYMBOL TABLE
  LABEL                             VALUE 

POP_R                             
POR                               00000001
PORTA                             00000F80
PORTAMENTO_CONTROL                84
PORTAMENTO_ONOFF                  65
PORTAMENTO_TIME                   5
PORTAMENTO_TIME_LSB               37
PORTB                             00000F81
PORTC                             00000F82
POSTDEC0                          00000FED
POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PPB0                              00000000
PPB1                              00000001
PPBI                              00000001
PPBRST                            00000006
PR2                               00000FCB
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PRI_SD                            00000002
PROD                              00000FF3
PRODH                             00000FF4
PRODL                             00000FF3
PROGRAM_CHANGE                    0xC0
PROGRAM_CHANGE_COMPLETE           DATA_BYTE0
PROGRAM_CHANGE_MESSAGE_LENGTH     2
PRSEN                             00000007
PSA                               00000003
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
PSTRCON                           00000FB9
PUSH_R                            
PVCFG0                            00000002
PVCFG1                            00000003
PWM1CON                           00000FB7
R                                 00000002
RA0                               00000000
RA1                               00000001
RA3                               00000003
RA4                               00000004
RA5                               00000005
RABIE                             00000003
RABIF                             00000000
RABIP                             00000000
RABPU                             00000007
RB4                               00000004
RB5                               00000005
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 81


SYMBOL TABLE
  LABEL                             VALUE 

RB6                               00000006
RB7                               00000007
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCON                              00000FD0
RCREG                             00000FAE
RCSTA                             00000FAB
RD                                00000000
RD16                              00000007
RECORD                            1
REFCON0                           00000FBA
REFCON1                           00000FBB
REFCON2                           00000FBC
REGISTERED_PARAMETER_NUMBERMSB    101
REGISTERED_PARAMETER_NUMBER_LSB   100
RESET_ALL_CONTROLLERS             121
RESUME                            00000002
REVERSE_SAMPLE_IF_MOD_OVER_63     
RI                                00000004
RSEN                              00000001
RX                                00000005
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SAMPLE                            2
SAMPLE_DATA_BUFFER_SIZE           64
SAMPLE_PRESCALE                   6
SBOREN                            00000006
SCK                               00000006
SCKP                              00000004
SCL                               00000006
SCS0                              00000000
SCS1                              00000001
SDA                               00000004
SDI                               00000004
SDO                               00000007
SE0                               00000005
SEN                               00000000
SENDB                             00000003
SEND_BYTE_DO_CHECKSUM             
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 82


SYMBOL TABLE
  LABEL                             VALUE 

SEND_BYTE_START_CHECKSUM          
SEND_CHECKSUM_CLEAR_RUN           
SEND_CHECKSUM_DO_RUN              
SEND_RUNNING_CHECKSUM             
SEND_SYSEX_INTRO_NO_CHECK         
SINE                              0
SLRA                              00000000
SLRB                              00000001
SLRC                              00000002
SLRCON                            00000F76
SMP                               00000007
SOFIE                             00000006
SOFIF                             00000006
SOFTWARESTACK_H                   
SOFT_PEDAL                        67
SOSTENUTO                         66
SOUND_CONTROLLER_10_GM2_DEFAULT_  79
SOUND_CONTROLLER_1_DEFAULT_SOUND  70
SOUND_CONTROLLER_2_DEFAULT_TIMBR  71
SOUND_CONTROLLER_3_DEFAULT_RELEA  72
SOUND_CONTROLLER_4_DEFAULT_ATTAC  73
SOUND_CONTROLLER_5_DEFAULT_BRIGH  74
SOUND_CONTROLLER_6_GM2_DEFAULT_D  75
SOUND_CONTROLLER_7_GM2_DEFAULT_V  76
SOUND_CONTROLLER_8_GM2_DEFAULT_V  77
SOUND_CONTROLLER_9_GM2_DEFAULT_V  78
SP0                               00000000
SP1                               00000001
SP2                               00000002
SP3                               00000003
SP4                               00000004
SPBRG                             00000FAF
SPBRGH                            00000FB0
SPEN                              00000007
SPLIT_BYTE_THEN_SEND_DO_CHECKSUM  
SPLLEN                            00000006
SQUARE                            1
SRCLK0                            00000004
SRCLK1                            00000005
SRCLK2                            00000006
SRCON0                            00000F68
SRCON1                            00000F69
SREN                              00000005
SRLEN                             00000007
SRNQEN                            00000002
SRPR                              00000000
SRPS                              00000001
SRQ                               00000004
SRQEN                             00000003
SRRC1E                            00000000
SRRC2E                            00000001
SRRCKE                            00000002
SRRPE                             00000003
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 83


SYMBOL TABLE
  LABEL                             VALUE 

SRSC1E                            00000004
SRSC2E                            00000005
SRSCKE                            00000006
SRSPE                             00000007
SS                                00000006
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON1                           00000FC6
SSPCON2                           00000FC5
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPMSK                            00000F6F
SSPOV                             00000006
SSPSTAT                           00000FC7
STALLIE                           00000005
STALLIF                           00000005
STATUS                            00000FD8
STKFUL                            00000007
STKOVF                            00000007
STKPTR                            00000FFC
STKUNF                            00000006
STRA                              00000000
STRB                              00000001
STRC                              00000002
STRD                              00000003
STRSYNC                           00000004
SUSPND                            00000001
SUSTAIN                           1
SUSTAIN_PEDAL                     64
SWDTE                             00000000
SWDTEN                            00000000
SYNC                              00000004
SYSEX                             0xF0
T08BIT                            00000006
T0CKI                             00000005
T0CON                             00000FD5
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
T0SE                              00000004
T13CKI                            00000006
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000FCD
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 84


SYMBOL TABLE
  LABEL                             VALUE 

T1OSCEN                           00000003
T1OSCI                            00000006
T1OSCO                            00000007
T1RUN                             00000006
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FCA
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T3CCP1                            00000003
T3CKPS0                           00000004
T3CKPS1                           00000005
T3CON                             00000FB1
T3SYNC                            00000002
TABLAT                            00000FF5
TBLPTR                            00000FF6
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
TERMINAL_PACKET_COMMAND_VALUE     0x1E
THROUGH_HOLE_PCB                  
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
TMR0ON                            00000007
TMR1CS                            00000001
TMR1H                             00000FCF
TMR1IE                            00000000
TMR1IF                            00000000
TMR1IP                            00000000
TMR1L                             00000FCE
TMR1ON                            00000000
TMR2                              00000FCC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2ON                            00000002
TMR3CS                            00000001
TMR3H                             00000FB3
TMR3IE                            00000001
TMR3IF                            00000001
TMR3IP                            00000001
TMR3L                             00000FB2
TMR3ON                            00000000
TO                                00000003
TOS                               00000FFD
TOSH                              00000FFE
TOSL                              00000FFD
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 85


SYMBOL TABLE
  LABEL                             VALUE 

TOSU                              00000FFF
TRISA                             00000F92
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000F93
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000F94
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRMT                              00000001
TRNIE                             00000003
TRNIF                             00000003
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TUN5                              00000005
TX                                00000007
TX9                               00000006
TX9D                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXIP                              00000004
TXREG                             00000FAD
TXSTA                             00000FAC
UA                                00000001
UADDR                             00000F5C
UCFG                              00000F61
UCON                              00000F64
UEIE                              00000F5B
UEIR                              00000F5F
UEP0                              00000F53
UEP1                              00000F54
UEP2                              00000F55
UEP3                              00000F56
UEP4                              00000F57
UEP5                              00000F58
UEP6                              00000F59
UEP7                              00000F5A
UERRIE                            00000001
UERRIF                            00000001
UFRMH                             00000F5E
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 86


SYMBOL TABLE
  LABEL                             VALUE 

UFRML                             00000F5D
UIE                               00000F60
UIR                               00000F62
UNDEFINED_003                     3
UNDEFINED_014                     14
UNDEFINED_015                     15
UNDEFINED_020                     20
UNDEFINED_021                     21
UNDEFINED_022                     22
UNDEFINED_023                     23
UNDEFINED_024                     24
UNDEFINED_025                     25
UNDEFINED_026                     26
UNDEFINED_027                     27
UNDEFINED_028                     28
UNDEFINED_029                     29
UNDEFINED_030                     30
UNDEFINED_031                     31
UNDEFINED_035                     35
UNDEFINED_041                     41
UNDEFINED_046                     46
UNDEFINED_047                     47
UNDEFINED_052                     52
UNDEFINED_053                     53
UNDEFINED_054                     54
UNDEFINED_055                     55
UNDEFINED_056                     56
UNDEFINED_057                     57
UNDEFINED_058                     58
UNDEFINED_059                     59
UNDEFINED_060                     60
UNDEFINED_061                     61
UNDEFINED_062                     62
UNDEFINED_063                     63
UNDEFINED_102                     102
UNDEFINED_103                     103
UNDEFINED_104                     104
UNDEFINED_105                     105
UNDEFINED_106                     106
UNDEFINED_107                     107
UNDEFINED_108                     108
UNDEFINED_109                     109
UNDEFINED_110                     110
UNDEFINED_111                     111
UNDEFINED_112                     112
UNDEFINED_113                     113
UNDEFINED_114                     114
UNDEFINED_115                     115
UNDEFINED_116                     116
UNDEFINED_117                     117
UNDEFINED_118                     118
UNDEFINED_119                     119
UNDEFINED_85                      85
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 87


SYMBOL TABLE
  LABEL                             VALUE 

UNDEFINED_86                      86
UNDEFINED_87                      87
UNDEFINED_88                      88
UNDEFINED_89                      89
UNDEFINED_90                      90
UNDEFINED_MSB                     9
UPUEN                             00000004
URSTIE                            00000000
URSTIF                            00000000
USBEN                             00000003
USBIE                             00000002
USBIF                             00000002
USBIP                             00000002
USER_CODE_START_ADDRESS           0x0040
USTAT                             00000F63
UTEYE                             00000007
VENDOR_ID                         0x77
VOICE_THROUGH                     0
VREFCON0                          00000FBA
VREFCON1                          00000FBB
VREFCON2                          00000FBC
VREFM                             00000001
VREFP                             00000000
W                                 00000000
WAVE_PRESCALE                     2
WCOL                              00000007
WDTCON                            00000FD1
WPUA                              00000F77
WPUA3                             00000003
WPUA4                             00000004
WPUA5                             00000005
WPUB                              00000F78
WPUB4                             00000004
WPUB5                             00000005
WPUB6                             00000006
WPUB7                             00000007
WR                                00000001
WREG                              00000FE8
WREN                              00000002
WRERR                             00000003
WRITE_INTERNAL_EEPROM             
WRITE_INTERNAL_EEPROM_FROM_REGS   
WUE                               00000001
Z                                 00000002
_BBSIZ_OFF_4L                     000000F7
_BBSIZ_ON_4L                      000000FF
_BOREN_NOSLP_2L                   000000FD
_BOREN_OFF_2L                     000000F9
_BOREN_ON_2L                      000000FB
_BOREN_SBORDIS_2L                 000000FF
_BORV_19_2L                       000000FF
_BORV_22_2L                       000000F7
_BORV_27_2L                       000000EF
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 88


SYMBOL TABLE
  LABEL                             VALUE 

_BORV_30_2L                       000000E7
_CONFIG1H                         00300001
_CONFIG1L                         00300000
_CONFIG2H                         00300003
_CONFIG2L                         00300002
_CONFIG3H                         00300005
_CONFIG4L                         00300006
_CONFIG5H                         00300009
_CONFIG5L                         00300008
_CONFIG6H                         0030000B
_CONFIG6L                         0030000A
_CONFIG7H                         0030000D
_CONFIG7L                         0030000C
_CP0_OFF_5L                       000000FF
_CP0_ON_5L                        000000FE
_CP1_OFF_5L                       000000FF
_CP1_ON_5L                        000000FD
_CPB_OFF_5H                       000000FF
_CPB_ON_5H                        000000BF
_CPD_OFF_5H                       000000FF
_CPD_ON_5H                        0000007F
_CPUDIV_CLKDIV2_1L                000000EF
_CPUDIV_CLKDIV3_1L                000000F7
_CPUDIV_CLKDIV4_1L                000000FF
_CPUDIV_NOCLKDIV_1L               000000E7
_DEBUG_OFF_4L                     000000FF
_DEBUG_ON_4L                      0000007F
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
_EBTR0_OFF_7L                     000000FF
_EBTR0_ON_7L                      000000FE
_EBTR1_OFF_7L                     000000FF
_EBTR1_ON_7L                      000000FD
_EBTRB_OFF_7H                     000000FF
_EBTRB_ON_7H                      000000BF
_EEPROMH_                         
_FCMEN_OFF_1H                     000000BF
_FCMEN_ON_1H                      000000FF
_FOSC_ECCLKOUTH_1H                000000F4
_FOSC_ECCLKOUTL_1H                000000FC
_FOSC_ECCLKOUTM_1H                000000FA
_FOSC_ECH_1H                      000000F5
_FOSC_ECL_1H                      000000FD
_FOSC_ECM_1H                      000000FB
_FOSC_ERCCLKOUT_1H                000000F3
_FOSC_ERC_1H                      000000F7
_FOSC_HS_1H                       000000F2
_FOSC_IRCCLKOUT_1H                000000F9
_FOSC_IRC_1H                      000000F8
_FOSC_LP_1H                       000000F0
_FOSC_XT_1H                       000000F1
_HFOFST_OFF_3H                    000000F7
_HFOFST_ON_3H                     000000FF
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 89


SYMBOL TABLE
  LABEL                             VALUE 

_IDLOC0                           00200000
_IDLOC1                           00200001
_IDLOC2                           00200002
_IDLOC3                           00200003
_IDLOC4                           00200004
_IDLOC5                           00200005
_IDLOC6                           00200006
_IDLOC7                           00200007
_IESO_OFF_1H                      0000007F
_IESO_ON_1H                       000000FF
_LVP_OFF_4L                       000000FB
_LVP_ON_4L                        000000FF
_MCLRE_OFF_3H                     0000007F
_MCLRE_ON_3H                      000000FF
_MIDIH_                           
_MOOTLOADERH_                     
_PCLKEN_OFF_1H                    000000DF
_PCLKEN_ON_1H                     000000FF
_PLLEN_OFF_1H                     000000EF
_PLLEN_ON_1H                      000000FF
_PWRTEN_OFF_2L                    000000FF
_PWRTEN_ON_2L                     000000FE
_SOUNDGENH_                       
_STVREN_OFF_4L                    000000FE
_STVREN_ON_4L                     000000FF
_USBDIV_OFF_1L                    000000DF
_USBDIV_ON_1L                     000000FF
_USERINTERFACEH_                  
_WDTEN_OFF_2H                     000000FE
_WDTEN_ON_2H                      000000FF
_WDTPS_1024_2H                    000000F5
_WDTPS_128_2H                     000000EF
_WDTPS_16384_2H                   000000FD
_WDTPS_16_2H                      000000E9
_WDTPS_1_2H                       000000E1
_WDTPS_2048_2H                    000000F7
_WDTPS_256_2H                     000000F1
_WDTPS_2_2H                       000000E3
_WDTPS_32768_2H                   000000FF
_WDTPS_32_2H                      000000EB
_WDTPS_4096_2H                    000000F9
_WDTPS_4_2H                       000000E5
_WDTPS_512_2H                     000000F3
_WDTPS_64_2H                      000000ED
_WDTPS_8192_2H                    000000FB
_WDTPS_8_2H                       000000E7
_WRT0_OFF_6L                      000000FF
_WRT0_ON_6L                       000000FE
_WRT1_OFF_6L                      000000FF
_WRT1_ON_6L                       000000FD
_WRTB_OFF_6H                      000000FF
_WRTB_ON_6H                       000000BF
_WRTC_OFF_6H                      000000FF
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 90


SYMBOL TABLE
  LABEL                             VALUE 

_WRTC_ON_6H                       000000DF
_WRTD_OFF_6H                      000000FF
_WRTD_ON_6H                       0000007F
_XINST_OFF_4L                     000000BF
_XINST_ON_4L                      000000FF
__18LF13K50                       00000001
attack                            3
decay                             2
delegatorBusy                     0
highPriorityISR                   0000004C
highPriorityISR_redirect          00000044
intState                          2
lastApplicationProgramMemoryAddr  000017FE
lowPriorityISR                    0000004C
lowPriorityISR_redirect           00000048
main                              0000004C
main_redirect                     00000040
midiState_messageNeedsMapping     1
midiThruModeEnabled               2
mlBlockEraseBytesRemaining        00000018
mlButtonState                     00000000
mlChecksum                        00000001
mlConsecutiveSymbolCount          00000034
mlCount                           00000013
mlCurrentTxByte                   00000017
mlDatPackIntByteCount             00000019
mlDataPayloadBuffer               0000000B
mlDecodedNybble                   0000003E
mlEepromAddress                   0000003F
mlEepromByteCount                 00000040
mlFlags                           00000015
mlNybbleSplitTmp                  00000016
mlPayloadLength                   00000007
mlPerfectPreludeCount             0000001A
mlPeriodBucketHighLimit           00000037
mlPeriodBucketLowLimit            00000036
mlRA4CompareReg                   00000039
mlRunningChecksum                 00000002
mlRxChecksumOk                    1
mlRxCyclePeriodH                  0000003B
mlRxCyclePeriodL                  0000003A
mlRxPreviousSymbolBucket          00000033
mlRxReceivedByte                  00000032
mlRxReceivedPacket                0000001B
mlRxReceivedPacketByteCount       00000031
mlRxSymbolBucket                  00000035
mlRxTransSyncFlag                 0
mlSchmittReadValue                0000003C
mlStartAddress                    00000003
mlSymbolBucketCount               00000038
mlTransitionCount                 0000003D
mootLoader                        00001800
mootLoader_SebWriteReceivedPacke  00001C4C
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 91


SYMBOL TABLE
  LABEL                             VALUE 

mootLoader_checkReceive           00001842
mootLoader_checkRestore           0000184A
mootLoader_exit                   00001852
mootLoader_initADC                000018EA
mootLoader_initCCP                000018DC
mootLoader_initCore               00001856
mootLoader_initHeap               00001940
mootLoader_initIO                 00001896
mootLoader_initInterrupts         000018F6
mootLoader_initOsc                00001888
mootLoader_initOsc_lp1            0000188E
mootLoader_initRAM                00001920
mootLoader_initRAM_bank0          00001920
mootLoader_initRAM_bank0Lp        00001924
mootLoader_initRAM_bank1          0000192C
mootLoader_initRAM_bank2          0000192C
mootLoader_initRAM_bank2Lp        00001932
mootLoader_initSPI                000018E4
mootLoader_initTimer0             000018C6
mootLoader_initTimer1             000018D2
mootLoader_initTimer2             000018D4
mootLoader_initUART               000018BA
mootLoader_receiver               00001B5E
mootLoader_receiverListenForTran  00001B60
mootLoader_restore                00001D3C
mootLoader_rxReceiveNextByte      00001D1C
mootLoader_rxReceiveNextByteGO    00001D32
mootLoader_rxReceiveNextByteRead  00001D20
mootLoader_rxReceiveNextPacket    00001CD0
mootLoader_rxReceiveNextPacketWa  00001CDE
mootLoader_rxReceiverResetHandle  00001CAC
mootLoader_rxRnpPayloadDe_nybble  00001D04
mootLoader_rxRnpPayloadLp         00001CF0
mootLoader_rxWpmhBlockErase       00001BAC
mootLoader_rxWpmhExit             00001C26
mootLoader_rxWpmhGetNextPacket    00001BC0
mootLoader_rxWriteProgramMemoryH  00001B78
mootLoader_sendAsNybbles          00001B22
mootLoader_sendByte               00001B34
mootLoader_signalErrorA           00001C2A
mootLoader_signalErrorALp1        00001C36
mootLoader_signalErrorALp2        00001C38
mootLoader_signalErrorB           00001C46
mootLoader_signalErrorBLp0        00001C74
mootLoader_signalErrorBLp1        00001C80
mootLoader_signalErrorBLp2        00001C82
mootLoader_signalErrorC           00001C90
mootLoader_signalErrorCLp1        00001C9C
mootLoader_signalErrorCLp2        00001C9E
mootLoader_stateWaitLp            0000181E
mootLoader_stateWaitOvLp          00001828
mootLoader_transmitter            00001946
mootLoader_wait                   00001B3C
MPASM  5.42                ../SOURCE/MAIN.ASM   9-12-2011  16:17:27         PAGE 92


SYMBOL TABLE
  LABEL                             VALUE 

mootLoader_waitExit               00001B5C
mootLoader_waitIntLp              00001B4A
mootLoader_waitLp                 00001B48
mootLoader_xmitSdppLp             00001A90
mootLoader_xmitSendDataPayloadCo  00001AB8
mootLoader_xmitSendDataPayloadPa  00001A66
mootLoader_xmitSendWpmPacket      000019FA
mootLoader_xmitStartWrite         00001980
mootLoader_xmitWpmBlockErase      000019A0
mootLoader_xmitWpmByteLp          000019B2
mootLoader_xmitWpmCheckBlockEras  000019E4
mootLoader_xmitWpmNextPayload     000019AA
mootLoader_xmitWpmSendPayloadCom  000019EC
mootLoader_xmitWriteProgramMemor  00001988
mootloader_rxTestSinglePacketChe  00001CB2
needRefresh                       2
noteTransition                    5
osc0                              0
osc1                              1
osc2                              2
osc3                              3
pgDec                             1
release                           0
sampleChunkReady                  0
samplesLoaded                     1
softwareStackBaseAddress          000002FF
softwareStackPointerFSR           FSR2
softwareStackPointerINDF          INDF2
softwareStackPointerPLUSW         PLUSW2
softwareStackPointerPOSTDEC       POSTDEC2
softwareStackPointerPOSTINC       POSTINC2
softwareStackPointerPREINC        PREINC2
soundOn                           6
sustain                           1
turnSoundOff                      4
turnSoundOn                       3
uartState_rxInProgress            0

Errors   :     0
Warnings :    14 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

